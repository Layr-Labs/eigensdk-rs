/**

Generated by the following Solidity interface...
```solidity
interface CoreDeploymentLib {}
```

...which was generated by the following JSON ABI:
```json
[]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod CoreDeploymentLib {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601b576107f790816100208239308160270152f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c633fd6c7ab14610024575f80fd5b307f0000000000000000000000000000000000000000000000000000000000000000146105b85760403660031901126105b85760043567ffffffffffffffff81116105b857366023820112156105b857806004013561008281610614565b9061009060405192836105de565b808252602082019236602483830101116105b857815f926024602093018637830101526100bb610630565b506040519063348051d760e11b825260243560048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa91821561053557610172926020915f916105c4575b5060405161013a600584838180820196805191829101885e810164173539b7b760d91b838201520301601a198101845201826105de565b610142610630565b506040519586945180918587015e840190838201905f8252519283915e01015f815203601f1981018352826105de565b60405163130d191f60e11b8152602060048201819052818061019760248201866106f6565b03815f737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1908115610535575f91610585575b5015610540575f6101ec91604051809381926360f9bb1160e01b83526020600484015260248301906106f6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa801561053557610160915f91610513575b5061021f610630565b6040610260815161023083826105de565b601a81527f2e6164647265737365732e7374726174656779466163746f727900000000000060208201528461071a565b6001600160a01b0316610100830190815281519091906102b49061028483826105de565b601a81527f2e6164647265737365732e73747261746567794d616e6167657200000000000060208201528561071a565b6001600160a01b03168382019081528151909190610306906102d683826105de565b601a81527f2e6164647265737365732e656967656e506f644d616e6167657200000000000060208201528661071a565b6001600160a01b031660608501908152815190959061032583826105de565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b039061035a908361071a565b16855261039c825161036c84826105de565b601781527f2e6164647265737365732e6176734469726563746f727900000000000000000060208201528261071a565b6001600160a01b03166020860190815282519096906103ef906103bf85826105de565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f7200000060208201528361071a565b9260a087019360018060a01b0316845261048e610441825161041184826105de565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e616765720000000060208201528561071a565b6001600160a01b0316608089019081528251909461045f84836105de565b601982527f2e6164647265737365732e706175736572526567697374727900000000000000602083015261071a565b6001600160a01b0390811660e089810191825283518a51841681529a51831660208c015296518216928a01929092529151821660608901529151811660808801529151821660a087015260c080860151831690870152518116918501919091529051811661010084015261012080830151821690840152610140918201511690820152f35b61052f91503d805f833e61052781836105de565b810190610693565b5f610216565b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b90506020813d6020116105bc575b816105a0602093836105de565b810103126105b8575180151581036105b8575f6101bf565b5f80fd5b3d9150610593565b6105d891503d805f833e61052781836105de565b5f610103565b90601f8019910116810190811067ffffffffffffffff82111761060057604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161060057601f01601f191660200190565b60405190610160820182811067ffffffffffffffff821117610600576040525f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6020818303126105b85780519067ffffffffffffffff82116105b8570181601f820112156105b8578051906106c782610614565b926106d560405194856105de565b828452602083830101116105b857815f9260208093018386015e8301015290565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6107466020916107586040519485938493631e19e65760e01b85526040600486015260448501906106f6565b838103600319016024850152906106f6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610535575f91610782575090565b90506020813d6020116107b9575b8161079d602093836105de565b810103126105b857516001600160a01b03811681036105b85790565b3d915061079056fea2646970667358221220d5cc21db794a9be3825f716ae77c72e1764f6c0ad2f69daad9b32e2f54bb390864736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x1BWa\x07\xF7\x90\x81a\0 \x8290\x81`'\x01R\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc?\xD6\xC7\xAB\x14a\0$W_\x80\xFD[0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14a\x05\xB8W`@6`\x03\x19\x01\x12a\x05\xB8W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB8W6`#\x82\x01\x12\x15a\x05\xB8W\x80`\x04\x015a\0\x82\x81a\x06\x14V[\x90a\0\x90`@Q\x92\x83a\x05\xDEV[\x80\x82R` \x82\x01\x926`$\x83\x83\x01\x01\x11a\x05\xB8W\x81_\x92`$` \x93\x01\x867\x83\x01\x01Ra\0\xBBa\x060V[P`@Q\x90c4\x80Q\xD7`\xE1\x1B\x82R`$5`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x055Wa\x01r\x92` \x91_\x91a\x05\xC4W[P`@Qa\x01:`\x05\x84\x83\x81\x80\x82\x01\x96\x80Q\x91\x82\x91\x01\x88^\x81\x01d\x1759\xB7\xB7`\xD9\x1B\x83\x82\x01R\x03\x01`\x1A\x19\x81\x01\x84R\x01\x82a\x05\xDEV[a\x01Ba\x060V[P`@Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90_\x82RQ\x92\x83\x91^\x01\x01_\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x05\xDEV[`@Qc\x13\r\x19\x1F`\xE1\x1B\x81R` `\x04\x82\x01\x81\x90R\x81\x80a\x01\x97`$\x82\x01\x86a\x06\xF6V[\x03\x81_sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x90\x81\x15a\x055W_\x91a\x05\x85W[P\x15a\x05@W_a\x01\xEC\x91`@Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x06\xF6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x055Wa\x01`\x91_\x91a\x05\x13W[Pa\x02\x1Fa\x060V[`@a\x02`\x81Qa\x020\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x84a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x83\x01\x90\x81R\x81Q\x90\x91\x90a\x02\xB4\x90a\x02\x84\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x85a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16\x83\x82\x01\x90\x81R\x81Q\x90\x91\x90a\x03\x06\x90a\x02\xD6\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x86a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16``\x85\x01\x90\x81R\x81Q\x90\x95\x90a\x03%\x83\x82a\x05\xDEV[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x03Z\x90\x83a\x07\x1AV[\x16\x85Ra\x03\x9C\x82Qa\x03l\x84\x82a\x05\xDEV[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x82a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16` \x86\x01\x90\x81R\x82Q\x90\x96\x90a\x03\xEF\x90a\x03\xBF\x85\x82a\x05\xDEV[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x83a\x07\x1AV[\x92`\xA0\x87\x01\x93`\x01\x80`\xA0\x1B\x03\x16\x84Ra\x04\x8Ea\x04A\x82Qa\x04\x11\x84\x82a\x05\xDEV[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x85a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16`\x80\x89\x01\x90\x81R\x82Q\x90\x94a\x04_\x84\x83a\x05\xDEV[`\x19\x82R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x83\x01Ra\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\xE0\x89\x81\x01\x91\x82R\x83Q\x8AQ\x84\x16\x81R\x9AQ\x83\x16` \x8C\x01R\x96Q\x82\x16\x92\x8A\x01\x92\x90\x92R\x91Q\x82\x16``\x89\x01R\x91Q\x81\x16`\x80\x88\x01R\x91Q\x82\x16`\xA0\x87\x01R`\xC0\x80\x86\x01Q\x83\x16\x90\x87\x01RQ\x81\x16\x91\x85\x01\x91\x90\x91R\x90Q\x81\x16a\x01\0\x84\x01Ra\x01 \x80\x83\x01Q\x82\x16\x90\x84\x01Ra\x01@\x91\x82\x01Q\x16\x90\x82\x01R\xF3[a\x05/\x91P=\x80_\x83>a\x05'\x81\x83a\x05\xDEV[\x81\x01\x90a\x06\x93V[_a\x02\x16V[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[\x90P` \x81=` \x11a\x05\xBCW[\x81a\x05\xA0` \x93\x83a\x05\xDEV[\x81\x01\x03\x12a\x05\xB8WQ\x80\x15\x15\x81\x03a\x05\xB8W_a\x01\xBFV[_\x80\xFD[=\x91Pa\x05\x93V[a\x05\xD8\x91P=\x80_\x83>a\x05'\x81\x83a\x05\xDEV[_a\x01\x03V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\0W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\0W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90a\x01`\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\0W`@R_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[` \x81\x83\x03\x12a\x05\xB8W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\xB8W\x01\x81`\x1F\x82\x01\x12\x15a\x05\xB8W\x80Q\x90a\x06\xC7\x82a\x06\x14V[\x92a\x06\xD5`@Q\x94\x85a\x05\xDEV[\x82\x84R` \x83\x83\x01\x01\x11a\x05\xB8W\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[a\x07F` \x91a\x07X`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x06\xF6V[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x06\xF6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x055W_\x91a\x07\x82WP\x90V[\x90P` \x81=` \x11a\x07\xB9W[\x81a\x07\x9D` \x93\x83a\x05\xDEV[\x81\x01\x03\x12a\x05\xB8WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x05\xB8W\x90V[=\x91Pa\x07\x90V\xFE\xA2dipfsX\"\x12 \xD5\xCC!\xDByJ\x9B\xE3\x82_qj\xE7|r\xE1vOl\n\xD2\xF6\x9D\xAA\xD9\xB3./T\xBB9\x08dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c633fd6c7ab14610024575f80fd5b307f0000000000000000000000000000000000000000000000000000000000000000146105b85760403660031901126105b85760043567ffffffffffffffff81116105b857366023820112156105b857806004013561008281610614565b9061009060405192836105de565b808252602082019236602483830101116105b857815f926024602093018637830101526100bb610630565b506040519063348051d760e11b825260243560048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa91821561053557610172926020915f916105c4575b5060405161013a600584838180820196805191829101885e810164173539b7b760d91b838201520301601a198101845201826105de565b610142610630565b506040519586945180918587015e840190838201905f8252519283915e01015f815203601f1981018352826105de565b60405163130d191f60e11b8152602060048201819052818061019760248201866106f6565b03815f737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1908115610535575f91610585575b5015610540575f6101ec91604051809381926360f9bb1160e01b83526020600484015260248301906106f6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa801561053557610160915f91610513575b5061021f610630565b6040610260815161023083826105de565b601a81527f2e6164647265737365732e7374726174656779466163746f727900000000000060208201528461071a565b6001600160a01b0316610100830190815281519091906102b49061028483826105de565b601a81527f2e6164647265737365732e73747261746567794d616e6167657200000000000060208201528561071a565b6001600160a01b03168382019081528151909190610306906102d683826105de565b601a81527f2e6164647265737365732e656967656e506f644d616e6167657200000000000060208201528661071a565b6001600160a01b031660608501908152815190959061032583826105de565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b039061035a908361071a565b16855261039c825161036c84826105de565b601781527f2e6164647265737365732e6176734469726563746f727900000000000000000060208201528261071a565b6001600160a01b03166020860190815282519096906103ef906103bf85826105de565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f7200000060208201528361071a565b9260a087019360018060a01b0316845261048e610441825161041184826105de565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e616765720000000060208201528561071a565b6001600160a01b0316608089019081528251909461045f84836105de565b601982527f2e6164647265737365732e706175736572526567697374727900000000000000602083015261071a565b6001600160a01b0390811660e089810191825283518a51841681529a51831660208c015296518216928a01929092529151821660608901529151811660808801529151821660a087015260c080860151831690870152518116918501919091529051811661010084015261012080830151821690840152610140918201511690820152f35b61052f91503d805f833e61052781836105de565b810190610693565b5f610216565b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b90506020813d6020116105bc575b816105a0602093836105de565b810103126105b8575180151581036105b8575f6101bf565b5f80fd5b3d9150610593565b6105d891503d805f833e61052781836105de565b5f610103565b90601f8019910116810190811067ffffffffffffffff82111761060057604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161060057601f01601f191660200190565b60405190610160820182811067ffffffffffffffff821117610600576040525f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6020818303126105b85780519067ffffffffffffffff82116105b8570181601f820112156105b8578051906106c782610614565b926106d560405194856105de565b828452602083830101116105b857815f9260208093018386015e8301015290565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6107466020916107586040519485938493631e19e65760e01b85526040600486015260448501906106f6565b838103600319016024850152906106f6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610535575f91610782575090565b90506020813d6020116107b9575b8161079d602093836105de565b810103126105b857516001600160a01b03811681036105b85790565b3d915061079056fea2646970667358221220d5cc21db794a9be3825f716ae77c72e1764f6c0ad2f69daad9b32e2f54bb390864736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc?\xD6\xC7\xAB\x14a\0$W_\x80\xFD[0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14a\x05\xB8W`@6`\x03\x19\x01\x12a\x05\xB8W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB8W6`#\x82\x01\x12\x15a\x05\xB8W\x80`\x04\x015a\0\x82\x81a\x06\x14V[\x90a\0\x90`@Q\x92\x83a\x05\xDEV[\x80\x82R` \x82\x01\x926`$\x83\x83\x01\x01\x11a\x05\xB8W\x81_\x92`$` \x93\x01\x867\x83\x01\x01Ra\0\xBBa\x060V[P`@Q\x90c4\x80Q\xD7`\xE1\x1B\x82R`$5`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x055Wa\x01r\x92` \x91_\x91a\x05\xC4W[P`@Qa\x01:`\x05\x84\x83\x81\x80\x82\x01\x96\x80Q\x91\x82\x91\x01\x88^\x81\x01d\x1759\xB7\xB7`\xD9\x1B\x83\x82\x01R\x03\x01`\x1A\x19\x81\x01\x84R\x01\x82a\x05\xDEV[a\x01Ba\x060V[P`@Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90_\x82RQ\x92\x83\x91^\x01\x01_\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x05\xDEV[`@Qc\x13\r\x19\x1F`\xE1\x1B\x81R` `\x04\x82\x01\x81\x90R\x81\x80a\x01\x97`$\x82\x01\x86a\x06\xF6V[\x03\x81_sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x90\x81\x15a\x055W_\x91a\x05\x85W[P\x15a\x05@W_a\x01\xEC\x91`@Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x06\xF6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x055Wa\x01`\x91_\x91a\x05\x13W[Pa\x02\x1Fa\x060V[`@a\x02`\x81Qa\x020\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x84a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x83\x01\x90\x81R\x81Q\x90\x91\x90a\x02\xB4\x90a\x02\x84\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x85a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16\x83\x82\x01\x90\x81R\x81Q\x90\x91\x90a\x03\x06\x90a\x02\xD6\x83\x82a\x05\xDEV[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x86a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16``\x85\x01\x90\x81R\x81Q\x90\x95\x90a\x03%\x83\x82a\x05\xDEV[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x03Z\x90\x83a\x07\x1AV[\x16\x85Ra\x03\x9C\x82Qa\x03l\x84\x82a\x05\xDEV[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x82a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16` \x86\x01\x90\x81R\x82Q\x90\x96\x90a\x03\xEF\x90a\x03\xBF\x85\x82a\x05\xDEV[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x83a\x07\x1AV[\x92`\xA0\x87\x01\x93`\x01\x80`\xA0\x1B\x03\x16\x84Ra\x04\x8Ea\x04A\x82Qa\x04\x11\x84\x82a\x05\xDEV[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x85a\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x16`\x80\x89\x01\x90\x81R\x82Q\x90\x94a\x04_\x84\x83a\x05\xDEV[`\x19\x82R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x83\x01Ra\x07\x1AV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\xE0\x89\x81\x01\x91\x82R\x83Q\x8AQ\x84\x16\x81R\x9AQ\x83\x16` \x8C\x01R\x96Q\x82\x16\x92\x8A\x01\x92\x90\x92R\x91Q\x82\x16``\x89\x01R\x91Q\x81\x16`\x80\x88\x01R\x91Q\x82\x16`\xA0\x87\x01R`\xC0\x80\x86\x01Q\x83\x16\x90\x87\x01RQ\x81\x16\x91\x85\x01\x91\x90\x91R\x90Q\x81\x16a\x01\0\x84\x01Ra\x01 \x80\x83\x01Q\x82\x16\x90\x84\x01Ra\x01@\x91\x82\x01Q\x16\x90\x82\x01R\xF3[a\x05/\x91P=\x80_\x83>a\x05'\x81\x83a\x05\xDEV[\x81\x01\x90a\x06\x93V[_a\x02\x16V[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[\x90P` \x81=` \x11a\x05\xBCW[\x81a\x05\xA0` \x93\x83a\x05\xDEV[\x81\x01\x03\x12a\x05\xB8WQ\x80\x15\x15\x81\x03a\x05\xB8W_a\x01\xBFV[_\x80\xFD[=\x91Pa\x05\x93V[a\x05\xD8\x91P=\x80_\x83>a\x05'\x81\x83a\x05\xDEV[_a\x01\x03V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\0W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\0W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90a\x01`\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\0W`@R_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[` \x81\x83\x03\x12a\x05\xB8W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\xB8W\x01\x81`\x1F\x82\x01\x12\x15a\x05\xB8W\x80Q\x90a\x06\xC7\x82a\x06\x14V[\x92a\x06\xD5`@Q\x94\x85a\x05\xDEV[\x82\x84R` \x83\x83\x01\x01\x11a\x05\xB8W\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[a\x07F` \x91a\x07X`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x06\xF6V[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x06\xF6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x055W_\x91a\x07\x82WP\x90V[\x90P` \x81=` \x11a\x07\xB9W[\x81a\x07\x9D` \x93\x83a\x05\xDEV[\x81\x01\x03\x12a\x05\xB8WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x05\xB8W\x90V[=\x91Pa\x07\x90V\xFE\xA2dipfsX\"\x12 \xD5\xCC!\xDByJ\x9B\xE3\x82_qj\xE7|r\xE1vOl\n\xD2\xF6\x9D\xAA\xD9\xB3./T\xBB9\x08dsolcC\0\x08\x1B\x003",
    );
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CoreDeploymentLib`](self) contract instance.

    See the [wrapper's documentation](`CoreDeploymentLibInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CoreDeploymentLibInstance<T, P, N> {
        CoreDeploymentLibInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<CoreDeploymentLibInstance<T, P, N>>>
    {
        CoreDeploymentLibInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        CoreDeploymentLibInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`CoreDeploymentLib`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`CoreDeploymentLib`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CoreDeploymentLibInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for CoreDeploymentLibInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CoreDeploymentLibInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > CoreDeploymentLibInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`CoreDeploymentLib`](self) contract instance.

        See the [wrapper's documentation](`CoreDeploymentLibInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CoreDeploymentLibInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> CoreDeploymentLibInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CoreDeploymentLibInstance<T, P, N> {
            CoreDeploymentLibInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > CoreDeploymentLibInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > CoreDeploymentLibInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
