/**

Generated by the following Solidity interface...
```solidity
interface MockDelegationManager {
    function getOperatorShares(address, address[] memory strategies) external pure returns (uint256[] memory);
    function operatorShares(address, address) external pure returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getOperatorShares",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "strategies",
        "type": "address[]",
        "internalType": "contract IStrategy[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "operatorShares",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod MockDelegationManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506105318061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063778e55f3146100385780639004134714610068575b5f5ffd5b610052600480360381019061004d91906101a3565b610098565b60405161005f91906101f9565b60405180910390f35b610082600480360381019061007d919061039d565b6100a4565b60405161008f91906104ae565b60405180910390f35b5f6103e8905092915050565b60605f825167ffffffffffffffff8111156100c2576100c1610226565b5b6040519080825280602002602001820160405280156100f05781602001602082028036833780820191505090505b5090505f5b835181101561012d576103e8828281518110610114576101136104ce565b5b60200260200101818152505080806001019150506100f5565b508091505092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61017282610149565b9050919050565b61018281610168565b811461018c575f5ffd5b50565b5f8135905061019d81610179565b92915050565b5f5f604083850312156101b9576101b8610141565b5b5f6101c68582860161018f565b92505060206101d78582860161018f565b9150509250929050565b5f819050919050565b6101f3816101e1565b82525050565b5f60208201905061020c5f8301846101ea565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61025c82610216565b810181811067ffffffffffffffff8211171561027b5761027a610226565b5b80604052505050565b5f61028d610138565b90506102998282610253565b919050565b5f67ffffffffffffffff8211156102b8576102b7610226565b5b602082029050602081019050919050565b5f5ffd5b5f6102d782610168565b9050919050565b6102e7816102cd565b81146102f1575f5ffd5b50565b5f81359050610302816102de565b92915050565b5f61031a6103158461029e565b610284565b9050808382526020820190506020840283018581111561033d5761033c6102c9565b5b835b81811015610366578061035288826102f4565b84526020840193505060208101905061033f565b5050509392505050565b5f82601f83011261038457610383610212565b5b8135610394848260208601610308565b91505092915050565b5f5f604083850312156103b3576103b2610141565b5b5f6103c08582860161018f565b925050602083013567ffffffffffffffff8111156103e1576103e0610145565b5b6103ed85828601610370565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610429816101e1565b82525050565b5f61043a8383610420565b60208301905092915050565b5f602082019050919050565b5f61045c826103f7565b6104668185610401565b935061047183610411565b805f5b838110156104a1578151610488888261042f565b975061049383610446565b925050600181019050610474565b5085935050505092915050565b5f6020820190508181035f8301526104c68184610452565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212205f24ecc0ddde88ae8e91d57476182cfd2598d7bd57f5b83b5c9b6d10eb89d12764736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x051\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80cw\x8EU\xF3\x14a\08W\x80c\x90\x04\x13G\x14a\0hW[__\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x01\xA3V[a\0\x98V[`@Qa\0_\x91\x90a\x01\xF9V[`@Q\x80\x91\x03\x90\xF3[a\0\x82`\x04\x806\x03\x81\x01\x90a\0}\x91\x90a\x03\x9DV[a\0\xA4V[`@Qa\0\x8F\x91\x90a\x04\xAEV[`@Q\x80\x91\x03\x90\xF3[_a\x03\xE8\x90P\x92\x91PPV[``_\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xC2Wa\0\xC1a\x02&V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xF0W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_[\x83Q\x81\x10\x15a\x01-Wa\x03\xE8\x82\x82\x81Q\x81\x10a\x01\x14Wa\x01\x13a\x04\xCEV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\0\xF5V[P\x80\x91PP\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x01r\x82a\x01IV[\x90P\x91\x90PV[a\x01\x82\x81a\x01hV[\x81\x14a\x01\x8CW__\xFD[PV[_\x815\x90Pa\x01\x9D\x81a\x01yV[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x01\xB9Wa\x01\xB8a\x01AV[[_a\x01\xC6\x85\x82\x86\x01a\x01\x8FV[\x92PP` a\x01\xD7\x85\x82\x86\x01a\x01\x8FV[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[a\x01\xF3\x81a\x01\xE1V[\x82RPPV[_` \x82\x01\x90Pa\x02\x0C_\x83\x01\x84a\x01\xEAV[\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x02\\\x82a\x02\x16V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x02{Wa\x02za\x02&V[[\x80`@RPPPV[_a\x02\x8Da\x018V[\x90Pa\x02\x99\x82\x82a\x02SV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xB8Wa\x02\xB7a\x02&V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_a\x02\xD7\x82a\x01hV[\x90P\x91\x90PV[a\x02\xE7\x81a\x02\xCDV[\x81\x14a\x02\xF1W__\xFD[PV[_\x815\x90Pa\x03\x02\x81a\x02\xDEV[\x92\x91PPV[_a\x03\x1Aa\x03\x15\x84a\x02\x9EV[a\x02\x84V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x03=Wa\x03<a\x02\xC9V[[\x83[\x81\x81\x10\x15a\x03fW\x80a\x03R\x88\x82a\x02\xF4V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x03?V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x03\x84Wa\x03\x83a\x02\x12V[[\x815a\x03\x94\x84\x82` \x86\x01a\x03\x08V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\xB3Wa\x03\xB2a\x01AV[[_a\x03\xC0\x85\x82\x86\x01a\x01\x8FV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xE1Wa\x03\xE0a\x01EV[[a\x03\xED\x85\x82\x86\x01a\x03pV[\x91PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x04)\x81a\x01\xE1V[\x82RPPV[_a\x04:\x83\x83a\x04 V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x04\\\x82a\x03\xF7V[a\x04f\x81\x85a\x04\x01V[\x93Pa\x04q\x83a\x04\x11V[\x80_[\x83\x81\x10\x15a\x04\xA1W\x81Qa\x04\x88\x88\x82a\x04/V[\x97Pa\x04\x93\x83a\x04FV[\x92PP`\x01\x81\x01\x90Pa\x04tV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x04\xC6\x81\x84a\x04RV[\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 _$\xEC\xC0\xDD\xDE\x88\xAE\x8E\x91\xD5tv\x18,\xFD%\x98\xD7\xBDW\xF5\xB8;\\\x9Bm\x10\xEB\x89\xD1'dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063778e55f3146100385780639004134714610068575b5f5ffd5b610052600480360381019061004d91906101a3565b610098565b60405161005f91906101f9565b60405180910390f35b610082600480360381019061007d919061039d565b6100a4565b60405161008f91906104ae565b60405180910390f35b5f6103e8905092915050565b60605f825167ffffffffffffffff8111156100c2576100c1610226565b5b6040519080825280602002602001820160405280156100f05781602001602082028036833780820191505090505b5090505f5b835181101561012d576103e8828281518110610114576101136104ce565b5b60200260200101818152505080806001019150506100f5565b508091505092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61017282610149565b9050919050565b61018281610168565b811461018c575f5ffd5b50565b5f8135905061019d81610179565b92915050565b5f5f604083850312156101b9576101b8610141565b5b5f6101c68582860161018f565b92505060206101d78582860161018f565b9150509250929050565b5f819050919050565b6101f3816101e1565b82525050565b5f60208201905061020c5f8301846101ea565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61025c82610216565b810181811067ffffffffffffffff8211171561027b5761027a610226565b5b80604052505050565b5f61028d610138565b90506102998282610253565b919050565b5f67ffffffffffffffff8211156102b8576102b7610226565b5b602082029050602081019050919050565b5f5ffd5b5f6102d782610168565b9050919050565b6102e7816102cd565b81146102f1575f5ffd5b50565b5f81359050610302816102de565b92915050565b5f61031a6103158461029e565b610284565b9050808382526020820190506020840283018581111561033d5761033c6102c9565b5b835b81811015610366578061035288826102f4565b84526020840193505060208101905061033f565b5050509392505050565b5f82601f83011261038457610383610212565b5b8135610394848260208601610308565b91505092915050565b5f5f604083850312156103b3576103b2610141565b5b5f6103c08582860161018f565b925050602083013567ffffffffffffffff8111156103e1576103e0610145565b5b6103ed85828601610370565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610429816101e1565b82525050565b5f61043a8383610420565b60208301905092915050565b5f602082019050919050565b5f61045c826103f7565b6104668185610401565b935061047183610411565b805f5b838110156104a1578151610488888261042f565b975061049383610446565b925050600181019050610474565b5085935050505092915050565b5f6020820190508181035f8301526104c68184610452565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212205f24ecc0ddde88ae8e91d57476182cfd2598d7bd57f5b83b5c9b6d10eb89d12764736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80cw\x8EU\xF3\x14a\08W\x80c\x90\x04\x13G\x14a\0hW[__\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x01\xA3V[a\0\x98V[`@Qa\0_\x91\x90a\x01\xF9V[`@Q\x80\x91\x03\x90\xF3[a\0\x82`\x04\x806\x03\x81\x01\x90a\0}\x91\x90a\x03\x9DV[a\0\xA4V[`@Qa\0\x8F\x91\x90a\x04\xAEV[`@Q\x80\x91\x03\x90\xF3[_a\x03\xE8\x90P\x92\x91PPV[``_\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xC2Wa\0\xC1a\x02&V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xF0W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_[\x83Q\x81\x10\x15a\x01-Wa\x03\xE8\x82\x82\x81Q\x81\x10a\x01\x14Wa\x01\x13a\x04\xCEV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\0\xF5V[P\x80\x91PP\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x01r\x82a\x01IV[\x90P\x91\x90PV[a\x01\x82\x81a\x01hV[\x81\x14a\x01\x8CW__\xFD[PV[_\x815\x90Pa\x01\x9D\x81a\x01yV[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x01\xB9Wa\x01\xB8a\x01AV[[_a\x01\xC6\x85\x82\x86\x01a\x01\x8FV[\x92PP` a\x01\xD7\x85\x82\x86\x01a\x01\x8FV[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[a\x01\xF3\x81a\x01\xE1V[\x82RPPV[_` \x82\x01\x90Pa\x02\x0C_\x83\x01\x84a\x01\xEAV[\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x02\\\x82a\x02\x16V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x02{Wa\x02za\x02&V[[\x80`@RPPPV[_a\x02\x8Da\x018V[\x90Pa\x02\x99\x82\x82a\x02SV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xB8Wa\x02\xB7a\x02&V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_a\x02\xD7\x82a\x01hV[\x90P\x91\x90PV[a\x02\xE7\x81a\x02\xCDV[\x81\x14a\x02\xF1W__\xFD[PV[_\x815\x90Pa\x03\x02\x81a\x02\xDEV[\x92\x91PPV[_a\x03\x1Aa\x03\x15\x84a\x02\x9EV[a\x02\x84V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x03=Wa\x03<a\x02\xC9V[[\x83[\x81\x81\x10\x15a\x03fW\x80a\x03R\x88\x82a\x02\xF4V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x03?V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x03\x84Wa\x03\x83a\x02\x12V[[\x815a\x03\x94\x84\x82` \x86\x01a\x03\x08V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\xB3Wa\x03\xB2a\x01AV[[_a\x03\xC0\x85\x82\x86\x01a\x01\x8FV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xE1Wa\x03\xE0a\x01EV[[a\x03\xED\x85\x82\x86\x01a\x03pV[\x91PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x04)\x81a\x01\xE1V[\x82RPPV[_a\x04:\x83\x83a\x04 V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x04\\\x82a\x03\xF7V[a\x04f\x81\x85a\x04\x01V[\x93Pa\x04q\x83a\x04\x11V[\x80_[\x83\x81\x10\x15a\x04\xA1W\x81Qa\x04\x88\x88\x82a\x04/V[\x97Pa\x04\x93\x83a\x04FV[\x92PP`\x01\x81\x01\x90Pa\x04tV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x04\xC6\x81\x84a\x04RV[\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 _$\xEC\xC0\xDD\xDE\x88\xAE\x8E\x91\xD5tv\x18,\xFD%\x98\xD7\xBDW\xF5\xB8;\\\x9Bm\x10\xEB\x89\xD1'dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `getOperatorShares(address,address[])` and selector `0x90041347`.
```solidity
function getOperatorShares(address, address[] memory strategies) external pure returns (uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorSharesCall {
        pub _0: alloy::sol_types::private::Address,
        pub strategies: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`getOperatorShares(address,address[])`](getOperatorSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorSharesReturn {
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorSharesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorSharesCall) -> Self {
                    (value._0, value.strategies)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        strategies: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorSharesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorSharesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getOperatorSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getOperatorSharesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getOperatorShares(address,address[])";
            const SELECTOR: [u8; 4] = [144u8, 4u8, 19u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.strategies),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `operatorShares(address,address)` and selector `0x778e55f3`.
```solidity
function operatorShares(address, address) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct operatorSharesCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`operatorShares(address,address)`](operatorSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct operatorSharesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<operatorSharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: operatorSharesCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for operatorSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<operatorSharesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: operatorSharesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for operatorSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for operatorSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = operatorSharesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "operatorShares(address,address)";
            const SELECTOR: [u8; 4] = [119u8, 142u8, 85u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockDelegationManager`](self) function calls.
    pub enum MockDelegationManagerCalls {
        getOperatorShares(getOperatorSharesCall),
        operatorShares(operatorSharesCall),
    }
    #[automatically_derived]
    impl MockDelegationManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [119u8, 142u8, 85u8, 243u8],
            [144u8, 4u8, 19u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockDelegationManagerCalls {
        const NAME: &'static str = "MockDelegationManagerCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getOperatorShares(_) => {
                    <getOperatorSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::operatorShares(_) => {
                    <operatorSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockDelegationManagerCalls>] = &[
                {
                    fn operatorShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockDelegationManagerCalls> {
                        <operatorSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockDelegationManagerCalls::operatorShares)
                    }
                    operatorShares
                },
                {
                    fn getOperatorShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockDelegationManagerCalls> {
                        <getOperatorSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockDelegationManagerCalls::getOperatorShares)
                    }
                    getOperatorShares
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getOperatorShares(inner) => {
                    <getOperatorSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::operatorShares(inner) => {
                    <operatorSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getOperatorShares(inner) => {
                    <getOperatorSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::operatorShares(inner) => {
                    <operatorSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockDelegationManager`](self) contract instance.

See the [wrapper's documentation](`MockDelegationManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockDelegationManagerInstance<T, P, N> {
        MockDelegationManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockDelegationManagerInstance<T, P, N>>,
    > {
        MockDelegationManagerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockDelegationManagerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockDelegationManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockDelegationManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockDelegationManagerInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockDelegationManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockDelegationManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockDelegationManagerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockDelegationManager`](self) contract instance.

See the [wrapper's documentation](`MockDelegationManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockDelegationManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockDelegationManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockDelegationManagerInstance<T, P, N> {
            MockDelegationManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockDelegationManagerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getOperatorShares`] function.
        pub fn getOperatorShares(
            &self,
            _0: alloy::sol_types::private::Address,
            strategies: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, getOperatorSharesCall, N> {
            self.call_builder(
                &getOperatorSharesCall {
                    _0,
                    strategies,
                },
            )
        }
        ///Creates a new call builder for the [`operatorShares`] function.
        pub fn operatorShares(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, operatorSharesCall, N> {
            self.call_builder(&operatorSharesCall { _0, _1 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockDelegationManagerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
