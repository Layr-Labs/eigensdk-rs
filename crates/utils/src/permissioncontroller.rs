/**

Generated by the following Solidity interface...
```solidity
interface PermissionController {
    error AdminAlreadyPending();
    error AdminAlreadySet();
    error AdminNotPending();
    error AdminNotSet();
    error AppointeeAlreadySet();
    error AppointeeNotSet();
    error CannotHaveZeroAdmins();
    error NotAdmin();

    event AdminRemoved(address indexed account, address admin);
    event AdminSet(address indexed account, address admin);
    event AppointeeRemoved(address indexed account, address indexed appointee, address target, bytes4 selector);
    event AppointeeSet(address indexed account, address indexed appointee, address target, bytes4 selector);
    event Initialized(uint8 version);
    event PendingAdminAdded(address indexed account, address admin);
    event PendingAdminRemoved(address indexed account, address admin);

    constructor();

    function acceptAdmin(address account) external;
    function addPendingAdmin(address account, address admin) external;
    function canCall(address account, address caller, address target, bytes4 selector) external view returns (bool);
    function getAdmins(address account) external view returns (address[] memory);
    function getAppointeePermissions(address account, address appointee) external view returns (address[] memory, bytes4[] memory);
    function getAppointees(address account, address target, bytes4 selector) external view returns (address[] memory);
    function getPendingAdmins(address account) external view returns (address[] memory);
    function isAdmin(address account, address caller) external view returns (bool);
    function isPendingAdmin(address account, address pendingAdmin) external view returns (bool);
    function removeAdmin(address account, address admin) external;
    function removeAppointee(address account, address appointee, address target, bytes4 selector) external;
    function removePendingAdmin(address account, address admin) external;
    function setAppointee(address account, address appointee, address target, bytes4 selector) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "acceptAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addPendingAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "canCall",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAdmins",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppointeePermissions",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "appointee",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "",
        "type": "bytes4[]",
        "internalType": "bytes4[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppointees",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPendingAdmins",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPendingAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "pendingAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeAppointee",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "appointee",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removePendingAdmin",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAppointee",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "appointee",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminRemoved",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AdminSet",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AppointeeRemoved",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "appointee",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "indexed": false,
        "internalType": "bytes4"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AppointeeSet",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "appointee",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "selector",
        "type": "bytes4",
        "indexed": false,
        "internalType": "bytes4"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PendingAdminAdded",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PendingAdminRemoved",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AdminAlreadyPending",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AdminAlreadySet",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AdminNotPending",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AdminNotSet",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AppointeeAlreadySet",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AppointeeNotSet",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CannotHaveZeroAdmins",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod PermissionController {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460bb575f549060ff8260081c166069575060ff808216106030575b604051610d0090816100c08239f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f6021565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630664120114610841578063268959e5146107885780634f906cf9146106fc578063628806ef146106755780636bddfa1f14610603578063882a3b38146104b15780639100674514610485578063950d806e14610365578063ad5f221014610341578063ad8aca77146102e4578063df595cb81461024d578063eb5a4e871461017f5763fddbdefd146100a8575f80fd5b3461017b57606036600319011261017b576100c161093a565b6100c9610950565b6044356001600160e01b03198116810361017b5760609190911b6001600160601b03191660a09190911c63ffffffff60401b16179060018060a01b03165f526001602052600560405f2001905f5260205260405f206040519081602082549182815201915f5260205f20905f5b818110610165576101618561014d81870382610a01565b6040519182916020835260208301906109c5565b0390f35b8254845260209093019260019283019201610136565b5f80fd5b3461017b57604036600319011261017b5761019861093a565b6101a0610950565b906101ab3382610a77565b1561023e576001600160a01b039081165f81815260016020908152604080832095909416808352600386019091529290205490929061022f57816101ee91610c72565b156102205760207fb14b9a3d448c5b04f0e5b087b6f5193390db7955482a6ffb841e7b3ba61a460c91604051908152a2005b6319abede360e11b5f5260045ffd5b63130160e560e31b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b3461017b57602061025d36610966565b90916102698185610a77565b93841561027d575b85856040519015158152f35b6001600160a01b039081165f9081526001875260408082209290931681526004919091018652206102db93509160601b6001600160601b03191660a09190911c63ffffffff60401b1617906001915f520160205260405f2054151590565b82808080610271565b3461017b57604036600319011261017b57602061033761030261093a565b61030a610950565b6001600160a01b039182165f90815260018086526040808320939094168252919091016020522054151590565b6040519015158152f35b3461017b57602036600319011261017b5761016161014d61036061093a565b610ad4565b3461017b5761037336610966565b919261037f3382610a77565b1561023e576001600160a01b03165f81815260016020526040902090929091606081901b6001600160601b03191660a083901c63ffffffff60401b161792600481019060018060a01b0387165f52816020526103ec8560405f206001915f520160205260405f2054151590565b610476577f037f03a2ad6b967df4a01779b6d2b4c85950df83925d9e31362b519422fc01699460059260018060a01b0389165f526020526104308160405f20610c72565b505f520160205261044e60405f209560018060a01b03168096610c72565b50604080516001600160a01b039290921682526001600160e01b0319929092166020820152a3005b63ad8efeb760e01b5f5260045ffd5b3461017b57604036600319011261017b5760206103376104a361093a565b6104ab610950565b90610a77565b3461017b57604036600319011261017b576104ca61093a565b6104d2610950565b9060018060a01b03165f526001602052600460405f20019060018060a01b03165f5260205260405f2080549061050782610a37565b916105156040519384610a01565b808352601f1961052482610a37565b0136602085013761053481610a37565b906105426040519283610a01565b80825261054e81610a37565b602083019390601f19013685375f5b8281106105c35761058086868660206040519485946040865260408601906109c5565b918483038286015251918281520191905f5b8181106105a0575050500390f35b82516001600160e01b031916845285945060209384019390920191600101610592565b806105d060019284610b6e565b90549060031b1c63ffffffff60e01b8160a01b166105ee8388610a4f565b5260601c6105fc8289610a4f565b520161055d565b3461017b57602036600319011261017b576001600160a01b0361062461093a565b165f52600160205260405f206040519081602082549182815201915f5260205f20905f5b81811061065f576101618561014d81870382610a01565b8254845260209093019260019283019201610648565b3461017b57602036600319011261017b576001600160a01b0361069661093a565b16805f52600160205260405f206106ad3382610b83565b156106ed576106c0906002339101610c72565b507fbf265e8326285a2747e33e54d5945f7111f2b5edb826eb8c08d4677779b3ff976020604051338152a2005b63bed8295f60e01b5f5260045ffd5b3461017b57604036600319011261017b5761071561093a565b61071d610950565b906107283382610a77565b1561023e576001600160a01b039081165f818152600160205260409020909290911690610756908290610b83565b156106ed5760207fd706ed7ae044d795b49e54c9f519f663053951011985f663a862cd9ee72a9ac791604051908152a2005b3461017b57604036600319011261017b576107a161093a565b6107a9610950565b906107b43382610a77565b1561023e5760018060a01b031690815f526001602052600260405f200190600182541115610832576001600160a01b0316906107f1908290610b83565b156108235760207fdb9d5d31320daf5bc7181d565b6da4d12e30f0f4d5aa324a992426c14a1d19ce91604051908152a2005b630716d81b60e51b5f5260045ffd5b6310ce892b60e31b5f5260045ffd5b3461017b5761084f36610966565b919261085b3382610a77565b1561023e576001600160a01b03165f81815260016020526040902090929091606081901b6001600160601b03191660a083901c63ffffffff60401b161792600481019060018060a01b0387165f52816020526108c88560405f206001915f520160205260405f2054151590565b1561092b577f18242326b6b862126970679759169f01f646bd55ec5bfcab85ba9f337a74e0c69460059260018060a01b0389165f5260205261090d8160405f20610b83565b505f520160205261044e60405f209560018060a01b03168096610b83565b63262118cd60e01b5f5260045ffd5b600435906001600160a01b038216820361017b57565b602435906001600160a01b038216820361017b57565b608090600319011261017b576004356001600160a01b038116810361017b57906024356001600160a01b038116810361017b57906044356001600160a01b038116810361017b57906064356001600160e01b03198116810361017b5790565b90602080835192838152019201905f5b8181106109e25750505090565b82516001600160a01b03168452602093840193909201916001016109d5565b90601f8019910116810190811067ffffffffffffffff821117610a2357604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff8111610a235760051b60200190565b8051821015610a635760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03165f81815260016020526040902060020154909190610aa5576001600160a01b03161490565b5f9182526001602090815260408084206001600160a01b03909316845260039092019052902054151590565b90565b6001600160a01b03165f81815260016020526040902060020154610b195760405190610b01604083610a01565b60018252602080830190368237825115610a63575290565b5f526001602052600260405f2001604051808260208294549384815201905f5260205f20925f5b818110610b55575050610ad192500382610a01565b8454835260019485019486945060209093019201610b40565b8054821015610a63575f5260205f2001905f90565b906001820191815f528260205260405f20548015155f14610c6a575f198101818111610c565782545f19810191908211610c5657808203610c0b575b50505080548015610bf7575f190190610bd88282610b6e565b8154905f199060031b1b19169055555f526020525f6040812055600190565b634e487b7160e01b5f52603160045260245ffd5b610c41610c1b610c2b9386610b6e565b90549060031b1c92839286610b6e565b819391549060031b91821b915f19901b19161790565b90555f528360205260405f20555f8080610bbf565b634e487b7160e01b5f52601160045260245ffd5b505050505f90565b5f828152600182016020526040902054610cc45780549068010000000000000000821015610a235782610caf610c2b846001809601855584610b6e565b90558054925f520160205260405f2055600190565b50505f9056fea26469706673582212200a53022c7480ada4e864d1aa99729f5868ed5e037b5358303a219d51c26a529164736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\xBBW_T\x90`\xFF\x82`\x08\x1C\x16`iWP`\xFF\x80\x82\x16\x10`0W[`@Qa\r\0\x90\x81a\0\xC0\x829\xF3[`\xFF\x90\x81\x19\x16\x17_U\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98` `@Q`\xFF\x81R\xA1_`!V[bF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x90\xFD[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x06d\x12\x01\x14a\x08AW\x80c&\x89Y\xE5\x14a\x07\x88W\x80cO\x90l\xF9\x14a\x06\xFCW\x80cb\x88\x06\xEF\x14a\x06uW\x80ck\xDD\xFA\x1F\x14a\x06\x03W\x80c\x88*;8\x14a\x04\xB1W\x80c\x91\0gE\x14a\x04\x85W\x80c\x95\r\x80n\x14a\x03eW\x80c\xAD_\"\x10\x14a\x03AW\x80c\xAD\x8A\xCAw\x14a\x02\xE4W\x80c\xDFY\\\xB8\x14a\x02MW\x80c\xEBZN\x87\x14a\x01\x7FWc\xFD\xDB\xDE\xFD\x14a\0\xA8W_\x80\xFD[4a\x01{W``6`\x03\x19\x01\x12a\x01{Wa\0\xC1a\t:V[a\0\xC9a\tPV[`D5`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x03a\x01{W``\x91\x90\x91\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x91\x90\x91\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x90`\x01\x80`\xA0\x1B\x03\x16_R`\x01` R`\x05`@_ \x01\x90_R` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x01eWa\x01a\x85a\x01M\x81\x87\x03\x82a\n\x01V[`@Q\x91\x82\x91` \x83R` \x83\x01\x90a\t\xC5V[\x03\x90\xF3[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x016V[_\x80\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x01\x98a\t:V[a\x01\xA0a\tPV[\x90a\x01\xAB3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x95\x90\x94\x16\x80\x83R`\x03\x86\x01\x90\x91R\x92\x90 T\x90\x92\x90a\x02/W\x81a\x01\xEE\x91a\x0CrV[\x15a\x02 W` \x7F\xB1K\x9A=D\x8C[\x04\xF0\xE5\xB0\x87\xB6\xF5\x193\x90\xDByUH*o\xFB\x84\x1E{;\xA6\x1AF\x0C\x91`@Q\x90\x81R\xA2\0[c\x19\xAB\xED\xE3`\xE1\x1B_R`\x04_\xFD[c\x13\x01`\xE5`\xE3\x1B_R`\x04_\xFD[c{\xFAK\x9F`\xE0\x1B_R`\x04_\xFD[4a\x01{W` a\x02]6a\tfV[\x90\x91a\x02i\x81\x85a\nwV[\x93\x84\x15a\x02}W[\x85\x85`@Q\x90\x15\x15\x81R\xF3[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x01\x87R`@\x80\x82 \x92\x90\x93\x16\x81R`\x04\x91\x90\x91\x01\x86R a\x02\xDB\x93P\x91``\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x91\x90\x91\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x90`\x01\x91_R\x01` R`@_ T\x15\x15\x90V[\x82\x80\x80\x80a\x02qV[4a\x01{W`@6`\x03\x19\x01\x12a\x01{W` a\x037a\x03\x02a\t:V[a\x03\na\tPV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x01\x80\x86R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91\x01` R T\x15\x15\x90V[`@Q\x90\x15\x15\x81R\xF3[4a\x01{W` 6`\x03\x19\x01\x12a\x01{Wa\x01aa\x01Ma\x03`a\t:V[a\n\xD4V[4a\x01{Wa\x03s6a\tfV[\x91\x92a\x03\x7F3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91``\x81\x90\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x83\x90\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x92`\x04\x81\x01\x90`\x01\x80`\xA0\x1B\x03\x87\x16_R\x81` Ra\x03\xEC\x85`@_ `\x01\x91_R\x01` R`@_ T\x15\x15\x90V[a\x04vW\x7F\x03\x7F\x03\xA2\xADk\x96}\xF4\xA0\x17y\xB6\xD2\xB4\xC8YP\xDF\x83\x92]\x9E16+Q\x94\"\xFC\x01i\x94`\x05\x92`\x01\x80`\xA0\x1B\x03\x89\x16_R` Ra\x040\x81`@_ a\x0CrV[P_R\x01` Ra\x04N`@_ \x95`\x01\x80`\xA0\x1B\x03\x16\x80\x96a\x0CrV[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R`\x01`\x01`\xE0\x1B\x03\x19\x92\x90\x92\x16` \x82\x01R\xA3\0[c\xAD\x8E\xFE\xB7`\xE0\x1B_R`\x04_\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{W` a\x037a\x04\xA3a\t:V[a\x04\xABa\tPV[\x90a\nwV[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x04\xCAa\t:V[a\x04\xD2a\tPV[\x90`\x01\x80`\xA0\x1B\x03\x16_R`\x01` R`\x04`@_ \x01\x90`\x01\x80`\xA0\x1B\x03\x16_R` R`@_ \x80T\x90a\x05\x07\x82a\n7V[\x91a\x05\x15`@Q\x93\x84a\n\x01V[\x80\x83R`\x1F\x19a\x05$\x82a\n7V[\x016` \x85\x017a\x054\x81a\n7V[\x90a\x05B`@Q\x92\x83a\n\x01V[\x80\x82Ra\x05N\x81a\n7V[` \x83\x01\x93\x90`\x1F\x19\x016\x857_[\x82\x81\x10a\x05\xC3Wa\x05\x80\x86\x86\x86` `@Q\x94\x85\x94`@\x86R`@\x86\x01\x90a\t\xC5V[\x91\x84\x83\x03\x82\x86\x01RQ\x91\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x05\xA0WPPP\x03\x90\xF3[\x82Q`\x01`\x01`\xE0\x1B\x03\x19\x16\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x05\x92V[\x80a\x05\xD0`\x01\x92\x84a\x0BnV[\x90T\x90`\x03\x1B\x1Cc\xFF\xFF\xFF\xFF`\xE0\x1B\x81`\xA0\x1B\x16a\x05\xEE\x83\x88a\nOV[R``\x1Ca\x05\xFC\x82\x89a\nOV[R\x01a\x05]V[4a\x01{W` 6`\x03\x19\x01\x12a\x01{W`\x01`\x01`\xA0\x1B\x03a\x06$a\t:V[\x16_R`\x01` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x06_Wa\x01a\x85a\x01M\x81\x87\x03\x82a\n\x01V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x06HV[4a\x01{W` 6`\x03\x19\x01\x12a\x01{W`\x01`\x01`\xA0\x1B\x03a\x06\x96a\t:V[\x16\x80_R`\x01` R`@_ a\x06\xAD3\x82a\x0B\x83V[\x15a\x06\xEDWa\x06\xC0\x90`\x023\x91\x01a\x0CrV[P\x7F\xBF&^\x83&(Z'G\xE3>T\xD5\x94_q\x11\xF2\xB5\xED\xB8&\xEB\x8C\x08\xD4gwy\xB3\xFF\x97` `@Q3\x81R\xA2\0[c\xBE\xD8)_`\xE0\x1B_R`\x04_\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x07\x15a\t:V[a\x07\x1Da\tPV[\x90a\x07(3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91\x16\x90a\x07V\x90\x82\x90a\x0B\x83V[\x15a\x06\xEDW` \x7F\xD7\x06\xEDz\xE0D\xD7\x95\xB4\x9ET\xC9\xF5\x19\xF6c\x059Q\x01\x19\x85\xF6c\xA8b\xCD\x9E\xE7*\x9A\xC7\x91`@Q\x90\x81R\xA2\0[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x07\xA1a\t:V[a\x07\xA9a\tPV[\x90a\x07\xB43\x82a\nwV[\x15a\x02>W`\x01\x80`\xA0\x1B\x03\x16\x90\x81_R`\x01` R`\x02`@_ \x01\x90`\x01\x82T\x11\x15a\x082W`\x01`\x01`\xA0\x1B\x03\x16\x90a\x07\xF1\x90\x82\x90a\x0B\x83V[\x15a\x08#W` \x7F\xDB\x9D]12\r\xAF[\xC7\x18\x1DV[m\xA4\xD1.0\xF0\xF4\xD5\xAA2J\x99$&\xC1J\x1D\x19\xCE\x91`@Q\x90\x81R\xA2\0[c\x07\x16\xD8\x1B`\xE5\x1B_R`\x04_\xFD[c\x10\xCE\x89+`\xE3\x1B_R`\x04_\xFD[4a\x01{Wa\x08O6a\tfV[\x91\x92a\x08[3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91``\x81\x90\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x83\x90\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x92`\x04\x81\x01\x90`\x01\x80`\xA0\x1B\x03\x87\x16_R\x81` Ra\x08\xC8\x85`@_ `\x01\x91_R\x01` R`@_ T\x15\x15\x90V[\x15a\t+W\x7F\x18$#&\xB6\xB8b\x12ipg\x97Y\x16\x9F\x01\xF6F\xBDU\xEC[\xFC\xAB\x85\xBA\x9F3zt\xE0\xC6\x94`\x05\x92`\x01\x80`\xA0\x1B\x03\x89\x16_R` Ra\t\r\x81`@_ a\x0B\x83V[P_R\x01` Ra\x04N`@_ \x95`\x01\x80`\xA0\x1B\x03\x16\x80\x96a\x0B\x83V[c&!\x18\xCD`\xE0\x1B_R`\x04_\xFD[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01{WV[`$5\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01{WV[`\x80\x90`\x03\x19\x01\x12a\x01{W`\x045`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`d5`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x03a\x01{W\x90V[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\t\xE2WPPP\x90V[\x82Q`\x01`\x01`\xA0\x1B\x03\x16\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\t\xD5V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n#W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n#W`\x05\x1B` \x01\x90V[\x80Q\x82\x10\x15a\ncW` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 `\x02\x01T\x90\x91\x90a\n\xA5W`\x01`\x01`\xA0\x1B\x03\x16\x14\x90V[_\x91\x82R`\x01` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x84R`\x03\x90\x92\x01\x90R\x90 T\x15\x15\x90V[\x90V[`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 `\x02\x01Ta\x0B\x19W`@Q\x90a\x0B\x01`@\x83a\n\x01V[`\x01\x82R` \x80\x83\x01\x906\x827\x82Q\x15a\ncWR\x90V[_R`\x01` R`\x02`@_ \x01`@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\x0BUWPPa\n\xD1\x92P\x03\x82a\n\x01V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a\x0B@V[\x80T\x82\x10\x15a\ncW_R` _ \x01\x90_\x90V[\x90`\x01\x82\x01\x91\x81_R\x82` R`@_ T\x80\x15\x15_\x14a\x0CjW_\x19\x81\x01\x81\x81\x11a\x0CVW\x82T_\x19\x81\x01\x91\x90\x82\x11a\x0CVW\x80\x82\x03a\x0C\x0BW[PPP\x80T\x80\x15a\x0B\xF7W_\x19\x01\x90a\x0B\xD8\x82\x82a\x0BnV[\x81T\x90_\x19\x90`\x03\x1B\x1B\x19\x16\x90UU_R` R_`@\x81 U`\x01\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[a\x0CAa\x0C\x1Ba\x0C+\x93\x86a\x0BnV[\x90T\x90`\x03\x1B\x1C\x92\x83\x92\x86a\x0BnV[\x81\x93\x91T\x90`\x03\x1B\x91\x82\x1B\x91_\x19\x90\x1B\x19\x16\x17\x90V[\x90U_R\x83` R`@_ U_\x80\x80a\x0B\xBFV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[PPPP_\x90V[_\x82\x81R`\x01\x82\x01` R`@\x90 Ta\x0C\xC4W\x80T\x90h\x01\0\0\0\0\0\0\0\0\x82\x10\x15a\n#W\x82a\x0C\xAFa\x0C+\x84`\x01\x80\x96\x01\x85U\x84a\x0BnV[\x90U\x80T\x92_R\x01` R`@_ U`\x01\x90V[PP_\x90V\xFE\xA2dipfsX\"\x12 \nS\x02,t\x80\xAD\xA4\xE8d\xD1\xAA\x99r\x9FXh\xED^\x03{SX0:!\x9DQ\xC2jR\x91dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c80630664120114610841578063268959e5146107885780634f906cf9146106fc578063628806ef146106755780636bddfa1f14610603578063882a3b38146104b15780639100674514610485578063950d806e14610365578063ad5f221014610341578063ad8aca77146102e4578063df595cb81461024d578063eb5a4e871461017f5763fddbdefd146100a8575f80fd5b3461017b57606036600319011261017b576100c161093a565b6100c9610950565b6044356001600160e01b03198116810361017b5760609190911b6001600160601b03191660a09190911c63ffffffff60401b16179060018060a01b03165f526001602052600560405f2001905f5260205260405f206040519081602082549182815201915f5260205f20905f5b818110610165576101618561014d81870382610a01565b6040519182916020835260208301906109c5565b0390f35b8254845260209093019260019283019201610136565b5f80fd5b3461017b57604036600319011261017b5761019861093a565b6101a0610950565b906101ab3382610a77565b1561023e576001600160a01b039081165f81815260016020908152604080832095909416808352600386019091529290205490929061022f57816101ee91610c72565b156102205760207fb14b9a3d448c5b04f0e5b087b6f5193390db7955482a6ffb841e7b3ba61a460c91604051908152a2005b6319abede360e11b5f5260045ffd5b63130160e560e31b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b3461017b57602061025d36610966565b90916102698185610a77565b93841561027d575b85856040519015158152f35b6001600160a01b039081165f9081526001875260408082209290931681526004919091018652206102db93509160601b6001600160601b03191660a09190911c63ffffffff60401b1617906001915f520160205260405f2054151590565b82808080610271565b3461017b57604036600319011261017b57602061033761030261093a565b61030a610950565b6001600160a01b039182165f90815260018086526040808320939094168252919091016020522054151590565b6040519015158152f35b3461017b57602036600319011261017b5761016161014d61036061093a565b610ad4565b3461017b5761037336610966565b919261037f3382610a77565b1561023e576001600160a01b03165f81815260016020526040902090929091606081901b6001600160601b03191660a083901c63ffffffff60401b161792600481019060018060a01b0387165f52816020526103ec8560405f206001915f520160205260405f2054151590565b610476577f037f03a2ad6b967df4a01779b6d2b4c85950df83925d9e31362b519422fc01699460059260018060a01b0389165f526020526104308160405f20610c72565b505f520160205261044e60405f209560018060a01b03168096610c72565b50604080516001600160a01b039290921682526001600160e01b0319929092166020820152a3005b63ad8efeb760e01b5f5260045ffd5b3461017b57604036600319011261017b5760206103376104a361093a565b6104ab610950565b90610a77565b3461017b57604036600319011261017b576104ca61093a565b6104d2610950565b9060018060a01b03165f526001602052600460405f20019060018060a01b03165f5260205260405f2080549061050782610a37565b916105156040519384610a01565b808352601f1961052482610a37565b0136602085013761053481610a37565b906105426040519283610a01565b80825261054e81610a37565b602083019390601f19013685375f5b8281106105c35761058086868660206040519485946040865260408601906109c5565b918483038286015251918281520191905f5b8181106105a0575050500390f35b82516001600160e01b031916845285945060209384019390920191600101610592565b806105d060019284610b6e565b90549060031b1c63ffffffff60e01b8160a01b166105ee8388610a4f565b5260601c6105fc8289610a4f565b520161055d565b3461017b57602036600319011261017b576001600160a01b0361062461093a565b165f52600160205260405f206040519081602082549182815201915f5260205f20905f5b81811061065f576101618561014d81870382610a01565b8254845260209093019260019283019201610648565b3461017b57602036600319011261017b576001600160a01b0361069661093a565b16805f52600160205260405f206106ad3382610b83565b156106ed576106c0906002339101610c72565b507fbf265e8326285a2747e33e54d5945f7111f2b5edb826eb8c08d4677779b3ff976020604051338152a2005b63bed8295f60e01b5f5260045ffd5b3461017b57604036600319011261017b5761071561093a565b61071d610950565b906107283382610a77565b1561023e576001600160a01b039081165f818152600160205260409020909290911690610756908290610b83565b156106ed5760207fd706ed7ae044d795b49e54c9f519f663053951011985f663a862cd9ee72a9ac791604051908152a2005b3461017b57604036600319011261017b576107a161093a565b6107a9610950565b906107b43382610a77565b1561023e5760018060a01b031690815f526001602052600260405f200190600182541115610832576001600160a01b0316906107f1908290610b83565b156108235760207fdb9d5d31320daf5bc7181d565b6da4d12e30f0f4d5aa324a992426c14a1d19ce91604051908152a2005b630716d81b60e51b5f5260045ffd5b6310ce892b60e31b5f5260045ffd5b3461017b5761084f36610966565b919261085b3382610a77565b1561023e576001600160a01b03165f81815260016020526040902090929091606081901b6001600160601b03191660a083901c63ffffffff60401b161792600481019060018060a01b0387165f52816020526108c88560405f206001915f520160205260405f2054151590565b1561092b577f18242326b6b862126970679759169f01f646bd55ec5bfcab85ba9f337a74e0c69460059260018060a01b0389165f5260205261090d8160405f20610b83565b505f520160205261044e60405f209560018060a01b03168096610b83565b63262118cd60e01b5f5260045ffd5b600435906001600160a01b038216820361017b57565b602435906001600160a01b038216820361017b57565b608090600319011261017b576004356001600160a01b038116810361017b57906024356001600160a01b038116810361017b57906044356001600160a01b038116810361017b57906064356001600160e01b03198116810361017b5790565b90602080835192838152019201905f5b8181106109e25750505090565b82516001600160a01b03168452602093840193909201916001016109d5565b90601f8019910116810190811067ffffffffffffffff821117610a2357604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff8111610a235760051b60200190565b8051821015610a635760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03165f81815260016020526040902060020154909190610aa5576001600160a01b03161490565b5f9182526001602090815260408084206001600160a01b03909316845260039092019052902054151590565b90565b6001600160a01b03165f81815260016020526040902060020154610b195760405190610b01604083610a01565b60018252602080830190368237825115610a63575290565b5f526001602052600260405f2001604051808260208294549384815201905f5260205f20925f5b818110610b55575050610ad192500382610a01565b8454835260019485019486945060209093019201610b40565b8054821015610a63575f5260205f2001905f90565b906001820191815f528260205260405f20548015155f14610c6a575f198101818111610c565782545f19810191908211610c5657808203610c0b575b50505080548015610bf7575f190190610bd88282610b6e565b8154905f199060031b1b19169055555f526020525f6040812055600190565b634e487b7160e01b5f52603160045260245ffd5b610c41610c1b610c2b9386610b6e565b90549060031b1c92839286610b6e565b819391549060031b91821b915f19901b19161790565b90555f528360205260405f20555f8080610bbf565b634e487b7160e01b5f52601160045260245ffd5b505050505f90565b5f828152600182016020526040902054610cc45780549068010000000000000000821015610a235782610caf610c2b846001809601855584610b6e565b90558054925f520160205260405f2055600190565b50505f9056fea26469706673582212200a53022c7480ada4e864d1aa99729f5868ed5e037b5358303a219d51c26a529164736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x06d\x12\x01\x14a\x08AW\x80c&\x89Y\xE5\x14a\x07\x88W\x80cO\x90l\xF9\x14a\x06\xFCW\x80cb\x88\x06\xEF\x14a\x06uW\x80ck\xDD\xFA\x1F\x14a\x06\x03W\x80c\x88*;8\x14a\x04\xB1W\x80c\x91\0gE\x14a\x04\x85W\x80c\x95\r\x80n\x14a\x03eW\x80c\xAD_\"\x10\x14a\x03AW\x80c\xAD\x8A\xCAw\x14a\x02\xE4W\x80c\xDFY\\\xB8\x14a\x02MW\x80c\xEBZN\x87\x14a\x01\x7FWc\xFD\xDB\xDE\xFD\x14a\0\xA8W_\x80\xFD[4a\x01{W``6`\x03\x19\x01\x12a\x01{Wa\0\xC1a\t:V[a\0\xC9a\tPV[`D5`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x03a\x01{W``\x91\x90\x91\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x91\x90\x91\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x90`\x01\x80`\xA0\x1B\x03\x16_R`\x01` R`\x05`@_ \x01\x90_R` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x01eWa\x01a\x85a\x01M\x81\x87\x03\x82a\n\x01V[`@Q\x91\x82\x91` \x83R` \x83\x01\x90a\t\xC5V[\x03\x90\xF3[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x016V[_\x80\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x01\x98a\t:V[a\x01\xA0a\tPV[\x90a\x01\xAB3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x95\x90\x94\x16\x80\x83R`\x03\x86\x01\x90\x91R\x92\x90 T\x90\x92\x90a\x02/W\x81a\x01\xEE\x91a\x0CrV[\x15a\x02 W` \x7F\xB1K\x9A=D\x8C[\x04\xF0\xE5\xB0\x87\xB6\xF5\x193\x90\xDByUH*o\xFB\x84\x1E{;\xA6\x1AF\x0C\x91`@Q\x90\x81R\xA2\0[c\x19\xAB\xED\xE3`\xE1\x1B_R`\x04_\xFD[c\x13\x01`\xE5`\xE3\x1B_R`\x04_\xFD[c{\xFAK\x9F`\xE0\x1B_R`\x04_\xFD[4a\x01{W` a\x02]6a\tfV[\x90\x91a\x02i\x81\x85a\nwV[\x93\x84\x15a\x02}W[\x85\x85`@Q\x90\x15\x15\x81R\xF3[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x01\x87R`@\x80\x82 \x92\x90\x93\x16\x81R`\x04\x91\x90\x91\x01\x86R a\x02\xDB\x93P\x91``\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x91\x90\x91\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x90`\x01\x91_R\x01` R`@_ T\x15\x15\x90V[\x82\x80\x80\x80a\x02qV[4a\x01{W`@6`\x03\x19\x01\x12a\x01{W` a\x037a\x03\x02a\t:V[a\x03\na\tPV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x01\x80\x86R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91\x01` R T\x15\x15\x90V[`@Q\x90\x15\x15\x81R\xF3[4a\x01{W` 6`\x03\x19\x01\x12a\x01{Wa\x01aa\x01Ma\x03`a\t:V[a\n\xD4V[4a\x01{Wa\x03s6a\tfV[\x91\x92a\x03\x7F3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91``\x81\x90\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x83\x90\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x92`\x04\x81\x01\x90`\x01\x80`\xA0\x1B\x03\x87\x16_R\x81` Ra\x03\xEC\x85`@_ `\x01\x91_R\x01` R`@_ T\x15\x15\x90V[a\x04vW\x7F\x03\x7F\x03\xA2\xADk\x96}\xF4\xA0\x17y\xB6\xD2\xB4\xC8YP\xDF\x83\x92]\x9E16+Q\x94\"\xFC\x01i\x94`\x05\x92`\x01\x80`\xA0\x1B\x03\x89\x16_R` Ra\x040\x81`@_ a\x0CrV[P_R\x01` Ra\x04N`@_ \x95`\x01\x80`\xA0\x1B\x03\x16\x80\x96a\x0CrV[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R`\x01`\x01`\xE0\x1B\x03\x19\x92\x90\x92\x16` \x82\x01R\xA3\0[c\xAD\x8E\xFE\xB7`\xE0\x1B_R`\x04_\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{W` a\x037a\x04\xA3a\t:V[a\x04\xABa\tPV[\x90a\nwV[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x04\xCAa\t:V[a\x04\xD2a\tPV[\x90`\x01\x80`\xA0\x1B\x03\x16_R`\x01` R`\x04`@_ \x01\x90`\x01\x80`\xA0\x1B\x03\x16_R` R`@_ \x80T\x90a\x05\x07\x82a\n7V[\x91a\x05\x15`@Q\x93\x84a\n\x01V[\x80\x83R`\x1F\x19a\x05$\x82a\n7V[\x016` \x85\x017a\x054\x81a\n7V[\x90a\x05B`@Q\x92\x83a\n\x01V[\x80\x82Ra\x05N\x81a\n7V[` \x83\x01\x93\x90`\x1F\x19\x016\x857_[\x82\x81\x10a\x05\xC3Wa\x05\x80\x86\x86\x86` `@Q\x94\x85\x94`@\x86R`@\x86\x01\x90a\t\xC5V[\x91\x84\x83\x03\x82\x86\x01RQ\x91\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x05\xA0WPPP\x03\x90\xF3[\x82Q`\x01`\x01`\xE0\x1B\x03\x19\x16\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x05\x92V[\x80a\x05\xD0`\x01\x92\x84a\x0BnV[\x90T\x90`\x03\x1B\x1Cc\xFF\xFF\xFF\xFF`\xE0\x1B\x81`\xA0\x1B\x16a\x05\xEE\x83\x88a\nOV[R``\x1Ca\x05\xFC\x82\x89a\nOV[R\x01a\x05]V[4a\x01{W` 6`\x03\x19\x01\x12a\x01{W`\x01`\x01`\xA0\x1B\x03a\x06$a\t:V[\x16_R`\x01` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x06_Wa\x01a\x85a\x01M\x81\x87\x03\x82a\n\x01V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x06HV[4a\x01{W` 6`\x03\x19\x01\x12a\x01{W`\x01`\x01`\xA0\x1B\x03a\x06\x96a\t:V[\x16\x80_R`\x01` R`@_ a\x06\xAD3\x82a\x0B\x83V[\x15a\x06\xEDWa\x06\xC0\x90`\x023\x91\x01a\x0CrV[P\x7F\xBF&^\x83&(Z'G\xE3>T\xD5\x94_q\x11\xF2\xB5\xED\xB8&\xEB\x8C\x08\xD4gwy\xB3\xFF\x97` `@Q3\x81R\xA2\0[c\xBE\xD8)_`\xE0\x1B_R`\x04_\xFD[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x07\x15a\t:V[a\x07\x1Da\tPV[\x90a\x07(3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91\x16\x90a\x07V\x90\x82\x90a\x0B\x83V[\x15a\x06\xEDW` \x7F\xD7\x06\xEDz\xE0D\xD7\x95\xB4\x9ET\xC9\xF5\x19\xF6c\x059Q\x01\x19\x85\xF6c\xA8b\xCD\x9E\xE7*\x9A\xC7\x91`@Q\x90\x81R\xA2\0[4a\x01{W`@6`\x03\x19\x01\x12a\x01{Wa\x07\xA1a\t:V[a\x07\xA9a\tPV[\x90a\x07\xB43\x82a\nwV[\x15a\x02>W`\x01\x80`\xA0\x1B\x03\x16\x90\x81_R`\x01` R`\x02`@_ \x01\x90`\x01\x82T\x11\x15a\x082W`\x01`\x01`\xA0\x1B\x03\x16\x90a\x07\xF1\x90\x82\x90a\x0B\x83V[\x15a\x08#W` \x7F\xDB\x9D]12\r\xAF[\xC7\x18\x1DV[m\xA4\xD1.0\xF0\xF4\xD5\xAA2J\x99$&\xC1J\x1D\x19\xCE\x91`@Q\x90\x81R\xA2\0[c\x07\x16\xD8\x1B`\xE5\x1B_R`\x04_\xFD[c\x10\xCE\x89+`\xE3\x1B_R`\x04_\xFD[4a\x01{Wa\x08O6a\tfV[\x91\x92a\x08[3\x82a\nwV[\x15a\x02>W`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 \x90\x92\x90\x91``\x81\x90\x1B`\x01`\x01``\x1B\x03\x19\x16`\xA0\x83\x90\x1Cc\xFF\xFF\xFF\xFF`@\x1B\x16\x17\x92`\x04\x81\x01\x90`\x01\x80`\xA0\x1B\x03\x87\x16_R\x81` Ra\x08\xC8\x85`@_ `\x01\x91_R\x01` R`@_ T\x15\x15\x90V[\x15a\t+W\x7F\x18$#&\xB6\xB8b\x12ipg\x97Y\x16\x9F\x01\xF6F\xBDU\xEC[\xFC\xAB\x85\xBA\x9F3zt\xE0\xC6\x94`\x05\x92`\x01\x80`\xA0\x1B\x03\x89\x16_R` Ra\t\r\x81`@_ a\x0B\x83V[P_R\x01` Ra\x04N`@_ \x95`\x01\x80`\xA0\x1B\x03\x16\x80\x96a\x0B\x83V[c&!\x18\xCD`\xE0\x1B_R`\x04_\xFD[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01{WV[`$5\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01{WV[`\x80\x90`\x03\x19\x01\x12a\x01{W`\x045`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01{W\x90`d5`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x03a\x01{W\x90V[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\t\xE2WPPP\x90V[\x82Q`\x01`\x01`\xA0\x1B\x03\x16\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\t\xD5V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n#W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n#W`\x05\x1B` \x01\x90V[\x80Q\x82\x10\x15a\ncW` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 `\x02\x01T\x90\x91\x90a\n\xA5W`\x01`\x01`\xA0\x1B\x03\x16\x14\x90V[_\x91\x82R`\x01` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x84R`\x03\x90\x92\x01\x90R\x90 T\x15\x15\x90V[\x90V[`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R`\x01` R`@\x90 `\x02\x01Ta\x0B\x19W`@Q\x90a\x0B\x01`@\x83a\n\x01V[`\x01\x82R` \x80\x83\x01\x906\x827\x82Q\x15a\ncWR\x90V[_R`\x01` R`\x02`@_ \x01`@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\x0BUWPPa\n\xD1\x92P\x03\x82a\n\x01V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a\x0B@V[\x80T\x82\x10\x15a\ncW_R` _ \x01\x90_\x90V[\x90`\x01\x82\x01\x91\x81_R\x82` R`@_ T\x80\x15\x15_\x14a\x0CjW_\x19\x81\x01\x81\x81\x11a\x0CVW\x82T_\x19\x81\x01\x91\x90\x82\x11a\x0CVW\x80\x82\x03a\x0C\x0BW[PPP\x80T\x80\x15a\x0B\xF7W_\x19\x01\x90a\x0B\xD8\x82\x82a\x0BnV[\x81T\x90_\x19\x90`\x03\x1B\x1B\x19\x16\x90UU_R` R_`@\x81 U`\x01\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[a\x0CAa\x0C\x1Ba\x0C+\x93\x86a\x0BnV[\x90T\x90`\x03\x1B\x1C\x92\x83\x92\x86a\x0BnV[\x81\x93\x91T\x90`\x03\x1B\x91\x82\x1B\x91_\x19\x90\x1B\x19\x16\x17\x90V[\x90U_R\x83` R`@_ U_\x80\x80a\x0B\xBFV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[PPPP_\x90V[_\x82\x81R`\x01\x82\x01` R`@\x90 Ta\x0C\xC4W\x80T\x90h\x01\0\0\0\0\0\0\0\0\x82\x10\x15a\n#W\x82a\x0C\xAFa\x0C+\x84`\x01\x80\x96\x01\x85U\x84a\x0BnV[\x90U\x80T\x92_R\x01` R`@_ U`\x01\x90V[PP_\x90V\xFE\xA2dipfsX\"\x12 \nS\x02,t\x80\xAD\xA4\xE8d\xD1\xAA\x99r\x9FXh\xED^\x03{SX0:!\x9DQ\xC2jR\x91dsolcC\0\x08\x1B\x003",
    );
    /**Custom error with signature `AdminAlreadyPending()` and selector `0x3357dbc6`.
    ```solidity
    error AdminAlreadyPending();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AdminAlreadyPending {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AdminAlreadyPending> for UnderlyingRustTuple<'_> {
            fn from(value: AdminAlreadyPending) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AdminAlreadyPending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AdminAlreadyPending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AdminAlreadyPending()";
            const SELECTOR: [u8; 4] = [51u8, 87u8, 219u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AdminAlreadySet()` and selector `0x980b0728`.
    ```solidity
    error AdminAlreadySet();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AdminAlreadySet {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AdminAlreadySet> for UnderlyingRustTuple<'_> {
            fn from(value: AdminAlreadySet) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AdminAlreadySet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AdminAlreadySet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AdminAlreadySet()";
            const SELECTOR: [u8; 4] = [152u8, 11u8, 7u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AdminNotPending()` and selector `0xbed8295f`.
    ```solidity
    error AdminNotPending();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AdminNotPending {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AdminNotPending> for UnderlyingRustTuple<'_> {
            fn from(value: AdminNotPending) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AdminNotPending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AdminNotPending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AdminNotPending()";
            const SELECTOR: [u8; 4] = [190u8, 216u8, 41u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AdminNotSet()` and selector `0xe2db0360`.
    ```solidity
    error AdminNotSet();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AdminNotSet {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AdminNotSet> for UnderlyingRustTuple<'_> {
            fn from(value: AdminNotSet) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AdminNotSet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AdminNotSet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AdminNotSet()";
            const SELECTOR: [u8; 4] = [226u8, 219u8, 3u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AppointeeAlreadySet()` and selector `0xad8efeb7`.
    ```solidity
    error AppointeeAlreadySet();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AppointeeAlreadySet {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AppointeeAlreadySet> for UnderlyingRustTuple<'_> {
            fn from(value: AppointeeAlreadySet) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AppointeeAlreadySet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AppointeeAlreadySet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AppointeeAlreadySet()";
            const SELECTOR: [u8; 4] = [173u8, 142u8, 254u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AppointeeNotSet()` and selector `0x262118cd`.
    ```solidity
    error AppointeeNotSet();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AppointeeNotSet {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AppointeeNotSet> for UnderlyingRustTuple<'_> {
            fn from(value: AppointeeNotSet) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AppointeeNotSet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AppointeeNotSet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AppointeeNotSet()";
            const SELECTOR: [u8; 4] = [38u8, 33u8, 24u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CannotHaveZeroAdmins()` and selector `0x86744958`.
    ```solidity
    error CannotHaveZeroAdmins();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CannotHaveZeroAdmins {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CannotHaveZeroAdmins> for UnderlyingRustTuple<'_> {
            fn from(value: CannotHaveZeroAdmins) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CannotHaveZeroAdmins {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CannotHaveZeroAdmins {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CannotHaveZeroAdmins()";
            const SELECTOR: [u8; 4] = [134u8, 116u8, 73u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
    ```solidity
    error NotAdmin();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminRemoved(address,address)` and selector `0xdb9d5d31320daf5bc7181d565b6da4d12e30f0f4d5aa324a992426c14a1d19ce`.
    ```solidity
    event AdminRemoved(address indexed account, address admin);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminRemoved {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminRemoved {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminRemoved(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    219u8, 157u8, 93u8, 49u8, 50u8, 13u8, 175u8, 91u8, 199u8, 24u8, 29u8, 86u8,
                    91u8, 109u8, 164u8, 209u8, 46u8, 48u8, 240u8, 244u8, 213u8, 170u8, 50u8, 74u8,
                    153u8, 36u8, 38u8, 193u8, 74u8, 29u8, 25u8, 206u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    admin: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `AdminSet(address,address)` and selector `0xbf265e8326285a2747e33e54d5945f7111f2b5edb826eb8c08d4677779b3ff97`.
    ```solidity
    event AdminSet(address indexed account, address admin);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminSet {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminSet {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminSet(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    191u8, 38u8, 94u8, 131u8, 38u8, 40u8, 90u8, 39u8, 71u8, 227u8, 62u8, 84u8,
                    213u8, 148u8, 95u8, 113u8, 17u8, 242u8, 181u8, 237u8, 184u8, 38u8, 235u8,
                    140u8, 8u8, 212u8, 103u8, 119u8, 121u8, 179u8, 255u8, 151u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    admin: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `AppointeeRemoved(address,address,address,bytes4)` and selector `0x18242326b6b862126970679759169f01f646bd55ec5bfcab85ba9f337a74e0c6`.
    ```solidity
    event AppointeeRemoved(address indexed account, address indexed appointee, address target, bytes4 selector);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppointeeRemoved {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub appointee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppointeeRemoved {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AppointeeRemoved(address,address,address,bytes4)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    24u8, 36u8, 35u8, 38u8, 182u8, 184u8, 98u8, 18u8, 105u8, 112u8, 103u8, 151u8,
                    89u8, 22u8, 159u8, 1u8, 246u8, 70u8, 189u8, 85u8, 236u8, 91u8, 252u8, 171u8,
                    133u8, 186u8, 159u8, 51u8, 122u8, 116u8, 224u8, 198u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    appointee: topics.2,
                    target: data.0,
                    selector: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.account.clone(),
                    self.appointee.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.appointee,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppointeeRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppointeeRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AppointeeRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `AppointeeSet(address,address,address,bytes4)` and selector `0x037f03a2ad6b967df4a01779b6d2b4c85950df83925d9e31362b519422fc0169`.
    ```solidity
    event AppointeeSet(address indexed account, address indexed appointee, address target, bytes4 selector);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppointeeSet {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub appointee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppointeeSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AppointeeSet(address,address,address,bytes4)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    3u8, 127u8, 3u8, 162u8, 173u8, 107u8, 150u8, 125u8, 244u8, 160u8, 23u8, 121u8,
                    182u8, 210u8, 180u8, 200u8, 89u8, 80u8, 223u8, 131u8, 146u8, 93u8, 158u8, 49u8,
                    54u8, 43u8, 81u8, 148u8, 34u8, 252u8, 1u8, 105u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    appointee: topics.2,
                    target: data.0,
                    selector: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.account.clone(),
                    self.appointee.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.appointee,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppointeeSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppointeeSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AppointeeSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint8)` and selector `0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498`.
    ```solidity
    event Initialized(uint8 version);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    127u8, 38u8, 184u8, 63u8, 249u8, 110u8, 31u8, 43u8, 106u8, 104u8, 47u8, 19u8,
                    56u8, 82u8, 246u8, 121u8, 138u8, 9u8, 196u8, 101u8, 218u8, 149u8, 146u8, 20u8,
                    96u8, 206u8, 251u8, 56u8, 71u8, 64u8, 36u8, 152u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PendingAdminAdded(address,address)` and selector `0xb14b9a3d448c5b04f0e5b087b6f5193390db7955482a6ffb841e7b3ba61a460c`.
    ```solidity
    event PendingAdminAdded(address indexed account, address admin);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PendingAdminAdded {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PendingAdminAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PendingAdminAdded(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    177u8, 75u8, 154u8, 61u8, 68u8, 140u8, 91u8, 4u8, 240u8, 229u8, 176u8, 135u8,
                    182u8, 245u8, 25u8, 51u8, 144u8, 219u8, 121u8, 85u8, 72u8, 42u8, 111u8, 251u8,
                    132u8, 30u8, 123u8, 59u8, 166u8, 26u8, 70u8, 12u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    admin: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PendingAdminAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PendingAdminAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PendingAdminAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PendingAdminRemoved(address,address)` and selector `0xd706ed7ae044d795b49e54c9f519f663053951011985f663a862cd9ee72a9ac7`.
    ```solidity
    event PendingAdminRemoved(address indexed account, address admin);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PendingAdminRemoved {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PendingAdminRemoved {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PendingAdminRemoved(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    215u8, 6u8, 237u8, 122u8, 224u8, 68u8, 215u8, 149u8, 180u8, 158u8, 84u8, 201u8,
                    245u8, 25u8, 246u8, 99u8, 5u8, 57u8, 81u8, 1u8, 25u8, 133u8, 246u8, 99u8,
                    168u8, 98u8, 205u8, 158u8, 231u8, 42u8, 154u8, 199u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    admin: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PendingAdminRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PendingAdminRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PendingAdminRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
    ```solidity
    constructor();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `acceptAdmin(address)` and selector `0x628806ef`.
    ```solidity
    function acceptAdmin(address account) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptAdminCall {
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`acceptAdmin(address)`](acceptAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: acceptAdminCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for acceptAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: acceptAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for acceptAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for acceptAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = acceptAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "acceptAdmin(address)";
            const SELECTOR: [u8; 4] = [98u8, 136u8, 6u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `addPendingAdmin(address,address)` and selector `0xeb5a4e87`.
    ```solidity
    function addPendingAdmin(address account, address admin) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPendingAdminCall {
        pub account: alloy::sol_types::private::Address,
        pub admin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addPendingAdmin(address,address)`](addPendingAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPendingAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPendingAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: addPendingAdminCall) -> Self {
                    (value.account, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addPendingAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        admin: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPendingAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addPendingAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addPendingAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addPendingAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addPendingAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addPendingAdmin(address,address)";
            const SELECTOR: [u8; 4] = [235u8, 90u8, 78u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `canCall(address,address,address,bytes4)` and selector `0xdf595cb8`.
    ```solidity
    function canCall(address account, address caller, address target, bytes4 selector) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct canCallCall {
        pub account: alloy::sol_types::private::Address,
        pub caller: alloy::sol_types::private::Address,
        pub target: alloy::sol_types::private::Address,
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`canCall(address,address,address,bytes4)`](canCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct canCallReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<4>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<canCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: canCallCall) -> Self {
                    (value.account, value.caller, value.target, value.selector)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for canCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        caller: tuple.1,
                        target: tuple.2,
                        selector: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<canCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: canCallReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for canCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for canCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = canCallReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "canCall(address,address,address,bytes4)";
            const SELECTOR: [u8; 4] = [223u8, 89u8, 92u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getAdmins(address)` and selector `0xad5f2210`.
    ```solidity
    function getAdmins(address account) external view returns (address[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAdminsCall {
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAdmins(address)`](getAdminsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAdminsReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAdminsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAdminsCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAdminsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAdminsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAdminsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAdminsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAdminsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAdminsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAdmins(address)";
            const SELECTOR: [u8; 4] = [173u8, 95u8, 34u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getAppointeePermissions(address,address)` and selector `0x882a3b38`.
    ```solidity
    function getAppointeePermissions(address account, address appointee) external view returns (address[] memory, bytes4[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppointeePermissionsCall {
        pub account: alloy::sol_types::private::Address,
        pub appointee: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAppointeePermissions(address,address)`](getAppointeePermissionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppointeePermissionsReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        pub _1: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<4>>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppointeePermissionsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAppointeePermissionsCall) -> Self {
                    (value.account, value.appointee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAppointeePermissionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        appointee: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<4>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<4>>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppointeePermissionsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAppointeePermissionsReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAppointeePermissionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppointeePermissionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAppointeePermissionsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<4>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppointeePermissions(address,address)";
            const SELECTOR: [u8; 4] = [136u8, 42u8, 59u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.appointee,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getAppointees(address,address,bytes4)` and selector `0xfddbdefd`.
    ```solidity
    function getAppointees(address account, address target, bytes4 selector) external view returns (address[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppointeesCall {
        pub account: alloy::sol_types::private::Address,
        pub target: alloy::sol_types::private::Address,
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`getAppointees(address,address,bytes4)`](getAppointeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppointeesReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<4>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppointeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAppointeesCall) -> Self {
                    (value.account, value.target, value.selector)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAppointeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        target: tuple.1,
                        selector: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppointeesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAppointeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAppointeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppointeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAppointeesReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppointees(address,address,bytes4)";
            const SELECTOR: [u8; 4] = [253u8, 219u8, 222u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getPendingAdmins(address)` and selector `0x6bddfa1f`.
    ```solidity
    function getPendingAdmins(address account) external view returns (address[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPendingAdminsCall {
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getPendingAdmins(address)`](getPendingAdminsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPendingAdminsReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPendingAdminsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPendingAdminsCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPendingAdminsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPendingAdminsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPendingAdminsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPendingAdminsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPendingAdminsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPendingAdminsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPendingAdmins(address)";
            const SELECTOR: [u8; 4] = [107u8, 221u8, 250u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isAdmin(address,address)` and selector `0x91006745`.
    ```solidity
    function isAdmin(address account, address caller) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAdminCall {
        pub account: alloy::sol_types::private::Address,
        pub caller: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAdmin(address,address)`](isAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAdminReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAdminCall) -> Self {
                    (value.account, value.caller)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        caller: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAdmin(address,address)";
            const SELECTOR: [u8; 4] = [145u8, 0u8, 103u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isPendingAdmin(address,address)` and selector `0xad8aca77`.
    ```solidity
    function isPendingAdmin(address account, address pendingAdmin) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPendingAdminCall {
        pub account: alloy::sol_types::private::Address,
        pub pendingAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isPendingAdmin(address,address)`](isPendingAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPendingAdminReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPendingAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPendingAdminCall) -> Self {
                    (value.account, value.pendingAdmin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPendingAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        pendingAdmin: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPendingAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isPendingAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPendingAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPendingAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPendingAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPendingAdmin(address,address)";
            const SELECTOR: [u8; 4] = [173u8, 138u8, 202u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pendingAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `removeAdmin(address,address)` and selector `0x268959e5`.
    ```solidity
    function removeAdmin(address account, address admin) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeAdminCall {
        pub account: alloy::sol_types::private::Address,
        pub admin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeAdmin(address,address)`](removeAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeAdminCall) -> Self {
                    (value.account, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        admin: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeAdmin(address,address)";
            const SELECTOR: [u8; 4] = [38u8, 137u8, 89u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `removeAppointee(address,address,address,bytes4)` and selector `0x06641201`.
    ```solidity
    function removeAppointee(address account, address appointee, address target, bytes4 selector) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeAppointeeCall {
        pub account: alloy::sol_types::private::Address,
        pub appointee: alloy::sol_types::private::Address,
        pub target: alloy::sol_types::private::Address,
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`removeAppointee(address,address,address,bytes4)`](removeAppointeeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeAppointeeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<4>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeAppointeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeAppointeeCall) -> Self {
                    (value.account, value.appointee, value.target, value.selector)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeAppointeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        appointee: tuple.1,
                        target: tuple.2,
                        selector: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeAppointeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeAppointeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeAppointeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeAppointeeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeAppointeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeAppointee(address,address,address,bytes4)";
            const SELECTOR: [u8; 4] = [6u8, 100u8, 18u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.appointee,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `removePendingAdmin(address,address)` and selector `0x4f906cf9`.
    ```solidity
    function removePendingAdmin(address account, address admin) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePendingAdminCall {
        pub account: alloy::sol_types::private::Address,
        pub admin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removePendingAdmin(address,address)`](removePendingAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePendingAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePendingAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: removePendingAdminCall) -> Self {
                    (value.account, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removePendingAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        admin: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePendingAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removePendingAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removePendingAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removePendingAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = removePendingAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removePendingAdmin(address,address)";
            const SELECTOR: [u8; 4] = [79u8, 144u8, 108u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setAppointee(address,address,address,bytes4)` and selector `0x950d806e`.
    ```solidity
    function setAppointee(address account, address appointee, address target, bytes4 selector) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppointeeCall {
        pub account: alloy::sol_types::private::Address,
        pub appointee: alloy::sol_types::private::Address,
        pub target: alloy::sol_types::private::Address,
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`setAppointee(address,address,address,bytes4)`](setAppointeeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppointeeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<4>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppointeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: setAppointeeCall) -> Self {
                    (value.account, value.appointee, value.target, value.selector)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAppointeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        appointee: tuple.1,
                        target: tuple.2,
                        selector: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppointeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setAppointeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAppointeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAppointeeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<4>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAppointeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAppointee(address,address,address,bytes4)";
            const SELECTOR: [u8; 4] = [149u8, 13u8, 128u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.appointee,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`PermissionController`](self) function calls.
    pub enum PermissionControllerCalls {
        acceptAdmin(acceptAdminCall),
        addPendingAdmin(addPendingAdminCall),
        canCall(canCallCall),
        getAdmins(getAdminsCall),
        getAppointeePermissions(getAppointeePermissionsCall),
        getAppointees(getAppointeesCall),
        getPendingAdmins(getPendingAdminsCall),
        isAdmin(isAdminCall),
        isPendingAdmin(isPendingAdminCall),
        removeAdmin(removeAdminCall),
        removeAppointee(removeAppointeeCall),
        removePendingAdmin(removePendingAdminCall),
        setAppointee(setAppointeeCall),
    }
    #[automatically_derived]
    impl PermissionControllerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 100u8, 18u8, 1u8],
            [38u8, 137u8, 89u8, 229u8],
            [79u8, 144u8, 108u8, 249u8],
            [98u8, 136u8, 6u8, 239u8],
            [107u8, 221u8, 250u8, 31u8],
            [136u8, 42u8, 59u8, 56u8],
            [145u8, 0u8, 103u8, 69u8],
            [149u8, 13u8, 128u8, 110u8],
            [173u8, 95u8, 34u8, 16u8],
            [173u8, 138u8, 202u8, 119u8],
            [223u8, 89u8, 92u8, 184u8],
            [235u8, 90u8, 78u8, 135u8],
            [253u8, 219u8, 222u8, 253u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PermissionControllerCalls {
        const NAME: &'static str = "PermissionControllerCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::acceptAdmin(_) => <acceptAdminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::addPendingAdmin(_) => {
                    <addPendingAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::canCall(_) => <canCallCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getAdmins(_) => <getAdminsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getAppointeePermissions(_) => {
                    <getAppointeePermissionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppointees(_) => <getAppointeesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getPendingAdmins(_) => {
                    <getPendingAdminsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAdmin(_) => <isAdminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isPendingAdmin(_) => {
                    <isPendingAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeAdmin(_) => <removeAdminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeAppointee(_) => {
                    <removeAppointeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removePendingAdmin(_) => {
                    <removePendingAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAppointee(_) => <setAppointeeCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<PermissionControllerCalls>] = &[
                {
                    fn removeAppointee(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <removeAppointeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::removeAppointee)
                    }
                    removeAppointee
                },
                {
                    fn removeAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <removeAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::removeAdmin)
                    }
                    removeAdmin
                },
                {
                    fn removePendingAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <removePendingAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::removePendingAdmin)
                    }
                    removePendingAdmin
                },
                {
                    fn acceptAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <acceptAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::acceptAdmin)
                    }
                    acceptAdmin
                },
                {
                    fn getPendingAdmins(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <getPendingAdminsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::getPendingAdmins)
                    }
                    getPendingAdmins
                },
                {
                    fn getAppointeePermissions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <getAppointeePermissionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::getAppointeePermissions)
                    }
                    getAppointeePermissions
                },
                {
                    fn isAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <isAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PermissionControllerCalls::isAdmin)
                    }
                    isAdmin
                },
                {
                    fn setAppointee(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <setAppointeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::setAppointee)
                    }
                    setAppointee
                },
                {
                    fn getAdmins(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <getAdminsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PermissionControllerCalls::getAdmins)
                    }
                    getAdmins
                },
                {
                    fn isPendingAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <isPendingAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::isPendingAdmin)
                    }
                    isPendingAdmin
                },
                {
                    fn canCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <canCallCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PermissionControllerCalls::canCall)
                    }
                    canCall
                },
                {
                    fn addPendingAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <addPendingAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::addPendingAdmin)
                    }
                    addPendingAdmin
                },
                {
                    fn getAppointees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerCalls> {
                        <getAppointeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerCalls::getAppointees)
                    }
                    getAppointees
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::acceptAdmin(inner) => {
                    <acceptAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::addPendingAdmin(inner) => {
                    <addPendingAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::canCall(inner) => {
                    <canCallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAdmins(inner) => {
                    <getAdminsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAppointeePermissions(inner) => {
                    <getAppointeePermissionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppointees(inner) => {
                    <getAppointeesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPendingAdmins(inner) => {
                    <getPendingAdminsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAdmin(inner) => {
                    <isAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isPendingAdmin(inner) => {
                    <isPendingAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeAdmin(inner) => {
                    <removeAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeAppointee(inner) => {
                    <removeAppointeeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removePendingAdmin(inner) => {
                    <removePendingAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setAppointee(inner) => {
                    <setAppointeeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::acceptAdmin(inner) => {
                    <acceptAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::addPendingAdmin(inner) => {
                    <addPendingAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::canCall(inner) => {
                    <canCallCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getAdmins(inner) => {
                    <getAdminsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getAppointeePermissions(inner) => {
                    <getAppointeePermissionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::getAppointees(inner) => {
                    <getAppointeesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getPendingAdmins(inner) => {
                    <getPendingAdminsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isAdmin(inner) => {
                    <isAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isPendingAdmin(inner) => {
                    <isPendingAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeAdmin(inner) => {
                    <removeAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeAppointee(inner) => {
                    <removeAppointeeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removePendingAdmin(inner) => {
                    <removePendingAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setAppointee(inner) => {
                    <setAppointeeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`PermissionController`](self) custom errors.
    pub enum PermissionControllerErrors {
        AdminAlreadyPending(AdminAlreadyPending),
        AdminAlreadySet(AdminAlreadySet),
        AdminNotPending(AdminNotPending),
        AdminNotSet(AdminNotSet),
        AppointeeAlreadySet(AppointeeAlreadySet),
        AppointeeNotSet(AppointeeNotSet),
        CannotHaveZeroAdmins(CannotHaveZeroAdmins),
        NotAdmin(NotAdmin),
    }
    #[automatically_derived]
    impl PermissionControllerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [38u8, 33u8, 24u8, 205u8],
            [51u8, 87u8, 219u8, 198u8],
            [123u8, 250u8, 75u8, 159u8],
            [134u8, 116u8, 73u8, 88u8],
            [152u8, 11u8, 7u8, 40u8],
            [173u8, 142u8, 254u8, 183u8],
            [190u8, 216u8, 41u8, 95u8],
            [226u8, 219u8, 3u8, 96u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PermissionControllerErrors {
        const NAME: &'static str = "PermissionControllerErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AdminAlreadyPending(_) => {
                    <AdminAlreadyPending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AdminAlreadySet(_) => {
                    <AdminAlreadySet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AdminNotPending(_) => {
                    <AdminNotPending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AdminNotSet(_) => <AdminNotSet as alloy_sol_types::SolError>::SELECTOR,
                Self::AppointeeAlreadySet(_) => {
                    <AppointeeAlreadySet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AppointeeNotSet(_) => {
                    <AppointeeNotSet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CannotHaveZeroAdmins(_) => {
                    <CannotHaveZeroAdmins as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<PermissionControllerErrors>] = &[
                {
                    fn AppointeeNotSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AppointeeNotSet as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::AppointeeNotSet)
                    }
                    AppointeeNotSet
                },
                {
                    fn AdminAlreadyPending(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AdminAlreadyPending as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::AdminAlreadyPending)
                    }
                    AdminAlreadyPending
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PermissionControllerErrors::NotAdmin)
                    }
                    NotAdmin
                },
                {
                    fn CannotHaveZeroAdmins(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <CannotHaveZeroAdmins as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::CannotHaveZeroAdmins)
                    }
                    CannotHaveZeroAdmins
                },
                {
                    fn AdminAlreadySet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AdminAlreadySet as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::AdminAlreadySet)
                    }
                    AdminAlreadySet
                },
                {
                    fn AppointeeAlreadySet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AppointeeAlreadySet as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::AppointeeAlreadySet)
                    }
                    AppointeeAlreadySet
                },
                {
                    fn AdminNotPending(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AdminNotPending as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PermissionControllerErrors::AdminNotPending)
                    }
                    AdminNotPending
                },
                {
                    fn AdminNotSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PermissionControllerErrors> {
                        <AdminNotSet as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PermissionControllerErrors::AdminNotSet)
                    }
                    AdminNotSet
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AdminAlreadyPending(inner) => {
                    <AdminAlreadyPending as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AdminAlreadySet(inner) => {
                    <AdminAlreadySet as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AdminNotPending(inner) => {
                    <AdminNotPending as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AdminNotSet(inner) => {
                    <AdminNotSet as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AppointeeAlreadySet(inner) => {
                    <AppointeeAlreadySet as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AppointeeNotSet(inner) => {
                    <AppointeeNotSet as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::CannotHaveZeroAdmins(inner) => {
                    <CannotHaveZeroAdmins as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AdminAlreadyPending(inner) => {
                    <AdminAlreadyPending as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::AdminAlreadySet(inner) => {
                    <AdminAlreadySet as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::AdminNotPending(inner) => {
                    <AdminNotPending as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::AdminNotSet(inner) => {
                    <AdminNotSet as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::AppointeeAlreadySet(inner) => {
                    <AppointeeAlreadySet as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::AppointeeNotSet(inner) => {
                    <AppointeeNotSet as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::CannotHaveZeroAdmins(inner) => {
                    <CannotHaveZeroAdmins as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`PermissionController`](self) events.
    pub enum PermissionControllerEvents {
        AdminRemoved(AdminRemoved),
        AdminSet(AdminSet),
        AppointeeRemoved(AppointeeRemoved),
        AppointeeSet(AppointeeSet),
        Initialized(Initialized),
        PendingAdminAdded(PendingAdminAdded),
        PendingAdminRemoved(PendingAdminRemoved),
    }
    #[automatically_derived]
    impl PermissionControllerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                3u8, 127u8, 3u8, 162u8, 173u8, 107u8, 150u8, 125u8, 244u8, 160u8, 23u8, 121u8,
                182u8, 210u8, 180u8, 200u8, 89u8, 80u8, 223u8, 131u8, 146u8, 93u8, 158u8, 49u8,
                54u8, 43u8, 81u8, 148u8, 34u8, 252u8, 1u8, 105u8,
            ],
            [
                24u8, 36u8, 35u8, 38u8, 182u8, 184u8, 98u8, 18u8, 105u8, 112u8, 103u8, 151u8, 89u8,
                22u8, 159u8, 1u8, 246u8, 70u8, 189u8, 85u8, 236u8, 91u8, 252u8, 171u8, 133u8,
                186u8, 159u8, 51u8, 122u8, 116u8, 224u8, 198u8,
            ],
            [
                127u8, 38u8, 184u8, 63u8, 249u8, 110u8, 31u8, 43u8, 106u8, 104u8, 47u8, 19u8, 56u8,
                82u8, 246u8, 121u8, 138u8, 9u8, 196u8, 101u8, 218u8, 149u8, 146u8, 20u8, 96u8,
                206u8, 251u8, 56u8, 71u8, 64u8, 36u8, 152u8,
            ],
            [
                177u8, 75u8, 154u8, 61u8, 68u8, 140u8, 91u8, 4u8, 240u8, 229u8, 176u8, 135u8,
                182u8, 245u8, 25u8, 51u8, 144u8, 219u8, 121u8, 85u8, 72u8, 42u8, 111u8, 251u8,
                132u8, 30u8, 123u8, 59u8, 166u8, 26u8, 70u8, 12u8,
            ],
            [
                191u8, 38u8, 94u8, 131u8, 38u8, 40u8, 90u8, 39u8, 71u8, 227u8, 62u8, 84u8, 213u8,
                148u8, 95u8, 113u8, 17u8, 242u8, 181u8, 237u8, 184u8, 38u8, 235u8, 140u8, 8u8,
                212u8, 103u8, 119u8, 121u8, 179u8, 255u8, 151u8,
            ],
            [
                215u8, 6u8, 237u8, 122u8, 224u8, 68u8, 215u8, 149u8, 180u8, 158u8, 84u8, 201u8,
                245u8, 25u8, 246u8, 99u8, 5u8, 57u8, 81u8, 1u8, 25u8, 133u8, 246u8, 99u8, 168u8,
                98u8, 205u8, 158u8, 231u8, 42u8, 154u8, 199u8,
            ],
            [
                219u8, 157u8, 93u8, 49u8, 50u8, 13u8, 175u8, 91u8, 199u8, 24u8, 29u8, 86u8, 91u8,
                109u8, 164u8, 209u8, 46u8, 48u8, 240u8, 244u8, 213u8, 170u8, 50u8, 74u8, 153u8,
                36u8, 38u8, 193u8, 74u8, 29u8, 25u8, 206u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for PermissionControllerEvents {
        const NAME: &'static str = "PermissionControllerEvents";
        const COUNT: usize = 7usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::AdminRemoved)
                }
                Some(<AdminSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminSet as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::AdminSet)
                }
                Some(<AppointeeRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AppointeeRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::AppointeeRemoved)
                }
                Some(<AppointeeSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AppointeeSet as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::AppointeeSet)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::Initialized)
                }
                Some(<PendingAdminAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PendingAdminAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::PendingAdminAdded)
                }
                Some(<PendingAdminRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PendingAdminRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::PendingAdminRemoved)
                }
                _ => alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                    name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                    log: alloy_sol_types::private::Box::new(
                        alloy_sol_types::private::LogData::new_unchecked(
                            topics.to_vec(),
                            data.to_vec().into(),
                        ),
                    ),
                }),
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for PermissionControllerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::AdminSet(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::AppointeeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::AppointeeSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PendingAdminAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PendingAdminRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AdminSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AppointeeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AppointeeSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PendingAdminAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PendingAdminRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PermissionController`](self) contract instance.

    See the [wrapper's documentation](`PermissionControllerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PermissionControllerInstance<T, P, N> {
        PermissionControllerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<PermissionControllerInstance<T, P, N>>,
    > {
        PermissionControllerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        PermissionControllerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`PermissionController`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`PermissionController`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PermissionControllerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PermissionControllerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PermissionControllerInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PermissionControllerInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`PermissionController`](self) contract instance.

        See the [wrapper's documentation](`PermissionControllerInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<PermissionControllerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PermissionControllerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PermissionControllerInstance<T, P, N> {
            PermissionControllerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PermissionControllerInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`acceptAdmin`] function.
        pub fn acceptAdmin(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, acceptAdminCall, N> {
            self.call_builder(&acceptAdminCall { account })
        }
        ///Creates a new call builder for the [`addPendingAdmin`] function.
        pub fn addPendingAdmin(
            &self,
            account: alloy::sol_types::private::Address,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addPendingAdminCall, N> {
            self.call_builder(&addPendingAdminCall { account, admin })
        }
        ///Creates a new call builder for the [`canCall`] function.
        pub fn canCall(
            &self,
            account: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            target: alloy::sol_types::private::Address,
            selector: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, canCallCall, N> {
            self.call_builder(&canCallCall {
                account,
                caller,
                target,
                selector,
            })
        }
        ///Creates a new call builder for the [`getAdmins`] function.
        pub fn getAdmins(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAdminsCall, N> {
            self.call_builder(&getAdminsCall { account })
        }
        ///Creates a new call builder for the [`getAppointeePermissions`] function.
        pub fn getAppointeePermissions(
            &self,
            account: alloy::sol_types::private::Address,
            appointee: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAppointeePermissionsCall, N> {
            self.call_builder(&getAppointeePermissionsCall { account, appointee })
        }
        ///Creates a new call builder for the [`getAppointees`] function.
        pub fn getAppointees(
            &self,
            account: alloy::sol_types::private::Address,
            target: alloy::sol_types::private::Address,
            selector: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAppointeesCall, N> {
            self.call_builder(&getAppointeesCall {
                account,
                target,
                selector,
            })
        }
        ///Creates a new call builder for the [`getPendingAdmins`] function.
        pub fn getPendingAdmins(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPendingAdminsCall, N> {
            self.call_builder(&getPendingAdminsCall { account })
        }
        ///Creates a new call builder for the [`isAdmin`] function.
        pub fn isAdmin(
            &self,
            account: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAdminCall, N> {
            self.call_builder(&isAdminCall { account, caller })
        }
        ///Creates a new call builder for the [`isPendingAdmin`] function.
        pub fn isPendingAdmin(
            &self,
            account: alloy::sol_types::private::Address,
            pendingAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPendingAdminCall, N> {
            self.call_builder(&isPendingAdminCall {
                account,
                pendingAdmin,
            })
        }
        ///Creates a new call builder for the [`removeAdmin`] function.
        pub fn removeAdmin(
            &self,
            account: alloy::sol_types::private::Address,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeAdminCall, N> {
            self.call_builder(&removeAdminCall { account, admin })
        }
        ///Creates a new call builder for the [`removeAppointee`] function.
        pub fn removeAppointee(
            &self,
            account: alloy::sol_types::private::Address,
            appointee: alloy::sol_types::private::Address,
            target: alloy::sol_types::private::Address,
            selector: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeAppointeeCall, N> {
            self.call_builder(&removeAppointeeCall {
                account,
                appointee,
                target,
                selector,
            })
        }
        ///Creates a new call builder for the [`removePendingAdmin`] function.
        pub fn removePendingAdmin(
            &self,
            account: alloy::sol_types::private::Address,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removePendingAdminCall, N> {
            self.call_builder(&removePendingAdminCall { account, admin })
        }
        ///Creates a new call builder for the [`setAppointee`] function.
        pub fn setAppointee(
            &self,
            account: alloy::sol_types::private::Address,
            appointee: alloy::sol_types::private::Address,
            target: alloy::sol_types::private::Address,
            selector: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAppointeeCall, N> {
            self.call_builder(&setAppointeeCall {
                account,
                appointee,
                target,
                selector,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PermissionControllerInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminRemoved`] event.
        pub fn AdminRemoved_filter(&self) -> alloy_contract::Event<T, &P, AdminRemoved, N> {
            self.event_filter::<AdminRemoved>()
        }
        ///Creates a new event filter for the [`AdminSet`] event.
        pub fn AdminSet_filter(&self) -> alloy_contract::Event<T, &P, AdminSet, N> {
            self.event_filter::<AdminSet>()
        }
        ///Creates a new event filter for the [`AppointeeRemoved`] event.
        pub fn AppointeeRemoved_filter(&self) -> alloy_contract::Event<T, &P, AppointeeRemoved, N> {
            self.event_filter::<AppointeeRemoved>()
        }
        ///Creates a new event filter for the [`AppointeeSet`] event.
        pub fn AppointeeSet_filter(&self) -> alloy_contract::Event<T, &P, AppointeeSet, N> {
            self.event_filter::<AppointeeSet>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`PendingAdminAdded`] event.
        pub fn PendingAdminAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PendingAdminAdded, N> {
            self.event_filter::<PendingAdminAdded>()
        }
        ///Creates a new event filter for the [`PendingAdminRemoved`] event.
        pub fn PendingAdminRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PendingAdminRemoved, N> {
            self.event_filter::<PendingAdminRemoved>()
        }
    }
}
