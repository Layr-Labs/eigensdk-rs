/**

Generated by the following Solidity interface...
```solidity
interface UpdateOperators {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod UpdateOperators {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c80546201000162ff00ff19909116179055600f80546001600160a01b031916735fbdb2315678afecb367f032d93f642f64180aa317905534801561004957600080fd5b50611825806100596000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630a9254e414610046578063c040622614610050578063f8ccbf4714610058575b600080fd5b61004e61007f565b005b61004e61016e565b600c5461006b9062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610095575046610539145b156100ca576040518060600160405280603b8152602001611791603b913980516100c791600d916020909101906112a2565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa158015610132573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261015a91908101906113f1565b80516100c791600d916020909101906112a2565b60006101786107cc565b90506000610184610a49565b90506000600e5467ffffffffffffffff8111156101a3576101a361133b565b6040519080825280602002602001820160405280156101cc578160200160208202803683370190505b5090506000600e5467ffffffffffffffff8111156101ec576101ec61133b565b604051908082528060200260200182016040528015610215578160200160208202803683370190505b5090506000600e5467ffffffffffffffff8111156102355761023561133b565b60405190808252806020026020018201604052801561025e578160200160208202803683370190505b50905060005b600e548110156103da576000610304600d80546102809061143a565b80601f01602080910402602001604051908101604052809291908181526020018280546102ac9061143a565b80156102f95780601f106102ce576101008083540402835291602001916102f9565b820191906000526020600020905b8154815290600101906020018083116102dc57829003601f168201915b505050505083610ad0565b5090508085838151811061031a5761031a611475565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f4000084838151811061035557610355611475565b6020026020010181815250506103aa8260001b60405160200161037a91815260200190565b6040516020818303038152906040528051906020012060001c670de0b6b3a7640000678ac7230489e80000610bd1565b8383815181106103bc576103bc611475565b602090810291909101015250806103d2816114a1565b915050610264565b5060008051602061177183398151915260001c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b5050505061044b60008484610c15565b8351610458908483610c15565b60008051602061177183398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104a457600080fd5b505af11580156104b8573d6000803e3d6000fd5b5050505060005b600e548110156107c457600080607890506000610566600d80546104e29061143a565b80601f016020809104026020016040519081016040528092919081815260200182805461050e9061143a565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505085610ad0565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d4790602401600060405180830381600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b5050600f5460405163566add5160e11b815260806004820152601c60848201527f746573745f6d6f646966795f6f70657261746f725f64657461696c730000000060a4820152602481018890524360448201524260648201526001600160a01b03909116925063acd5baa2915060c401600060405180830381600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b5050505088606001516001600160a01b031663f16172b060405180606001604052808a888151811061069d5761069d611475565b60200260200101516001600160a01b03168152602001866001600160a01b031681526020018563ffffffff168152506040518263ffffffff1660e01b8152600401610718919081516001600160a01b0390811682526020808401519091169082015260409182015163ffffffff169181019190915260600190565b600060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b5050505060008051602061177183398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561079657600080fd5b505af11580156107aa573d6000803e3d6000fd5b5050505050505080806107bc906114a1565b9150506104bf565b505050505050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600061084d6040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610d71565b90506000610890826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250610f74565b905060006108d3836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250610f74565b90506000610916846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250610f74565b9050600061095185604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250610f74565b90506000610994866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250610f74565b905060006109cc87604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250610f74565b905060006109f28860405180606001604052806025815260200161174c60259139610f74565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a0830152600060c083015290911660e082015292915050565b60408051808201909152600080825260208201526000610a806040518060600160405280602481526020016117cc60249139610d71565b90506000610ab0826040518060400160405280600a8152602001692e61646472657373657360b01b815250610ff1565b9050600081806020019051810190610ac891906114d1565b949350505050565b604051636229498b60e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610b0e908790879060040161155c565b602060405180830381865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f9190611584565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303816000875af1158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061159d565b91509250929050565b6000610bde848484611072565b9050610c0e6040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b81525082611234565b9392505050565b60005b8251811015610d6b576001600160a01b038416610ca057828181518110610c4157610c41611475565b60200260200101516001600160a01b03166108fc838381518110610c6757610c67611475565b60200260200101519081150290604051600060405180830381858888f19350505050158015610c9a573d6000803e3d6000fd5b50610d59565b836001600160a01b031663a9059cbb848381518110610cc157610cc1611475565b6020026020010151848481518110610cdb57610cdb611475565b60200260200101516040518363ffffffff1660e01b8152600401610d149291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906115ba565b505b80610d63816114a1565b915050610c18565b50505050565b6060600060008051602061177183398151915260001c6001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dec91908101906113f1565b604051602001610dfc91906115dc565b60408051808303601f190181529082905263348051d760e11b82524660048301529150600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae90602401600060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8691908101906113f1565b604051602001610e96919061160f565b6040516020818303038152906040529050600084604051602001610eba9190611634565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610efb9086908690869060200161165d565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610f2691906116a0565b600060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6b91908101906113f1565b95945050505050565b604051631e19e65760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e65790610fb090869086906004016116b3565b602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061159d565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef19061102d90869086906004016116b3565b600060405180830381865afa15801561104a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0e91908101906113f1565b6000818311156110ee5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156110fe5750818411155b1561110a575082610c0e565b600061111684846116d8565b6111219060016116ef565b90506003851115801561113357508481115b1561114a5761114285856116ef565b915050610c0e565b61115760036000196116d8565b8510158015611170575061116d856000196116d8565b81115b1561118b57611181856000196116d8565b61114290846116d8565b828511156111de57600061119f84876116d8565b905060006111ad8383611707565b9050806111bf57849350505050610c0e565b60016111cb82886116ef565b6111d591906116d8565b9350505061122c565b8385101561122c5760006111f286866116d8565b905060006112008383611707565b90508061121257859350505050610c0e565b61121c81866116d8565b6112279060016116ef565b935050505b509392505050565b611279828260405160240161124a929190611729565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261127d565b5050565b6100c78180516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546112ae9061143a565b90600052602060002090601f0160209004810192826112d05760008555611316565b82601f106112e957805160ff1916838001178555611316565b82800160010185558215611316579182015b828111156113165782518255916020019190600101906112fb565b50611322929150611326565b5090565b5b808211156113225760008155600101611327565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561136c578181015183820152602001611354565b83811115610d6b5750506000910152565b600067ffffffffffffffff808411156113985761139861133b565b604051601f8501601f19908116603f011681019082821181831017156113c0576113c061133b565b816040528093508581528686860111156113d957600080fd5b6113e7866020830187611351565b5050509392505050565b60006020828403121561140357600080fd5b815167ffffffffffffffff81111561141a57600080fd5b8201601f8101841361142b57600080fd5b610ac88482516020840161137d565b600181811c9082168061144e57607f821691505b6020821081141561146f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156114b5576114b561148b565b5060010190565b6001600160a01b03811681146100c757600080fd5b6000604082840312156114e357600080fd5b6040516040810181811067ffffffffffffffff821117156115065761150661133b565b6040528251611514816114bc565b81526020830151611524816114bc565b60208201529392505050565b60008151808452611548816020860160208601611351565b601f01601f19169290920160200192915050565b60408152600061156f6040830185611530565b905063ffffffff831660208301529392505050565b60006020828403121561159657600080fd5b5051919050565b6000602082840312156115af57600080fd5b8151610c0e816114bc565b6000602082840312156115cc57600080fd5b81518015158114610c0e57600080fd5b600082516115ee818460208701611351565b6e2f7363726970742f6f75747075742f60881b920191825250600f01919050565b60008251611621818460208701611351565b602f60f81b920191825250600101919050565b60008251611646818460208701611351565b64173539b7b760d91b920191825250600501919050565b6000845161166f818460208901611351565b845190830190611683818360208901611351565b8451910190611696818360208801611351565b0195945050505050565b602081526000610c0e6020830184611530565b6040815260006116c66040830185611530565b8281036020840152610f6b8185611530565b6000828210156116ea576116ea61148b565b500390565b600082198211156117025761170261148b565b500190565b60008261172457634e487b7160e01b600052601260045260246000fd5b500690565b60408152600061173c6040830185611530565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220c6186b5403cb1099c5f0c4348d42857247c79fbbe78ad228b8223eadc0e3008e64736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\x01\0\x01b\xFF\0\xFF\x19\x90\x91\x16\x17\x90U`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16s_\xBD\xB21Vx\xAF\xEC\xB3g\xF02\xD9?d/d\x18\n\xA3\x17\x90U4\x80\x15a\0IW`\0\x80\xFD[Pa\x18%\x80a\0Y`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\n\x92T\xE4\x14a\0FW\x80c\xC0@b&\x14a\0PW\x80c\xF8\xCC\xBFG\x14a\0XW[`\0\x80\xFD[a\0Na\0\x7FV[\0[a\0Na\x01nV[`\x0CTa\0k\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x95WPFa\x059\x14[\x15a\0\xCAW`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x17\x91`;\x919\x80Qa\0\xC7\x91`\r\x91` \x90\x91\x01\x90a\x12\xA2V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x012W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01Z\x91\x90\x81\x01\x90a\x13\xF1V[\x80Qa\0\xC7\x91`\r\x91` \x90\x91\x01\x90a\x12\xA2V[`\0a\x01xa\x07\xCCV[\x90P`\0a\x01\x84a\nIV[\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xA3Wa\x01\xA3a\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xCCW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xECWa\x01\xECa\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\x15W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x025Wa\x025a\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02^W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[`\x0ET\x81\x10\x15a\x03\xDAW`\0a\x03\x04`\r\x80Ta\x02\x80\x90a\x14:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xAC\x90a\x14:V[\x80\x15a\x02\xF9W\x80`\x1F\x10a\x02\xCEWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xF9V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xDCW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\n\xD0V[P\x90P\x80\x85\x83\x81Q\x81\x10a\x03\x1AWa\x03\x1Aa\x14uV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x03UWa\x03Ua\x14uV[` \x02` \x01\x01\x81\x81RPPa\x03\xAA\x82`\0\x1B`@Q` \x01a\x03z\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\0\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0B\xD1V[\x83\x83\x81Q\x81\x10a\x03\xBCWa\x03\xBCa\x14uV[` \x90\x81\x02\x91\x90\x91\x01\x01RP\x80a\x03\xD2\x81a\x14\xA1V[\x91PPa\x02dV[P`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04'W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04;W=`\0\x80>=`\0\xFD[PPPPa\x04K`\0\x84\x84a\x0C\x15V[\x83Qa\x04X\x90\x84\x83a\x0C\x15V[`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04\xA4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB8W=`\0\x80>=`\0\xFD[PPPP`\0[`\x0ET\x81\x10\x15a\x07\xC4W`\0\x80`x\x90P`\0a\x05f`\r\x80Ta\x04\xE2\x90a\x14:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\x0E\x90a\x14:V[\x80\x15a\x05[W\x80`\x1F\x10a\x050Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05[V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05>W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x85a\n\xD0V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\xB7W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xCBW=`\0\x80>=`\0\xFD[PP`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x1C`\x84\x82\x01R\x7Ftest_modify_operator_details\0\0\0\0`\xA4\x82\x01R`$\x81\x01\x88\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xAC\xD5\xBA\xA2\x91P`\xC4\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06UW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06iW=`\0\x80>=`\0\xFD[PPPP\x88``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xF1ar\xB0`@Q\x80``\x01`@R\x80\x8A\x88\x81Q\x81\x10a\x06\x9DWa\x06\x9Da\x14uV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85c\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x18\x91\x90\x81Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x84\x01Q\x90\x91\x16\x90\x82\x01R`@\x91\x82\x01Qc\xFF\xFF\xFF\xFF\x16\x91\x81\x01\x91\x90\x91R``\x01\x90V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x072W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07FW=`\0\x80>=`\0\xFD[PPPP`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x07\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xAAW=`\0\x80>=`\0\xFD[PPPPPPP\x80\x80a\x07\xBC\x90a\x14\xA1V[\x91PPa\x04\xBFV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\0a\x08M`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\rqV[\x90P`\0a\x08\x90\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x0FtV[\x90P`\0a\x08\xD3\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x0FtV[\x90P`\0a\t\x16\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x0FtV[\x90P`\0a\tQ\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x0FtV[\x90P`\0a\t\x94\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x0FtV[\x90P`\0a\t\xCC\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x0FtV[\x90P`\0a\t\xF2\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x17L`%\x919a\x0FtV[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R`\0`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01R`\0a\n\x80`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x17\xCC`$\x919a\rqV[\x90P`\0a\n\xB0\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x0F\xF1V[\x90P`\0\x81\x80` \x01\x90Q\x81\x01\x90a\n\xC8\x91\x90a\x14\xD1V[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x0B\x0E\x90\x87\x90\x87\x90`\x04\x01a\x15\\V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B+W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0BO\x91\x90a\x15\x84V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0B\xA4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xC8\x91\x90a\x15\x9DV[\x91P\x92P\x92\x90PV[`\0a\x0B\xDE\x84\x84\x84a\x10rV[\x90Pa\x0C\x0E`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x124V[\x93\x92PPPV[`\0[\x82Q\x81\x10\x15a\rkW`\x01`\x01`\xA0\x1B\x03\x84\x16a\x0C\xA0W\x82\x81\x81Q\x81\x10a\x0CAWa\x0CAa\x14uV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\x0CgWa\x0Cga\x14uV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q`\0`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0C\x9AW=`\0\x80>=`\0\xFD[Pa\rYV[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\x0C\xC1Wa\x0C\xC1a\x14uV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x0C\xDBWa\x0C\xDBa\x14uV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\x14\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\r3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\rW\x91\x90a\x15\xBAV[P[\x80a\rc\x81a\x14\xA1V[\x91PPa\x0C\x18V[PPPPV[```\0`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xC4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xEC\x91\x90\x81\x01\x90a\x13\xF1V[`@Q` \x01a\r\xFC\x91\x90a\x15\xDCV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E^W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\x86\x91\x90\x81\x01\x90a\x13\xF1V[`@Q` \x01a\x0E\x96\x91\x90a\x16\x0FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0\x84`@Q` \x01a\x0E\xBA\x91\x90a\x164V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0E\xFB\x90\x86\x90\x86\x90\x86\x90` \x01a\x16]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F&\x91\x90a\x16\xA0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0FCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0Fk\x91\x90\x81\x01\x90a\x13\xF1V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x0F\xB0\x90\x86\x90\x86\x90`\x04\x01a\x16\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xCDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x0E\x91\x90a\x15\x9DV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x10-\x90\x86\x90\x86\x90`\x04\x01a\x16\xB3V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10JW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0C\x0E\x91\x90\x81\x01\x90a\x13\xF1V[`\0\x81\x83\x11\x15a\x10\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x10\xFEWP\x81\x84\x11\x15[\x15a\x11\nWP\x82a\x0C\x0EV[`\0a\x11\x16\x84\x84a\x16\xD8V[a\x11!\x90`\x01a\x16\xEFV[\x90P`\x03\x85\x11\x15\x80\x15a\x113WP\x84\x81\x11[\x15a\x11JWa\x11B\x85\x85a\x16\xEFV[\x91PPa\x0C\x0EV[a\x11W`\x03`\0\x19a\x16\xD8V[\x85\x10\x15\x80\x15a\x11pWPa\x11m\x85`\0\x19a\x16\xD8V[\x81\x11[\x15a\x11\x8BWa\x11\x81\x85`\0\x19a\x16\xD8V[a\x11B\x90\x84a\x16\xD8V[\x82\x85\x11\x15a\x11\xDEW`\0a\x11\x9F\x84\x87a\x16\xD8V[\x90P`\0a\x11\xAD\x83\x83a\x17\x07V[\x90P\x80a\x11\xBFW\x84\x93PPPPa\x0C\x0EV[`\x01a\x11\xCB\x82\x88a\x16\xEFV[a\x11\xD5\x91\x90a\x16\xD8V[\x93PPPa\x12,V[\x83\x85\x10\x15a\x12,W`\0a\x11\xF2\x86\x86a\x16\xD8V[\x90P`\0a\x12\0\x83\x83a\x17\x07V[\x90P\x80a\x12\x12W\x85\x93PPPPa\x0C\x0EV[a\x12\x1C\x81\x86a\x16\xD8V[a\x12'\x90`\x01a\x16\xEFV[\x93PPP[P\x93\x92PPPV[a\x12y\x82\x82`@Q`$\x01a\x12J\x92\x91\x90a\x17)V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x12}V[PPV[a\0\xC7\x81\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[\x82\x80Ta\x12\xAE\x90a\x14:V[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82a\x12\xD0W`\0\x85Ua\x13\x16V[\x82`\x1F\x10a\x12\xE9W\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ua\x13\x16V[\x82\x80\x01`\x01\x01\x85U\x82\x15a\x13\x16W\x91\x82\x01[\x82\x81\x11\x15a\x13\x16W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x12\xFBV[Pa\x13\"\x92\x91Pa\x13&V[P\x90V[[\x80\x82\x11\x15a\x13\"W`\0\x81U`\x01\x01a\x13'V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a\x13lW\x81\x81\x01Q\x83\x82\x01R` \x01a\x13TV[\x83\x81\x11\x15a\rkWPP`\0\x91\x01RV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x11\x15a\x13\x98Wa\x13\x98a\x13;V[`@Q`\x1F\x85\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x13\xC0Wa\x13\xC0a\x13;V[\x81`@R\x80\x93P\x85\x81R\x86\x86\x86\x01\x11\x15a\x13\xD9W`\0\x80\xFD[a\x13\xE7\x86` \x83\x01\x87a\x13QV[PPP\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x14\x03W`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x1AW`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x14+W`\0\x80\xFD[a\n\xC8\x84\x82Q` \x84\x01a\x13}V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x14NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\x14oWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x14\xB5Wa\x14\xB5a\x14\x8BV[P`\x01\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xC7W`\0\x80\xFD[`\0`@\x82\x84\x03\x12\x15a\x14\xE3W`\0\x80\xFD[`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x15\x06Wa\x15\x06a\x13;V[`@R\x82Qa\x15\x14\x81a\x14\xBCV[\x81R` \x83\x01Qa\x15$\x81a\x14\xBCV[` \x82\x01R\x93\x92PPPV[`\0\x81Q\x80\x84Ra\x15H\x81` \x86\x01` \x86\x01a\x13QV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\x15o`@\x83\x01\x85a\x150V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x15\x96W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x15\xAFW`\0\x80\xFD[\x81Qa\x0C\x0E\x81a\x14\xBCV[`\0` \x82\x84\x03\x12\x15a\x15\xCCW`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\x0EW`\0\x80\xFD[`\0\x82Qa\x15\xEE\x81\x84` \x87\x01a\x13QV[n/script/output/`\x88\x1B\x92\x01\x91\x82RP`\x0F\x01\x91\x90PV[`\0\x82Qa\x16!\x81\x84` \x87\x01a\x13QV[`/`\xF8\x1B\x92\x01\x91\x82RP`\x01\x01\x91\x90PV[`\0\x82Qa\x16F\x81\x84` \x87\x01a\x13QV[d\x1759\xB7\xB7`\xD9\x1B\x92\x01\x91\x82RP`\x05\x01\x91\x90PV[`\0\x84Qa\x16o\x81\x84` \x89\x01a\x13QV[\x84Q\x90\x83\x01\x90a\x16\x83\x81\x83` \x89\x01a\x13QV[\x84Q\x91\x01\x90a\x16\x96\x81\x83` \x88\x01a\x13QV[\x01\x95\x94PPPPPV[` \x81R`\0a\x0C\x0E` \x83\x01\x84a\x150V[`@\x81R`\0a\x16\xC6`@\x83\x01\x85a\x150V[\x82\x81\x03` \x84\x01Ra\x0Fk\x81\x85a\x150V[`\0\x82\x82\x10\x15a\x16\xEAWa\x16\xEAa\x14\x8BV[P\x03\x90V[`\0\x82\x19\x82\x11\x15a\x17\x02Wa\x17\x02a\x14\x8BV[P\x01\x90V[`\0\x82a\x17$WcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`@\x81R`\0a\x17<`@\x83\x01\x85a\x150V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 \xC6\x18kT\x03\xCB\x10\x99\xC5\xF0\xC44\x8DB\x85rG\xC7\x9F\xBB\xE7\x8A\xD2(\xB8\">\xAD\xC0\xE3\0\x8EdsolcC\0\x08\x0C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630a9254e414610046578063c040622614610050578063f8ccbf4714610058575b600080fd5b61004e61007f565b005b61004e61016e565b600c5461006b9062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610095575046610539145b156100ca576040518060600160405280603b8152602001611791603b913980516100c791600d916020909101906112a2565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa158015610132573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261015a91908101906113f1565b80516100c791600d916020909101906112a2565b60006101786107cc565b90506000610184610a49565b90506000600e5467ffffffffffffffff8111156101a3576101a361133b565b6040519080825280602002602001820160405280156101cc578160200160208202803683370190505b5090506000600e5467ffffffffffffffff8111156101ec576101ec61133b565b604051908082528060200260200182016040528015610215578160200160208202803683370190505b5090506000600e5467ffffffffffffffff8111156102355761023561133b565b60405190808252806020026020018201604052801561025e578160200160208202803683370190505b50905060005b600e548110156103da576000610304600d80546102809061143a565b80601f01602080910402602001604051908101604052809291908181526020018280546102ac9061143a565b80156102f95780601f106102ce576101008083540402835291602001916102f9565b820191906000526020600020905b8154815290600101906020018083116102dc57829003601f168201915b505050505083610ad0565b5090508085838151811061031a5761031a611475565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f4000084838151811061035557610355611475565b6020026020010181815250506103aa8260001b60405160200161037a91815260200190565b6040516020818303038152906040528051906020012060001c670de0b6b3a7640000678ac7230489e80000610bd1565b8383815181106103bc576103bc611475565b602090810291909101015250806103d2816114a1565b915050610264565b5060008051602061177183398151915260001c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b5050505061044b60008484610c15565b8351610458908483610c15565b60008051602061177183398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104a457600080fd5b505af11580156104b8573d6000803e3d6000fd5b5050505060005b600e548110156107c457600080607890506000610566600d80546104e29061143a565b80601f016020809104026020016040519081016040528092919081815260200182805461050e9061143a565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505085610ad0565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d4790602401600060405180830381600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b5050600f5460405163566add5160e11b815260806004820152601c60848201527f746573745f6d6f646966795f6f70657261746f725f64657461696c730000000060a4820152602481018890524360448201524260648201526001600160a01b03909116925063acd5baa2915060c401600060405180830381600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b5050505088606001516001600160a01b031663f16172b060405180606001604052808a888151811061069d5761069d611475565b60200260200101516001600160a01b03168152602001866001600160a01b031681526020018563ffffffff168152506040518263ffffffff1660e01b8152600401610718919081516001600160a01b0390811682526020808401519091169082015260409182015163ffffffff169181019190915260600190565b600060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b5050505060008051602061177183398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561079657600080fd5b505af11580156107aa573d6000803e3d6000fd5b5050505050505080806107bc906114a1565b9150506104bf565b505050505050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600061084d6040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610d71565b90506000610890826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250610f74565b905060006108d3836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250610f74565b90506000610916846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250610f74565b9050600061095185604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250610f74565b90506000610994866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250610f74565b905060006109cc87604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250610f74565b905060006109f28860405180606001604052806025815260200161174c60259139610f74565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a0830152600060c083015290911660e082015292915050565b60408051808201909152600080825260208201526000610a806040518060600160405280602481526020016117cc60249139610d71565b90506000610ab0826040518060400160405280600a8152602001692e61646472657373657360b01b815250610ff1565b9050600081806020019051810190610ac891906114d1565b949350505050565b604051636229498b60e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610b0e908790879060040161155c565b602060405180830381865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f9190611584565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303816000875af1158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061159d565b91509250929050565b6000610bde848484611072565b9050610c0e6040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b81525082611234565b9392505050565b60005b8251811015610d6b576001600160a01b038416610ca057828181518110610c4157610c41611475565b60200260200101516001600160a01b03166108fc838381518110610c6757610c67611475565b60200260200101519081150290604051600060405180830381858888f19350505050158015610c9a573d6000803e3d6000fd5b50610d59565b836001600160a01b031663a9059cbb848381518110610cc157610cc1611475565b6020026020010151848481518110610cdb57610cdb611475565b60200260200101516040518363ffffffff1660e01b8152600401610d149291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906115ba565b505b80610d63816114a1565b915050610c18565b50505050565b6060600060008051602061177183398151915260001c6001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dec91908101906113f1565b604051602001610dfc91906115dc565b60408051808303601f190181529082905263348051d760e11b82524660048301529150600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae90602401600060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8691908101906113f1565b604051602001610e96919061160f565b6040516020818303038152906040529050600084604051602001610eba9190611634565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610efb9086908690869060200161165d565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610f2691906116a0565b600060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6b91908101906113f1565b95945050505050565b604051631e19e65760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e65790610fb090869086906004016116b3565b602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061159d565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef19061102d90869086906004016116b3565b600060405180830381865afa15801561104a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0e91908101906113f1565b6000818311156110ee5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156110fe5750818411155b1561110a575082610c0e565b600061111684846116d8565b6111219060016116ef565b90506003851115801561113357508481115b1561114a5761114285856116ef565b915050610c0e565b61115760036000196116d8565b8510158015611170575061116d856000196116d8565b81115b1561118b57611181856000196116d8565b61114290846116d8565b828511156111de57600061119f84876116d8565b905060006111ad8383611707565b9050806111bf57849350505050610c0e565b60016111cb82886116ef565b6111d591906116d8565b9350505061122c565b8385101561122c5760006111f286866116d8565b905060006112008383611707565b90508061121257859350505050610c0e565b61121c81866116d8565b6112279060016116ef565b935050505b509392505050565b611279828260405160240161124a929190611729565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261127d565b5050565b6100c78180516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546112ae9061143a565b90600052602060002090601f0160209004810192826112d05760008555611316565b82601f106112e957805160ff1916838001178555611316565b82800160010185558215611316579182015b828111156113165782518255916020019190600101906112fb565b50611322929150611326565b5090565b5b808211156113225760008155600101611327565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561136c578181015183820152602001611354565b83811115610d6b5750506000910152565b600067ffffffffffffffff808411156113985761139861133b565b604051601f8501601f19908116603f011681019082821181831017156113c0576113c061133b565b816040528093508581528686860111156113d957600080fd5b6113e7866020830187611351565b5050509392505050565b60006020828403121561140357600080fd5b815167ffffffffffffffff81111561141a57600080fd5b8201601f8101841361142b57600080fd5b610ac88482516020840161137d565b600181811c9082168061144e57607f821691505b6020821081141561146f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156114b5576114b561148b565b5060010190565b6001600160a01b03811681146100c757600080fd5b6000604082840312156114e357600080fd5b6040516040810181811067ffffffffffffffff821117156115065761150661133b565b6040528251611514816114bc565b81526020830151611524816114bc565b60208201529392505050565b60008151808452611548816020860160208601611351565b601f01601f19169290920160200192915050565b60408152600061156f6040830185611530565b905063ffffffff831660208301529392505050565b60006020828403121561159657600080fd5b5051919050565b6000602082840312156115af57600080fd5b8151610c0e816114bc565b6000602082840312156115cc57600080fd5b81518015158114610c0e57600080fd5b600082516115ee818460208701611351565b6e2f7363726970742f6f75747075742f60881b920191825250600f01919050565b60008251611621818460208701611351565b602f60f81b920191825250600101919050565b60008251611646818460208701611351565b64173539b7b760d91b920191825250600501919050565b6000845161166f818460208901611351565b845190830190611683818360208901611351565b8451910190611696818360208801611351565b0195945050505050565b602081526000610c0e6020830184611530565b6040815260006116c66040830185611530565b8281036020840152610f6b8185611530565b6000828210156116ea576116ea61148b565b500390565b600082198211156117025761170261148b565b500190565b60008261172457634e487b7160e01b600052601260045260246000fd5b500690565b60408152600061173c6040830185611530565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220c6186b5403cb1099c5f0c4348d42857247c79fbbe78ad228b8223eadc0e3008e64736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\n\x92T\xE4\x14a\0FW\x80c\xC0@b&\x14a\0PW\x80c\xF8\xCC\xBFG\x14a\0XW[`\0\x80\xFD[a\0Na\0\x7FV[\0[a\0Na\x01nV[`\x0CTa\0k\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x95WPFa\x059\x14[\x15a\0\xCAW`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x17\x91`;\x919\x80Qa\0\xC7\x91`\r\x91` \x90\x91\x01\x90a\x12\xA2V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x012W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01Z\x91\x90\x81\x01\x90a\x13\xF1V[\x80Qa\0\xC7\x91`\r\x91` \x90\x91\x01\x90a\x12\xA2V[`\0a\x01xa\x07\xCCV[\x90P`\0a\x01\x84a\nIV[\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xA3Wa\x01\xA3a\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xCCW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xECWa\x01\xECa\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\x15W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x025Wa\x025a\x13;V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02^W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[`\x0ET\x81\x10\x15a\x03\xDAW`\0a\x03\x04`\r\x80Ta\x02\x80\x90a\x14:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xAC\x90a\x14:V[\x80\x15a\x02\xF9W\x80`\x1F\x10a\x02\xCEWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xF9V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xDCW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\n\xD0V[P\x90P\x80\x85\x83\x81Q\x81\x10a\x03\x1AWa\x03\x1Aa\x14uV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x03UWa\x03Ua\x14uV[` \x02` \x01\x01\x81\x81RPPa\x03\xAA\x82`\0\x1B`@Q` \x01a\x03z\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\0\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0B\xD1V[\x83\x83\x81Q\x81\x10a\x03\xBCWa\x03\xBCa\x14uV[` \x90\x81\x02\x91\x90\x91\x01\x01RP\x80a\x03\xD2\x81a\x14\xA1V[\x91PPa\x02dV[P`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04'W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04;W=`\0\x80>=`\0\xFD[PPPPa\x04K`\0\x84\x84a\x0C\x15V[\x83Qa\x04X\x90\x84\x83a\x0C\x15V[`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04\xA4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB8W=`\0\x80>=`\0\xFD[PPPP`\0[`\x0ET\x81\x10\x15a\x07\xC4W`\0\x80`x\x90P`\0a\x05f`\r\x80Ta\x04\xE2\x90a\x14:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\x0E\x90a\x14:V[\x80\x15a\x05[W\x80`\x1F\x10a\x050Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05[V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05>W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x85a\n\xD0V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\xB7W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xCBW=`\0\x80>=`\0\xFD[PP`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x1C`\x84\x82\x01R\x7Ftest_modify_operator_details\0\0\0\0`\xA4\x82\x01R`$\x81\x01\x88\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xAC\xD5\xBA\xA2\x91P`\xC4\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06UW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06iW=`\0\x80>=`\0\xFD[PPPP\x88``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xF1ar\xB0`@Q\x80``\x01`@R\x80\x8A\x88\x81Q\x81\x10a\x06\x9DWa\x06\x9Da\x14uV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85c\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x18\x91\x90\x81Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x84\x01Q\x90\x91\x16\x90\x82\x01R`@\x91\x82\x01Qc\xFF\xFF\xFF\xFF\x16\x91\x81\x01\x91\x90\x91R``\x01\x90V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x072W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07FW=`\0\x80>=`\0\xFD[PPPP`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x07\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xAAW=`\0\x80>=`\0\xFD[PPPPPPP\x80\x80a\x07\xBC\x90a\x14\xA1V[\x91PPa\x04\xBFV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\0a\x08M`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\rqV[\x90P`\0a\x08\x90\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x0FtV[\x90P`\0a\x08\xD3\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x0FtV[\x90P`\0a\t\x16\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x0FtV[\x90P`\0a\tQ\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x0FtV[\x90P`\0a\t\x94\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x0FtV[\x90P`\0a\t\xCC\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x0FtV[\x90P`\0a\t\xF2\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x17L`%\x919a\x0FtV[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R`\0`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01R`\0a\n\x80`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x17\xCC`$\x919a\rqV[\x90P`\0a\n\xB0\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x0F\xF1V[\x90P`\0\x81\x80` \x01\x90Q\x81\x01\x90a\n\xC8\x91\x90a\x14\xD1V[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x0B\x0E\x90\x87\x90\x87\x90`\x04\x01a\x15\\V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B+W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0BO\x91\x90a\x15\x84V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0B\xA4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xC8\x91\x90a\x15\x9DV[\x91P\x92P\x92\x90PV[`\0a\x0B\xDE\x84\x84\x84a\x10rV[\x90Pa\x0C\x0E`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x124V[\x93\x92PPPV[`\0[\x82Q\x81\x10\x15a\rkW`\x01`\x01`\xA0\x1B\x03\x84\x16a\x0C\xA0W\x82\x81\x81Q\x81\x10a\x0CAWa\x0CAa\x14uV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\x0CgWa\x0Cga\x14uV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q`\0`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0C\x9AW=`\0\x80>=`\0\xFD[Pa\rYV[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\x0C\xC1Wa\x0C\xC1a\x14uV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x0C\xDBWa\x0C\xDBa\x14uV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\x14\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\r3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\rW\x91\x90a\x15\xBAV[P[\x80a\rc\x81a\x14\xA1V[\x91PPa\x0C\x18V[PPPPV[```\0`\0\x80Q` a\x17q\x839\x81Q\x91R`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xC4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xEC\x91\x90\x81\x01\x90a\x13\xF1V[`@Q` \x01a\r\xFC\x91\x90a\x15\xDCV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E^W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\x86\x91\x90\x81\x01\x90a\x13\xF1V[`@Q` \x01a\x0E\x96\x91\x90a\x16\x0FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0\x84`@Q` \x01a\x0E\xBA\x91\x90a\x164V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0E\xFB\x90\x86\x90\x86\x90\x86\x90` \x01a\x16]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F&\x91\x90a\x16\xA0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0FCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0Fk\x91\x90\x81\x01\x90a\x13\xF1V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x0F\xB0\x90\x86\x90\x86\x90`\x04\x01a\x16\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xCDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x0E\x91\x90a\x15\x9DV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x10-\x90\x86\x90\x86\x90`\x04\x01a\x16\xB3V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10JW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0C\x0E\x91\x90\x81\x01\x90a\x13\xF1V[`\0\x81\x83\x11\x15a\x10\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x10\xFEWP\x81\x84\x11\x15[\x15a\x11\nWP\x82a\x0C\x0EV[`\0a\x11\x16\x84\x84a\x16\xD8V[a\x11!\x90`\x01a\x16\xEFV[\x90P`\x03\x85\x11\x15\x80\x15a\x113WP\x84\x81\x11[\x15a\x11JWa\x11B\x85\x85a\x16\xEFV[\x91PPa\x0C\x0EV[a\x11W`\x03`\0\x19a\x16\xD8V[\x85\x10\x15\x80\x15a\x11pWPa\x11m\x85`\0\x19a\x16\xD8V[\x81\x11[\x15a\x11\x8BWa\x11\x81\x85`\0\x19a\x16\xD8V[a\x11B\x90\x84a\x16\xD8V[\x82\x85\x11\x15a\x11\xDEW`\0a\x11\x9F\x84\x87a\x16\xD8V[\x90P`\0a\x11\xAD\x83\x83a\x17\x07V[\x90P\x80a\x11\xBFW\x84\x93PPPPa\x0C\x0EV[`\x01a\x11\xCB\x82\x88a\x16\xEFV[a\x11\xD5\x91\x90a\x16\xD8V[\x93PPPa\x12,V[\x83\x85\x10\x15a\x12,W`\0a\x11\xF2\x86\x86a\x16\xD8V[\x90P`\0a\x12\0\x83\x83a\x17\x07V[\x90P\x80a\x12\x12W\x85\x93PPPPa\x0C\x0EV[a\x12\x1C\x81\x86a\x16\xD8V[a\x12'\x90`\x01a\x16\xEFV[\x93PPP[P\x93\x92PPPV[a\x12y\x82\x82`@Q`$\x01a\x12J\x92\x91\x90a\x17)V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x12}V[PPV[a\0\xC7\x81\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[\x82\x80Ta\x12\xAE\x90a\x14:V[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82a\x12\xD0W`\0\x85Ua\x13\x16V[\x82`\x1F\x10a\x12\xE9W\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ua\x13\x16V[\x82\x80\x01`\x01\x01\x85U\x82\x15a\x13\x16W\x91\x82\x01[\x82\x81\x11\x15a\x13\x16W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x12\xFBV[Pa\x13\"\x92\x91Pa\x13&V[P\x90V[[\x80\x82\x11\x15a\x13\"W`\0\x81U`\x01\x01a\x13'V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a\x13lW\x81\x81\x01Q\x83\x82\x01R` \x01a\x13TV[\x83\x81\x11\x15a\rkWPP`\0\x91\x01RV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x11\x15a\x13\x98Wa\x13\x98a\x13;V[`@Q`\x1F\x85\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x13\xC0Wa\x13\xC0a\x13;V[\x81`@R\x80\x93P\x85\x81R\x86\x86\x86\x01\x11\x15a\x13\xD9W`\0\x80\xFD[a\x13\xE7\x86` \x83\x01\x87a\x13QV[PPP\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x14\x03W`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x1AW`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x14+W`\0\x80\xFD[a\n\xC8\x84\x82Q` \x84\x01a\x13}V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x14NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\x14oWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x14\xB5Wa\x14\xB5a\x14\x8BV[P`\x01\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xC7W`\0\x80\xFD[`\0`@\x82\x84\x03\x12\x15a\x14\xE3W`\0\x80\xFD[`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x15\x06Wa\x15\x06a\x13;V[`@R\x82Qa\x15\x14\x81a\x14\xBCV[\x81R` \x83\x01Qa\x15$\x81a\x14\xBCV[` \x82\x01R\x93\x92PPPV[`\0\x81Q\x80\x84Ra\x15H\x81` \x86\x01` \x86\x01a\x13QV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\x15o`@\x83\x01\x85a\x150V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x15\x96W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x15\xAFW`\0\x80\xFD[\x81Qa\x0C\x0E\x81a\x14\xBCV[`\0` \x82\x84\x03\x12\x15a\x15\xCCW`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\x0EW`\0\x80\xFD[`\0\x82Qa\x15\xEE\x81\x84` \x87\x01a\x13QV[n/script/output/`\x88\x1B\x92\x01\x91\x82RP`\x0F\x01\x91\x90PV[`\0\x82Qa\x16!\x81\x84` \x87\x01a\x13QV[`/`\xF8\x1B\x92\x01\x91\x82RP`\x01\x01\x91\x90PV[`\0\x82Qa\x16F\x81\x84` \x87\x01a\x13QV[d\x1759\xB7\xB7`\xD9\x1B\x92\x01\x91\x82RP`\x05\x01\x91\x90PV[`\0\x84Qa\x16o\x81\x84` \x89\x01a\x13QV[\x84Q\x90\x83\x01\x90a\x16\x83\x81\x83` \x89\x01a\x13QV[\x84Q\x91\x01\x90a\x16\x96\x81\x83` \x88\x01a\x13QV[\x01\x95\x94PPPPPV[` \x81R`\0a\x0C\x0E` \x83\x01\x84a\x150V[`@\x81R`\0a\x16\xC6`@\x83\x01\x85a\x150V[\x82\x81\x03` \x84\x01Ra\x0Fk\x81\x85a\x150V[`\0\x82\x82\x10\x15a\x16\xEAWa\x16\xEAa\x14\x8BV[P\x03\x90V[`\0\x82\x19\x82\x11\x15a\x17\x02Wa\x17\x02a\x14\x8BV[P\x01\x90V[`\0\x82a\x17$WcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`@\x81R`\0a\x17<`@\x83\x01\x85a\x150V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 \xC6\x18kT\x03\xCB\x10\x99\xC5\xF0\xC44\x8DB\x85rG\xC7\x9F\xBB\xE7\x8A\xD2(\xB8\">\xAD\xC0\xE3\0\x8EdsolcC\0\x08\x0C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
    ```solidity
    function setUp() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`UpdateOperators`](self) function calls.
    pub enum UpdateOperatorsCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl UpdateOperatorsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UpdateOperatorsCalls {
        const NAME: &'static str = "UpdateOperatorsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<UpdateOperatorsCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::setUp)
                    }
                    setUp
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`UpdateOperators`](self) contract instance.

    See the [wrapper's documentation](`UpdateOperatorsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> UpdateOperatorsInstance<T, P, N> {
        UpdateOperatorsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<UpdateOperatorsInstance<T, P, N>>>
    {
        UpdateOperatorsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        UpdateOperatorsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`UpdateOperators`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`UpdateOperators`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct UpdateOperatorsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for UpdateOperatorsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UpdateOperatorsInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`UpdateOperators`](self) contract instance.

        See the [wrapper's documentation](`UpdateOperatorsInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<UpdateOperatorsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> UpdateOperatorsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> UpdateOperatorsInstance<T, P, N> {
            UpdateOperatorsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
