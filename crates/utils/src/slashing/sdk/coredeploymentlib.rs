/**

Generated by the following Solidity interface...
```solidity
interface CoreDeploymentLib {
    struct DeploymentData {
        address delegationManager;
        address avsDirectory;
        address strategyManager;
        address eigenPodManager;
        address allocationManager;
        address rewardsCoordinator;
        address eigenPodBeacon;
        address pauserRegistry;
        address strategyFactory;
        address strategyBeacon;
        address permissionController;
    }

    function readDeploymentJson(string memory directoryPath, uint256 chainId) external view returns (DeploymentData memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "readDeploymentJson",
    "inputs": [
      {
        "name": "directoryPath",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoreDeploymentLib.DeploymentData",
        "components": [
          {
            "name": "delegationManager",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "avsDirectory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "strategyManager",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "eigenPodManager",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "allocationManager",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "rewardsCoordinator",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "eigenPodBeacon",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "pauserRegistry",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "strategyFactory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "strategyBeacon",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "permissionController",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod CoreDeploymentLib {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346019576108d7908161001e823930815050f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c633fd6c7ab14610024575f80fd5b60403660031901126106985760043567ffffffffffffffff8111610698573660238201121561069857806004013561005b816106f4565b9061006960405192836106be565b8082526020820192366024838301011161069857815f92602460209301863783010152610094610710565b506040519063348051d760e11b825260243560048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9182156106155761014b926020915f916106a4575b50604051610113600584838180820196805191829101885e810164173539b7b760d91b838201520301601a198101845201826106be565b61011b610710565b506040519586945180918587015e840190838201905f8252519283915e01015f815203601f1981018352826106be565b60405163130d191f60e11b8152602060048201819052818061017060248201866107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610615575f91610665575b5015610620575f6101c491604051809381926360f9bb1160e01b83526020600484015260248301906107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa801561061557610160915f916105f3575b506101f7610710565b9060409161023a835161020a85826106be565b601a81527f2e6164647265737365732e7374726174656779466163746f72790000000000006020820152836107fa565b6001600160a01b03166101008201908152835161028b9061025b86826106be565b601a81527f2e6164647265737365732e73747261746567794d616e616765720000000000006020820152846107fa565b6001600160a01b031682850190815284519093906102dd906102ad87826106be565b601a81527f2e6164647265737365732e656967656e506f644d616e616765720000000000006020820152826107fa565b6001600160a01b03166060840190815285516102f987826106be565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b039061032e90846107fa565b168452610370865161034088826106be565b601781527f2e6164647265737365732e6176734469726563746f72790000000000000000006020820152836107fa565b6001600160a01b03166020850190815286519096906103c39061039383826106be565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f720000006020820152846107fa565b6001600160a01b031660a086019081528151909290610416906103e684826106be565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e61676572000000006020820152856107fa565b91608087019260018060a01b031683526104b5610468825161043884826106be565b601981527f2e6164647265737365732e7061757365725265676973747279000000000000006020820152876107fa565b6001600160a01b031660e089019081528251909661048684836106be565b601f82527f2e6164647265737365732e7065726d697373696f6e436f6e74726f6c6c65720060208301526107fa565b9761014088019860018060a01b031689525f8061050f61051d85516104da87826106be565b6005815264707272726360d81b6020820152865192839163104c13eb60e21b60208401526020602484015260448301906107d6565b03601f1981018352826106be565b6020815191016a636f6e736f6c652e6c6f675afa505f8060018060a01b038b511684519063161765e160e11b60208301526024820152602481526105626044826106be565b6020815191016a636f6e736f6c652e6c6f675afa50815188516001600160a01b0390811682529a518b16602082015290518a16918101919091529051881660608201529051871660808201529051861660a082015260c0808501518716908201529051851660e082015290518416610100820152610120918201518416918101919091529051909116610140820152f35b61060f91503d805f833e61060781836106be565b810190610773565b5f6101ee565b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b90506020813d60201161069c575b81610680602093836106be565b8101031261069857518015158103610698575f610197565b5f80fd5b3d9150610673565b6106b891503d805f833e61060781836106be565b5f6100dc565b90601f8019910116810190811067ffffffffffffffff8211176106e057604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116106e057601f01601f191660200190565b60405190610160820182811067ffffffffffffffff8211176106e0576040525f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6020818303126106985780519067ffffffffffffffff8211610698570181601f82011215610698578051906107a7826106f4565b926107b560405194856106be565b8284526020838301011161069857815f9260208093018386015e8301015290565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6108266020916108386040519485938493631e19e65760e01b85526040600486015260448501906107d6565b838103600319016024850152906107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610615575f91610862575090565b90506020813d602011610899575b8161087d602093836106be565b8101031261069857516001600160a01b03811681036106985790565b3d915061087056fea2646970667358221220435ad1121e20104eacfef0c2dec21a633fe9479f7fc810846792890a2fcab75f64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x19Wa\x08\xD7\x90\x81a\0\x1E\x8290\x81PP\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc?\xD6\xC7\xAB\x14a\0$W_\x80\xFD[`@6`\x03\x19\x01\x12a\x06\x98W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x98W6`#\x82\x01\x12\x15a\x06\x98W\x80`\x04\x015a\0[\x81a\x06\xF4V[\x90a\0i`@Q\x92\x83a\x06\xBEV[\x80\x82R` \x82\x01\x926`$\x83\x83\x01\x01\x11a\x06\x98W\x81_\x92`$` \x93\x01\x867\x83\x01\x01Ra\0\x94a\x07\x10V[P`@Q\x90c4\x80Q\xD7`\xE1\x1B\x82R`$5`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x06\x15Wa\x01K\x92` \x91_\x91a\x06\xA4W[P`@Qa\x01\x13`\x05\x84\x83\x81\x80\x82\x01\x96\x80Q\x91\x82\x91\x01\x88^\x81\x01d\x1759\xB7\xB7`\xD9\x1B\x83\x82\x01R\x03\x01`\x1A\x19\x81\x01\x84R\x01\x82a\x06\xBEV[a\x01\x1Ba\x07\x10V[P`@Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90_\x82RQ\x92\x83\x91^\x01\x01_\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x06\xBEV[`@Qc\x13\r\x19\x1F`\xE1\x1B\x81R` `\x04\x82\x01\x81\x90R\x81\x80a\x01p`$\x82\x01\x86a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x06\x15W_\x91a\x06eW[P\x15a\x06 W_a\x01\xC4\x91`@Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x06\x15Wa\x01`\x91_\x91a\x05\xF3W[Pa\x01\xF7a\x07\x10V[\x90`@\x91a\x02:\x83Qa\x02\n\x85\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x83a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01\x90\x81R\x83Qa\x02\x8B\x90a\x02[\x86\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x84a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16\x82\x85\x01\x90\x81R\x84Q\x90\x93\x90a\x02\xDD\x90a\x02\xAD\x87\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x82a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16``\x84\x01\x90\x81R\x85Qa\x02\xF9\x87\x82a\x06\xBEV[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x03.\x90\x84a\x07\xFAV[\x16\x84Ra\x03p\x86Qa\x03@\x88\x82a\x06\xBEV[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16` \x85\x01\x90\x81R\x86Q\x90\x96\x90a\x03\xC3\x90a\x03\x93\x83\x82a\x06\xBEV[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x84a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x86\x01\x90\x81R\x81Q\x90\x92\x90a\x04\x16\x90a\x03\xE6\x84\x82a\x06\xBEV[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x85a\x07\xFAV[\x91`\x80\x87\x01\x92`\x01\x80`\xA0\x1B\x03\x16\x83Ra\x04\xB5a\x04h\x82Qa\x048\x84\x82a\x06\xBEV[`\x19\x81R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x82\x01R\x87a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16`\xE0\x89\x01\x90\x81R\x82Q\x90\x96a\x04\x86\x84\x83a\x06\xBEV[`\x1F\x82R\x7F.addresses.permissionController\0` \x83\x01Ra\x07\xFAV[\x97a\x01@\x88\x01\x98`\x01\x80`\xA0\x1B\x03\x16\x89R_\x80a\x05\x0Fa\x05\x1D\x85Qa\x04\xDA\x87\x82a\x06\xBEV[`\x05\x81Rdprrrc`\xD8\x1B` \x82\x01R\x86Q\x92\x83\x91c\x10L\x13\xEB`\xE2\x1B` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x07\xD6V[\x03`\x1F\x19\x81\x01\x83R\x82a\x06\xBEV[` \x81Q\x91\x01jconsole.logZ\xFAP_\x80`\x01\x80`\xA0\x1B\x03\x8BQ\x16\x84Q\x90c\x16\x17e\xE1`\xE1\x1B` \x83\x01R`$\x82\x01R`$\x81Ra\x05b`D\x82a\x06\xBEV[` \x81Q\x91\x01jconsole.logZ\xFAP\x81Q\x88Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R\x9AQ\x8B\x16` \x82\x01R\x90Q\x8A\x16\x91\x81\x01\x91\x90\x91R\x90Q\x88\x16``\x82\x01R\x90Q\x87\x16`\x80\x82\x01R\x90Q\x86\x16`\xA0\x82\x01R`\xC0\x80\x85\x01Q\x87\x16\x90\x82\x01R\x90Q\x85\x16`\xE0\x82\x01R\x90Q\x84\x16a\x01\0\x82\x01Ra\x01 \x91\x82\x01Q\x84\x16\x91\x81\x01\x91\x90\x91R\x90Q\x90\x91\x16a\x01@\x82\x01R\xF3[a\x06\x0F\x91P=\x80_\x83>a\x06\x07\x81\x83a\x06\xBEV[\x81\x01\x90a\x07sV[_a\x01\xEEV[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[\x90P` \x81=` \x11a\x06\x9CW[\x81a\x06\x80` \x93\x83a\x06\xBEV[\x81\x01\x03\x12a\x06\x98WQ\x80\x15\x15\x81\x03a\x06\x98W_a\x01\x97V[_\x80\xFD[=\x91Pa\x06sV[a\x06\xB8\x91P=\x80_\x83>a\x06\x07\x81\x83a\x06\xBEV[_a\0\xDCV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xE0W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90a\x01`\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@R_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[` \x81\x83\x03\x12a\x06\x98W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\x98W\x01\x81`\x1F\x82\x01\x12\x15a\x06\x98W\x80Q\x90a\x07\xA7\x82a\x06\xF4V[\x92a\x07\xB5`@Q\x94\x85a\x06\xBEV[\x82\x84R` \x83\x83\x01\x01\x11a\x06\x98W\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[a\x08&` \x91a\x088`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x07\xD6V[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x06\x15W_\x91a\x08bWP\x90V[\x90P` \x81=` \x11a\x08\x99W[\x81a\x08}` \x93\x83a\x06\xBEV[\x81\x01\x03\x12a\x06\x98WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x06\x98W\x90V[=\x91Pa\x08pV\xFE\xA2dipfsX\"\x12 CZ\xD1\x12\x1E \x10N\xAC\xFE\xF0\xC2\xDE\xC2\x1Ac?\xE9G\x9F\x7F\xC8\x10\x84g\x92\x89\n/\xCA\xB7_dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c633fd6c7ab14610024575f80fd5b60403660031901126106985760043567ffffffffffffffff8111610698573660238201121561069857806004013561005b816106f4565b9061006960405192836106be565b8082526020820192366024838301011161069857815f92602460209301863783010152610094610710565b506040519063348051d760e11b825260243560048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9182156106155761014b926020915f916106a4575b50604051610113600584838180820196805191829101885e810164173539b7b760d91b838201520301601a198101845201826106be565b61011b610710565b506040519586945180918587015e840190838201905f8252519283915e01015f815203601f1981018352826106be565b60405163130d191f60e11b8152602060048201819052818061017060248201866107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610615575f91610665575b5015610620575f6101c491604051809381926360f9bb1160e01b83526020600484015260248301906107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa801561061557610160915f916105f3575b506101f7610710565b9060409161023a835161020a85826106be565b601a81527f2e6164647265737365732e7374726174656779466163746f72790000000000006020820152836107fa565b6001600160a01b03166101008201908152835161028b9061025b86826106be565b601a81527f2e6164647265737365732e73747261746567794d616e616765720000000000006020820152846107fa565b6001600160a01b031682850190815284519093906102dd906102ad87826106be565b601a81527f2e6164647265737365732e656967656e506f644d616e616765720000000000006020820152826107fa565b6001600160a01b03166060840190815285516102f987826106be565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b039061032e90846107fa565b168452610370865161034088826106be565b601781527f2e6164647265737365732e6176734469726563746f72790000000000000000006020820152836107fa565b6001600160a01b03166020850190815286519096906103c39061039383826106be565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f720000006020820152846107fa565b6001600160a01b031660a086019081528151909290610416906103e684826106be565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e61676572000000006020820152856107fa565b91608087019260018060a01b031683526104b5610468825161043884826106be565b601981527f2e6164647265737365732e7061757365725265676973747279000000000000006020820152876107fa565b6001600160a01b031660e089019081528251909661048684836106be565b601f82527f2e6164647265737365732e7065726d697373696f6e436f6e74726f6c6c65720060208301526107fa565b9761014088019860018060a01b031689525f8061050f61051d85516104da87826106be565b6005815264707272726360d81b6020820152865192839163104c13eb60e21b60208401526020602484015260448301906107d6565b03601f1981018352826106be565b6020815191016a636f6e736f6c652e6c6f675afa505f8060018060a01b038b511684519063161765e160e11b60208301526024820152602481526105626044826106be565b6020815191016a636f6e736f6c652e6c6f675afa50815188516001600160a01b0390811682529a518b16602082015290518a16918101919091529051881660608201529051871660808201529051861660a082015260c0808501518716908201529051851660e082015290518416610100820152610120918201518416918101919091529051909116610140820152f35b61060f91503d805f833e61060781836106be565b810190610773565b5f6101ee565b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b90506020813d60201161069c575b81610680602093836106be565b8101031261069857518015158103610698575f610197565b5f80fd5b3d9150610673565b6106b891503d805f833e61060781836106be565b5f6100dc565b90601f8019910116810190811067ffffffffffffffff8211176106e057604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116106e057601f01601f191660200190565b60405190610160820182811067ffffffffffffffff8211176106e0576040525f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6020818303126106985780519067ffffffffffffffff8211610698570181601f82011215610698578051906107a7826106f4565b926107b560405194856106be565b8284526020838301011161069857815f9260208093018386015e8301015290565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6108266020916108386040519485938493631e19e65760e01b85526040600486015260448501906107d6565b838103600319016024850152906107d6565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610615575f91610862575090565b90506020813d602011610899575b8161087d602093836106be565b8101031261069857516001600160a01b03811681036106985790565b3d915061087056fea2646970667358221220435ad1121e20104eacfef0c2dec21a633fe9479f7fc810846792890a2fcab75f64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc?\xD6\xC7\xAB\x14a\0$W_\x80\xFD[`@6`\x03\x19\x01\x12a\x06\x98W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x98W6`#\x82\x01\x12\x15a\x06\x98W\x80`\x04\x015a\0[\x81a\x06\xF4V[\x90a\0i`@Q\x92\x83a\x06\xBEV[\x80\x82R` \x82\x01\x926`$\x83\x83\x01\x01\x11a\x06\x98W\x81_\x92`$` \x93\x01\x867\x83\x01\x01Ra\0\x94a\x07\x10V[P`@Q\x90c4\x80Q\xD7`\xE1\x1B\x82R`$5`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x06\x15Wa\x01K\x92` \x91_\x91a\x06\xA4W[P`@Qa\x01\x13`\x05\x84\x83\x81\x80\x82\x01\x96\x80Q\x91\x82\x91\x01\x88^\x81\x01d\x1759\xB7\xB7`\xD9\x1B\x83\x82\x01R\x03\x01`\x1A\x19\x81\x01\x84R\x01\x82a\x06\xBEV[a\x01\x1Ba\x07\x10V[P`@Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90_\x82RQ\x92\x83\x91^\x01\x01_\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x06\xBEV[`@Qc\x13\r\x19\x1F`\xE1\x1B\x81R` `\x04\x82\x01\x81\x90R\x81\x80a\x01p`$\x82\x01\x86a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x06\x15W_\x91a\x06eW[P\x15a\x06 W_a\x01\xC4\x91`@Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x06\x15Wa\x01`\x91_\x91a\x05\xF3W[Pa\x01\xF7a\x07\x10V[\x90`@\x91a\x02:\x83Qa\x02\n\x85\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x83a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01\x90\x81R\x83Qa\x02\x8B\x90a\x02[\x86\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x84a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16\x82\x85\x01\x90\x81R\x84Q\x90\x93\x90a\x02\xDD\x90a\x02\xAD\x87\x82a\x06\xBEV[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x82a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16``\x84\x01\x90\x81R\x85Qa\x02\xF9\x87\x82a\x06\xBEV[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x03.\x90\x84a\x07\xFAV[\x16\x84Ra\x03p\x86Qa\x03@\x88\x82a\x06\xBEV[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16` \x85\x01\x90\x81R\x86Q\x90\x96\x90a\x03\xC3\x90a\x03\x93\x83\x82a\x06\xBEV[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x84a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x86\x01\x90\x81R\x81Q\x90\x92\x90a\x04\x16\x90a\x03\xE6\x84\x82a\x06\xBEV[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x85a\x07\xFAV[\x91`\x80\x87\x01\x92`\x01\x80`\xA0\x1B\x03\x16\x83Ra\x04\xB5a\x04h\x82Qa\x048\x84\x82a\x06\xBEV[`\x19\x81R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x82\x01R\x87a\x07\xFAV[`\x01`\x01`\xA0\x1B\x03\x16`\xE0\x89\x01\x90\x81R\x82Q\x90\x96a\x04\x86\x84\x83a\x06\xBEV[`\x1F\x82R\x7F.addresses.permissionController\0` \x83\x01Ra\x07\xFAV[\x97a\x01@\x88\x01\x98`\x01\x80`\xA0\x1B\x03\x16\x89R_\x80a\x05\x0Fa\x05\x1D\x85Qa\x04\xDA\x87\x82a\x06\xBEV[`\x05\x81Rdprrrc`\xD8\x1B` \x82\x01R\x86Q\x92\x83\x91c\x10L\x13\xEB`\xE2\x1B` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x07\xD6V[\x03`\x1F\x19\x81\x01\x83R\x82a\x06\xBEV[` \x81Q\x91\x01jconsole.logZ\xFAP_\x80`\x01\x80`\xA0\x1B\x03\x8BQ\x16\x84Q\x90c\x16\x17e\xE1`\xE1\x1B` \x83\x01R`$\x82\x01R`$\x81Ra\x05b`D\x82a\x06\xBEV[` \x81Q\x91\x01jconsole.logZ\xFAP\x81Q\x88Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R\x9AQ\x8B\x16` \x82\x01R\x90Q\x8A\x16\x91\x81\x01\x91\x90\x91R\x90Q\x88\x16``\x82\x01R\x90Q\x87\x16`\x80\x82\x01R\x90Q\x86\x16`\xA0\x82\x01R`\xC0\x80\x85\x01Q\x87\x16\x90\x82\x01R\x90Q\x85\x16`\xE0\x82\x01R\x90Q\x84\x16a\x01\0\x82\x01Ra\x01 \x91\x82\x01Q\x84\x16\x91\x81\x01\x91\x90\x91R\x90Q\x90\x91\x16a\x01@\x82\x01R\xF3[a\x06\x0F\x91P=\x80_\x83>a\x06\x07\x81\x83a\x06\xBEV[\x81\x01\x90a\x07sV[_a\x01\xEEV[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[\x90P` \x81=` \x11a\x06\x9CW[\x81a\x06\x80` \x93\x83a\x06\xBEV[\x81\x01\x03\x12a\x06\x98WQ\x80\x15\x15\x81\x03a\x06\x98W_a\x01\x97V[_\x80\xFD[=\x91Pa\x06sV[a\x06\xB8\x91P=\x80_\x83>a\x06\x07\x81\x83a\x06\xBEV[_a\0\xDCV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xE0W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90a\x01`\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@R_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[` \x81\x83\x03\x12a\x06\x98W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\x98W\x01\x81`\x1F\x82\x01\x12\x15a\x06\x98W\x80Q\x90a\x07\xA7\x82a\x06\xF4V[\x92a\x07\xB5`@Q\x94\x85a\x06\xBEV[\x82\x84R` \x83\x83\x01\x01\x11a\x06\x98W\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[a\x08&` \x91a\x088`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x07\xD6V[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x07\xD6V[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x06\x15W_\x91a\x08bWP\x90V[\x90P` \x81=` \x11a\x08\x99W[\x81a\x08}` \x93\x83a\x06\xBEV[\x81\x01\x03\x12a\x06\x98WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x06\x98W\x90V[=\x91Pa\x08pV\xFE\xA2dipfsX\"\x12 CZ\xD1\x12\x1E \x10N\xAC\xFE\xF0\xC2\xDE\xC2\x1Ac?\xE9G\x9F\x7F\xC8\x10\x84g\x92\x89\n/\xCA\xB7_dsolcC\0\x08\x1B\x003",
    );
    /**```solidity
struct DeploymentData { address delegationManager; address avsDirectory; address strategyManager; address eigenPodManager; address allocationManager; address rewardsCoordinator; address eigenPodBeacon; address pauserRegistry; address strategyFactory; address strategyBeacon; address permissionController; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DeploymentData {
        pub delegationManager: alloy::sol_types::private::Address,
        pub avsDirectory: alloy::sol_types::private::Address,
        pub strategyManager: alloy::sol_types::private::Address,
        pub eigenPodManager: alloy::sol_types::private::Address,
        pub allocationManager: alloy::sol_types::private::Address,
        pub rewardsCoordinator: alloy::sol_types::private::Address,
        pub eigenPodBeacon: alloy::sol_types::private::Address,
        pub pauserRegistry: alloy::sol_types::private::Address,
        pub strategyFactory: alloy::sol_types::private::Address,
        pub strategyBeacon: alloy::sol_types::private::Address,
        pub permissionController: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DeploymentData> for UnderlyingRustTuple<'_> {
            fn from(value: DeploymentData) -> Self {
                (
                    value.delegationManager,
                    value.avsDirectory,
                    value.strategyManager,
                    value.eigenPodManager,
                    value.allocationManager,
                    value.rewardsCoordinator,
                    value.eigenPodBeacon,
                    value.pauserRegistry,
                    value.strategyFactory,
                    value.strategyBeacon,
                    value.permissionController,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DeploymentData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    delegationManager: tuple.0,
                    avsDirectory: tuple.1,
                    strategyManager: tuple.2,
                    eigenPodManager: tuple.3,
                    allocationManager: tuple.4,
                    rewardsCoordinator: tuple.5,
                    eigenPodBeacon: tuple.6,
                    pauserRegistry: tuple.7,
                    strategyFactory: tuple.8,
                    strategyBeacon: tuple.9,
                    permissionController: tuple.10,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DeploymentData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DeploymentData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.delegationManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.avsDirectory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.strategyManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.eigenPodManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.allocationManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rewardsCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.eigenPodBeacon,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pauserRegistry,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.strategyFactory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.strategyBeacon,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionController,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DeploymentData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DeploymentData {
            const NAME: &'static str = "DeploymentData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DeploymentData(address delegationManager,address avsDirectory,address strategyManager,address eigenPodManager,address allocationManager,address rewardsCoordinator,address eigenPodBeacon,address pauserRegistry,address strategyFactory,address strategyBeacon,address permissionController)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.delegationManager,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.avsDirectory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.strategyManager,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.eigenPodManager,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.allocationManager,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.rewardsCoordinator,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.eigenPodBeacon,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.pauserRegistry,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.strategyFactory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.strategyBeacon,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.permissionController,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DeploymentData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.delegationManager,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.avsDirectory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.strategyManager,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.eigenPodManager,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.allocationManager,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.rewardsCoordinator,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.eigenPodBeacon,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.pauserRegistry,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.strategyFactory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.strategyBeacon,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.permissionController,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.delegationManager,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.avsDirectory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.strategyManager,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.eigenPodManager,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.allocationManager,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.rewardsCoordinator,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.eigenPodBeacon,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.pauserRegistry,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.strategyFactory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.strategyBeacon,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.permissionController,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `readDeploymentJson(string,uint256)` and selector `0x3fd6c7ab`.
```solidity
function readDeploymentJson(string memory directoryPath, uint256 chainId) external view returns (DeploymentData memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct readDeploymentJsonCall {
        pub directoryPath: alloy::sol_types::private::String,
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`readDeploymentJson(string,uint256)`](readDeploymentJsonCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct readDeploymentJsonReturn {
        pub _0: <DeploymentData as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<readDeploymentJsonCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: readDeploymentJsonCall) -> Self {
                    (value.directoryPath, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for readDeploymentJsonCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        directoryPath: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (DeploymentData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <DeploymentData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<readDeploymentJsonReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: readDeploymentJsonReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for readDeploymentJsonReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for readDeploymentJsonCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = readDeploymentJsonReturn;
            type ReturnTuple<'a> = (DeploymentData,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "readDeploymentJson(string,uint256)";
            const SELECTOR: [u8; 4] = [63u8, 214u8, 199u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.directoryPath,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`CoreDeploymentLib`](self) function calls.
    pub enum CoreDeploymentLibCalls {
        readDeploymentJson(readDeploymentJsonCall),
    }
    #[automatically_derived]
    impl CoreDeploymentLibCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[63u8, 214u8, 199u8, 171u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoreDeploymentLibCalls {
        const NAME: &'static str = "CoreDeploymentLibCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::readDeploymentJson(_) => {
                    <readDeploymentJsonCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<CoreDeploymentLibCalls>] = &[
                {
                    fn readDeploymentJson(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoreDeploymentLibCalls> {
                        <readDeploymentJsonCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoreDeploymentLibCalls::readDeploymentJson)
                    }
                    readDeploymentJson
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::readDeploymentJson(inner) => {
                    <readDeploymentJsonCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::readDeploymentJson(inner) => {
                    <readDeploymentJsonCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CoreDeploymentLib`](self) contract instance.

See the [wrapper's documentation](`CoreDeploymentLibInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CoreDeploymentLibInstance<T, P, N> {
        CoreDeploymentLibInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<CoreDeploymentLibInstance<T, P, N>>,
    > {
        CoreDeploymentLibInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        CoreDeploymentLibInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`CoreDeploymentLib`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`CoreDeploymentLib`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CoreDeploymentLibInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for CoreDeploymentLibInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CoreDeploymentLibInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoreDeploymentLibInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`CoreDeploymentLib`](self) contract instance.

See the [wrapper's documentation](`CoreDeploymentLibInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CoreDeploymentLibInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> CoreDeploymentLibInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CoreDeploymentLibInstance<T, P, N> {
            CoreDeploymentLibInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoreDeploymentLibInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`readDeploymentJson`] function.
        pub fn readDeploymentJson(
            &self,
            directoryPath: alloy::sol_types::private::String,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, readDeploymentJsonCall, N> {
            self.call_builder(
                &readDeploymentJsonCall {
                    directoryPath,
                    chainId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoreDeploymentLibInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
