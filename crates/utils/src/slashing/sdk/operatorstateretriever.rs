/**

Generated by the following Solidity interface...
```solidity
interface OperatorStateRetriever {
    struct CheckSignaturesIndices {
        uint32[] nonSignerQuorumBitmapIndices;
        uint32[] quorumApkIndices;
        uint32[] totalStakeIndices;
        uint32[][] nonSignerStakeIndices;
    }
    struct Operator {
        address operator;
        bytes32 operatorId;
        uint96 stake;
    }

    error OperatorNotRegistered();

    function getBatchOperatorFromId(address registryCoordinator, bytes32[] memory operatorIds) external view returns (address[] memory operators);
    function getBatchOperatorId(address registryCoordinator, address[] memory operators) external view returns (bytes32[] memory operatorIds);
    function getCheckSignaturesIndices(address registryCoordinator, uint32 referenceBlockNumber, bytes memory quorumNumbers, bytes32[] memory nonSignerOperatorIds) external view returns (CheckSignaturesIndices memory);
    function getOperatorState(address registryCoordinator, bytes memory quorumNumbers, uint32 blockNumber) external view returns (Operator[][] memory);
    function getOperatorState(address registryCoordinator, bytes32 operatorId, uint32 blockNumber) external view returns (uint256, Operator[][] memory);
    function getQuorumBitmapsAtBlockNumber(address registryCoordinator, bytes32[] memory operatorIds, uint32 blockNumber) external view returns (uint256[] memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getBatchOperatorFromId",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "operatorIds",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "outputs": [
      {
        "name": "operators",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBatchOperatorId",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "operators",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "operatorIds",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCheckSignaturesIndices",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "referenceBlockNumber",
        "type": "uint32",
        "internalType": "uint32"
      },
      {
        "name": "quorumNumbers",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "nonSignerOperatorIds",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct OperatorStateRetriever.CheckSignaturesIndices",
        "components": [
          {
            "name": "nonSignerQuorumBitmapIndices",
            "type": "uint32[]",
            "internalType": "uint32[]"
          },
          {
            "name": "quorumApkIndices",
            "type": "uint32[]",
            "internalType": "uint32[]"
          },
          {
            "name": "totalStakeIndices",
            "type": "uint32[]",
            "internalType": "uint32[]"
          },
          {
            "name": "nonSignerStakeIndices",
            "type": "uint32[][]",
            "internalType": "uint32[][]"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getOperatorState",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "quorumNumbers",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "blockNumber",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple[][]",
        "internalType": "struct OperatorStateRetriever.Operator[][]",
        "components": [
          {
            "name": "operator",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "operatorId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "stake",
            "type": "uint96",
            "internalType": "uint96"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getOperatorState",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "operatorId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "blockNumber",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "tuple[][]",
        "internalType": "struct OperatorStateRetriever.Operator[][]",
        "components": [
          {
            "name": "operator",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "operatorId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "stake",
            "type": "uint96",
            "internalType": "uint96"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getQuorumBitmapsAtBlockNumber",
    "inputs": [
      {
        "name": "registryCoordinator",
        "type": "address",
        "internalType": "contract ISlashingRegistryCoordinator"
      },
      {
        "name": "operatorIds",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "blockNumber",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "OperatorNotRegistered",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OperatorStateRetriever {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601557611637908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806331b36bd914610c615780633563b0d114610bc85780634d2b57fe14610a8a5780634f739f741461046d5780635c155662146102b25763cefdc1d41461005b575f80fd5b346102ae5760603660031901126102ae57610074610db5565b60243590610080610e80565b916040926100d78451926100948685610dfa565b60018452601f198601366020860137806100ad85611002565b5285516361c8a12f60e11b81526001600160a01b0386169490925f918491829187600484016115e1565b0381875afa9182156102a45763ffffffff6100fe6020946064935f91610282575b50611002565b511691875195869384926304ec635160e01b8452600484015263ffffffff8716602484015260448301525afa918215610278575f92610247575b506001600160c01b038216915f83805b61020e575061ffff169261015b84610e65565b9361016887519586610dfa565b808552610177601f1991610e65565b013660208601375f925f5b8551851080610203575b156101da576001811b84166001600160c01b03166101b3575b6101ae906115d3565b610182565b9360016101ae9160ff60f81b8760f81b165f1a6101d0828a611072565b53019490506101a5565b87836101ff6101ea858a8c611083565b83519384938452806020850152830190610e93565b0390f35b50610100811061018c565b5f1981018181116102335761ffff9116911661ffff8114610233576001019080610148565b634e487b7160e01b5f52601160045260245ffd5b61026a91925060203d602011610271575b6102628183610dfa565b8101906115a8565b905f610138565b503d610258565b84513d5f823e3d90fd5b61029e91503d805f833e6102968183610dfa565b8101906114f7565b5f6100f8565b86513d5f823e3d90fd5b5f80fd5b346102ae5760603660031901126102ae576102cb610db5565b6024356001600160401b0381116102ae576102ea903690600401610f3a565b6102f2610e80565b6040516361c8a12f60e11b815290926001600160a01b03165f828061031b8688600484016115e1565b0381845afa918215610402575f92610451575b5082519361035461033e86610e1b565b9561034c6040519788610dfa565b808752610e1b565b602086019490601f19013686375f5b815181101561040d576103768183611023565b519060208463ffffffff61038a848a611023565b516040516304ec635160e01b8152600481019690965263ffffffff92831660248701521616604484015282606481885afa8015610402576001925f916103e4575b50828060c01b03166103dd828a611023565b5201610363565b6103fc915060203d8111610271576102628183610dfa565b896103cb565b6040513d5f823e3d90fd5b8587604051918291602083019060208452518091526040830191905f5b818110610438575050500390f35b825184528594506020938401939092019160010161042a565b6104669192503d805f833e6102968183610dfa565b908461032e565b346102ae5760803660031901126102ae57610486610db5565b60243563ffffffff8116908181036102ae57604435926001600160401b0384116102ae57366023850112156102ae578360040135936001600160401b0385116102ae57602481019060248636920101116102ae57606435926001600160401b0384116102ae57366023850112156102ae578360040135956001600160401b0387116102ae5760248501938760051b9560248736920101116102ae576105296114b2565b50604051636830483560e01b81526001600160a01b03919091169390602081600481885afa908115610402575f91610a6b575b506105656114b2565b604080516361c8a12f60e11b8152600481018b90526024810191909152604481018b905290976001600160fb1b038b116102ae5781606481835f948c848401378101030181895afa908115610402575f91610a51575b50875260018060a01b031691604051986340e03a8160e11b8a528860048b0152604060248b01525f8a806105f3604482018688611578565b0381875afa998a15610402575f9a610a35575b5060408801998a5261061782610e1b565b966106256040519889610dfa565b828852610641601f1961063785610e1b565b0160208a01611056565b606089019788525f5b60ff8116848110156108ac575f6106778261066487610fd0565b8d51906106718383611023565b52611023565b505f84868e5b8d8d8386106106fa5750505050505061069581610fd0565b905f5b8c8282106106ca5760ff959492506106b893915051906106718383611023565b501660ff81146102335760010161064a565b9063ffffffff6106e7826106e18860019651611023565b51611023565b51166106f38286611023565b5201610698565b63ffffffff61071b87610713816020986107559a611598565b359551611023565b516040516304ec635160e01b8152600481019590955263ffffffff9283166024860152161660448301529092839190829081906064820190565b03915afa908115610402575f9161088e575b506001600160c01b0316801561087f5760018091610786868b8d6115c7565b3560f81c1c161461079d575b60010184868e61067d565b908960206107ac848989611598565b356107b8868b8d6115c7565b60405163dd9846b960e01b815260048101929092523560f81c602482015263ffffffff929092166044830152816064818d5afa908115610402578d85915f93610829575b509163ffffffff610818856106e1600197956108219751611023565b911690526115d3565b919050610792565b925050506020813d8211610877575b8161084560209383610dfa565b810103126102ae57818d63ffffffff6108186001956106e18961086a610821986114e6565b97509550509550506107fc565b3d9150610838565b6325ec6c1f60e01b5f5260045ffd5b6108a6915060203d8111610271576102628183610dfa565b5f610767565b5089898c8e8760048a60208f60405193848092632efa2ca360e11b82525afa908115610402575f93610905938593610a04575b506040519687948593849363354952a360e21b8552604060048601526044850191611578565b602483019190915203916001600160a01b03165afa9182156104025761098392610970915f916109ea575b50908594939291602061095d970190815260405196879660208852516080602089015260a0880190610f97565b9051868203601f19016040880152610f97565b9051848203601f19016060860152610f97565b905190601f19838203016080840152815180825260208201916020808360051b8301019401925f915b8383106109b95786860387f35b9193955091936020806109d8600193601f198682030187528951610f97565b970193019301909286959492936109ac565b6109fe91503d805f833e6102968183610dfa565b86610930565b610a2791935060203d602011610a2e575b610a1f8183610dfa565b810190611037565b91896108df565b503d610a15565b610a4a919a503d805f833e6102968183610dfa565b988a610606565b610a6591503d805f833e6102968183610dfa565b8a6105bb565b610a84915060203d602011610a2e57610a1f8183610dfa565b8961055c565b346102ae5760403660031901126102ae57610aa3610db5565b6024356001600160401b0381116102ae57610ac2903690600401610f3a565b8051610ae6610ad082610e1b565b91610ade6040519384610dfa565b808352610e1b565b602082019290601f19013684376001600160a01b03909316925f5b8151811015610b7b57610b148183611023565b519060405191630a5aec1960e21b83526004830152602082602481895afa8015610402576001925f91610b5d575b50610b4d8286611023565b90838060a01b0316905201610b01565b610b75915060203d8111610a2e57610a1f8183610dfa565b87610b42565b8383604051918291602083019060208452518091526040830191905f5b818110610ba6575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610b98565b346102ae5760603660031901126102ae57610be1610db5565b6024356001600160401b0381116102ae57366023820112156102ae57806004013591610c0c83610e65565b610c196040519182610dfa565b83815236602485850101116102ae575f6020856101ff966024610c4d97018386013783010152610c47610e80565b91611083565b604051918291602083526020830190610e93565b346102ae5760403660031901126102ae57610c7a610db5565b602435906001600160401b0382116102ae57366023830112156102ae578160040135610ca581610e1b565b92610cb36040519485610dfa565b8184526024602085019260051b820101903682116102ae57602401915b818310610d95578385610ce38151610fd0565b6001600160a01b03909216915f5b8251811015610d7f576001600160a01b03610d0c8285611023565b516040516309aa152760e11b81529116600482015290602082602481885afa8015610402575f90610d4d575b60019250610d468285611023565b5201610cf1565b506020823d8211610d77575b81610d6660209383610dfa565b810103126102ae5760019151610d38565b3d9150610d59565b604051602080825281906101ff90820185610e32565b82356001600160a01b03811681036102ae57815260209283019201610cd0565b600435906001600160a01b03821682036102ae57565b606081019081106001600160401b03821117610de657604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b03821117610de657604052565b6001600160401b038111610de65760051b60200190565b90602080835192838152019201905f5b818110610e4f5750505090565b8251845260209384019390920191600101610e42565b6001600160401b038111610de657601f01601f191660200190565b6044359063ffffffff821682036102ae57565b9080602083519182815201916020808360051b8301019401925f915b838310610ebe57505050505090565b9091929394601f19828203018352855190602080835192838152019201905f905b808210610efe5750505060208060019297019301930191939290610eaf565b909192602060606001926001600160601b0360408851868060a01b03815116845285810151868501520151166040820152019401920190610edf565b9080601f830112156102ae578135610f5181610e1b565b92610f5f6040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b828210610f875750505090565b8135815260209182019101610f7a565b90602080835192838152019201905f5b818110610fb45750505090565b825163ffffffff16845260209384019390920191600101610fa7565b90610fda82610e1b565b610fe76040519182610dfa565b8281528092610ff8601f1991610e1b565b0190602036910137565b80511561100f5760200190565b634e487b7160e01b5f52603260045260245ffd5b805182101561100f5760209160051b010190565b908160209103126102ae57516001600160a01b03811681036102ae5790565b5f5b82811061106457505050565b606082820152602001611058565b90815181101561100f570160200190565b604051636830483560e01b81526001600160a01b0390911692909190602083600481875afa928315610402575f93611491575b50604051634f4c91e160e11b815292602084600481885afa938415610402575f9461144c575b5060206004949560405195868092632efa2ca360e11b82525afa938415610402575f9461142b575b509194939085519261113f61111885610e1b565b946111266040519687610dfa565b808652611135601f1991610e1b565b0160208601611056565b5f965b8051881015611421576111558882611072565b51604051638902624560e01b815260f89190911c6004820181905263ffffffff851660248301529790945f866044816001600160a01b0385165afa958615610402575f9661138f575b5085516111aa81610e1b565b906111b86040519283610dfa565b8082526111c7601f1991610e1b565b015f5b8181106113665750506111dd8b89611023565b526111e88a88611023565b505f5b8651811015611355576111fe8188611023565b516040516308f6629d60e31b81526004810191909152906020826024816001600160a01b038e165afa918215610402575f92611335575b5086611241828a611023565b5160208d61124f858d611023565b5160405163fa28c62760e01b8152600481019190915260ff91909116602482015263ffffffff939093166044840152826064816001600160a01b038c165afa908115610402578e925f926112ee575b50936112db6112e7936001600160601b038694600198604051956112c187610dcb565b8a8060a01b0316865260208601521660408401528d611023565b51906106718383611023565b50016111eb565b915091506020813d821161132d575b8161130a60209383610dfa565b810103126102ae57516001600160601b03811681036102ae578d916112db61129e565b3d91506112fd565b61134e91925060203d8111610a2e57610a1f8183610dfa565b905f611235565b506001909901989097509350611142565b60209060405161137581610dcb565b5f81525f838201525f6040820152828286010152016111ca565b9095503d805f833e6113a18183610dfa565b8101906020818303126102ae578051906001600160401b0382116102ae57019080601f830112156102ae5781516113d781610e1b565b926113e56040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b82821061141157505050945f61119e565b8151815260209182019101611400565b5092955050505050565b61144591945060203d602011610a2e57610a1f8183610dfa565b925f611104565b9093506020813d602011611489575b8161146860209383610dfa565b810103126102ae5751926001600160a01b03841684036102ae5760206110dc565b3d915061145b565b6114ab91935060203d602011610a2e57610a1f8183610dfa565b915f6110b6565b60405190608082018281106001600160401b03821117610de657604052606080838181528160208201528160408201520152565b519063ffffffff821682036102ae57565b6020818303126102ae578051906001600160401b0382116102ae57019080601f830112156102ae57815161152a81610e1b565b926115386040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b8282106115605750505090565b6020809161156d846114e6565b815201910190611553565b908060209392818452848401375f828201840152601f01601f1916010190565b919081101561100f5760051b0190565b908160209103126102ae57516001600160c01b03811681036102ae5790565b9082101561100f570190565b5f1981146102335760010190565b60409063ffffffff6115fe94931681528160208201520190610e32565b9056fea2646970667358221220813c6c93ba5293e4e36022b3ec86db94c90bdd5a984dad3152a2b0c2ce42c87464736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x167\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c1\xB3k\xD9\x14a\x0CaW\x80c5c\xB0\xD1\x14a\x0B\xC8W\x80cM+W\xFE\x14a\n\x8AW\x80cOs\x9Ft\x14a\x04mW\x80c\\\x15Vb\x14a\x02\xB2Wc\xCE\xFD\xC1\xD4\x14a\0[W_\x80\xFD[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\0ta\r\xB5V[`$5\x90a\0\x80a\x0E\x80V[\x91`@\x92a\0\xD7\x84Q\x92a\0\x94\x86\x85a\r\xFAV[`\x01\x84R`\x1F\x19\x86\x016` \x86\x017\x80a\0\xAD\x85a\x10\x02V[R\x85Qca\xC8\xA1/`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16\x94\x90\x92_\x91\x84\x91\x82\x91\x87`\x04\x84\x01a\x15\xE1V[\x03\x81\x87Z\xFA\x91\x82\x15a\x02\xA4Wc\xFF\xFF\xFF\xFFa\0\xFE` \x94`d\x93_\x91a\x02\x82W[Pa\x10\x02V[Q\x16\x91\x87Q\x95\x86\x93\x84\x92c\x04\xECcQ`\xE0\x1B\x84R`\x04\x84\x01Rc\xFF\xFF\xFF\xFF\x87\x16`$\x84\x01R`D\x83\x01RZ\xFA\x91\x82\x15a\x02xW_\x92a\x02GW[P`\x01`\x01`\xC0\x1B\x03\x82\x16\x91_\x83\x80[a\x02\x0EWPa\xFF\xFF\x16\x92a\x01[\x84a\x0EeV[\x93a\x01h\x87Q\x95\x86a\r\xFAV[\x80\x85Ra\x01w`\x1F\x19\x91a\x0EeV[\x016` \x86\x017_\x92_[\x85Q\x85\x10\x80a\x02\x03W[\x15a\x01\xDAW`\x01\x81\x1B\x84\x16`\x01`\x01`\xC0\x1B\x03\x16a\x01\xB3W[a\x01\xAE\x90a\x15\xD3V[a\x01\x82V[\x93`\x01a\x01\xAE\x91`\xFF`\xF8\x1B\x87`\xF8\x1B\x16_\x1Aa\x01\xD0\x82\x8Aa\x10rV[S\x01\x94\x90Pa\x01\xA5V[\x87\x83a\x01\xFFa\x01\xEA\x85\x8A\x8Ca\x10\x83V[\x83Q\x93\x84\x93\x84R\x80` \x85\x01R\x83\x01\x90a\x0E\x93V[\x03\x90\xF3[Pa\x01\0\x81\x10a\x01\x8CV[_\x19\x81\x01\x81\x81\x11a\x023Wa\xFF\xFF\x91\x16\x91\x16a\xFF\xFF\x81\x14a\x023W`\x01\x01\x90\x80a\x01HV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x02j\x91\x92P` =` \x11a\x02qW[a\x02b\x81\x83a\r\xFAV[\x81\x01\x90a\x15\xA8V[\x90_a\x018V[P=a\x02XV[\x84Q=_\x82>=\x90\xFD[a\x02\x9E\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x81\x01\x90a\x14\xF7V[_a\0\xF8V[\x86Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\x02\xCBa\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEWa\x02\xEA\x906\x90`\x04\x01a\x0F:V[a\x02\xF2a\x0E\x80V[`@Qca\xC8\xA1/`\xE1\x1B\x81R\x90\x92`\x01`\x01`\xA0\x1B\x03\x16_\x82\x80a\x03\x1B\x86\x88`\x04\x84\x01a\x15\xE1V[\x03\x81\x84Z\xFA\x91\x82\x15a\x04\x02W_\x92a\x04QW[P\x82Q\x93a\x03Ta\x03>\x86a\x0E\x1BV[\x95a\x03L`@Q\x97\x88a\r\xFAV[\x80\x87Ra\x0E\x1BV[` \x86\x01\x94\x90`\x1F\x19\x016\x867_[\x81Q\x81\x10\x15a\x04\rWa\x03v\x81\x83a\x10#V[Q\x90` \x84c\xFF\xFF\xFF\xFFa\x03\x8A\x84\x8Aa\x10#V[Q`@Qc\x04\xECcQ`\xE0\x1B\x81R`\x04\x81\x01\x96\x90\x96Rc\xFF\xFF\xFF\xFF\x92\x83\x16`$\x87\x01R\x16\x16`D\x84\x01R\x82`d\x81\x88Z\xFA\x80\x15a\x04\x02W`\x01\x92_\x91a\x03\xE4W[P\x82\x80`\xC0\x1B\x03\x16a\x03\xDD\x82\x8Aa\x10#V[R\x01a\x03cV[a\x03\xFC\x91P` =\x81\x11a\x02qWa\x02b\x81\x83a\r\xFAV[\x89a\x03\xCBV[`@Q=_\x82>=\x90\xFD[\x85\x87`@Q\x91\x82\x91` \x83\x01\x90` \x84RQ\x80\x91R`@\x83\x01\x91\x90_[\x81\x81\x10a\x048WPPP\x03\x90\xF3[\x82Q\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x04*V[a\x04f\x91\x92P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x90\x84a\x03.V[4a\x02\xAEW`\x806`\x03\x19\x01\x12a\x02\xAEWa\x04\x86a\r\xB5V[`$5c\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x81\x03a\x02\xAEW`D5\x92`\x01`\x01`@\x1B\x03\x84\x11a\x02\xAEW6`#\x85\x01\x12\x15a\x02\xAEW\x83`\x04\x015\x93`\x01`\x01`@\x1B\x03\x85\x11a\x02\xAEW`$\x81\x01\x90`$\x866\x92\x01\x01\x11a\x02\xAEW`d5\x92`\x01`\x01`@\x1B\x03\x84\x11a\x02\xAEW6`#\x85\x01\x12\x15a\x02\xAEW\x83`\x04\x015\x95`\x01`\x01`@\x1B\x03\x87\x11a\x02\xAEW`$\x85\x01\x93\x87`\x05\x1B\x95`$\x876\x92\x01\x01\x11a\x02\xAEWa\x05)a\x14\xB2V[P`@Qch0H5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16\x93\x90` \x81`\x04\x81\x88Z\xFA\x90\x81\x15a\x04\x02W_\x91a\nkW[Pa\x05ea\x14\xB2V[`@\x80Qca\xC8\xA1/`\xE1\x1B\x81R`\x04\x81\x01\x8B\x90R`$\x81\x01\x91\x90\x91R`D\x81\x01\x8B\x90R\x90\x97`\x01`\x01`\xFB\x1B\x03\x8B\x11a\x02\xAEW\x81`d\x81\x83_\x94\x8C\x84\x84\x017\x81\x01\x03\x01\x81\x89Z\xFA\x90\x81\x15a\x04\x02W_\x91a\nQW[P\x87R`\x01\x80`\xA0\x1B\x03\x16\x91`@Q\x98c@\xE0:\x81`\xE1\x1B\x8AR\x88`\x04\x8B\x01R`@`$\x8B\x01R_\x8A\x80a\x05\xF3`D\x82\x01\x86\x88a\x15xV[\x03\x81\x87Z\xFA\x99\x8A\x15a\x04\x02W_\x9Aa\n5W[P`@\x88\x01\x99\x8ARa\x06\x17\x82a\x0E\x1BV[\x96a\x06%`@Q\x98\x89a\r\xFAV[\x82\x88Ra\x06A`\x1F\x19a\x067\x85a\x0E\x1BV[\x01` \x8A\x01a\x10VV[``\x89\x01\x97\x88R_[`\xFF\x81\x16\x84\x81\x10\x15a\x08\xACW_a\x06w\x82a\x06d\x87a\x0F\xD0V[\x8DQ\x90a\x06q\x83\x83a\x10#V[Ra\x10#V[P_\x84\x86\x8E[\x8D\x8D\x83\x86\x10a\x06\xFAWPPPPPPa\x06\x95\x81a\x0F\xD0V[\x90_[\x8C\x82\x82\x10a\x06\xCAW`\xFF\x95\x94\x92Pa\x06\xB8\x93\x91PQ\x90a\x06q\x83\x83a\x10#V[P\x16`\xFF\x81\x14a\x023W`\x01\x01a\x06JV[\x90c\xFF\xFF\xFF\xFFa\x06\xE7\x82a\x06\xE1\x88`\x01\x96Qa\x10#V[Qa\x10#V[Q\x16a\x06\xF3\x82\x86a\x10#V[R\x01a\x06\x98V[c\xFF\xFF\xFF\xFFa\x07\x1B\x87a\x07\x13\x81` \x98a\x07U\x9Aa\x15\x98V[5\x95Qa\x10#V[Q`@Qc\x04\xECcQ`\xE0\x1B\x81R`\x04\x81\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x92\x83\x16`$\x86\x01R\x16\x16`D\x83\x01R\x90\x92\x83\x91\x90\x82\x90\x81\x90`d\x82\x01\x90V[\x03\x91Z\xFA\x90\x81\x15a\x04\x02W_\x91a\x08\x8EW[P`\x01`\x01`\xC0\x1B\x03\x16\x80\x15a\x08\x7FW`\x01\x80\x91a\x07\x86\x86\x8B\x8Da\x15\xC7V[5`\xF8\x1C\x1C\x16\x14a\x07\x9DW[`\x01\x01\x84\x86\x8Ea\x06}V[\x90\x89` a\x07\xAC\x84\x89\x89a\x15\x98V[5a\x07\xB8\x86\x8B\x8Da\x15\xC7V[`@Qc\xDD\x98F\xB9`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R5`\xF8\x1C`$\x82\x01Rc\xFF\xFF\xFF\xFF\x92\x90\x92\x16`D\x83\x01R\x81`d\x81\x8DZ\xFA\x90\x81\x15a\x04\x02W\x8D\x85\x91_\x93a\x08)W[P\x91c\xFF\xFF\xFF\xFFa\x08\x18\x85a\x06\xE1`\x01\x97\x95a\x08!\x97Qa\x10#V[\x91\x16\x90Ra\x15\xD3V[\x91\x90Pa\x07\x92V[\x92PPP` \x81=\x82\x11a\x08wW[\x81a\x08E` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEW\x81\x8Dc\xFF\xFF\xFF\xFFa\x08\x18`\x01\x95a\x06\xE1\x89a\x08ja\x08!\x98a\x14\xE6V[\x97P\x95PP\x95PPa\x07\xFCV[=\x91Pa\x088V[c%\xECl\x1F`\xE0\x1B_R`\x04_\xFD[a\x08\xA6\x91P` =\x81\x11a\x02qWa\x02b\x81\x83a\r\xFAV[_a\x07gV[P\x89\x89\x8C\x8E\x87`\x04\x8A` \x8F`@Q\x93\x84\x80\x92c.\xFA,\xA3`\xE1\x1B\x82RZ\xFA\x90\x81\x15a\x04\x02W_\x93a\t\x05\x93\x85\x93a\n\x04W[P`@Q\x96\x87\x94\x85\x93\x84\x93c5IR\xA3`\xE2\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x91a\x15xV[`$\x83\x01\x91\x90\x91R\x03\x91`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x91\x82\x15a\x04\x02Wa\t\x83\x92a\tp\x91_\x91a\t\xEAW[P\x90\x85\x94\x93\x92\x91` a\t]\x97\x01\x90\x81R`@Q\x96\x87\x96` \x88RQ`\x80` \x89\x01R`\xA0\x88\x01\x90a\x0F\x97V[\x90Q\x86\x82\x03`\x1F\x19\x01`@\x88\x01Ra\x0F\x97V[\x90Q\x84\x82\x03`\x1F\x19\x01``\x86\x01Ra\x0F\x97V[\x90Q\x90`\x1F\x19\x83\x82\x03\x01`\x80\x84\x01R\x81Q\x80\x82R` \x82\x01\x91` \x80\x83`\x05\x1B\x83\x01\x01\x94\x01\x92_\x91[\x83\x83\x10a\t\xB9W\x86\x86\x03\x87\xF3[\x91\x93\x95P\x91\x93` \x80a\t\xD8`\x01\x93`\x1F\x19\x86\x82\x03\x01\x87R\x89Qa\x0F\x97V[\x97\x01\x93\x01\x93\x01\x90\x92\x86\x95\x94\x92\x93a\t\xACV[a\t\xFE\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x86a\t0V[a\n'\x91\x93P` =` \x11a\n.W[a\n\x1F\x81\x83a\r\xFAV[\x81\x01\x90a\x107V[\x91\x89a\x08\xDFV[P=a\n\x15V[a\nJ\x91\x9AP=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x98\x8Aa\x06\x06V[a\ne\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x8Aa\x05\xBBV[a\n\x84\x91P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x89a\x05\\V[4a\x02\xAEW`@6`\x03\x19\x01\x12a\x02\xAEWa\n\xA3a\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEWa\n\xC2\x906\x90`\x04\x01a\x0F:V[\x80Qa\n\xE6a\n\xD0\x82a\x0E\x1BV[\x91a\n\xDE`@Q\x93\x84a\r\xFAV[\x80\x83Ra\x0E\x1BV[` \x82\x01\x92\x90`\x1F\x19\x016\x847`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92_[\x81Q\x81\x10\x15a\x0B{Wa\x0B\x14\x81\x83a\x10#V[Q\x90`@Q\x91c\nZ\xEC\x19`\xE2\x1B\x83R`\x04\x83\x01R` \x82`$\x81\x89Z\xFA\x80\x15a\x04\x02W`\x01\x92_\x91a\x0B]W[Pa\x0BM\x82\x86a\x10#V[\x90\x83\x80`\xA0\x1B\x03\x16\x90R\x01a\x0B\x01V[a\x0Bu\x91P` =\x81\x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x87a\x0BBV[\x83\x83`@Q\x91\x82\x91` \x83\x01\x90` \x84RQ\x80\x91R`@\x83\x01\x91\x90_[\x81\x81\x10a\x0B\xA6WPPP\x03\x90\xF3[\x82Q`\x01`\x01`\xA0\x1B\x03\x16\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0B\x98V[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\x0B\xE1a\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEW6`#\x82\x01\x12\x15a\x02\xAEW\x80`\x04\x015\x91a\x0C\x0C\x83a\x0EeV[a\x0C\x19`@Q\x91\x82a\r\xFAV[\x83\x81R6`$\x85\x85\x01\x01\x11a\x02\xAEW_` \x85a\x01\xFF\x96`$a\x0CM\x97\x01\x83\x86\x017\x83\x01\x01Ra\x0CGa\x0E\x80V[\x91a\x10\x83V[`@Q\x91\x82\x91` \x83R` \x83\x01\x90a\x0E\x93V[4a\x02\xAEW`@6`\x03\x19\x01\x12a\x02\xAEWa\x0Cza\r\xB5V[`$5\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW6`#\x83\x01\x12\x15a\x02\xAEW\x81`\x04\x015a\x0C\xA5\x81a\x0E\x1BV[\x92a\x0C\xB3`@Q\x94\x85a\r\xFAV[\x81\x84R`$` \x85\x01\x92`\x05\x1B\x82\x01\x01\x906\x82\x11a\x02\xAEW`$\x01\x91[\x81\x83\x10a\r\x95W\x83\x85a\x0C\xE3\x81Qa\x0F\xD0V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91_[\x82Q\x81\x10\x15a\r\x7FW`\x01`\x01`\xA0\x1B\x03a\r\x0C\x82\x85a\x10#V[Q`@Qc\t\xAA\x15'`\xE1\x1B\x81R\x91\x16`\x04\x82\x01R\x90` \x82`$\x81\x88Z\xFA\x80\x15a\x04\x02W_\x90a\rMW[`\x01\x92Pa\rF\x82\x85a\x10#V[R\x01a\x0C\xF1V[P` \x82=\x82\x11a\rwW[\x81a\rf` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEW`\x01\x91Qa\r8V[=\x91Pa\rYV[`@Q` \x80\x82R\x81\x90a\x01\xFF\x90\x82\x01\x85a\x0E2V[\x825`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x81R` \x92\x83\x01\x92\x01a\x0C\xD0V[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xAEWV[``\x81\x01\x90\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@RV[`\x01`\x01`@\x1B\x03\x81\x11a\r\xE6W`\x05\x1B` \x01\x90V[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\x0EOWPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0EBV[`\x01`\x01`@\x1B\x03\x81\x11a\r\xE6W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`D5\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xAEWV[\x90\x80` \x83Q\x91\x82\x81R\x01\x91` \x80\x83`\x05\x1B\x83\x01\x01\x94\x01\x92_\x91[\x83\x83\x10a\x0E\xBEWPPPPP\x90V[\x90\x91\x92\x93\x94`\x1F\x19\x82\x82\x03\x01\x83R\x85Q\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_\x90[\x80\x82\x10a\x0E\xFEWPPP` \x80`\x01\x92\x97\x01\x93\x01\x93\x01\x91\x93\x92\x90a\x0E\xAFV[\x90\x91\x92` ```\x01\x92`\x01`\x01``\x1B\x03`@\x88Q\x86\x80`\xA0\x1B\x03\x81Q\x16\x84R\x85\x81\x01Q\x86\x85\x01R\x01Q\x16`@\x82\x01R\x01\x94\x01\x92\x01\x90a\x0E\xDFV[\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x815a\x0FQ\x81a\x0E\x1BV[\x92a\x0F_`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x0F\x87WPPP\x90V[\x815\x81R` \x91\x82\x01\x91\x01a\x0FzV[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\x0F\xB4WPPP\x90V[\x82Qc\xFF\xFF\xFF\xFF\x16\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0F\xA7V[\x90a\x0F\xDA\x82a\x0E\x1BV[a\x0F\xE7`@Q\x91\x82a\r\xFAV[\x82\x81R\x80\x92a\x0F\xF8`\x1F\x19\x91a\x0E\x1BV[\x01\x90` 6\x91\x017V[\x80Q\x15a\x10\x0FW` \x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x10\x0FW` \x91`\x05\x1B\x01\x01\x90V[\x90\x81` \x91\x03\x12a\x02\xAEWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x90V[_[\x82\x81\x10a\x10dWPPPV[``\x82\x82\x01R` \x01a\x10XV[\x90\x81Q\x81\x10\x15a\x10\x0FW\x01` \x01\x90V[`@Qch0H5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92\x90\x91\x90` \x83`\x04\x81\x87Z\xFA\x92\x83\x15a\x04\x02W_\x93a\x14\x91W[P`@QcOL\x91\xE1`\xE1\x1B\x81R\x92` \x84`\x04\x81\x88Z\xFA\x93\x84\x15a\x04\x02W_\x94a\x14LW[P` `\x04\x94\x95`@Q\x95\x86\x80\x92c.\xFA,\xA3`\xE1\x1B\x82RZ\xFA\x93\x84\x15a\x04\x02W_\x94a\x14+W[P\x91\x94\x93\x90\x85Q\x92a\x11?a\x11\x18\x85a\x0E\x1BV[\x94a\x11&`@Q\x96\x87a\r\xFAV[\x80\x86Ra\x115`\x1F\x19\x91a\x0E\x1BV[\x01` \x86\x01a\x10VV[_\x96[\x80Q\x88\x10\x15a\x14!Wa\x11U\x88\x82a\x10rV[Q`@Qc\x89\x02bE`\xE0\x1B\x81R`\xF8\x91\x90\x91\x1C`\x04\x82\x01\x81\x90Rc\xFF\xFF\xFF\xFF\x85\x16`$\x83\x01R\x97\x90\x94_\x86`D\x81`\x01`\x01`\xA0\x1B\x03\x85\x16Z\xFA\x95\x86\x15a\x04\x02W_\x96a\x13\x8FW[P\x85Qa\x11\xAA\x81a\x0E\x1BV[\x90a\x11\xB8`@Q\x92\x83a\r\xFAV[\x80\x82Ra\x11\xC7`\x1F\x19\x91a\x0E\x1BV[\x01_[\x81\x81\x10a\x13fWPPa\x11\xDD\x8B\x89a\x10#V[Ra\x11\xE8\x8A\x88a\x10#V[P_[\x86Q\x81\x10\x15a\x13UWa\x11\xFE\x81\x88a\x10#V[Q`@Qc\x08\xF6b\x9D`\xE3\x1B\x81R`\x04\x81\x01\x91\x90\x91R\x90` \x82`$\x81`\x01`\x01`\xA0\x1B\x03\x8E\x16Z\xFA\x91\x82\x15a\x04\x02W_\x92a\x135W[P\x86a\x12A\x82\x8Aa\x10#V[Q` \x8Da\x12O\x85\x8Da\x10#V[Q`@Qc\xFA(\xC6'`\xE0\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\xFF\x91\x90\x91\x16`$\x82\x01Rc\xFF\xFF\xFF\xFF\x93\x90\x93\x16`D\x84\x01R\x82`d\x81`\x01`\x01`\xA0\x1B\x03\x8C\x16Z\xFA\x90\x81\x15a\x04\x02W\x8E\x92_\x92a\x12\xEEW[P\x93a\x12\xDBa\x12\xE7\x93`\x01`\x01``\x1B\x03\x86\x94`\x01\x98`@Q\x95a\x12\xC1\x87a\r\xCBV[\x8A\x80`\xA0\x1B\x03\x16\x86R` \x86\x01R\x16`@\x84\x01R\x8Da\x10#V[Q\x90a\x06q\x83\x83a\x10#V[P\x01a\x11\xEBV[\x91P\x91P` \x81=\x82\x11a\x13-W[\x81a\x13\n` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEWQ`\x01`\x01``\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x8D\x91a\x12\xDBa\x12\x9EV[=\x91Pa\x12\xFDV[a\x13N\x91\x92P` =\x81\x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x90_a\x125V[P`\x01\x90\x99\x01\x98\x90\x97P\x93Pa\x11BV[` \x90`@Qa\x13u\x81a\r\xCBV[_\x81R_\x83\x82\x01R_`@\x82\x01R\x82\x82\x86\x01\x01R\x01a\x11\xCAV[\x90\x95P=\x80_\x83>a\x13\xA1\x81\x83a\r\xFAV[\x81\x01\x90` \x81\x83\x03\x12a\x02\xAEW\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x81Qa\x13\xD7\x81a\x0E\x1BV[\x92a\x13\xE5`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x14\x11WPPP\x94_a\x11\x9EV[\x81Q\x81R` \x91\x82\x01\x91\x01a\x14\0V[P\x92\x95PPPPPV[a\x14E\x91\x94P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x92_a\x11\x04V[\x90\x93P` \x81=` \x11a\x14\x89W[\x81a\x14h` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEWQ\x92`\x01`\x01`\xA0\x1B\x03\x84\x16\x84\x03a\x02\xAEW` a\x10\xDCV[=\x91Pa\x14[V[a\x14\xAB\x91\x93P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x91_a\x10\xB6V[`@Q\x90`\x80\x82\x01\x82\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@R``\x80\x83\x81\x81R\x81` \x82\x01R\x81`@\x82\x01R\x01RV[Q\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xAEWV[` \x81\x83\x03\x12a\x02\xAEW\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x81Qa\x15*\x81a\x0E\x1BV[\x92a\x158`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x15`WPPP\x90V[` \x80\x91a\x15m\x84a\x14\xE6V[\x81R\x01\x91\x01\x90a\x15SV[\x90\x80` \x93\x92\x81\x84R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x91\x90\x81\x10\x15a\x10\x0FW`\x05\x1B\x01\x90V[\x90\x81` \x91\x03\x12a\x02\xAEWQ`\x01`\x01`\xC0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x90V[\x90\x82\x10\x15a\x10\x0FW\x01\x90V[_\x19\x81\x14a\x023W`\x01\x01\x90V[`@\x90c\xFF\xFF\xFF\xFFa\x15\xFE\x94\x93\x16\x81R\x81` \x82\x01R\x01\x90a\x0E2V[\x90V\xFE\xA2dipfsX\"\x12 \x81<l\x93\xBAR\x93\xE4\xE3`\"\xB3\xEC\x86\xDB\x94\xC9\x0B\xDDZ\x98M\xAD1R\xA2\xB0\xC2\xCEB\xC8tdsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806331b36bd914610c615780633563b0d114610bc85780634d2b57fe14610a8a5780634f739f741461046d5780635c155662146102b25763cefdc1d41461005b575f80fd5b346102ae5760603660031901126102ae57610074610db5565b60243590610080610e80565b916040926100d78451926100948685610dfa565b60018452601f198601366020860137806100ad85611002565b5285516361c8a12f60e11b81526001600160a01b0386169490925f918491829187600484016115e1565b0381875afa9182156102a45763ffffffff6100fe6020946064935f91610282575b50611002565b511691875195869384926304ec635160e01b8452600484015263ffffffff8716602484015260448301525afa918215610278575f92610247575b506001600160c01b038216915f83805b61020e575061ffff169261015b84610e65565b9361016887519586610dfa565b808552610177601f1991610e65565b013660208601375f925f5b8551851080610203575b156101da576001811b84166001600160c01b03166101b3575b6101ae906115d3565b610182565b9360016101ae9160ff60f81b8760f81b165f1a6101d0828a611072565b53019490506101a5565b87836101ff6101ea858a8c611083565b83519384938452806020850152830190610e93565b0390f35b50610100811061018c565b5f1981018181116102335761ffff9116911661ffff8114610233576001019080610148565b634e487b7160e01b5f52601160045260245ffd5b61026a91925060203d602011610271575b6102628183610dfa565b8101906115a8565b905f610138565b503d610258565b84513d5f823e3d90fd5b61029e91503d805f833e6102968183610dfa565b8101906114f7565b5f6100f8565b86513d5f823e3d90fd5b5f80fd5b346102ae5760603660031901126102ae576102cb610db5565b6024356001600160401b0381116102ae576102ea903690600401610f3a565b6102f2610e80565b6040516361c8a12f60e11b815290926001600160a01b03165f828061031b8688600484016115e1565b0381845afa918215610402575f92610451575b5082519361035461033e86610e1b565b9561034c6040519788610dfa565b808752610e1b565b602086019490601f19013686375f5b815181101561040d576103768183611023565b519060208463ffffffff61038a848a611023565b516040516304ec635160e01b8152600481019690965263ffffffff92831660248701521616604484015282606481885afa8015610402576001925f916103e4575b50828060c01b03166103dd828a611023565b5201610363565b6103fc915060203d8111610271576102628183610dfa565b896103cb565b6040513d5f823e3d90fd5b8587604051918291602083019060208452518091526040830191905f5b818110610438575050500390f35b825184528594506020938401939092019160010161042a565b6104669192503d805f833e6102968183610dfa565b908461032e565b346102ae5760803660031901126102ae57610486610db5565b60243563ffffffff8116908181036102ae57604435926001600160401b0384116102ae57366023850112156102ae578360040135936001600160401b0385116102ae57602481019060248636920101116102ae57606435926001600160401b0384116102ae57366023850112156102ae578360040135956001600160401b0387116102ae5760248501938760051b9560248736920101116102ae576105296114b2565b50604051636830483560e01b81526001600160a01b03919091169390602081600481885afa908115610402575f91610a6b575b506105656114b2565b604080516361c8a12f60e11b8152600481018b90526024810191909152604481018b905290976001600160fb1b038b116102ae5781606481835f948c848401378101030181895afa908115610402575f91610a51575b50875260018060a01b031691604051986340e03a8160e11b8a528860048b0152604060248b01525f8a806105f3604482018688611578565b0381875afa998a15610402575f9a610a35575b5060408801998a5261061782610e1b565b966106256040519889610dfa565b828852610641601f1961063785610e1b565b0160208a01611056565b606089019788525f5b60ff8116848110156108ac575f6106778261066487610fd0565b8d51906106718383611023565b52611023565b505f84868e5b8d8d8386106106fa5750505050505061069581610fd0565b905f5b8c8282106106ca5760ff959492506106b893915051906106718383611023565b501660ff81146102335760010161064a565b9063ffffffff6106e7826106e18860019651611023565b51611023565b51166106f38286611023565b5201610698565b63ffffffff61071b87610713816020986107559a611598565b359551611023565b516040516304ec635160e01b8152600481019590955263ffffffff9283166024860152161660448301529092839190829081906064820190565b03915afa908115610402575f9161088e575b506001600160c01b0316801561087f5760018091610786868b8d6115c7565b3560f81c1c161461079d575b60010184868e61067d565b908960206107ac848989611598565b356107b8868b8d6115c7565b60405163dd9846b960e01b815260048101929092523560f81c602482015263ffffffff929092166044830152816064818d5afa908115610402578d85915f93610829575b509163ffffffff610818856106e1600197956108219751611023565b911690526115d3565b919050610792565b925050506020813d8211610877575b8161084560209383610dfa565b810103126102ae57818d63ffffffff6108186001956106e18961086a610821986114e6565b97509550509550506107fc565b3d9150610838565b6325ec6c1f60e01b5f5260045ffd5b6108a6915060203d8111610271576102628183610dfa565b5f610767565b5089898c8e8760048a60208f60405193848092632efa2ca360e11b82525afa908115610402575f93610905938593610a04575b506040519687948593849363354952a360e21b8552604060048601526044850191611578565b602483019190915203916001600160a01b03165afa9182156104025761098392610970915f916109ea575b50908594939291602061095d970190815260405196879660208852516080602089015260a0880190610f97565b9051868203601f19016040880152610f97565b9051848203601f19016060860152610f97565b905190601f19838203016080840152815180825260208201916020808360051b8301019401925f915b8383106109b95786860387f35b9193955091936020806109d8600193601f198682030187528951610f97565b970193019301909286959492936109ac565b6109fe91503d805f833e6102968183610dfa565b86610930565b610a2791935060203d602011610a2e575b610a1f8183610dfa565b810190611037565b91896108df565b503d610a15565b610a4a919a503d805f833e6102968183610dfa565b988a610606565b610a6591503d805f833e6102968183610dfa565b8a6105bb565b610a84915060203d602011610a2e57610a1f8183610dfa565b8961055c565b346102ae5760403660031901126102ae57610aa3610db5565b6024356001600160401b0381116102ae57610ac2903690600401610f3a565b8051610ae6610ad082610e1b565b91610ade6040519384610dfa565b808352610e1b565b602082019290601f19013684376001600160a01b03909316925f5b8151811015610b7b57610b148183611023565b519060405191630a5aec1960e21b83526004830152602082602481895afa8015610402576001925f91610b5d575b50610b4d8286611023565b90838060a01b0316905201610b01565b610b75915060203d8111610a2e57610a1f8183610dfa565b87610b42565b8383604051918291602083019060208452518091526040830191905f5b818110610ba6575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610b98565b346102ae5760603660031901126102ae57610be1610db5565b6024356001600160401b0381116102ae57366023820112156102ae57806004013591610c0c83610e65565b610c196040519182610dfa565b83815236602485850101116102ae575f6020856101ff966024610c4d97018386013783010152610c47610e80565b91611083565b604051918291602083526020830190610e93565b346102ae5760403660031901126102ae57610c7a610db5565b602435906001600160401b0382116102ae57366023830112156102ae578160040135610ca581610e1b565b92610cb36040519485610dfa565b8184526024602085019260051b820101903682116102ae57602401915b818310610d95578385610ce38151610fd0565b6001600160a01b03909216915f5b8251811015610d7f576001600160a01b03610d0c8285611023565b516040516309aa152760e11b81529116600482015290602082602481885afa8015610402575f90610d4d575b60019250610d468285611023565b5201610cf1565b506020823d8211610d77575b81610d6660209383610dfa565b810103126102ae5760019151610d38565b3d9150610d59565b604051602080825281906101ff90820185610e32565b82356001600160a01b03811681036102ae57815260209283019201610cd0565b600435906001600160a01b03821682036102ae57565b606081019081106001600160401b03821117610de657604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b03821117610de657604052565b6001600160401b038111610de65760051b60200190565b90602080835192838152019201905f5b818110610e4f5750505090565b8251845260209384019390920191600101610e42565b6001600160401b038111610de657601f01601f191660200190565b6044359063ffffffff821682036102ae57565b9080602083519182815201916020808360051b8301019401925f915b838310610ebe57505050505090565b9091929394601f19828203018352855190602080835192838152019201905f905b808210610efe5750505060208060019297019301930191939290610eaf565b909192602060606001926001600160601b0360408851868060a01b03815116845285810151868501520151166040820152019401920190610edf565b9080601f830112156102ae578135610f5181610e1b565b92610f5f6040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b828210610f875750505090565b8135815260209182019101610f7a565b90602080835192838152019201905f5b818110610fb45750505090565b825163ffffffff16845260209384019390920191600101610fa7565b90610fda82610e1b565b610fe76040519182610dfa565b8281528092610ff8601f1991610e1b565b0190602036910137565b80511561100f5760200190565b634e487b7160e01b5f52603260045260245ffd5b805182101561100f5760209160051b010190565b908160209103126102ae57516001600160a01b03811681036102ae5790565b5f5b82811061106457505050565b606082820152602001611058565b90815181101561100f570160200190565b604051636830483560e01b81526001600160a01b0390911692909190602083600481875afa928315610402575f93611491575b50604051634f4c91e160e11b815292602084600481885afa938415610402575f9461144c575b5060206004949560405195868092632efa2ca360e11b82525afa938415610402575f9461142b575b509194939085519261113f61111885610e1b565b946111266040519687610dfa565b808652611135601f1991610e1b565b0160208601611056565b5f965b8051881015611421576111558882611072565b51604051638902624560e01b815260f89190911c6004820181905263ffffffff851660248301529790945f866044816001600160a01b0385165afa958615610402575f9661138f575b5085516111aa81610e1b565b906111b86040519283610dfa565b8082526111c7601f1991610e1b565b015f5b8181106113665750506111dd8b89611023565b526111e88a88611023565b505f5b8651811015611355576111fe8188611023565b516040516308f6629d60e31b81526004810191909152906020826024816001600160a01b038e165afa918215610402575f92611335575b5086611241828a611023565b5160208d61124f858d611023565b5160405163fa28c62760e01b8152600481019190915260ff91909116602482015263ffffffff939093166044840152826064816001600160a01b038c165afa908115610402578e925f926112ee575b50936112db6112e7936001600160601b038694600198604051956112c187610dcb565b8a8060a01b0316865260208601521660408401528d611023565b51906106718383611023565b50016111eb565b915091506020813d821161132d575b8161130a60209383610dfa565b810103126102ae57516001600160601b03811681036102ae578d916112db61129e565b3d91506112fd565b61134e91925060203d8111610a2e57610a1f8183610dfa565b905f611235565b506001909901989097509350611142565b60209060405161137581610dcb565b5f81525f838201525f6040820152828286010152016111ca565b9095503d805f833e6113a18183610dfa565b8101906020818303126102ae578051906001600160401b0382116102ae57019080601f830112156102ae5781516113d781610e1b565b926113e56040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b82821061141157505050945f61119e565b8151815260209182019101611400565b5092955050505050565b61144591945060203d602011610a2e57610a1f8183610dfa565b925f611104565b9093506020813d602011611489575b8161146860209383610dfa565b810103126102ae5751926001600160a01b03841684036102ae5760206110dc565b3d915061145b565b6114ab91935060203d602011610a2e57610a1f8183610dfa565b915f6110b6565b60405190608082018281106001600160401b03821117610de657604052606080838181528160208201528160408201520152565b519063ffffffff821682036102ae57565b6020818303126102ae578051906001600160401b0382116102ae57019080601f830112156102ae57815161152a81610e1b565b926115386040519485610dfa565b81845260208085019260051b8201019283116102ae57602001905b8282106115605750505090565b6020809161156d846114e6565b815201910190611553565b908060209392818452848401375f828201840152601f01601f1916010190565b919081101561100f5760051b0190565b908160209103126102ae57516001600160c01b03811681036102ae5790565b9082101561100f570190565b5f1981146102335760010190565b60409063ffffffff6115fe94931681528160208201520190610e32565b9056fea2646970667358221220813c6c93ba5293e4e36022b3ec86db94c90bdd5a984dad3152a2b0c2ce42c87464736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c1\xB3k\xD9\x14a\x0CaW\x80c5c\xB0\xD1\x14a\x0B\xC8W\x80cM+W\xFE\x14a\n\x8AW\x80cOs\x9Ft\x14a\x04mW\x80c\\\x15Vb\x14a\x02\xB2Wc\xCE\xFD\xC1\xD4\x14a\0[W_\x80\xFD[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\0ta\r\xB5V[`$5\x90a\0\x80a\x0E\x80V[\x91`@\x92a\0\xD7\x84Q\x92a\0\x94\x86\x85a\r\xFAV[`\x01\x84R`\x1F\x19\x86\x016` \x86\x017\x80a\0\xAD\x85a\x10\x02V[R\x85Qca\xC8\xA1/`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16\x94\x90\x92_\x91\x84\x91\x82\x91\x87`\x04\x84\x01a\x15\xE1V[\x03\x81\x87Z\xFA\x91\x82\x15a\x02\xA4Wc\xFF\xFF\xFF\xFFa\0\xFE` \x94`d\x93_\x91a\x02\x82W[Pa\x10\x02V[Q\x16\x91\x87Q\x95\x86\x93\x84\x92c\x04\xECcQ`\xE0\x1B\x84R`\x04\x84\x01Rc\xFF\xFF\xFF\xFF\x87\x16`$\x84\x01R`D\x83\x01RZ\xFA\x91\x82\x15a\x02xW_\x92a\x02GW[P`\x01`\x01`\xC0\x1B\x03\x82\x16\x91_\x83\x80[a\x02\x0EWPa\xFF\xFF\x16\x92a\x01[\x84a\x0EeV[\x93a\x01h\x87Q\x95\x86a\r\xFAV[\x80\x85Ra\x01w`\x1F\x19\x91a\x0EeV[\x016` \x86\x017_\x92_[\x85Q\x85\x10\x80a\x02\x03W[\x15a\x01\xDAW`\x01\x81\x1B\x84\x16`\x01`\x01`\xC0\x1B\x03\x16a\x01\xB3W[a\x01\xAE\x90a\x15\xD3V[a\x01\x82V[\x93`\x01a\x01\xAE\x91`\xFF`\xF8\x1B\x87`\xF8\x1B\x16_\x1Aa\x01\xD0\x82\x8Aa\x10rV[S\x01\x94\x90Pa\x01\xA5V[\x87\x83a\x01\xFFa\x01\xEA\x85\x8A\x8Ca\x10\x83V[\x83Q\x93\x84\x93\x84R\x80` \x85\x01R\x83\x01\x90a\x0E\x93V[\x03\x90\xF3[Pa\x01\0\x81\x10a\x01\x8CV[_\x19\x81\x01\x81\x81\x11a\x023Wa\xFF\xFF\x91\x16\x91\x16a\xFF\xFF\x81\x14a\x023W`\x01\x01\x90\x80a\x01HV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x02j\x91\x92P` =` \x11a\x02qW[a\x02b\x81\x83a\r\xFAV[\x81\x01\x90a\x15\xA8V[\x90_a\x018V[P=a\x02XV[\x84Q=_\x82>=\x90\xFD[a\x02\x9E\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x81\x01\x90a\x14\xF7V[_a\0\xF8V[\x86Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\x02\xCBa\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEWa\x02\xEA\x906\x90`\x04\x01a\x0F:V[a\x02\xF2a\x0E\x80V[`@Qca\xC8\xA1/`\xE1\x1B\x81R\x90\x92`\x01`\x01`\xA0\x1B\x03\x16_\x82\x80a\x03\x1B\x86\x88`\x04\x84\x01a\x15\xE1V[\x03\x81\x84Z\xFA\x91\x82\x15a\x04\x02W_\x92a\x04QW[P\x82Q\x93a\x03Ta\x03>\x86a\x0E\x1BV[\x95a\x03L`@Q\x97\x88a\r\xFAV[\x80\x87Ra\x0E\x1BV[` \x86\x01\x94\x90`\x1F\x19\x016\x867_[\x81Q\x81\x10\x15a\x04\rWa\x03v\x81\x83a\x10#V[Q\x90` \x84c\xFF\xFF\xFF\xFFa\x03\x8A\x84\x8Aa\x10#V[Q`@Qc\x04\xECcQ`\xE0\x1B\x81R`\x04\x81\x01\x96\x90\x96Rc\xFF\xFF\xFF\xFF\x92\x83\x16`$\x87\x01R\x16\x16`D\x84\x01R\x82`d\x81\x88Z\xFA\x80\x15a\x04\x02W`\x01\x92_\x91a\x03\xE4W[P\x82\x80`\xC0\x1B\x03\x16a\x03\xDD\x82\x8Aa\x10#V[R\x01a\x03cV[a\x03\xFC\x91P` =\x81\x11a\x02qWa\x02b\x81\x83a\r\xFAV[\x89a\x03\xCBV[`@Q=_\x82>=\x90\xFD[\x85\x87`@Q\x91\x82\x91` \x83\x01\x90` \x84RQ\x80\x91R`@\x83\x01\x91\x90_[\x81\x81\x10a\x048WPPP\x03\x90\xF3[\x82Q\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x04*V[a\x04f\x91\x92P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x90\x84a\x03.V[4a\x02\xAEW`\x806`\x03\x19\x01\x12a\x02\xAEWa\x04\x86a\r\xB5V[`$5c\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x81\x03a\x02\xAEW`D5\x92`\x01`\x01`@\x1B\x03\x84\x11a\x02\xAEW6`#\x85\x01\x12\x15a\x02\xAEW\x83`\x04\x015\x93`\x01`\x01`@\x1B\x03\x85\x11a\x02\xAEW`$\x81\x01\x90`$\x866\x92\x01\x01\x11a\x02\xAEW`d5\x92`\x01`\x01`@\x1B\x03\x84\x11a\x02\xAEW6`#\x85\x01\x12\x15a\x02\xAEW\x83`\x04\x015\x95`\x01`\x01`@\x1B\x03\x87\x11a\x02\xAEW`$\x85\x01\x93\x87`\x05\x1B\x95`$\x876\x92\x01\x01\x11a\x02\xAEWa\x05)a\x14\xB2V[P`@Qch0H5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16\x93\x90` \x81`\x04\x81\x88Z\xFA\x90\x81\x15a\x04\x02W_\x91a\nkW[Pa\x05ea\x14\xB2V[`@\x80Qca\xC8\xA1/`\xE1\x1B\x81R`\x04\x81\x01\x8B\x90R`$\x81\x01\x91\x90\x91R`D\x81\x01\x8B\x90R\x90\x97`\x01`\x01`\xFB\x1B\x03\x8B\x11a\x02\xAEW\x81`d\x81\x83_\x94\x8C\x84\x84\x017\x81\x01\x03\x01\x81\x89Z\xFA\x90\x81\x15a\x04\x02W_\x91a\nQW[P\x87R`\x01\x80`\xA0\x1B\x03\x16\x91`@Q\x98c@\xE0:\x81`\xE1\x1B\x8AR\x88`\x04\x8B\x01R`@`$\x8B\x01R_\x8A\x80a\x05\xF3`D\x82\x01\x86\x88a\x15xV[\x03\x81\x87Z\xFA\x99\x8A\x15a\x04\x02W_\x9Aa\n5W[P`@\x88\x01\x99\x8ARa\x06\x17\x82a\x0E\x1BV[\x96a\x06%`@Q\x98\x89a\r\xFAV[\x82\x88Ra\x06A`\x1F\x19a\x067\x85a\x0E\x1BV[\x01` \x8A\x01a\x10VV[``\x89\x01\x97\x88R_[`\xFF\x81\x16\x84\x81\x10\x15a\x08\xACW_a\x06w\x82a\x06d\x87a\x0F\xD0V[\x8DQ\x90a\x06q\x83\x83a\x10#V[Ra\x10#V[P_\x84\x86\x8E[\x8D\x8D\x83\x86\x10a\x06\xFAWPPPPPPa\x06\x95\x81a\x0F\xD0V[\x90_[\x8C\x82\x82\x10a\x06\xCAW`\xFF\x95\x94\x92Pa\x06\xB8\x93\x91PQ\x90a\x06q\x83\x83a\x10#V[P\x16`\xFF\x81\x14a\x023W`\x01\x01a\x06JV[\x90c\xFF\xFF\xFF\xFFa\x06\xE7\x82a\x06\xE1\x88`\x01\x96Qa\x10#V[Qa\x10#V[Q\x16a\x06\xF3\x82\x86a\x10#V[R\x01a\x06\x98V[c\xFF\xFF\xFF\xFFa\x07\x1B\x87a\x07\x13\x81` \x98a\x07U\x9Aa\x15\x98V[5\x95Qa\x10#V[Q`@Qc\x04\xECcQ`\xE0\x1B\x81R`\x04\x81\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x92\x83\x16`$\x86\x01R\x16\x16`D\x83\x01R\x90\x92\x83\x91\x90\x82\x90\x81\x90`d\x82\x01\x90V[\x03\x91Z\xFA\x90\x81\x15a\x04\x02W_\x91a\x08\x8EW[P`\x01`\x01`\xC0\x1B\x03\x16\x80\x15a\x08\x7FW`\x01\x80\x91a\x07\x86\x86\x8B\x8Da\x15\xC7V[5`\xF8\x1C\x1C\x16\x14a\x07\x9DW[`\x01\x01\x84\x86\x8Ea\x06}V[\x90\x89` a\x07\xAC\x84\x89\x89a\x15\x98V[5a\x07\xB8\x86\x8B\x8Da\x15\xC7V[`@Qc\xDD\x98F\xB9`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R5`\xF8\x1C`$\x82\x01Rc\xFF\xFF\xFF\xFF\x92\x90\x92\x16`D\x83\x01R\x81`d\x81\x8DZ\xFA\x90\x81\x15a\x04\x02W\x8D\x85\x91_\x93a\x08)W[P\x91c\xFF\xFF\xFF\xFFa\x08\x18\x85a\x06\xE1`\x01\x97\x95a\x08!\x97Qa\x10#V[\x91\x16\x90Ra\x15\xD3V[\x91\x90Pa\x07\x92V[\x92PPP` \x81=\x82\x11a\x08wW[\x81a\x08E` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEW\x81\x8Dc\xFF\xFF\xFF\xFFa\x08\x18`\x01\x95a\x06\xE1\x89a\x08ja\x08!\x98a\x14\xE6V[\x97P\x95PP\x95PPa\x07\xFCV[=\x91Pa\x088V[c%\xECl\x1F`\xE0\x1B_R`\x04_\xFD[a\x08\xA6\x91P` =\x81\x11a\x02qWa\x02b\x81\x83a\r\xFAV[_a\x07gV[P\x89\x89\x8C\x8E\x87`\x04\x8A` \x8F`@Q\x93\x84\x80\x92c.\xFA,\xA3`\xE1\x1B\x82RZ\xFA\x90\x81\x15a\x04\x02W_\x93a\t\x05\x93\x85\x93a\n\x04W[P`@Q\x96\x87\x94\x85\x93\x84\x93c5IR\xA3`\xE2\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x91a\x15xV[`$\x83\x01\x91\x90\x91R\x03\x91`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x91\x82\x15a\x04\x02Wa\t\x83\x92a\tp\x91_\x91a\t\xEAW[P\x90\x85\x94\x93\x92\x91` a\t]\x97\x01\x90\x81R`@Q\x96\x87\x96` \x88RQ`\x80` \x89\x01R`\xA0\x88\x01\x90a\x0F\x97V[\x90Q\x86\x82\x03`\x1F\x19\x01`@\x88\x01Ra\x0F\x97V[\x90Q\x84\x82\x03`\x1F\x19\x01``\x86\x01Ra\x0F\x97V[\x90Q\x90`\x1F\x19\x83\x82\x03\x01`\x80\x84\x01R\x81Q\x80\x82R` \x82\x01\x91` \x80\x83`\x05\x1B\x83\x01\x01\x94\x01\x92_\x91[\x83\x83\x10a\t\xB9W\x86\x86\x03\x87\xF3[\x91\x93\x95P\x91\x93` \x80a\t\xD8`\x01\x93`\x1F\x19\x86\x82\x03\x01\x87R\x89Qa\x0F\x97V[\x97\x01\x93\x01\x93\x01\x90\x92\x86\x95\x94\x92\x93a\t\xACV[a\t\xFE\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x86a\t0V[a\n'\x91\x93P` =` \x11a\n.W[a\n\x1F\x81\x83a\r\xFAV[\x81\x01\x90a\x107V[\x91\x89a\x08\xDFV[P=a\n\x15V[a\nJ\x91\x9AP=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x98\x8Aa\x06\x06V[a\ne\x91P=\x80_\x83>a\x02\x96\x81\x83a\r\xFAV[\x8Aa\x05\xBBV[a\n\x84\x91P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x89a\x05\\V[4a\x02\xAEW`@6`\x03\x19\x01\x12a\x02\xAEWa\n\xA3a\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEWa\n\xC2\x906\x90`\x04\x01a\x0F:V[\x80Qa\n\xE6a\n\xD0\x82a\x0E\x1BV[\x91a\n\xDE`@Q\x93\x84a\r\xFAV[\x80\x83Ra\x0E\x1BV[` \x82\x01\x92\x90`\x1F\x19\x016\x847`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92_[\x81Q\x81\x10\x15a\x0B{Wa\x0B\x14\x81\x83a\x10#V[Q\x90`@Q\x91c\nZ\xEC\x19`\xE2\x1B\x83R`\x04\x83\x01R` \x82`$\x81\x89Z\xFA\x80\x15a\x04\x02W`\x01\x92_\x91a\x0B]W[Pa\x0BM\x82\x86a\x10#V[\x90\x83\x80`\xA0\x1B\x03\x16\x90R\x01a\x0B\x01V[a\x0Bu\x91P` =\x81\x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x87a\x0BBV[\x83\x83`@Q\x91\x82\x91` \x83\x01\x90` \x84RQ\x80\x91R`@\x83\x01\x91\x90_[\x81\x81\x10a\x0B\xA6WPPP\x03\x90\xF3[\x82Q`\x01`\x01`\xA0\x1B\x03\x16\x84R\x85\x94P` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0B\x98V[4a\x02\xAEW``6`\x03\x19\x01\x12a\x02\xAEWa\x0B\xE1a\r\xB5V[`$5`\x01`\x01`@\x1B\x03\x81\x11a\x02\xAEW6`#\x82\x01\x12\x15a\x02\xAEW\x80`\x04\x015\x91a\x0C\x0C\x83a\x0EeV[a\x0C\x19`@Q\x91\x82a\r\xFAV[\x83\x81R6`$\x85\x85\x01\x01\x11a\x02\xAEW_` \x85a\x01\xFF\x96`$a\x0CM\x97\x01\x83\x86\x017\x83\x01\x01Ra\x0CGa\x0E\x80V[\x91a\x10\x83V[`@Q\x91\x82\x91` \x83R` \x83\x01\x90a\x0E\x93V[4a\x02\xAEW`@6`\x03\x19\x01\x12a\x02\xAEWa\x0Cza\r\xB5V[`$5\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW6`#\x83\x01\x12\x15a\x02\xAEW\x81`\x04\x015a\x0C\xA5\x81a\x0E\x1BV[\x92a\x0C\xB3`@Q\x94\x85a\r\xFAV[\x81\x84R`$` \x85\x01\x92`\x05\x1B\x82\x01\x01\x906\x82\x11a\x02\xAEW`$\x01\x91[\x81\x83\x10a\r\x95W\x83\x85a\x0C\xE3\x81Qa\x0F\xD0V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91_[\x82Q\x81\x10\x15a\r\x7FW`\x01`\x01`\xA0\x1B\x03a\r\x0C\x82\x85a\x10#V[Q`@Qc\t\xAA\x15'`\xE1\x1B\x81R\x91\x16`\x04\x82\x01R\x90` \x82`$\x81\x88Z\xFA\x80\x15a\x04\x02W_\x90a\rMW[`\x01\x92Pa\rF\x82\x85a\x10#V[R\x01a\x0C\xF1V[P` \x82=\x82\x11a\rwW[\x81a\rf` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEW`\x01\x91Qa\r8V[=\x91Pa\rYV[`@Q` \x80\x82R\x81\x90a\x01\xFF\x90\x82\x01\x85a\x0E2V[\x825`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x81R` \x92\x83\x01\x92\x01a\x0C\xD0V[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xAEWV[``\x81\x01\x90\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@RV[`\x01`\x01`@\x1B\x03\x81\x11a\r\xE6W`\x05\x1B` \x01\x90V[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\x0EOWPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0EBV[`\x01`\x01`@\x1B\x03\x81\x11a\r\xE6W`\x1F\x01`\x1F\x19\x16` \x01\x90V[`D5\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xAEWV[\x90\x80` \x83Q\x91\x82\x81R\x01\x91` \x80\x83`\x05\x1B\x83\x01\x01\x94\x01\x92_\x91[\x83\x83\x10a\x0E\xBEWPPPPP\x90V[\x90\x91\x92\x93\x94`\x1F\x19\x82\x82\x03\x01\x83R\x85Q\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_\x90[\x80\x82\x10a\x0E\xFEWPPP` \x80`\x01\x92\x97\x01\x93\x01\x93\x01\x91\x93\x92\x90a\x0E\xAFV[\x90\x91\x92` ```\x01\x92`\x01`\x01``\x1B\x03`@\x88Q\x86\x80`\xA0\x1B\x03\x81Q\x16\x84R\x85\x81\x01Q\x86\x85\x01R\x01Q\x16`@\x82\x01R\x01\x94\x01\x92\x01\x90a\x0E\xDFV[\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x815a\x0FQ\x81a\x0E\x1BV[\x92a\x0F_`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x0F\x87WPPP\x90V[\x815\x81R` \x91\x82\x01\x91\x01a\x0FzV[\x90` \x80\x83Q\x92\x83\x81R\x01\x92\x01\x90_[\x81\x81\x10a\x0F\xB4WPPP\x90V[\x82Qc\xFF\xFF\xFF\xFF\x16\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x0F\xA7V[\x90a\x0F\xDA\x82a\x0E\x1BV[a\x0F\xE7`@Q\x91\x82a\r\xFAV[\x82\x81R\x80\x92a\x0F\xF8`\x1F\x19\x91a\x0E\x1BV[\x01\x90` 6\x91\x017V[\x80Q\x15a\x10\x0FW` \x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x10\x0FW` \x91`\x05\x1B\x01\x01\x90V[\x90\x81` \x91\x03\x12a\x02\xAEWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x90V[_[\x82\x81\x10a\x10dWPPPV[``\x82\x82\x01R` \x01a\x10XV[\x90\x81Q\x81\x10\x15a\x10\x0FW\x01` \x01\x90V[`@Qch0H5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92\x90\x91\x90` \x83`\x04\x81\x87Z\xFA\x92\x83\x15a\x04\x02W_\x93a\x14\x91W[P`@QcOL\x91\xE1`\xE1\x1B\x81R\x92` \x84`\x04\x81\x88Z\xFA\x93\x84\x15a\x04\x02W_\x94a\x14LW[P` `\x04\x94\x95`@Q\x95\x86\x80\x92c.\xFA,\xA3`\xE1\x1B\x82RZ\xFA\x93\x84\x15a\x04\x02W_\x94a\x14+W[P\x91\x94\x93\x90\x85Q\x92a\x11?a\x11\x18\x85a\x0E\x1BV[\x94a\x11&`@Q\x96\x87a\r\xFAV[\x80\x86Ra\x115`\x1F\x19\x91a\x0E\x1BV[\x01` \x86\x01a\x10VV[_\x96[\x80Q\x88\x10\x15a\x14!Wa\x11U\x88\x82a\x10rV[Q`@Qc\x89\x02bE`\xE0\x1B\x81R`\xF8\x91\x90\x91\x1C`\x04\x82\x01\x81\x90Rc\xFF\xFF\xFF\xFF\x85\x16`$\x83\x01R\x97\x90\x94_\x86`D\x81`\x01`\x01`\xA0\x1B\x03\x85\x16Z\xFA\x95\x86\x15a\x04\x02W_\x96a\x13\x8FW[P\x85Qa\x11\xAA\x81a\x0E\x1BV[\x90a\x11\xB8`@Q\x92\x83a\r\xFAV[\x80\x82Ra\x11\xC7`\x1F\x19\x91a\x0E\x1BV[\x01_[\x81\x81\x10a\x13fWPPa\x11\xDD\x8B\x89a\x10#V[Ra\x11\xE8\x8A\x88a\x10#V[P_[\x86Q\x81\x10\x15a\x13UWa\x11\xFE\x81\x88a\x10#V[Q`@Qc\x08\xF6b\x9D`\xE3\x1B\x81R`\x04\x81\x01\x91\x90\x91R\x90` \x82`$\x81`\x01`\x01`\xA0\x1B\x03\x8E\x16Z\xFA\x91\x82\x15a\x04\x02W_\x92a\x135W[P\x86a\x12A\x82\x8Aa\x10#V[Q` \x8Da\x12O\x85\x8Da\x10#V[Q`@Qc\xFA(\xC6'`\xE0\x1B\x81R`\x04\x81\x01\x91\x90\x91R`\xFF\x91\x90\x91\x16`$\x82\x01Rc\xFF\xFF\xFF\xFF\x93\x90\x93\x16`D\x84\x01R\x82`d\x81`\x01`\x01`\xA0\x1B\x03\x8C\x16Z\xFA\x90\x81\x15a\x04\x02W\x8E\x92_\x92a\x12\xEEW[P\x93a\x12\xDBa\x12\xE7\x93`\x01`\x01``\x1B\x03\x86\x94`\x01\x98`@Q\x95a\x12\xC1\x87a\r\xCBV[\x8A\x80`\xA0\x1B\x03\x16\x86R` \x86\x01R\x16`@\x84\x01R\x8Da\x10#V[Q\x90a\x06q\x83\x83a\x10#V[P\x01a\x11\xEBV[\x91P\x91P` \x81=\x82\x11a\x13-W[\x81a\x13\n` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEWQ`\x01`\x01``\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x8D\x91a\x12\xDBa\x12\x9EV[=\x91Pa\x12\xFDV[a\x13N\x91\x92P` =\x81\x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x90_a\x125V[P`\x01\x90\x99\x01\x98\x90\x97P\x93Pa\x11BV[` \x90`@Qa\x13u\x81a\r\xCBV[_\x81R_\x83\x82\x01R_`@\x82\x01R\x82\x82\x86\x01\x01R\x01a\x11\xCAV[\x90\x95P=\x80_\x83>a\x13\xA1\x81\x83a\r\xFAV[\x81\x01\x90` \x81\x83\x03\x12a\x02\xAEW\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x81Qa\x13\xD7\x81a\x0E\x1BV[\x92a\x13\xE5`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x14\x11WPPP\x94_a\x11\x9EV[\x81Q\x81R` \x91\x82\x01\x91\x01a\x14\0V[P\x92\x95PPPPPV[a\x14E\x91\x94P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x92_a\x11\x04V[\x90\x93P` \x81=` \x11a\x14\x89W[\x81a\x14h` \x93\x83a\r\xFAV[\x81\x01\x03\x12a\x02\xAEWQ\x92`\x01`\x01`\xA0\x1B\x03\x84\x16\x84\x03a\x02\xAEW` a\x10\xDCV[=\x91Pa\x14[V[a\x14\xAB\x91\x93P` =` \x11a\n.Wa\n\x1F\x81\x83a\r\xFAV[\x91_a\x10\xB6V[`@Q\x90`\x80\x82\x01\x82\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\r\xE6W`@R``\x80\x83\x81\x81R\x81` \x82\x01R\x81`@\x82\x01R\x01RV[Q\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xAEWV[` \x81\x83\x03\x12a\x02\xAEW\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xAEW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\xAEW\x81Qa\x15*\x81a\x0E\x1BV[\x92a\x158`@Q\x94\x85a\r\xFAV[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\xAEW` \x01\x90[\x82\x82\x10a\x15`WPPP\x90V[` \x80\x91a\x15m\x84a\x14\xE6V[\x81R\x01\x91\x01\x90a\x15SV[\x90\x80` \x93\x92\x81\x84R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x91\x90\x81\x10\x15a\x10\x0FW`\x05\x1B\x01\x90V[\x90\x81` \x91\x03\x12a\x02\xAEWQ`\x01`\x01`\xC0\x1B\x03\x81\x16\x81\x03a\x02\xAEW\x90V[\x90\x82\x10\x15a\x10\x0FW\x01\x90V[_\x19\x81\x14a\x023W`\x01\x01\x90V[`@\x90c\xFF\xFF\xFF\xFFa\x15\xFE\x94\x93\x16\x81R\x81` \x82\x01R\x01\x90a\x0E2V[\x90V\xFE\xA2dipfsX\"\x12 \x81<l\x93\xBAR\x93\xE4\xE3`\"\xB3\xEC\x86\xDB\x94\xC9\x0B\xDDZ\x98M\xAD1R\xA2\xB0\xC2\xCEB\xC8tdsolcC\0\x08\x1B\x003",
    );
    /**```solidity
struct CheckSignaturesIndices { uint32[] nonSignerQuorumBitmapIndices; uint32[] quorumApkIndices; uint32[] totalStakeIndices; uint32[][] nonSignerStakeIndices; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckSignaturesIndices {
        pub nonSignerQuorumBitmapIndices: alloy::sol_types::private::Vec<u32>,
        pub quorumApkIndices: alloy::sol_types::private::Vec<u32>,
        pub totalStakeIndices: alloy::sol_types::private::Vec<u32>,
        pub nonSignerStakeIndices: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Vec<u32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<32>>,
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<32>>,
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<32>>,
            alloy::sol_types::sol_data::Array<
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<32>>,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<u32>,
            alloy::sol_types::private::Vec<u32>,
            alloy::sol_types::private::Vec<u32>,
            alloy::sol_types::private::Vec<alloy::sol_types::private::Vec<u32>>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckSignaturesIndices> for UnderlyingRustTuple<'_> {
            fn from(value: CheckSignaturesIndices) -> Self {
                (
                    value.nonSignerQuorumBitmapIndices,
                    value.quorumApkIndices,
                    value.totalStakeIndices,
                    value.nonSignerStakeIndices,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CheckSignaturesIndices {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    nonSignerQuorumBitmapIndices: tuple.0,
                    quorumApkIndices: tuple.1,
                    totalStakeIndices: tuple.2,
                    nonSignerStakeIndices: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CheckSignaturesIndices {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CheckSignaturesIndices {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.nonSignerQuorumBitmapIndices,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.quorumApkIndices),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalStakeIndices),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Array<
                            alloy::sol_types::sol_data::Uint<32>,
                        >,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonSignerStakeIndices),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CheckSignaturesIndices {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CheckSignaturesIndices {
            const NAME: &'static str = "CheckSignaturesIndices";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CheckSignaturesIndices(uint32[] nonSignerQuorumBitmapIndices,uint32[] quorumApkIndices,uint32[] totalStakeIndices,uint32[][] nonSignerStakeIndices)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.nonSignerQuorumBitmapIndices,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.quorumApkIndices,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.totalStakeIndices,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Array<
                            alloy::sol_types::sol_data::Uint<32>,
                        >,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.nonSignerStakeIndices,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CheckSignaturesIndices {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.nonSignerQuorumBitmapIndices,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.quorumApkIndices,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.totalStakeIndices,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Array<
                            alloy::sol_types::sol_data::Uint<32>,
                        >,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.nonSignerStakeIndices,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Uint<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nonSignerQuorumBitmapIndices,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Uint<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.quorumApkIndices,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Uint<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.totalStakeIndices,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<32>,
                    >,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nonSignerStakeIndices,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Operator { address operator; bytes32 operatorId; uint96 stake; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Operator {
        pub operator: alloy::sol_types::private::Address,
        pub operatorId: alloy::sol_types::private::FixedBytes<32>,
        pub stake: alloy::sol_types::private::primitives::aliases::U96,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<96>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::primitives::aliases::U96,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Operator> for UnderlyingRustTuple<'_> {
            fn from(value: Operator) -> Self {
                (value.operator, value.operatorId, value.stake)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Operator {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    operator: tuple.0,
                    operatorId: tuple.1,
                    stake: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Operator {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Operator {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.operatorId),
                    <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::SolType>::tokenize(&self.stake),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Operator {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Operator {
            const NAME: &'static str = "Operator";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Operator(address operator,bytes32 operatorId,uint96 stake)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operator,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.operatorId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.stake)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Operator {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operator,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operatorId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.stake)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operator,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operatorId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    96,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stake,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `OperatorNotRegistered()` and selector `0x25ec6c1f`.
```solidity
error OperatorNotRegistered();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OperatorNotRegistered {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OperatorNotRegistered> for UnderlyingRustTuple<'_> {
            fn from(value: OperatorNotRegistered) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OperatorNotRegistered {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OperatorNotRegistered {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OperatorNotRegistered()";
            const SELECTOR: [u8; 4] = [37u8, 236u8, 108u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `getBatchOperatorFromId(address,bytes32[])` and selector `0x4d2b57fe`.
```solidity
function getBatchOperatorFromId(address registryCoordinator, bytes32[] memory operatorIds) external view returns (address[] memory operators);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBatchOperatorFromIdCall {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub operatorIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    ///Container type for the return parameters of the [`getBatchOperatorFromId(address,bytes32[])`](getBatchOperatorFromIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBatchOperatorFromIdReturn {
        pub operators: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBatchOperatorFromIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBatchOperatorFromIdCall) -> Self {
                    (value.registryCoordinator, value.operatorIds)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBatchOperatorFromIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        operatorIds: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBatchOperatorFromIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBatchOperatorFromIdReturn) -> Self {
                    (value.operators,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBatchOperatorFromIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { operators: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBatchOperatorFromIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBatchOperatorFromIdReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBatchOperatorFromId(address,bytes32[])";
            const SELECTOR: [u8; 4] = [77u8, 43u8, 87u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.operatorIds),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBatchOperatorId(address,address[])` and selector `0x31b36bd9`.
```solidity
function getBatchOperatorId(address registryCoordinator, address[] memory operators) external view returns (bytes32[] memory operatorIds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBatchOperatorIdCall {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub operators: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`getBatchOperatorId(address,address[])`](getBatchOperatorIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBatchOperatorIdReturn {
        pub operatorIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBatchOperatorIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBatchOperatorIdCall) -> Self {
                    (value.registryCoordinator, value.operators)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBatchOperatorIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        operators: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBatchOperatorIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBatchOperatorIdReturn) -> Self {
                    (value.operatorIds,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBatchOperatorIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { operatorIds: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBatchOperatorIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBatchOperatorIdReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBatchOperatorId(address,address[])";
            const SELECTOR: [u8; 4] = [49u8, 179u8, 107u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.operators),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCheckSignaturesIndices(address,uint32,bytes,bytes32[])` and selector `0x4f739f74`.
```solidity
function getCheckSignaturesIndices(address registryCoordinator, uint32 referenceBlockNumber, bytes memory quorumNumbers, bytes32[] memory nonSignerOperatorIds) external view returns (CheckSignaturesIndices memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCheckSignaturesIndicesCall {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub referenceBlockNumber: u32,
        pub quorumNumbers: alloy::sol_types::private::Bytes,
        pub nonSignerOperatorIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    ///Container type for the return parameters of the [`getCheckSignaturesIndices(address,uint32,bytes,bytes32[])`](getCheckSignaturesIndicesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCheckSignaturesIndicesReturn {
        pub _0: <CheckSignaturesIndices as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                u32,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCheckSignaturesIndicesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCheckSignaturesIndicesCall) -> Self {
                    (
                        value.registryCoordinator,
                        value.referenceBlockNumber,
                        value.quorumNumbers,
                        value.nonSignerOperatorIds,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCheckSignaturesIndicesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        referenceBlockNumber: tuple.1,
                        quorumNumbers: tuple.2,
                        nonSignerOperatorIds: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CheckSignaturesIndices,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CheckSignaturesIndices as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCheckSignaturesIndicesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCheckSignaturesIndicesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCheckSignaturesIndicesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCheckSignaturesIndicesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCheckSignaturesIndicesReturn;
            type ReturnTuple<'a> = (CheckSignaturesIndices,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCheckSignaturesIndices(address,uint32,bytes,bytes32[])";
            const SELECTOR: [u8; 4] = [79u8, 115u8, 159u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.referenceBlockNumber),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.quorumNumbers,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonSignerOperatorIds),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getOperatorState(address,bytes,uint32)` and selector `0x3563b0d1`.
```solidity
function getOperatorState(address registryCoordinator, bytes memory quorumNumbers, uint32 blockNumber) external view returns (Operator[][] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorState_0Call {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub quorumNumbers: alloy::sol_types::private::Bytes,
        pub blockNumber: u32,
    }
    ///Container type for the return parameters of the [`getOperatorState(address,bytes,uint32)`](getOperatorState_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorState_0Return {
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Vec<
                <Operator as alloy::sol_types::SolType>::RustType,
            >,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorState_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorState_0Call) -> Self {
                    (value.registryCoordinator, value.quorumNumbers, value.blockNumber)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorState_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        quorumNumbers: tuple.1,
                        blockNumber: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<Operator>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::Vec<
                        <Operator as alloy::sol_types::SolType>::RustType,
                    >,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorState_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorState_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorState_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getOperatorState_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getOperatorState_0Return;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<Operator>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getOperatorState(address,bytes,uint32)";
            const SELECTOR: [u8; 4] = [53u8, 99u8, 176u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.quorumNumbers,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getOperatorState(address,bytes32,uint32)` and selector `0xcefdc1d4`.
```solidity
function getOperatorState(address registryCoordinator, bytes32 operatorId, uint32 blockNumber) external view returns (uint256, Operator[][] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorState_1Call {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub operatorId: alloy::sol_types::private::FixedBytes<32>,
        pub blockNumber: u32,
    }
    ///Container type for the return parameters of the [`getOperatorState(address,bytes32,uint32)`](getOperatorState_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOperatorState_1Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Vec<
                <Operator as alloy::sol_types::SolType>::RustType,
            >,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorState_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorState_1Call) -> Self {
                    (value.registryCoordinator, value.operatorId, value.blockNumber)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorState_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        operatorId: tuple.1,
                        blockNumber: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<Operator>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::Vec<
                        <Operator as alloy::sol_types::SolType>::RustType,
                    >,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOperatorState_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOperatorState_1Return) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOperatorState_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getOperatorState_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getOperatorState_1Return;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<Operator>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getOperatorState(address,bytes32,uint32)";
            const SELECTOR: [u8; 4] = [206u8, 253u8, 193u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.operatorId),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getQuorumBitmapsAtBlockNumber(address,bytes32[],uint32)` and selector `0x5c155662`.
```solidity
function getQuorumBitmapsAtBlockNumber(address registryCoordinator, bytes32[] memory operatorIds, uint32 blockNumber) external view returns (uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getQuorumBitmapsAtBlockNumberCall {
        pub registryCoordinator: alloy::sol_types::private::Address,
        pub operatorIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        pub blockNumber: u32,
    }
    ///Container type for the return parameters of the [`getQuorumBitmapsAtBlockNumber(address,bytes32[],uint32)`](getQuorumBitmapsAtBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getQuorumBitmapsAtBlockNumberReturn {
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getQuorumBitmapsAtBlockNumberCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getQuorumBitmapsAtBlockNumberCall) -> Self {
                    (value.registryCoordinator, value.operatorIds, value.blockNumber)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getQuorumBitmapsAtBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        registryCoordinator: tuple.0,
                        operatorIds: tuple.1,
                        blockNumber: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getQuorumBitmapsAtBlockNumberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getQuorumBitmapsAtBlockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getQuorumBitmapsAtBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getQuorumBitmapsAtBlockNumberCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getQuorumBitmapsAtBlockNumberReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getQuorumBitmapsAtBlockNumber(address,bytes32[],uint32)";
            const SELECTOR: [u8; 4] = [92u8, 21u8, 86u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.registryCoordinator,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.operatorIds),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OperatorStateRetriever`](self) function calls.
    pub enum OperatorStateRetrieverCalls {
        getBatchOperatorFromId(getBatchOperatorFromIdCall),
        getBatchOperatorId(getBatchOperatorIdCall),
        getCheckSignaturesIndices(getCheckSignaturesIndicesCall),
        getOperatorState_0(getOperatorState_0Call),
        getOperatorState_1(getOperatorState_1Call),
        getQuorumBitmapsAtBlockNumber(getQuorumBitmapsAtBlockNumberCall),
    }
    #[automatically_derived]
    impl OperatorStateRetrieverCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [49u8, 179u8, 107u8, 217u8],
            [53u8, 99u8, 176u8, 209u8],
            [77u8, 43u8, 87u8, 254u8],
            [79u8, 115u8, 159u8, 116u8],
            [92u8, 21u8, 86u8, 98u8],
            [206u8, 253u8, 193u8, 212u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OperatorStateRetrieverCalls {
        const NAME: &'static str = "OperatorStateRetrieverCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getBatchOperatorFromId(_) => {
                    <getBatchOperatorFromIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBatchOperatorId(_) => {
                    <getBatchOperatorIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCheckSignaturesIndices(_) => {
                    <getCheckSignaturesIndicesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getOperatorState_0(_) => {
                    <getOperatorState_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getOperatorState_1(_) => {
                    <getOperatorState_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getQuorumBitmapsAtBlockNumber(_) => {
                    <getQuorumBitmapsAtBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls>] = &[
                {
                    fn getBatchOperatorId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getBatchOperatorIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverCalls::getBatchOperatorId)
                    }
                    getBatchOperatorId
                },
                {
                    fn getOperatorState_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getOperatorState_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverCalls::getOperatorState_0)
                    }
                    getOperatorState_0
                },
                {
                    fn getBatchOperatorFromId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getBatchOperatorFromIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverCalls::getBatchOperatorFromId)
                    }
                    getBatchOperatorFromId
                },
                {
                    fn getCheckSignaturesIndices(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getCheckSignaturesIndicesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverCalls::getCheckSignaturesIndices)
                    }
                    getCheckSignaturesIndices
                },
                {
                    fn getQuorumBitmapsAtBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getQuorumBitmapsAtBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OperatorStateRetrieverCalls::getQuorumBitmapsAtBlockNumber,
                            )
                    }
                    getQuorumBitmapsAtBlockNumber
                },
                {
                    fn getOperatorState_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverCalls> {
                        <getOperatorState_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverCalls::getOperatorState_1)
                    }
                    getOperatorState_1
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getBatchOperatorFromId(inner) => {
                    <getBatchOperatorFromIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBatchOperatorId(inner) => {
                    <getBatchOperatorIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCheckSignaturesIndices(inner) => {
                    <getCheckSignaturesIndicesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getOperatorState_0(inner) => {
                    <getOperatorState_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getOperatorState_1(inner) => {
                    <getOperatorState_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getQuorumBitmapsAtBlockNumber(inner) => {
                    <getQuorumBitmapsAtBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getBatchOperatorFromId(inner) => {
                    <getBatchOperatorFromIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBatchOperatorId(inner) => {
                    <getBatchOperatorIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCheckSignaturesIndices(inner) => {
                    <getCheckSignaturesIndicesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getOperatorState_0(inner) => {
                    <getOperatorState_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getOperatorState_1(inner) => {
                    <getOperatorState_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getQuorumBitmapsAtBlockNumber(inner) => {
                    <getQuorumBitmapsAtBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OperatorStateRetriever`](self) custom errors.
    pub enum OperatorStateRetrieverErrors {
        OperatorNotRegistered(OperatorNotRegistered),
    }
    #[automatically_derived]
    impl OperatorStateRetrieverErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[37u8, 236u8, 108u8, 31u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OperatorStateRetrieverErrors {
        const NAME: &'static str = "OperatorStateRetrieverErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OperatorNotRegistered(_) => {
                    <OperatorNotRegistered as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OperatorStateRetrieverErrors>] = &[
                {
                    fn OperatorNotRegistered(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OperatorStateRetrieverErrors> {
                        <OperatorNotRegistered as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OperatorStateRetrieverErrors::OperatorNotRegistered)
                    }
                    OperatorNotRegistered
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OperatorNotRegistered(inner) => {
                    <OperatorNotRegistered as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OperatorNotRegistered(inner) => {
                    <OperatorNotRegistered as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OperatorStateRetriever`](self) contract instance.

See the [wrapper's documentation](`OperatorStateRetrieverInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OperatorStateRetrieverInstance<T, P, N> {
        OperatorStateRetrieverInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OperatorStateRetrieverInstance<T, P, N>>,
    > {
        OperatorStateRetrieverInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OperatorStateRetrieverInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OperatorStateRetriever`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OperatorStateRetriever`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OperatorStateRetrieverInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OperatorStateRetrieverInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OperatorStateRetrieverInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OperatorStateRetrieverInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OperatorStateRetriever`](self) contract instance.

See the [wrapper's documentation](`OperatorStateRetrieverInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OperatorStateRetrieverInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OperatorStateRetrieverInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OperatorStateRetrieverInstance<T, P, N> {
            OperatorStateRetrieverInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OperatorStateRetrieverInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getBatchOperatorFromId`] function.
        pub fn getBatchOperatorFromId(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            operatorIds: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBatchOperatorFromIdCall, N> {
            self.call_builder(
                &getBatchOperatorFromIdCall {
                    registryCoordinator,
                    operatorIds,
                },
            )
        }
        ///Creates a new call builder for the [`getBatchOperatorId`] function.
        pub fn getBatchOperatorId(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            operators: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBatchOperatorIdCall, N> {
            self.call_builder(
                &getBatchOperatorIdCall {
                    registryCoordinator,
                    operators,
                },
            )
        }
        ///Creates a new call builder for the [`getCheckSignaturesIndices`] function.
        pub fn getCheckSignaturesIndices(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            referenceBlockNumber: u32,
            quorumNumbers: alloy::sol_types::private::Bytes,
            nonSignerOperatorIds: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCheckSignaturesIndicesCall, N> {
            self.call_builder(
                &getCheckSignaturesIndicesCall {
                    registryCoordinator,
                    referenceBlockNumber,
                    quorumNumbers,
                    nonSignerOperatorIds,
                },
            )
        }
        ///Creates a new call builder for the [`getOperatorState_0`] function.
        pub fn getOperatorState_0(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            quorumNumbers: alloy::sol_types::private::Bytes,
            blockNumber: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, getOperatorState_0Call, N> {
            self.call_builder(
                &getOperatorState_0Call {
                    registryCoordinator,
                    quorumNumbers,
                    blockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`getOperatorState_1`] function.
        pub fn getOperatorState_1(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            operatorId: alloy::sol_types::private::FixedBytes<32>,
            blockNumber: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, getOperatorState_1Call, N> {
            self.call_builder(
                &getOperatorState_1Call {
                    registryCoordinator,
                    operatorId,
                    blockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`getQuorumBitmapsAtBlockNumber`] function.
        pub fn getQuorumBitmapsAtBlockNumber(
            &self,
            registryCoordinator: alloy::sol_types::private::Address,
            operatorIds: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            blockNumber: u32,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getQuorumBitmapsAtBlockNumberCall,
            N,
        > {
            self.call_builder(
                &getQuorumBitmapsAtBlockNumberCall {
                    registryCoordinator,
                    operatorIds,
                    blockNumber,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OperatorStateRetrieverInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
