/**

Generated by the following Solidity interface...
```solidity
interface TransparentUpgradeableProxy {
    event AdminChanged(address previousAdmin, address newAdmin);
    event BeaconUpgraded(address indexed beacon);
    event Upgraded(address indexed implementation);

    constructor(address _logic, address admin_, bytes _data) payable;

    fallback() external payable;

    receive() external payable;

    function admin() external returns (address admin_);
    function changeAdmin(address newAdmin) external;
    function implementation() external returns (address implementation_);
    function upgradeTo(address newImplementation) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_logic",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "admin_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "admin_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "changeAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "implementation",
    "inputs": [],
    "outputs": [
      {
        "name": "implementation_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeTo",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "AdminChanged",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BeaconUpgraded",
    "inputs": [
      {
        "name": "beacon",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod TransparentUpgradeableProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405260405161177038038061177083398181016040528101906100259190610672565b828161003882825f61005160201b60201c565b50506100498261008860201b60201c565b50505061098a565b610060836100e060201b60201c565b5f8251118061006c5750805b1561008357610081838361013560201b60201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6100b761016860201b60201c565b826040516100c69291906106ed565b60405180910390a16100dd816101c160201b60201c565b50565b6100ef816102a360201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061016083836040518060600160405280602781526020016117496027913961036560201b60201c565b905092915050565b5f61019a7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61043a60201b60201c565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022690610794565b60405180910390fd5b806102617fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61043a60201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102b28161044360201b60201c565b6102f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e890610822565b60405180910390fd5b806103237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61043a60201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606103768461044360201b60201c565b6103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ac906108b0565b60405180910390fd5b5f5f8573ffffffffffffffffffffffffffffffffffffffff16856040516103dc9190610912565b5f60405180830381855af49150503d805f8114610414576040519150601f19603f3d011682016040523d82523d5f602084013e610419565b606091505b509150915061042f82828661046560201b60201c565b925050509392505050565b5f819050919050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610475578290506104c4565b5f835111156104875782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb919061096a565b60405180910390fd5b9392505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610505826104dc565b9050919050565b610515816104fb565b811461051f575f5ffd5b50565b5f815190506105308161050c565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105848261053e565b810181811067ffffffffffffffff821117156105a3576105a261054e565b5b80604052505050565b5f6105b56104cb565b90506105c1828261057b565b919050565b5f67ffffffffffffffff8211156105e0576105df61054e565b5b6105e98261053e565b9050602081019050919050565b8281835e5f83830152505050565b5f610616610611846105c6565b6105ac565b9050828152602081018484840111156106325761063161053a565b5b61063d8482856105f6565b509392505050565b5f82601f83011261065957610658610536565b5b8151610669848260208601610604565b91505092915050565b5f5f5f60608486031215610689576106886104d4565b5b5f61069686828701610522565b93505060206106a786828701610522565b925050604084015167ffffffffffffffff8111156106c8576106c76104d8565b5b6106d486828701610645565b9150509250925092565b6106e7816104fb565b82525050565b5f6040820190506107005f8301856106de565b61070d60208301846106de565b9392505050565b5f82825260208201905092915050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61077e602683610714565b915061078982610724565b604082019050919050565b5f6020820190508181035f8301526107ab81610772565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f61080c602d83610714565b9150610817826107b2565b604082019050919050565b5f6020820190508181035f83015261083981610800565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f5f8201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b5f61089a602683610714565b91506108a582610840565b604082019050919050565b5f6020820190508181035f8301526108c78161088e565b9050919050565b5f81519050919050565b5f81905092915050565b5f6108ec826108ce565b6108f681856108d8565b93506109068185602086016105f6565b80840191505092915050565b5f61091d82846108e2565b915081905092915050565b5f81519050919050565b5f61093c82610928565b6109468185610714565b93506109568185602086016105f6565b61095f8161053e565b840191505092915050565b5f6020820190508181035f8301526109828184610932565b905092915050565b610db2806109975f395ff3fe60806040526004361061004d575f3560e01c80633659cfe6146100665780634f1ef2861461008e5780635c60da1b146100aa5780638f283970146100d4578063f851a440146100fc5761005c565b3661005c5761005a610126565b005b610064610126565b005b348015610071575f5ffd5b5061008c600480360381019061008791906108d5565b610140565b005b6100a860048036038101906100a39190610961565b6101a4565b005b3480156100b5575f5ffd5b506100be610240565b6040516100cb91906109cd565b60405180910390f35b3480156100df575f5ffd5b506100fa60048036038101906100f591906108d5565b610296565b005b348015610107575f5ffd5b506101106102ea565b60405161011d91906109cd565b60405180910390f35b61012e610340565b61013e6101396103bf565b6103cd565b565b6101486103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610198576101938160405180602001604052805f8152505f61043f565b6101a1565b6101a0610126565b5b50565b6101ac6103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102325761022d8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050600161043f565b61023b565b61023a610126565b5b505050565b5f6102496103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361028a576102836103bf565b9050610293565b610292610126565b5b90565b61029e6103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102de576102d98161046a565b6102e7565b6102e6610126565b5b50565b5f6102f36103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103345761032d6103ec565b905061033d565b61033c610126565b5b90565b6103486103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ac90610a8c565b60405180910390fd5b6103bd6104b6565b565b5f6103c86104b8565b905090565b365f5f375f5f365f845af43d5f5f3e805f81146103e8573d5ff35b3d5ffd5b5f6104187fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61050b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61044883610514565b5f825111806104545750805b15610465576104638383610563565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104936103ec565b826040516104a2929190610aaa565b60405180910390a16104b381610590565b50565b565b5f6104e47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61050b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f819050919050565b61051d8161066c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606105888383604051806060016040528060278152602001610d5660279139610722565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590610b41565b60405180910390fd5b8061062a7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61050b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610675816107eb565b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90610bcf565b60405180910390fd5b806106e07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61050b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061072d846107eb565b61076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390610c5d565b60405180910390fd5b5f5f8573ffffffffffffffffffffffffffffffffffffffff16856040516107939190610ccd565b5f60405180830381855af49150503d805f81146107cb576040519150601f19603f3d011682016040523d82523d5f602084013e6107d0565b606091505b50915091506107e082828661080d565b925050509392505050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561081d5782905061086c565b5f8351111561082f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639190610d35565b60405180910390fd5b9392505050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108a48261087b565b9050919050565b6108b48161089a565b81146108be575f5ffd5b50565b5f813590506108cf816108ab565b92915050565b5f602082840312156108ea576108e9610873565b5b5f6108f7848285016108c1565b91505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261092157610920610900565b5b8235905067ffffffffffffffff81111561093e5761093d610904565b5b60208301915083600182028301111561095a57610959610908565b5b9250929050565b5f5f5f6040848603121561097857610977610873565b5b5f610985868287016108c1565b935050602084013567ffffffffffffffff8111156109a6576109a5610877565b5b6109b28682870161090c565b92509250509250925092565b6109c78161089a565b82525050565b5f6020820190506109e05f8301846109be565b92915050565b5f82825260208201905092915050565b7f5472616e73706172656e745570677261646561626c6550726f78793a2061646d5f8201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760208201527f6574000000000000000000000000000000000000000000000000000000000000604082015250565b5f610a766042836109e6565b9150610a81826109f6565b606082019050919050565b5f6020820190508181035f830152610aa381610a6a565b9050919050565b5f604082019050610abd5f8301856109be565b610aca60208301846109be565b9392505050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610b2b6026836109e6565b9150610b3682610ad1565b604082019050919050565b5f6020820190508181035f830152610b5881610b1f565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f610bb9602d836109e6565b9150610bc482610b5f565b604082019050919050565b5f6020820190508181035f830152610be681610bad565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f5f8201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b5f610c476026836109e6565b9150610c5282610bed565b604082019050919050565b5f6020820190508181035f830152610c7481610c3b565b9050919050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ca782610c7b565b610cb18185610c85565b9350610cc1818560208601610c8f565b80840191505092915050565b5f610cd88284610c9d565b915081905092915050565b5f81519050919050565b5f601f19601f8301169050919050565b5f610d0782610ce3565b610d1181856109e6565b9350610d21818560208601610c8f565b610d2a81610ced565b840191505092915050565b5f6020820190508181035f830152610d4d8184610cfd565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122019809302567f9dff8fe01036d7e23891fb5d07251eb9ecf31226488904e6c6c164736f6c634300081b0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`@Qa\x17p8\x03\x80a\x17p\x839\x81\x81\x01`@R\x81\x01\x90a\0%\x91\x90a\x06rV[\x82\x81a\08\x82\x82_a\0Q` \x1B` \x1CV[PPa\0I\x82a\0\x88` \x1B` \x1CV[PPPa\t\x8AV[a\0`\x83a\0\xE0` \x1B` \x1CV[_\x82Q\x11\x80a\0lWP\x80[\x15a\0\x83Wa\0\x81\x83\x83a\x015` \x1B` \x1CV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\0\xB7a\x01h` \x1B` \x1CV[\x82`@Qa\0\xC6\x92\x91\x90a\x06\xEDV[`@Q\x80\x91\x03\x90\xA1a\0\xDD\x81a\x01\xC1` \x1B` \x1CV[PV[a\0\xEF\x81a\x02\xA3` \x1B` \x1CV[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2PV[``a\x01`\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x17I`'\x919a\x03e` \x1B` \x1CV[\x90P\x92\x91PPV[_a\x01\x9A\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x04:` \x1B` \x1CV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x02/W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02&\x90a\x07\x94V[`@Q\x80\x91\x03\x90\xFD[\x80a\x02a\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x04:` \x1B` \x1CV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[a\x02\xB2\x81a\x04C` \x1B` \x1CV[a\x02\xF1W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\xE8\x90a\x08\"V[`@Q\x80\x91\x03\x90\xFD[\x80a\x03#\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba\x04:` \x1B` \x1CV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``a\x03v\x84a\x04C` \x1B` \x1CV[a\x03\xB5W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03\xAC\x90a\x08\xB0V[`@Q\x80\x91\x03\x90\xFD[__\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85`@Qa\x03\xDC\x91\x90a\t\x12V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x04\x14W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\x19V[``\x91P[P\x91P\x91Pa\x04/\x82\x82\x86a\x04e` \x1B` \x1CV[\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[__\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x11\x90P\x91\x90PV[``\x83\x15a\x04uW\x82\x90Pa\x04\xC4V[_\x83Q\x11\x15a\x04\x87W\x82Q\x80\x84` \x01\xFD[\x81`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xBB\x91\x90a\tjV[`@Q\x80\x91\x03\x90\xFD[\x93\x92PPPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x05\x05\x82a\x04\xDCV[\x90P\x91\x90PV[a\x05\x15\x81a\x04\xFBV[\x81\x14a\x05\x1FW__\xFD[PV[_\x81Q\x90Pa\x050\x81a\x05\x0CV[\x92\x91PPV[__\xFD[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05\x84\x82a\x05>V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05\xA3Wa\x05\xA2a\x05NV[[\x80`@RPPPV[_a\x05\xB5a\x04\xCBV[\x90Pa\x05\xC1\x82\x82a\x05{V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xE0Wa\x05\xDFa\x05NV[[a\x05\xE9\x82a\x05>V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x06\x16a\x06\x11\x84a\x05\xC6V[a\x05\xACV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x062Wa\x061a\x05:V[[a\x06=\x84\x82\x85a\x05\xF6V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06YWa\x06Xa\x056V[[\x81Qa\x06i\x84\x82` \x86\x01a\x06\x04V[\x91PP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x06\x89Wa\x06\x88a\x04\xD4V[[_a\x06\x96\x86\x82\x87\x01a\x05\"V[\x93PP` a\x06\xA7\x86\x82\x87\x01a\x05\"V[\x92PP`@\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xC8Wa\x06\xC7a\x04\xD8V[[a\x06\xD4\x86\x82\x87\x01a\x06EV[\x91PP\x92P\x92P\x92V[a\x06\xE7\x81a\x04\xFBV[\x82RPPV[_`@\x82\x01\x90Pa\x07\0_\x83\x01\x85a\x06\xDEV[a\x07\r` \x83\x01\x84a\x06\xDEV[\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FERC1967: new admin is the zero a_\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x07~`&\x83a\x07\x14V[\x91Pa\x07\x89\x82a\x07$V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x07\xAB\x81a\x07rV[\x90P\x91\x90PV[\x7FERC1967: new implementation is n_\x82\x01R\x7Fot a contract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x08\x0C`-\x83a\x07\x14V[\x91Pa\x08\x17\x82a\x07\xB2V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x089\x81a\x08\0V[\x90P\x91\x90PV[\x7FAddress: delegate call to non-co_\x82\x01R\x7Fntract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x08\x9A`&\x83a\x07\x14V[\x91Pa\x08\xA5\x82a\x08@V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x08\xC7\x81a\x08\x8EV[\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a\x08\xEC\x82a\x08\xCEV[a\x08\xF6\x81\x85a\x08\xD8V[\x93Pa\t\x06\x81\x85` \x86\x01a\x05\xF6V[\x80\x84\x01\x91PP\x92\x91PPV[_a\t\x1D\x82\x84a\x08\xE2V[\x91P\x81\x90P\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_a\t<\x82a\t(V[a\tF\x81\x85a\x07\x14V[\x93Pa\tV\x81\x85` \x86\x01a\x05\xF6V[a\t_\x81a\x05>V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\t\x82\x81\x84a\t2V[\x90P\x92\x91PPV[a\r\xB2\x80a\t\x97_9_\xF3\xFE`\x80`@R`\x046\x10a\0MW_5`\xE0\x1C\x80c6Y\xCF\xE6\x14a\0fW\x80cO\x1E\xF2\x86\x14a\0\x8EW\x80c\\`\xDA\x1B\x14a\0\xAAW\x80c\x8F(9p\x14a\0\xD4W\x80c\xF8Q\xA4@\x14a\0\xFCWa\0\\V[6a\0\\Wa\0Za\x01&V[\0[a\0da\x01&V[\0[4\x80\x15a\0qW__\xFD[Pa\0\x8C`\x04\x806\x03\x81\x01\x90a\0\x87\x91\x90a\x08\xD5V[a\x01@V[\0[a\0\xA8`\x04\x806\x03\x81\x01\x90a\0\xA3\x91\x90a\taV[a\x01\xA4V[\0[4\x80\x15a\0\xB5W__\xFD[Pa\0\xBEa\x02@V[`@Qa\0\xCB\x91\x90a\t\xCDV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xDFW__\xFD[Pa\0\xFA`\x04\x806\x03\x81\x01\x90a\0\xF5\x91\x90a\x08\xD5V[a\x02\x96V[\0[4\x80\x15a\x01\x07W__\xFD[Pa\x01\x10a\x02\xEAV[`@Qa\x01\x1D\x91\x90a\t\xCDV[`@Q\x80\x91\x03\x90\xF3[a\x01.a\x03@V[a\x01>a\x019a\x03\xBFV[a\x03\xCDV[V[a\x01Ha\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x01\x98Wa\x01\x93\x81`@Q\x80` \x01`@R\x80_\x81RP_a\x04?V[a\x01\xA1V[a\x01\xA0a\x01&V[[PV[a\x01\xACa\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x022Wa\x02-\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP`\x01a\x04?V[a\x02;V[a\x02:a\x01&V[[PPPV[_a\x02Ia\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x02\x8AWa\x02\x83a\x03\xBFV[\x90Pa\x02\x93V[a\x02\x92a\x01&V[[\x90V[a\x02\x9Ea\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x02\xDEWa\x02\xD9\x81a\x04jV[a\x02\xE7V[a\x02\xE6a\x01&V[[PV[_a\x02\xF3a\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x034Wa\x03-a\x03\xECV[\x90Pa\x03=V[a\x03<a\x01&V[[\x90V[a\x03Ha\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\xB5W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03\xAC\x90a\n\x8CV[`@Q\x80\x91\x03\x90\xFD[a\x03\xBDa\x04\xB6V[V[_a\x03\xC8a\x04\xB8V[\x90P\x90V[6__7__6_\x84Z\xF4=__>\x80_\x81\x14a\x03\xE8W=_\xF3[=_\xFD[_a\x04\x18\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x05\x0BV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a\x04H\x83a\x05\x14V[_\x82Q\x11\x80a\x04TWP\x80[\x15a\x04eWa\x04c\x83\x83a\x05cV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x04\x93a\x03\xECV[\x82`@Qa\x04\xA2\x92\x91\x90a\n\xAAV[`@Q\x80\x91\x03\x90\xA1a\x04\xB3\x81a\x05\x90V[PV[V[_a\x04\xE4\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba\x05\x0BV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x81\x90P\x91\x90PV[a\x05\x1D\x81a\x06lV[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2PV[``a\x05\x88\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\rV`'\x919a\x07\"V[\x90P\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x05\xFEW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\xF5\x90a\x0BAV[`@Q\x80\x91\x03\x90\xFD[\x80a\x06*\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x05\x0BV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[a\x06u\x81a\x07\xEBV[a\x06\xB4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xAB\x90a\x0B\xCFV[`@Q\x80\x91\x03\x90\xFD[\x80a\x06\xE0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba\x05\x0BV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``a\x07-\x84a\x07\xEBV[a\x07lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07c\x90a\x0C]V[`@Q\x80\x91\x03\x90\xFD[__\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85`@Qa\x07\x93\x91\x90a\x0C\xCDV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x07\xCBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\xD0V[``\x91P[P\x91P\x91Pa\x07\xE0\x82\x82\x86a\x08\rV[\x92PPP\x93\x92PPPV[__\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x11\x90P\x91\x90PV[``\x83\x15a\x08\x1DW\x82\x90Pa\x08lV[_\x83Q\x11\x15a\x08/W\x82Q\x80\x84` \x01\xFD[\x81`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08c\x91\x90a\r5V[`@Q\x80\x91\x03\x90\xFD[\x93\x92PPPV[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08\xA4\x82a\x08{V[\x90P\x91\x90PV[a\x08\xB4\x81a\x08\x9AV[\x81\x14a\x08\xBEW__\xFD[PV[_\x815\x90Pa\x08\xCF\x81a\x08\xABV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xEAWa\x08\xE9a\x08sV[[_a\x08\xF7\x84\x82\x85\x01a\x08\xC1V[\x91PP\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\t!Wa\t a\t\0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t>Wa\t=a\t\x04V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\tZWa\tYa\t\x08V[[\x92P\x92\x90PV[___`@\x84\x86\x03\x12\x15a\txWa\twa\x08sV[[_a\t\x85\x86\x82\x87\x01a\x08\xC1V[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\xA6Wa\t\xA5a\x08wV[[a\t\xB2\x86\x82\x87\x01a\t\x0CV[\x92P\x92PP\x92P\x92P\x92V[a\t\xC7\x81a\x08\x9AV[\x82RPPV[_` \x82\x01\x90Pa\t\xE0_\x83\x01\x84a\t\xBEV[\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FTransparentUpgradeableProxy: adm_\x82\x01R\x7Fin cannot fallback to proxy targ` \x82\x01R\x7Fet\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\nv`B\x83a\t\xE6V[\x91Pa\n\x81\x82a\t\xF6V[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\xA3\x81a\njV[\x90P\x91\x90PV[_`@\x82\x01\x90Pa\n\xBD_\x83\x01\x85a\t\xBEV[a\n\xCA` \x83\x01\x84a\t\xBEV[\x93\x92PPPV[\x7FERC1967: new admin is the zero a_\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B+`&\x83a\t\xE6V[\x91Pa\x0B6\x82a\n\xD1V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0BX\x81a\x0B\x1FV[\x90P\x91\x90PV[\x7FERC1967: new implementation is n_\x82\x01R\x7Fot a contract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B\xB9`-\x83a\t\xE6V[\x91Pa\x0B\xC4\x82a\x0B_V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\xE6\x81a\x0B\xADV[\x90P\x91\x90PV[\x7FAddress: delegate call to non-co_\x82\x01R\x7Fntract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0CG`&\x83a\t\xE6V[\x91Pa\x0CR\x82a\x0B\xEDV[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0Ct\x81a\x0C;V[\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x0C\xA7\x82a\x0C{V[a\x0C\xB1\x81\x85a\x0C\x85V[\x93Pa\x0C\xC1\x81\x85` \x86\x01a\x0C\x8FV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0C\xD8\x82\x84a\x0C\x9DV[\x91P\x81\x90P\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\r\x07\x82a\x0C\xE3V[a\r\x11\x81\x85a\t\xE6V[\x93Pa\r!\x81\x85` \x86\x01a\x0C\x8FV[a\r*\x81a\x0C\xEDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\rM\x81\x84a\x0C\xFDV[\x90P\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 \x19\x80\x93\x02V\x7F\x9D\xFF\x8F\xE0\x106\xD7\xE28\x91\xFB]\x07%\x1E\xB9\xEC\xF3\x12&H\x89\x04\xE6\xC6\xC1dsolcC\0\x08\x1B\x003Address: low-level delegate call failed",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061004d575f3560e01c80633659cfe6146100665780634f1ef2861461008e5780635c60da1b146100aa5780638f283970146100d4578063f851a440146100fc5761005c565b3661005c5761005a610126565b005b610064610126565b005b348015610071575f5ffd5b5061008c600480360381019061008791906108d5565b610140565b005b6100a860048036038101906100a39190610961565b6101a4565b005b3480156100b5575f5ffd5b506100be610240565b6040516100cb91906109cd565b60405180910390f35b3480156100df575f5ffd5b506100fa60048036038101906100f591906108d5565b610296565b005b348015610107575f5ffd5b506101106102ea565b60405161011d91906109cd565b60405180910390f35b61012e610340565b61013e6101396103bf565b6103cd565b565b6101486103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610198576101938160405180602001604052805f8152505f61043f565b6101a1565b6101a0610126565b5b50565b6101ac6103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102325761022d8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050600161043f565b61023b565b61023a610126565b5b505050565b5f6102496103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361028a576102836103bf565b9050610293565b610292610126565b5b90565b61029e6103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102de576102d98161046a565b6102e7565b6102e6610126565b5b50565b5f6102f36103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103345761032d6103ec565b905061033d565b61033c610126565b5b90565b6103486103ec565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ac90610a8c565b60405180910390fd5b6103bd6104b6565b565b5f6103c86104b8565b905090565b365f5f375f5f365f845af43d5f5f3e805f81146103e8573d5ff35b3d5ffd5b5f6104187fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61050b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61044883610514565b5f825111806104545750805b15610465576104638383610563565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104936103ec565b826040516104a2929190610aaa565b60405180910390a16104b381610590565b50565b565b5f6104e47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61050b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f819050919050565b61051d8161066c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606105888383604051806060016040528060278152602001610d5660279139610722565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590610b41565b60405180910390fd5b8061062a7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61050b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610675816107eb565b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90610bcf565b60405180910390fd5b806106e07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61050b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061072d846107eb565b61076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390610c5d565b60405180910390fd5b5f5f8573ffffffffffffffffffffffffffffffffffffffff16856040516107939190610ccd565b5f60405180830381855af49150503d805f81146107cb576040519150601f19603f3d011682016040523d82523d5f602084013e6107d0565b606091505b50915091506107e082828661080d565b925050509392505050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561081d5782905061086c565b5f8351111561082f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639190610d35565b60405180910390fd5b9392505050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108a48261087b565b9050919050565b6108b48161089a565b81146108be575f5ffd5b50565b5f813590506108cf816108ab565b92915050565b5f602082840312156108ea576108e9610873565b5b5f6108f7848285016108c1565b91505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261092157610920610900565b5b8235905067ffffffffffffffff81111561093e5761093d610904565b5b60208301915083600182028301111561095a57610959610908565b5b9250929050565b5f5f5f6040848603121561097857610977610873565b5b5f610985868287016108c1565b935050602084013567ffffffffffffffff8111156109a6576109a5610877565b5b6109b28682870161090c565b92509250509250925092565b6109c78161089a565b82525050565b5f6020820190506109e05f8301846109be565b92915050565b5f82825260208201905092915050565b7f5472616e73706172656e745570677261646561626c6550726f78793a2061646d5f8201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760208201527f6574000000000000000000000000000000000000000000000000000000000000604082015250565b5f610a766042836109e6565b9150610a81826109f6565b606082019050919050565b5f6020820190508181035f830152610aa381610a6a565b9050919050565b5f604082019050610abd5f8301856109be565b610aca60208301846109be565b9392505050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610b2b6026836109e6565b9150610b3682610ad1565b604082019050919050565b5f6020820190508181035f830152610b5881610b1f565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f610bb9602d836109e6565b9150610bc482610b5f565b604082019050919050565b5f6020820190508181035f830152610be681610bad565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f5f8201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b5f610c476026836109e6565b9150610c5282610bed565b604082019050919050565b5f6020820190508181035f830152610c7481610c3b565b9050919050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ca782610c7b565b610cb18185610c85565b9350610cc1818560208601610c8f565b80840191505092915050565b5f610cd88284610c9d565b915081905092915050565b5f81519050919050565b5f601f19601f8301169050919050565b5f610d0782610ce3565b610d1181856109e6565b9350610d21818560208601610c8f565b610d2a81610ced565b840191505092915050565b5f6020820190508181035f830152610d4d8184610cfd565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122019809302567f9dff8fe01036d7e23891fb5d07251eb9ecf31226488904e6c6c164736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0MW_5`\xE0\x1C\x80c6Y\xCF\xE6\x14a\0fW\x80cO\x1E\xF2\x86\x14a\0\x8EW\x80c\\`\xDA\x1B\x14a\0\xAAW\x80c\x8F(9p\x14a\0\xD4W\x80c\xF8Q\xA4@\x14a\0\xFCWa\0\\V[6a\0\\Wa\0Za\x01&V[\0[a\0da\x01&V[\0[4\x80\x15a\0qW__\xFD[Pa\0\x8C`\x04\x806\x03\x81\x01\x90a\0\x87\x91\x90a\x08\xD5V[a\x01@V[\0[a\0\xA8`\x04\x806\x03\x81\x01\x90a\0\xA3\x91\x90a\taV[a\x01\xA4V[\0[4\x80\x15a\0\xB5W__\xFD[Pa\0\xBEa\x02@V[`@Qa\0\xCB\x91\x90a\t\xCDV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xDFW__\xFD[Pa\0\xFA`\x04\x806\x03\x81\x01\x90a\0\xF5\x91\x90a\x08\xD5V[a\x02\x96V[\0[4\x80\x15a\x01\x07W__\xFD[Pa\x01\x10a\x02\xEAV[`@Qa\x01\x1D\x91\x90a\t\xCDV[`@Q\x80\x91\x03\x90\xF3[a\x01.a\x03@V[a\x01>a\x019a\x03\xBFV[a\x03\xCDV[V[a\x01Ha\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x01\x98Wa\x01\x93\x81`@Q\x80` \x01`@R\x80_\x81RP_a\x04?V[a\x01\xA1V[a\x01\xA0a\x01&V[[PV[a\x01\xACa\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x022Wa\x02-\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP`\x01a\x04?V[a\x02;V[a\x02:a\x01&V[[PPPV[_a\x02Ia\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x02\x8AWa\x02\x83a\x03\xBFV[\x90Pa\x02\x93V[a\x02\x92a\x01&V[[\x90V[a\x02\x9Ea\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x02\xDEWa\x02\xD9\x81a\x04jV[a\x02\xE7V[a\x02\xE6a\x01&V[[PV[_a\x02\xF3a\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x034Wa\x03-a\x03\xECV[\x90Pa\x03=V[a\x03<a\x01&V[[\x90V[a\x03Ha\x03\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\xB5W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03\xAC\x90a\n\x8CV[`@Q\x80\x91\x03\x90\xFD[a\x03\xBDa\x04\xB6V[V[_a\x03\xC8a\x04\xB8V[\x90P\x90V[6__7__6_\x84Z\xF4=__>\x80_\x81\x14a\x03\xE8W=_\xF3[=_\xFD[_a\x04\x18\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x05\x0BV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a\x04H\x83a\x05\x14V[_\x82Q\x11\x80a\x04TWP\x80[\x15a\x04eWa\x04c\x83\x83a\x05cV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x04\x93a\x03\xECV[\x82`@Qa\x04\xA2\x92\x91\x90a\n\xAAV[`@Q\x80\x91\x03\x90\xA1a\x04\xB3\x81a\x05\x90V[PV[V[_a\x04\xE4\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba\x05\x0BV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x81\x90P\x91\x90PV[a\x05\x1D\x81a\x06lV[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2PV[``a\x05\x88\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\rV`'\x919a\x07\"V[\x90P\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x05\xFEW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\xF5\x90a\x0BAV[`@Q\x80\x91\x03\x90\xFD[\x80a\x06*\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03_\x1Ba\x05\x0BV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[a\x06u\x81a\x07\xEBV[a\x06\xB4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xAB\x90a\x0B\xCFV[`@Q\x80\x91\x03\x90\xFD[\x80a\x06\xE0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba\x05\x0BV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``a\x07-\x84a\x07\xEBV[a\x07lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07c\x90a\x0C]V[`@Q\x80\x91\x03\x90\xFD[__\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85`@Qa\x07\x93\x91\x90a\x0C\xCDV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x07\xCBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\xD0V[``\x91P[P\x91P\x91Pa\x07\xE0\x82\x82\x86a\x08\rV[\x92PPP\x93\x92PPPV[__\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x11\x90P\x91\x90PV[``\x83\x15a\x08\x1DW\x82\x90Pa\x08lV[_\x83Q\x11\x15a\x08/W\x82Q\x80\x84` \x01\xFD[\x81`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08c\x91\x90a\r5V[`@Q\x80\x91\x03\x90\xFD[\x93\x92PPPV[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08\xA4\x82a\x08{V[\x90P\x91\x90PV[a\x08\xB4\x81a\x08\x9AV[\x81\x14a\x08\xBEW__\xFD[PV[_\x815\x90Pa\x08\xCF\x81a\x08\xABV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xEAWa\x08\xE9a\x08sV[[_a\x08\xF7\x84\x82\x85\x01a\x08\xC1V[\x91PP\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\t!Wa\t a\t\0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t>Wa\t=a\t\x04V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\tZWa\tYa\t\x08V[[\x92P\x92\x90PV[___`@\x84\x86\x03\x12\x15a\txWa\twa\x08sV[[_a\t\x85\x86\x82\x87\x01a\x08\xC1V[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\xA6Wa\t\xA5a\x08wV[[a\t\xB2\x86\x82\x87\x01a\t\x0CV[\x92P\x92PP\x92P\x92P\x92V[a\t\xC7\x81a\x08\x9AV[\x82RPPV[_` \x82\x01\x90Pa\t\xE0_\x83\x01\x84a\t\xBEV[\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FTransparentUpgradeableProxy: adm_\x82\x01R\x7Fin cannot fallback to proxy targ` \x82\x01R\x7Fet\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\nv`B\x83a\t\xE6V[\x91Pa\n\x81\x82a\t\xF6V[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\xA3\x81a\njV[\x90P\x91\x90PV[_`@\x82\x01\x90Pa\n\xBD_\x83\x01\x85a\t\xBEV[a\n\xCA` \x83\x01\x84a\t\xBEV[\x93\x92PPPV[\x7FERC1967: new admin is the zero a_\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B+`&\x83a\t\xE6V[\x91Pa\x0B6\x82a\n\xD1V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0BX\x81a\x0B\x1FV[\x90P\x91\x90PV[\x7FERC1967: new implementation is n_\x82\x01R\x7Fot a contract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B\xB9`-\x83a\t\xE6V[\x91Pa\x0B\xC4\x82a\x0B_V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\xE6\x81a\x0B\xADV[\x90P\x91\x90PV[\x7FAddress: delegate call to non-co_\x82\x01R\x7Fntract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0CG`&\x83a\t\xE6V[\x91Pa\x0CR\x82a\x0B\xEDV[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0Ct\x81a\x0C;V[\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x0C\xA7\x82a\x0C{V[a\x0C\xB1\x81\x85a\x0C\x85V[\x93Pa\x0C\xC1\x81\x85` \x86\x01a\x0C\x8FV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0C\xD8\x82\x84a\x0C\x9DV[\x91P\x81\x90P\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\r\x07\x82a\x0C\xE3V[a\r\x11\x81\x85a\t\xE6V[\x93Pa\r!\x81\x85` \x86\x01a\x0C\x8FV[a\r*\x81a\x0C\xEDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\rM\x81\x84a\x0C\xFDV[\x90P\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 \x19\x80\x93\x02V\x7F\x9D\xFF\x8F\xE0\x106\xD7\xE28\x91\xFB]\x07%\x1E\xB9\xEC\xF3\x12&H\x89\x04\xE6\xC6\xC1dsolcC\0\x08\x1B\x003",
    );
    /**Event with signature `AdminChanged(address,address)` and selector `0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f`.
```solidity
event AdminChanged(address previousAdmin, address newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminChanged {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminChanged {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AdminChanged(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                126u8,
                100u8,
                77u8,
                121u8,
                66u8,
                47u8,
                23u8,
                192u8,
                30u8,
                72u8,
                148u8,
                181u8,
                244u8,
                245u8,
                136u8,
                211u8,
                49u8,
                235u8,
                250u8,
                40u8,
                101u8,
                61u8,
                66u8,
                174u8,
                131u8,
                45u8,
                197u8,
                158u8,
                56u8,
                201u8,
                121u8,
                143u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: data.0,
                    newAdmin: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.previousAdmin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BeaconUpgraded(address)` and selector `0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e`.
```solidity
event BeaconUpgraded(address indexed beacon);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BeaconUpgraded {
        #[allow(missing_docs)]
        pub beacon: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BeaconUpgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BeaconUpgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                28u8,
                243u8,
                176u8,
                58u8,
                108u8,
                241u8,
                159u8,
                162u8,
                186u8,
                186u8,
                77u8,
                241u8,
                72u8,
                233u8,
                220u8,
                171u8,
                237u8,
                234u8,
                127u8,
                138u8,
                92u8,
                7u8,
                132u8,
                14u8,
                32u8,
                126u8,
                92u8,
                8u8,
                155u8,
                233u8,
                93u8,
                62u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { beacon: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.beacon.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.beacon,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BeaconUpgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BeaconUpgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BeaconUpgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8,
                124u8,
                215u8,
                90u8,
                32u8,
                238u8,
                39u8,
                253u8,
                154u8,
                222u8,
                186u8,
                179u8,
                32u8,
                65u8,
                247u8,
                85u8,
                33u8,
                77u8,
                188u8,
                107u8,
                255u8,
                169u8,
                12u8,
                192u8,
                34u8,
                91u8,
                57u8,
                218u8,
                46u8,
                92u8,
                45u8,
                59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _logic, address admin_, bytes _data) payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _logic: alloy::sol_types::private::Address,
        pub admin_: alloy::sol_types::private::Address,
        pub _data: alloy::sol_types::private::Bytes,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._logic, value.admin_, value._data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _logic: tuple.0,
                        admin_: tuple.1,
                        _data: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._logic,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin_,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external returns (address admin_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        pub admin_: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value.admin_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin_: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `changeAdmin(address)` and selector `0x8f283970`.
```solidity
function changeAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeAdminCall {
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`changeAdmin(address)`](changeAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: changeAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: changeAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeAdmin(address)";
            const SELECTOR: [u8; 4] = [143u8, 40u8, 57u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `implementation()` and selector `0x5c60da1b`.
```solidity
function implementation() external returns (address implementation_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationCall {}
    ///Container type for the return parameters of the [`implementation()`](implementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationReturn {
        pub implementation_: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationCall> for UnderlyingRustTuple<'_> {
                fn from(value: implementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for implementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: implementationReturn) -> Self {
                    (value.implementation_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for implementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { implementation_: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for implementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = implementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "implementation()";
            const SELECTOR: [u8; 4] = [92u8, 96u8, 218u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgradeTo(address)` and selector `0x3659cfe6`.
```solidity
function upgradeTo(address newImplementation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToCall {
        pub newImplementation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`upgradeTo(address)`](upgradeToCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToCall> for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToCall) -> Self {
                    (value.newImplementation,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for upgradeToCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newImplementation: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToReturn> for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for upgradeToReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeTo(address)";
            const SELECTOR: [u8; 4] = [54u8, 89u8, 207u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        pub newImplementation: alloy::sol_types::private::Address,
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TransparentUpgradeableProxy`](self) function calls.
    pub enum TransparentUpgradeableProxyCalls {
        admin(adminCall),
        changeAdmin(changeAdminCall),
        implementation(implementationCall),
        upgradeTo(upgradeToCall),
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl TransparentUpgradeableProxyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [54u8, 89u8, 207u8, 230u8],
            [79u8, 30u8, 242u8, 134u8],
            [92u8, 96u8, 218u8, 27u8],
            [143u8, 40u8, 57u8, 112u8],
            [248u8, 81u8, 164u8, 64u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TransparentUpgradeableProxyCalls {
        const NAME: &'static str = "TransparentUpgradeableProxyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::changeAdmin(_) => {
                    <changeAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::implementation(_) => {
                    <implementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeTo(_) => {
                    <upgradeToCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls>] = &[
                {
                    fn upgradeTo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls> {
                        <upgradeToCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransparentUpgradeableProxyCalls::upgradeTo)
                    }
                    upgradeTo
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransparentUpgradeableProxyCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn implementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls> {
                        <implementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransparentUpgradeableProxyCalls::implementation)
                    }
                    implementation
                },
                {
                    fn changeAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls> {
                        <changeAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransparentUpgradeableProxyCalls::changeAdmin)
                    }
                    changeAdmin
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransparentUpgradeableProxyCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransparentUpgradeableProxyCalls::admin)
                    }
                    admin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::changeAdmin(inner) => {
                    <changeAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeTo(inner) => {
                    <upgradeToCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::changeAdmin(inner) => {
                    <changeAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeTo(inner) => {
                    <upgradeToCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TransparentUpgradeableProxy`](self) events.
    pub enum TransparentUpgradeableProxyEvents {
        AdminChanged(AdminChanged),
        BeaconUpgraded(BeaconUpgraded),
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl TransparentUpgradeableProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                28u8,
                243u8,
                176u8,
                58u8,
                108u8,
                241u8,
                159u8,
                162u8,
                186u8,
                186u8,
                77u8,
                241u8,
                72u8,
                233u8,
                220u8,
                171u8,
                237u8,
                234u8,
                127u8,
                138u8,
                92u8,
                7u8,
                132u8,
                14u8,
                32u8,
                126u8,
                92u8,
                8u8,
                155u8,
                233u8,
                93u8,
                62u8,
            ],
            [
                126u8,
                100u8,
                77u8,
                121u8,
                66u8,
                47u8,
                23u8,
                192u8,
                30u8,
                72u8,
                148u8,
                181u8,
                244u8,
                245u8,
                136u8,
                211u8,
                49u8,
                235u8,
                250u8,
                40u8,
                101u8,
                61u8,
                66u8,
                174u8,
                131u8,
                45u8,
                197u8,
                158u8,
                56u8,
                201u8,
                121u8,
                143u8,
            ],
            [
                188u8,
                124u8,
                215u8,
                90u8,
                32u8,
                238u8,
                39u8,
                253u8,
                154u8,
                222u8,
                186u8,
                179u8,
                32u8,
                65u8,
                247u8,
                85u8,
                33u8,
                77u8,
                188u8,
                107u8,
                255u8,
                169u8,
                12u8,
                192u8,
                34u8,
                91u8,
                57u8,
                218u8,
                46u8,
                92u8,
                45u8,
                59u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for TransparentUpgradeableProxyEvents {
        const NAME: &'static str = "TransparentUpgradeableProxyEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminChanged)
                }
                Some(<BeaconUpgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BeaconUpgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BeaconUpgraded)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for TransparentUpgradeableProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BeaconUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BeaconUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TransparentUpgradeableProxy`](self) contract instance.

See the [wrapper's documentation](`TransparentUpgradeableProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TransparentUpgradeableProxyInstance<T, P, N> {
        TransparentUpgradeableProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _logic: alloy::sol_types::private::Address,
        admin_: alloy::sol_types::private::Address,
        _data: alloy::sol_types::private::Bytes,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TransparentUpgradeableProxyInstance<T, P, N>>,
    > {
        TransparentUpgradeableProxyInstance::<
            T,
            P,
            N,
        >::deploy(provider, _logic, admin_, _data)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _logic: alloy::sol_types::private::Address,
        admin_: alloy::sol_types::private::Address,
        _data: alloy::sol_types::private::Bytes,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TransparentUpgradeableProxyInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _logic, admin_, _data)
    }
    /**A [`TransparentUpgradeableProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TransparentUpgradeableProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TransparentUpgradeableProxyInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TransparentUpgradeableProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TransparentUpgradeableProxyInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransparentUpgradeableProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TransparentUpgradeableProxy`](self) contract instance.

See the [wrapper's documentation](`TransparentUpgradeableProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _logic: alloy::sol_types::private::Address,
            admin_: alloy::sol_types::private::Address,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::Result<TransparentUpgradeableProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _logic, admin_, _data);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _logic: alloy::sol_types::private::Address,
            admin_: alloy::sol_types::private::Address,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _logic,
                            admin_,
                            _data,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TransparentUpgradeableProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> TransparentUpgradeableProxyInstance<T, P, N> {
            TransparentUpgradeableProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransparentUpgradeableProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`changeAdmin`] function.
        pub fn changeAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeAdminCall, N> {
            self.call_builder(&changeAdminCall { newAdmin })
        }
        ///Creates a new call builder for the [`implementation`] function.
        pub fn implementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, implementationCall, N> {
            self.call_builder(&implementationCall {})
        }
        ///Creates a new call builder for the [`upgradeTo`] function.
        pub fn upgradeTo(
            &self,
            newImplementation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeToCall, N> {
            self.call_builder(&upgradeToCall { newImplementation })
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransparentUpgradeableProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminChanged`] event.
        pub fn AdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminChanged, N> {
            self.event_filter::<AdminChanged>()
        }
        ///Creates a new event filter for the [`BeaconUpgraded`] event.
        pub fn BeaconUpgraded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BeaconUpgraded, N> {
            self.event_filter::<BeaconUpgraded>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<T, &P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
