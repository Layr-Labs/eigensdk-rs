///Module containing a contract's types and functions.
/**

```solidity
library StdInvariant {
    struct FuzzSelector { address addr; bytes4[] selectors; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod StdInvariant {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /**```solidity
    struct FuzzSelector { address addr; bytes4[] selectors; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FuzzSelector {
        pub addr: alloy::sol_types::private::Address,
        pub selectors: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<4>>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<4>>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<4>>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FuzzSelector> for UnderlyingRustTuple<'_> {
            fn from(value: FuzzSelector) -> Self {
                (value.addr, value.selectors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FuzzSelector {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    addr: tuple.0,
                    selectors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for FuzzSelector {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for FuzzSelector {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<4>,
                    > as alloy_sol_types::SolType>::tokenize(&self.selectors),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for FuzzSelector {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for FuzzSelector {
            const NAME: &'static str = "FuzzSelector";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "FuzzSelector(address addr,bytes4[] selectors)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.addr,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<4>,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.selectors)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for FuzzSelector {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.addr,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<4>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.selectors,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.addr,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<4>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.selectors,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StdInvariant`](self) contract instance.

    See the [wrapper's documentation](`StdInvariantInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StdInvariantInstance<T, P, N> {
        StdInvariantInstance::<T, P, N>::new(address, provider)
    }
    /**A [`StdInvariant`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`StdInvariant`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StdInvariantInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StdInvariantInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StdInvariantInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StdInvariantInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`StdInvariant`](self) contract instance.

        See the [wrapper's documentation](`StdInvariantInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StdInvariantInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StdInvariantInstance<T, P, N> {
            StdInvariantInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StdInvariantInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StdInvariantInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
/**

Generated by the following Solidity interface...
```solidity
library StdInvariant {
    struct FuzzSelector {
        address addr;
        bytes4[] selectors;
    }
}

interface StrategyBaseTVLLimitsUnitTests {
    event ExchangeRateEmitted(uint256 rate);
    event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);
    event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);
    event log(string);
    event log_address(address);
    event log_array(uint256[] val);
    event log_array(int256[] val);
    event log_array(address[] val);
    event log_bytes(bytes);
    event log_bytes32(bytes32);
    event log_int(int256);
    event log_named_address(string key, address val);
    event log_named_array(string key, uint256[] val);
    event log_named_array(string key, int256[] val);
    event log_named_array(string key, address[] val);
    event log_named_bytes(string key, bytes val);
    event log_named_bytes32(string key, bytes32 val);
    event log_named_decimal_int(string key, int256 val, uint256 decimals);
    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);
    event log_named_int(string key, int256 val);
    event log_named_string(string key, string val);
    event log_named_uint(string key, uint256 val);
    event log_string(string);
    event log_uint(uint256);
    event logs(bytes);

    function IS_TEST() external view returns (bool);
    function excludeArtifacts() external view returns (string[] memory excludedArtifacts_);
    function excludeContracts() external view returns (address[] memory excludedContracts_);
    function excludeSenders() external view returns (address[] memory excludedSenders_);
    function failed() external returns (bool);
    function pauser() external view returns (address);
    function pauserRegistry() external view returns (address);
    function proxyAdmin() external view returns (address);
    function setUp() external;
    function strategy() external view returns (address);
    function strategyBaseTVLLimitsImplementation() external view returns (address);
    function strategyImplementation() external view returns (address);
    function strategyManager() external view returns (address);
    function strategyWithTVLLimits() external view returns (address);
    function targetArtifactSelectors() external view returns (StdInvariant.FuzzSelector[] memory targetedArtifactSelectors_);
    function targetArtifacts() external view returns (string[] memory targetedArtifacts_);
    function targetContracts() external view returns (address[] memory targetedContracts_);
    function targetSelectors() external view returns (StdInvariant.FuzzSelector[] memory targetedSelectors_);
    function targetSenders() external view returns (address[] memory targetedSenders_);
    function testCanWithdrawDownToSmallShares(uint256 amountToDeposit, uint32 sharesToLeave) external;
    function testCannotReceiveZeroShares() external;
    function testCannotReinitialize() external;
    function testDepositFailForTooManyShares() external;
    function testDepositFailsWhenCallingFromNotStrategyManager(address caller) external;
    function testDepositFailsWhenDepositsPaused() external;
    function testDepositFailsWhenNotUsingUnderlyingToken(address notUnderlyingToken) external;
    function testDepositMoreThanMaxPerDeposit(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, uint256 amount) external;
    function testDepositMorethanMaxDeposits() external;
    function testDepositTVLLimit_ThenChangeTVLLimit(uint256 maxTotalDepositsFuzzedInput, uint256 newMaxTotalDepositsFuzzedInput) external;
    function testDepositValidAmount(uint256 depositAmount) external;
    function testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(uint256 priorTotalShares, uint256 amountToDeposit) external;
    function testDepositWithZeroPriorBalanceAndZeroPriorShares(uint256 amountToDeposit) external;
    function testDeposit_WithTVLLimits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, uint256 depositAmount) external returns (bool depositReverted);
    function testDeposit_ZeroAmount() external;
    function testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(uint256 amountToDeposit, uint256 amountToTransfer, uint96 amountSharesToQuery) external;
    function testIntegrityOfSharesToUnderlyingWithZeroTotalShares(uint240 amountSharesToQuery) external view;
    function testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(uint256 amountToDeposit, uint256 amountToTransfer, uint96 amountUnderlyingToQuery) external;
    function testSetInvalidMaxPerDepositAndMaxDeposits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput) external;
    function testSetTVLLimits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput) external;
    function testSetTVLLimitsFailsWhenNotCalledByUnpauser(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, address notUnpauser) external;
    function testWithdrawFailsWhenSharesGreaterThanTotalShares(uint256 amountToDeposit, uint256 sharesToWithdraw) external;
    function testWithdrawFailsWhenWithdrawalsPaused(uint256 amountToDeposit) external;
    function testWithdrawWithPriorTotalSharesAndAmountSharesEqual(uint256 amountToDeposit) external;
    function testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(uint96 amountToDeposit, uint96 sharesToWithdraw) external;
    function testWithdrawZeroAmount(uint256 amountToDeposit) external;
    function testWithdrawalFailsWhenCallingFromNotStrategyManager(address caller) external;
    function testWithdrawalFailsWhenNotUsingUnderlyingToken(address notUnderlyingToken) external;
    function testWithdrawalFailsWhenTokenTransferFails() external;
    function underlyingToken() external view returns (address);
    function unpauser() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_TEST",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "excludeArtifacts",
    "inputs": [],
    "outputs": [
      {
        "name": "excludedArtifacts_",
        "type": "string[]",
        "internalType": "string[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "excludeContracts",
    "inputs": [],
    "outputs": [
      {
        "name": "excludedContracts_",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "excludeSenders",
    "inputs": [],
    "outputs": [
      {
        "name": "excludedSenders_",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "failed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "pauser",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pauserRegistry",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract PauserRegistry"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proxyAdmin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ProxyAdmin"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "strategy",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract StrategyBase"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "strategyBaseTVLLimitsImplementation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract StrategyBaseTVLLimits"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "strategyImplementation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract StrategyBase"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "strategyManager",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IStrategyManager"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "strategyWithTVLLimits",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract StrategyBaseTVLLimits"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "targetArtifactSelectors",
    "inputs": [],
    "outputs": [
      {
        "name": "targetedArtifactSelectors_",
        "type": "tuple[]",
        "internalType": "struct StdInvariant.FuzzSelector[]",
        "components": [
          {
            "name": "addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "selectors",
            "type": "bytes4[]",
            "internalType": "bytes4[]"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "targetArtifacts",
    "inputs": [],
    "outputs": [
      {
        "name": "targetedArtifacts_",
        "type": "string[]",
        "internalType": "string[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "targetContracts",
    "inputs": [],
    "outputs": [
      {
        "name": "targetedContracts_",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "targetSelectors",
    "inputs": [],
    "outputs": [
      {
        "name": "targetedSelectors_",
        "type": "tuple[]",
        "internalType": "struct StdInvariant.FuzzSelector[]",
        "components": [
          {
            "name": "addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "selectors",
            "type": "bytes4[]",
            "internalType": "bytes4[]"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "targetSenders",
    "inputs": [],
    "outputs": [
      {
        "name": "targetedSenders_",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "testCanWithdrawDownToSmallShares",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sharesToLeave",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testCannotReceiveZeroShares",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testCannotReinitialize",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositFailForTooManyShares",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositFailsWhenCallingFromNotStrategyManager",
    "inputs": [
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositFailsWhenDepositsPaused",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositFailsWhenNotUsingUnderlyingToken",
    "inputs": [
      {
        "name": "notUnderlyingToken",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositMoreThanMaxPerDeposit",
    "inputs": [
      {
        "name": "maxPerDepositFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositMorethanMaxDeposits",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositTVLLimit_ThenChangeTVLLimit",
    "inputs": [
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newMaxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositValidAmount",
    "inputs": [
      {
        "name": "depositAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares",
    "inputs": [
      {
        "name": "priorTotalShares",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDepositWithZeroPriorBalanceAndZeroPriorShares",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDeposit_WithTVLLimits",
    "inputs": [
      {
        "name": "maxPerDepositFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "depositAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "depositReverted",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testDeposit_ZeroAmount",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amountToTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amountSharesToQuery",
        "type": "uint96",
        "internalType": "uint96"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testIntegrityOfSharesToUnderlyingWithZeroTotalShares",
    "inputs": [
      {
        "name": "amountSharesToQuery",
        "type": "uint240",
        "internalType": "uint240"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amountToTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amountUnderlyingToQuery",
        "type": "uint96",
        "internalType": "uint96"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testSetInvalidMaxPerDepositAndMaxDeposits",
    "inputs": [
      {
        "name": "maxPerDepositFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testSetTVLLimits",
    "inputs": [
      {
        "name": "maxPerDepositFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testSetTVLLimitsFailsWhenNotCalledByUnpauser",
    "inputs": [
      {
        "name": "maxPerDepositFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxTotalDepositsFuzzedInput",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "notUnpauser",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawFailsWhenSharesGreaterThanTotalShares",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sharesToWithdraw",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawFailsWhenWithdrawalsPaused",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawWithPriorTotalSharesAndAmountSharesEqual",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint96",
        "internalType": "uint96"
      },
      {
        "name": "sharesToWithdraw",
        "type": "uint96",
        "internalType": "uint96"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawZeroAmount",
    "inputs": [
      {
        "name": "amountToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawalFailsWhenCallingFromNotStrategyManager",
    "inputs": [
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawalFailsWhenNotUsingUnderlyingToken",
    "inputs": [
      {
        "name": "notUnderlyingToken",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "testWithdrawalFailsWhenTokenTransferFails",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "underlyingToken",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpauser",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ExchangeRateEmitted",
    "inputs": [
      {
        "name": "rate",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MaxPerDepositUpdated",
    "inputs": [
      {
        "name": "previousValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MaxTotalDepositsUpdated",
    "inputs": [
      {
        "name": "previousValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log",
    "inputs": [
      {
        "name": "",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_address",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_array",
    "inputs": [
      {
        "name": "val",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_array",
    "inputs": [
      {
        "name": "val",
        "type": "int256[]",
        "indexed": false,
        "internalType": "int256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_array",
    "inputs": [
      {
        "name": "val",
        "type": "address[]",
        "indexed": false,
        "internalType": "address[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_bytes",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_bytes32",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_int",
    "inputs": [
      {
        "name": "",
        "type": "int256",
        "indexed": false,
        "internalType": "int256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_address",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_array",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_array",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "int256[]",
        "indexed": false,
        "internalType": "int256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_array",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "address[]",
        "indexed": false,
        "internalType": "address[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_bytes",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_bytes32",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_decimal_int",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "int256",
        "indexed": false,
        "internalType": "int256"
      },
      {
        "name": "decimals",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_decimal_uint",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "decimals",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_int",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "int256",
        "indexed": false,
        "internalType": "int256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_string",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_named_uint",
    "inputs": [
      {
        "name": "key",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "val",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_string",
    "inputs": [
      {
        "name": "",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "log_uint",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "logs",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod StrategyBaseTVLLimitsUnitTests {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\0\x80T`\xFF\x19\x90\x81\x16`\x01\x90\x81\x17\x90\x92U`\x04\x80T\x90\x91\x16\x90\x91\x17\x90U`\x1B\x80Tsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\"\x80T\x82\x16a\x02+\x17\x90U`#\x80T\x82\x16a\x03\xE7\x17\x90Un\xC0\x97\xCE{\xC9\x07\x15\xB3K\x9F\x10\0\0\0\0`$U`%\x80T\x90\x91\x160\x17\x90Uh\xADx\xEB\xC5\xACb\0\0\0`(Uh\x01\xBC\x16\xD6t\xEC\x80\0\0`)U4\x80\x15b\0\0\xA8W`\0\x80\xFD[Pb\x01\x1FV\x80b\0\0\xBA`\09`\0\xF3\xFE`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`\x046\x10b\0\x03\x13W`\x005`\xE0\x1C\x80co7x|\x11b\0\x01\xA2W\x80c\xB2\xD0\xBE\xB1\x11b\0\0\xFCW\x80c\xC6Cbb\x11b\0\0\xAFW\x80c\xE7\x0B\x885\x11b\0\0\x86W\x80c\xE7\x0B\x885\x14b\0\x06\xB1W\x80c\xEA\xB6mz\x14b\0\x06\xC8W\x80c\xF0\x9B\xC8v\x14b\0\x06\xDCW\x80c\xFAv&\xD4\x14b\0\x06\xE6W`\0\x80\xFD[\x80c\xC6Cbb\x14b\0\x06|W\x80c\xD5\x89f\xCA\x14b\0\x06\x90W\x80c\xE2\x0C\x9Fq\x14b\0\x06\xA7W`\0\x80\xFD[\x80c\xB2\xD0\xBE\xB1\x14b\0\x06\x1CW\x80c\xB5P\x8A\xA9\x14b\0\x06&W\x80c\xBAAO\xA6\x14b\0\x060W\x80c\xBD\x92+\x1C\x14b\0\x06:W\x80c\xBF-1Q\x14b\0\x06NW\x80c\xC4\xF8\x1E:\x14b\0\x06eW`\0\x80\xFD[\x80c\x95\x8C\x96u\x11b\0\x01UW\x80c\x95\x8C\x96u\x14b\0\x05\x98W\x80c\x9F\xD0Pm\x14b\0\x05\xAFW\x80c\xA15ww\x14b\0\x05\xC3W\x80c\xA8\xC6.v\x14b\0\x05\xDAW\x80c\xAB\xCD\xFA\x92\x14b\0\x05\xEEW\x80c\xAD\xD1\x14\xC5\x14b\0\x06\x05W`\0\x80\xFD[\x80co7x|\x14b\0\x05)W\x80cz|6\xD6\x14b\0\x05@W\x80c\x85\"l\x81\x14b\0\x05WW\x80c\x88o\x11\x95\x14b\0\x05pW\x80c\x91j\x17\xC6\x14b\0\x05\x84W\x80c\x92nY\xFF\x14b\0\x05\x8EW`\0\x80\xFD[\x80c>G\x15\x8C\x11b\0\x02qW\x80cT\rPw\x11b\0\x02$W\x80cf9\xCA\xD6\x11b\0\x01\xFBW\x80cf9\xCA\xD6\x14b\0\x04\xBAW\x80cf\xD9\xA9\xA0\x14b\0\x04\xE2W\x80ci\xC5\xCD\x05\x14b\0\x04\xFBW\x80cl\x94\xBB\xD3\x14b\0\x05\x12W`\0\x80\xFD[\x80cT\rPw\x14b\0\x04uW\x80cY\xE97K\x14b\0\x04\x8CW\x80cb\xB9\xF5[\x14b\0\x04\xA3W`\0\x80\xFD[\x80c>G\x15\x8C\x14b\0\x04\x08W\x80c>^<#\x14b\0\x04\x1CW\x80c?r\x86\xF4\x14b\0\x04&W\x80cA\x1A\xE3z\x14b\0\x040W\x80cFR\xCF&\x14b\0\x04GW\x80cG.\x15\"\x14b\0\x04^W`\0\x80\xFD[\x80c16>\xE6\x11b\0\x02\xCAW\x80c16>\xE6\x14b\0\x03\x9EW\x80c1\xD0f\xCC\x14b\0\x03\xB2W\x80c9.\xB3\xB2\x14b\0\x03\xC9W\x80c9\xB7\x0E8\x14b\0\x03\xD3W\x80c;@\\>\x14b\0\x03\xE7W\x80c<n\xFE\x85\x14b\0\x03\xF1W`\0\x80\xFD[\x80c\n\x92T\xE4\x14b\0\x03\x18W\x80c\x0B\xEF\x1D\x0F\x14b\0\x03$W\x80c\x10\xDB_{\x14b\0\x03;W\x80c\x1E\xD7\x83\x1C\x14b\0\x03EW\x80c$j\xF5\x89\x14b\0\x03gW\x80c$\x95\xA5\x99\x14b\0\x03qW[`\0\x80\xFD[b\0\x03\"b\0\x06\xF4V[\0[b\0\x03\"b\0\x0356`\x04b\0\x89\xBCV[b\0\t\x84V[b\0\x03\"b\0\x0B\x9DV[b\0\x03Ob\0\x0EHV[`@Qb\0\x03^\x91\x90b\0\x8A%V[`@Q\x80\x91\x03\x90\xF3[b\0\x03\"b\0\x0E\xACV[`\x1FTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01b\0\x03^V[`&Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x03\xC36`\x04b\0\x8A:V[b\0\x10\x82V[b\0\x03\"b\0\x14PV[`\x1ETb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x15AV[b\0\x03\"b\0\x04\x026`\x04b\0\x8AmV[b\0\x18\xA8V[`\x1CTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03Ob\0\x1A1V[b\0\x03Ob\0\x1A\x93V[b\0\x03\"b\0\x04A6`\x04b\0\x8AmV[b\0\x1A\xF5V[b\0\x03\"b\0\x04X6`\x04b\0\x8A:V[b\0\x1D\xE7V[b\0\x03\"b\0\x04o6`\x04b\0\x8AmV[b\0\x1E\xE9V[b\0\x03\"b\0\x04\x866`\x04b\0\x8A\x8DV[b\0\"7V[b\0\x03\"b\0\x04\x9D6`\x04b\0\x89\xBCV[b\0$WV[b\0\x03\"b\0\x04\xB46`\x04b\0\x89\xBCV[b\0%ZV[b\0\x04\xD1b\0\x04\xCB6`\x04b\0\x8A\x8DV[b\0%\xF3V[`@Q\x90\x15\x15\x81R` \x01b\0\x03^V[b\0\x04\xECb\x002\x18V[`@Qb\0\x03^\x91\x90b\0\x8A\xBAV[b\0\x03\"b\0\x05\x0C6`\x04b\0\x89\xBCV[b\x003\x0BV[b\0\x03\"b\0\x05#6`\x04b\0\x8BqV[b\x005\x03V[b\0\x03\"b\0\x05:6`\x04b\0\x89\xBCV[b\x006\x06V[b\0\x03\"b\0\x05Q6`\x04b\0\x8AmV[b\0?tV[b\0\x05ab\0@\xFBV[`@Qb\0\x03^\x91\x90b\0\x8C\tV[`\x1DTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x04\xECb\0A\xD5V[b\0\x03\"b\0B\xBFV[b\0\x03\"b\0\x05\xA96`\x04b\0\x8C\x87V[b\0DuV[`\"Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x05\xD46`\x04b\0\x8C\xBFV[b\0EyV[`!Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x05\xFF6`\x04b\0\x8A:V[b\0F\x85V[b\0\x03\"b\0\x06\x166`\x04b\0\x8C\xF7V[b\0G\x87V[b\0\x03\"b\0InV[b\0\x05ab\0K\xEAV[b\0\x04\xD1b\0L\xC4V[` Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x06_6`\x04b\0\x8D3V[b\0M\xFFV[b\0\x03\"b\0\x06v6`\x04b\0\x8A:V[b\0O\xD5V[`'Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x06\xA16`\x04b\0\x8C\x87V[b\0P\xD7V[b\0\x03Ob\0Q\xDBV[b\0\x03\"b\0\x06\xC26`\x04b\0\x8A:V[b\0R=V[`#Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0VIV[`\0Tb\0\x04\xD1\x90`\xFF\x16\x81V[b\0\x06\xFEb\0[$V[`\x1ET`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90b\0\x07\x1B\x90b\0\x89LV[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x07HW=`\0\x80>=`\0\xFD[P`&\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`\x1CT`)T`(T`\x1FT`\x1DT`@Q`$\x81\x01\x94\x90\x94R`D\x84\x01\x92\x90\x92R\x85\x16`d\x83\x01R\x84\x16`\x84\x82\x01R\x91\x92\x16\x90c\x01\x9E')`\xE0\x1B\x90`\xA4\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qb\0\x07\xE7\x90b\0\x89ZV[b\0\x07\xF5\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x08\x12W=`\0\x80>=`\0\xFD[P`'\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x82\x17\x90U`(T`@\x80Qca\xB0\x1B]`\xE0\x1B\x81R\x90Q\x91\x92\x91ca\xB0\x1B]\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x08tW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x08\x9A\x91\x90b\0\x8D\x95V[\x14b\0\x08\xC3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`@Q\x80\x91\x03\x90\xFD[`)T`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16cC\xFE\x08\xB0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\t\x1AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\t@\x91\x90b\0\x8D\x95V[\x14b\0\t`W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`'T`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x83\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\t\xCAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\t\xDFW=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\n-W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\nBW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q`\x80\x81\x01\x90\x91R`K\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1Ed` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\n\x93\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\n\xAEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\n\xC3W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x16W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0B+W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0B\x95W=`\0\x80>=`\0\xFD[PPPPPPV[`$T`%T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90b\0\x0B\xBD\x90b\0\x89hV[\x91\x82R`\x01`\x01`\xA0\x1B\x03\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x0B\xEEW=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U` T`\x1CT`\x1DT`@Q`$\x81\x01\x94\x90\x94R\x84\x16`D\x84\x01R\x90\x83\x16\x92\x16\x90cH\\\xC9U`\xE0\x1B\x90`d\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qb\0\x0Cz\x90b\0\x89ZV[b\0\x0C\x88\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x0C\xA5W=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ug\r\xE0\xB6\xB3\xA7d\0\0b\0\x0C\xDA\x81b\0F\x85V[`\x1FT`@QcC9\xD3\xA1`\xE1\x1B\x81R`\x01`\x04\x82\x01Rg\r\xE0\xB6\xB3\xA7d\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\x86s\xA7B\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r)W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\r>W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xF4\x84H\x14`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\x93W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\r\xA8W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\xF6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0E\x0BW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\n\xFB\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[```\r\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83W[PPPPP\x90P\x90V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0E\xFBW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0F\x10W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\n` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x0Fa\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0F|W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0F\x91W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x0F\xCE\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x0F\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x10\x14\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x10fW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x10{W=`\0\x80>=`\0\xFD[PPPPPV[d\xE8\xD4\xA5\x10\0`(UdE\xD9d\xB8\0`)U`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x15\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x10\xDAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x10\xEFW=`\0\x80>=`\0\xFD[PP`\x1BT`)T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x85\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x11<W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x11QW=`\0\x80>=`\0\xFD[PPPPb\0\x11e`)T`(Tb\0]\xE2V[`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92c\xA9\x05\x9C\xBB\x92b\0\x11\x9D\x92\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x11\xBDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x11\xE3\x91\x90b\0\x8E)V[P`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x12/W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x12U\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x12\xA1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x12\xB6W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x12\xF3\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x13\x13W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x139\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x13\x8BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x13\xA0W=`\0\x80>=`\0\xFD[PPPP\x80\x82b\0\x13\xB2\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x14\x06W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x14,\x91\x90b\0\x8D\x95V[\x14b\0\x14LW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[PPV[`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91\x90b\x01\x1D\xDC` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x14\x9D\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x14\xB8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x14\xCDW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`\x1DT`@QcH\\\xC9U`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01R\x90\x82\x16`$\x82\x01R\x91\x16\x92PcH\\\xC9U\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x15&W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x15;W=`\0\x80>=`\0\xFD[PPPPV[`%T`@Qp\x02\xF0P\xFE\x93\x89C\xAC\xC4_eV\x80\0\0\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90b\0\x15o\x90b\0\x89vV[b\0\x15|\x92\x91\x90b\0\x8E\xC0V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x15\x99W=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`\x1ET`@Q\x91\x16\x90b\0\x15\xCA\x90b\0\x89\x84V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x15\xF7W=`\0\x80>=`\0\xFD[P` \x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x81\x17\x82U`\x1CT`\x1FT`\x1DT`@\x80Q\x92\x87\x16`$\x84\x01R\x90\x86\x16`D\x80\x84\x01\x91\x90\x91R\x81Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x81R\x93\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cH\\\xC9U`\xE0\x1B\x17\x90R\x92Q\x91\x93\x16\x91\x90b\0\x16t\x90b\0\x89ZV[b\0\x16\x82\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x16\x9FW=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rp\x02\xF0P\xFE\x93\x89C\xAC\xC4_eV\x80\0\0\0\0\x93\x91\x90\x91\x16\x91c\xA9\x05\x9C\xBB\x91b\0\x16\xFE\x91\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x17\x1EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x17D\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x17\x8FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x17\xA4W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`<\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\xAF` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x17\xF5\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x18\x10W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x18%W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x18b\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x18\x82W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x14L\x91\x90b\0\x8D\x95V[`\x1BT`\x1FT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x18\xF5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x19\nW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`;\x80\x82Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\x01\x1DH` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x19d\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x19\x7FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x19\x94W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x19\xE2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x19\xF7W=`\0\x80>=`\0\xFD[PP`!T`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xD9\xCA\xED\x12\x91Pb\0\n\xFB\x900\x90\x86\x90\x86\x90`\x04\x01b\0\x8D\xECV[```\x0F\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[```\x0E\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[`\x1BT`!T`@\x80Qc\x076\xE1\xC7`\xE3\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cLc\xE5b\x93\x16\x91c9\xB7\x0E8\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x1BJW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Bp\x91\x90b\0\x8F.V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15\x80\x15b\0\x1B\xA0WP`\x1CT`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x16\x14\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1B\xC1\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1B\xDAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1B\xEFW=`\0\x80>=`\0\xFD[PPPP`\0g\r\xE0\xB6\xB3\xA7d\0\0\x90Pb\0\x1C\x0B\x81b\0F\x85V[`\x1BT`@\x80Q\x80\x82\x01\x82R` \x80\x82R\x7FStrategyBase.onlyStrategyManager\x90\x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\xF2\x8D\xCE\xB3\x91b\0\x1Cv\x91\x90`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1C\x91W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1C\xA6W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1C\xF2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1D\x07W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\x1DD\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D_W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1DtW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D\xC9W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1D\xDEW=`\0\x80>=`\0\xFD[PPPPPPPV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x1E>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Ed\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0\x1E\x8BWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1E\xAC\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1E\xC5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1E\xDAW=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0`\xD8V[`\x1BT`!T`@\x80Qc\x076\xE1\xC7`\xE3\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cLc\xE5b\x93\x16\x91c9\xB7\x0E8\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x1F>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Fd\x91\x90b\0\x8F.V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15\x80\x15b\0\x1F\x94WP`\x1CT`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x16\x14\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1F\xB5\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1F\xCEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1F\xE3W=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93Pc\xA9\x05\x9C\xBB\x92b\0 (\x92\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0 HW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0 n\x91\x90b\0\x8E)V[P`\x1BT`@\x80Q\x80\x82\x01\x82R` \x80\x82R\x7FStrategyBase.onlyStrategyManager\x90\x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91b\0 \xD1\x91`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0 \xECW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0!\x01W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0!MW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0!bW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0!\x9F\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0!\xBFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0!\xE5\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x80W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x84\x83\x11`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\"}W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\"\x92W=`\0\x80>=`\0\xFD[PPPPb\0\"\xA2\x83\x83b\0]\xE2V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\"\xECW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0#\x01W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`/\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1D\xAD` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0#R\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0#mW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0#\x82W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0#\xBF\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0#\xDFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0$\x05\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D\xC9W`\0\x80\xFD[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0$\xAEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0$\xD4\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0$\xFBWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0%\x1C\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0%5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0%JW=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0b\xF5V[b\0%f\x82\x82b\0]\xE2V[`'T`@\x80Qc\xDFo\xAD\xC1`\xE0\x1B\x81R\x81Q`\0\x93\x84\x93`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92c\xDFo\xAD\xC1\x92`\x04\x80\x83\x01\x93\x92\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0%\xB1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0%\xD7\x91\x90b\0\x8FNV[\x91P\x91Pb\0%\xE7\x82\x85b\0eOV[b\0\x15;\x81\x84b\0eOV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x85\x10`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0&:W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0&OW=`\0\x80>=`\0\xFD[PP`\x1BT`$\x80T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x87\x11\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcLc\xE5b\x92P\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0&\x9CW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0&\xB1W=`\0\x80>=`\0\xFD[PPPPb\0&\xC1\x84\x84b\0]\xE2V[`'T`@Qc\x8C\x87\x10\x19`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\x8C\x87\x10\x19\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0'\x0CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0'2\x91\x90b\0\x8D\x95V[`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0'l\x92\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0'\x8CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0'\xB2\x91\x90b\0\x8E)V[P\x84\x83\x11\x15b\0+\x02W`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0(\x06W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0(\x1BW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0(\xACW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0(\xC1W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0(\xFE\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0)\x1EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0)D\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0)\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0)\xABW=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0)\xF9W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0*\x0EW=`\0\x80>=`\0\xFD[PP`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91Pb\0*F\x900\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0*fW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0*\x8C\x91\x90b\0\x8E)V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0*\xDEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0*\xF3W=`\0\x80>=`\0\xFD[PPPP`\x01\x91PPb\x002\x11V[`\x1FT`'T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x86\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0+SW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0+y\x91\x90b\0\x8D\x95V[\x11\x15b\0,WW`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0+\xCAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0+\xDFW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01b\0(\x91V[`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0,\xA2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0,\xC8\x91\x90b\0\x8D\x95V[\x90P\x81b\x000\x15W`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0-\x1AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0-/W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0-\xBEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0-\xD3W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0.\x10\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0.0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0.V\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0.\xA8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0.\xBDW=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0/\x0BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0/ W=`\0\x80>=`\0\xFD[PP`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91Pb\0/X\x900\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0/xW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0/\x9E\x91\x90b\0\x8E)V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0/\xF0W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x000\x05W=`\0\x80>=`\0\xFD[PPPP`\x01\x92PPPb\x002\x11V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x000_W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x000tW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\x000\xB1\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\x000\xD1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x000\xF7\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x001IW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x001^W=`\0\x80>=`\0\xFD[PPPP\x80\x82b\x001p\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x001\xC4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x001\xEA\x91\x90b\0\x8D\x95V[\x14b\x002\nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[`\0\x92PPP[\x93\x92PPPV[```\x12\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W`\0\x84\x81R` \x90\x81\x90 `@\x80Q\x80\x82\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T`\x01`\x01`\xA0\x1B\x03\x16\x83R`\x01\x81\x01\x80T\x83Q\x81\x87\x02\x81\x01\x87\x01\x90\x94R\x80\x84R\x93\x94\x91\x93\x85\x83\x01\x93\x92\x83\x01\x82\x82\x80\x15b\x002\xE9W` \x02\x82\x01\x91\x90`\0R` `\0 \x90`\0\x90[\x82\x82\x90T\x90a\x01\0\n\x90\x04`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x16\x81R` \x01\x90`\x04\x01\x90` \x82`\x03\x01\x04\x92\x83\x01\x92`\x01\x03\x82\x02\x91P\x80\x84\x11b\x002\xAAW\x90P[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90b\x002<V[PPPP\x90P\x90V[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x003bW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x003\x88\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x003\xAFWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x003\xD0\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x003\xE9W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x003\xFEW=`\0\x80>=`\0\xFD[PP`'T`@\x80Qc\xDFo\xAD\xC1`\xE0\x1B\x81R\x81Q\x89\x95P`\0\x94P\x84\x93`\x01`\x01`\xA0\x1B\x03\x16\x92c\xDFo\xAD\xC1\x92`\x04\x80\x82\x01\x93\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\x004MW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x004s\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x004\x9AWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x004\xBB\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x004\xD4W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x004\xE9W=`\0\x80>=`\0\xFD[PPPPb\x004\xF9\x88\x88b\0fzV[PPPPPPPPV[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x005ZW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x005\x80\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x005\xA7WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x005\xC8\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x005\xE1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x005\xF6W=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0k\x04V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x15\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x006LW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x006aW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x85\x85\x11`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x006\xABW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x006\xC0W=`\0\x80>=`\0\xFD[PP`\x1BT`$\x80T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x86\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcLc\xE5b\x92P\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x007\x0CW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x007!W=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x007oW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x007\x84W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x007\xD6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x007\xEBW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\08@W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\08UW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\08\x92\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\08\xB2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\08\xD8\x91\x90b\0\x8E)V[P`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\09$W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\09J\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\09\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\09\xABW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\09\xE8\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0:\x08W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0:.\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0:\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0:\x95W=`\0\x80>=`\0\xFD[PPPP\x80\x83b\0:\xA7\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0:\xFBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0;!\x91\x90b\0\x8D\x95V[\x14b\0;AW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0;\x8BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0;\xA0W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0;\xF2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0<\x07W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0<\\W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0<qW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93Pc\xA9\x05\x9C\xBB\x92P\x16b\0<\x9A\x86\x86b\0\x8FsV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0<\xB9\x92\x91\x90b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0<\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0<\xFF\x91\x90b\0\x8E)V[P`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0=TW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0=z\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0=\xC6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0=\xDBW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93PcG\xE7\xEF$\x92P\x16b\0>\x04\x86\x86b\0\x8FsV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0>#\x92\x91\x90b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0>CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0>i\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0>\xBBW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0>\xD0W=`\0\x80>=`\0\xFD[PPPP\x81`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0?)W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0?O\x91\x90b\0\x8D\x95V[\x14b\0?oW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[PPPV[`\x1BT`\x1FT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0?\xC1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0?\xD6W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`6\x80\x82Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\x01\x1E\xEB` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0@0\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0@KW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0@`W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0@\xAEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0@\xC3W=`\0\x80>=`\0\xFD[PP`!T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcG\xE7\xEF$\x91Pb\0!\x9F\x90\x85\x90\x85\x90`\x04\x01b\0\x8E\x10V[```\x11\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W\x83\x82\x90`\0R` `\0 \x01\x80Tb\0AA\x90b\0\x8F\x8DV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Tb\0Ao\x90b\0\x8F\x8DV[\x80\x15b\0A\xC0W\x80`\x1F\x10b\0A\x94Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91b\0A\xC0V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11b\0A\xA2W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90b\0A\x1FV[```\x13\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W`\0\x84\x81R` \x90\x81\x90 `@\x80Q\x80\x82\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T`\x01`\x01`\xA0\x1B\x03\x16\x83R`\x01\x81\x01\x80T\x83Q\x81\x87\x02\x81\x01\x87\x01\x90\x94R\x80\x84R\x93\x94\x91\x93\x85\x83\x01\x93\x92\x83\x01\x82\x82\x80\x15b\0B\xA6W` \x02\x82\x01\x91\x90`\0R` `\0 \x90`\0\x90[\x82\x82\x90T\x90a\x01\0\n\x90\x04`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x16\x81R` \x01\x90`\x04\x01\x90` \x82`\x03\x01\x04\x92\x83\x01\x92`\x01\x03\x82\x02\x91P\x80\x84\x11b\0BgW\x90P[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90b\0A\xF9V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0C\tW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0C\x1EW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\n` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Co\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0C\x8AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0C\x9FW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0C\xDD\x92\x90\x91\x16\x90`\0\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0C\xFDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0D#\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x15&W`\0\x80\xFD[\x82`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0D\xCCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0D\xF2\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0E\x19WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0E:\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0ESW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0EhW=`\0\x80>=`\0\xFD[PPPPb\0\x0B\x95\x86\x86\x86b\0l\xFCV[\x81`\x01`\x01``\x1B\x03\x16`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0E\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0E\xFF\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0F&WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0FG\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0F`W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0FuW=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0rxV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0F\xDCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0G\x02\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0G)WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0GJ\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0GcW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0GxW=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0w\xBDV[`\x1BT`\x1CT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0G\xD4W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0G\xE9W=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x86\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0H:W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0HOW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0H\x9BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0H\xB0W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`*\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1D\x83` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0I\x01\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0I\x1CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0I1W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x87\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01b\0\x1DDV[`\x1BT`\"T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0I\xB8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0I\xCDW=`\0\x80>=`\0\xFD[PP`!T`@Qc\x13d9\xDD`\xE0\x1B\x81R`\x01`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x13d9\xDD\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0J\x18W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0J-W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0J\x82W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0J\x97W=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93Pc\xA9\x05\x9C\xBB\x92b\0J\xDC\x92\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0J\xFCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0K\"\x91\x90b\0\x8E)V[P`\x1BT`@\x80Q\x80\x82\x01\x82R`\x19\x81Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B` \x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91b\0K\x81\x91`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0K\x9CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0K\xB1W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01b\0\x0FaV[```\x10\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W\x83\x82\x90`\0R` `\0 \x01\x80Tb\0L0\x90b\0\x8F\x8DV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Tb\0L^\x90b\0\x8F\x8DV[\x80\x15b\0L\xAFW\x80`\x1F\x10b\0L\x83Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91b\0L\xAFV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11b\0L\x91W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90b\0L\x0EV[`\0\x80Ta\x01\0\x90\x04`\xFF\x16\x15b\0L\xE5WP`\0Ta\x01\0\x90\x04`\xFF\x16\x90V[`\0sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15b\0M\xFAW`@Q`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90\x7Ff\x7F\x9Dp\xCAA\x1Dp\xEA\xD5\r\x8D\\\"\x07\r\xAF\xC3j\xD7_=\xCF^r7\xB2*\xDE\x9A\xEC\xC4\x90b\0M\\\x90\x83\x90e\x19\x98Z[\x19Y`\xD2\x1B\x90` \x01b\0\x8E\x10V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0M|\x92\x91` \x01b\0\x8F\xCAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0M\x98\x91b\0\x8F\xFDV[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14b\0M\xD7W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0M\xDCV[``\x91P[P\x91PP\x80\x80` \x01\x90Q\x81\x01\x90b\0M\xF6\x91\x90b\0\x8E)V[\x91PP[\x91\x90PV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81R`\x01`\x01`\xF0\x1B\x03\x83\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0NRW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Nx\x91\x90b\0\x8D\x95V[\x90P\x81`\x01`\x01`\xF0\x1B\x03\x16\x81\x14b\0N\xE8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FunderlyingFromShares != amountSh`D\x82\x01RjaresToQuery`\xA8\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qcz\x8B&7`\xE0\x1B\x81R`\x01`\x01`\xF0\x1B\x03\x84\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cz\x8B&7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0O;W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Oa\x91\x90b\0\x8D\x95V[\x90P\x82`\x01`\x01`\xF0\x1B\x03\x16\x81\x14b\0?oW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FunderlyingFromSharesView != amou`D\x82\x01RnntSharesToQuery`\x88\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0P,W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0PR\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0PyWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0P\x9A\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0P\xB3W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0P\xC8W=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0}hV[\x82`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0Q.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0QT\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0Q{WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Q\x9C\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0Q\xB5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0Q\xCAW=`\0\x80>=`\0\xFD[PPPPb\0\x0B\x95\x86\x86\x86b\0\x82\xBAV[```\x0C\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0R\x85W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0R\x9AW=`\0\x80>=`\0\xFD[PPPPb\0R\xA9\x81b\0F\x85V[`\0\x80`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0S\0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0S&\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0SuW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0S\x9B\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0S\xE7W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0S\xFCW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0T9\x920\x92\x16\x90\x88\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0TTW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0TiW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0T\xBEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0T\xD3W=`\0\x80>=`\0\xFD[PPPP`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0U+W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0UQ\x91\x90b\0\x8D\x95V[\x82\x14b\0U\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x1C\xDA\x18\\\x99\\\xC8\x18\xDA\x18[\x99\xD9Y`\x92\x1B`D\x82\x01R`d\x01b\0\x08\xBAV[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0U\xDBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0V\x01\x91\x90b\0\x8D\x95V[\x81\x14b\0\x15;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1D\x1B\xDA\xD9[\x88\x18\x98[\x18[\x98\xD9H\x18\xDA\x18[\x99\xD9Y`Z\x1B`D\x82\x01R`d\x01b\0\x08\xBAV[d\xE8\xD4\xA5\x10\0`(\x81\x90UdE\xD9d\xB8\0`)\x81\x90U`\0\x91b\0Vn\x91\x90b\0\x90\x1BV[\x90Pb\0V\x80`)T`(Tb\0]\xE2V[`\x1FT`\x1ET`(T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93c\xA9\x05\x9C\xBB\x93b\0V\xB9\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0V\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0V\xFF\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0WJW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0W_W=`\0\x80>=`\0\xFD[PPPP`\0[\x81\x81\x10\x15b\0X\x84W`\x1FT`'T`)T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93c\xA9\x05\x9C\xBB\x93b\0W\xA8\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0W\xC8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0W\xEE\x91\x90b\0\x8E)V[P`'T`\x1FT`)T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cG\xE7\xEF$\x93b\0X(\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0XHW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Xn\x91\x90b\0\x8D\x95V[P\x80b\0X{\x81b\0\x90>V[\x91PPb\0WfV[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0X\xD6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0X\xEBW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`)T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x95Pc\xA9\x05\x9C\xBB\x94Pb\0Y)\x93\x90\x92\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0YIW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Yo\x91\x90b\0\x8E)V[P`(T`\x1FT`'T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0Y\xC0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Y\xE6\x91\x90b\0\x8D\x95V[\x11b\0Z\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0ZPW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0ZeW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`,\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E8` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Z\xB6\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0Z\xD1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0Z\xE6W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`)T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x95PcG\xE7\xEF$\x94Pb\0\x0F\xCE\x93\x90\x92\x16\x91`\x04\x01b\0\x8E\x10V[`@Qb\0[2\x90b\0\x89\x92V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0[OW=`\0\x80>=`\0\xFD[P`\x1C\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91` \x80\x83\x01\x90\x806\x837PP`\"T\x82Q\x92\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91\x83\x91P`\0\x90b\0[\xB5Wb\0[\xB5b\0\x90\\V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16` \x91\x82\x02\x92\x90\x92\x01\x01R`#T`@Q\x83\x92\x91\x90\x91\x16\x90b\0[\xE3\x90b\0\x89\xA0V[b\0[\xF0\x92\x91\x90b\0\x90rV[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\\rW=`\0\x80>=`\0\xFD[P`\x1D\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`@Qb\0\\<\x90b\0\x89\xAEV[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\YW=`\0\x80>=`\0\xFD[P`\x1E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`$T`%T`@Q\x91\x92\x16\x90b\0\\\x8E\x90b\0\x89vV[b\0\\\x9B\x92\x91\x90b\0\x8E\xC0V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\\xB8W=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`\x1ET`@Q\x91\x16\x90b\0\\\xE9\x90b\0\x89\x84V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0]\x16W=`\0\x80>=`\0\xFD[P` \x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x81\x17\x82U`\x1CT`\x1FT`\x1DT`@\x80Q\x92\x87\x16`$\x84\x01R\x90\x86\x16`D\x80\x84\x01\x91\x90\x91R\x81Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x81R\x93\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cH\\\xC9U`\xE0\x1B\x17\x90R\x92Q\x91\x93\x16\x91\x90b\0]\x93\x90b\0\x89ZV[b\0]\xA1\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0]\xBEW=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x84\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0^(W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0^=W=`\0\x80>=`\0\xFD[PPPP`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0^\x97W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0^\xBD\x91\x90b\0\x8FNV[`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x93\x95P\x91\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0_\x0CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0_!W=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0_c\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0_~W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0_\x93W=`\0\x80>=`\0\xFD[PP`@\x80Q\x85\x81R` \x81\x01\x88\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x93P\x01\x90P`@Q\x80\x91\x03\x90\xA1`@\x80Q\x82\x81R` \x81\x01\x85\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x11\xC7\x0C\x9D\x90`D\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0`YW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0`nW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0`\xC3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x004\xF9W=`\0\x80>=`\0\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0a W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0a5W=`\0\x80>=`\0\xFD[PPPPb\0aD\x81b\0F\x85V[`\x1BT`\"T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0a\x8EW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0a\xA3W=`\0\x80>=`\0\xFD[PP`!T`@Qc\x13d9\xDD`\xE0\x1B\x81R`\x02`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x13d9\xDD\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0a\xEEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0b\x03W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0bXW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0bmW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q\x80\x82\x01\x82R`\x19\x81Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B` \x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\0b\xDA\x91\x90`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\x93W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x84\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0c=W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0cRW=`\0\x80>=`\0\xFD[PPPPb\0ca\x82b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0c\xACW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0c\xD2\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x85\x11`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0d\x19W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0d.W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q`\x80\x81\x01\x90\x91R`M\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1C\xFB` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0d\x7F\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0d\x9AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0d\xAFW=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0d\xFDW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0e\x12W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\x1DD\x920\x92\x16\x90\x87\x90`\x04\x01b\0\x8D\xECV[\x80\x82\x14b\0\x14LW\x7FA0O\xAC\xD92=u\xB1\x1B\xCD\xD6\t\xCB8\xEF\xFF\xFD\xB0W\x10\xF7\xCA\xF0\xE9\xB1lm\x9Dp\x9FP`@Qb\0e\xC2\x90` \x80\x82R`\"\x90\x82\x01R\x7FError: a == b not satisfied [uin`@\x82\x01Rat]`\xF0\x1B``\x82\x01R`\x80\x01\x90V[`@Q\x80\x91\x03\x90\xA1`@\x80Q\x81\x81R`\n\x81\x83\x01Ri\x08\x08\x08\x08\x08\x08\x13\x19Y\x9D`\xB2\x1B``\x82\x01R` \x81\x01\x84\x90R\x90Q\x7F\xB2\xDE/\xBE\x80\x1A\r\xF6\xC0\xCB\xDD\xFDD\x8B\xA3\xC4\x1DH\xA0@\xCA5\xC5l\x81\x96\xEF\x0F\xCA\xE7!\xA8\x91\x81\x90\x03`\x80\x01\x90\xA1`@\x80Q\x81\x81R`\n\x81\x83\x01Ri\x08\x08\x08\x08\x08\x14\x9AY\xDA\x1D`\xB2\x1B``\x82\x01R` \x81\x01\x83\x90R\x90Q\x7F\xB2\xDE/\xBE\x80\x1A\r\xF6\xC0\xCB\xDD\xFDD\x8B\xA3\xC4\x1DH\xA0@\xCA5\xC5l\x81\x96\xEF\x0F\xCA\xE7!\xA8\x91\x81\x90\x03`\x80\x01\x90\xA1b\0\x14Lb\0\x889V[`\x1BT`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b`\x01\x84\x10\x80\x15\x90b\0f\x9DWP`\0\x83\x11[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0f\xBE\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0f\xD7W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0f\xECW=`\0\x80>=`\0\xFD[PPPPb\0f\xFB\x82b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0gOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0gu\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x84\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0g\xAEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0g\xC3W=`\0\x80>=`\0\xFD[PPPP`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0h\x1DW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0hC\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0h}\x92\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0h\x9DW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0h\xC3\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0i\x0EW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0i#W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93PcG\xE7\xEF$\x92b\0ia\x92\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0i\x81W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0i\xA7\x91\x90b\0\x8D\x95V[\x90P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0i\xFAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0j\x0FW=`\0\x80>=`\0\xFD[PPPP\x82\x81\x14b\0jdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FnewShares != amountToDeposit\0\0\0\0`D\x82\x01R`d\x01b\0\x08\xBAV[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0j\xAFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0j\xD5\x91\x90b\0\x8D\x95V[\x90P\x81b\0j\xE4\x84\x83b\0\x8FsV[\x14b\0\x10{W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x90\xCEV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x84\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0kLW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0kaW=`\0\x80>=`\0\xFD[PPPPb\0kp\x82b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0k\xBBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0k\xE1\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x85\x16\x83\x10\x15`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0l/W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0lDW=`\0\x80>=`\0\xFD[PPPP`\0\x82c\xFF\xFF\xFF\xFF\x16\x82b\0l^\x91\x90b\0\x8FsV[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0l\xAAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0l\xBFW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0`>\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0mPW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0mv\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x86\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0m\xAFW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0m\xC4W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x87\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0n\x10W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0n%W=`\0\x80>=`\0\xFD[PPPPb\0n4\x83b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0n\x88W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0n\xAE\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x85\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0n\xE7W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0n\xFCW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\0o9\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0oYW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0o\x7F\x91\x90b\0\x8E)V[P`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0o\xD2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0o\xF8\x91\x90b\0\x8D\x95V[\x90P`\0b\0p\na\x03\xE8\x83b\0\x8EcV[\x83`\x01`\x01``\x1B\x03\x16a\x03\xE8`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0pkW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0p\x91\x91\x90b\0\x8D\x95V[b\0p\x9D\x91\x90b\0\x8EcV[b\0p\xA9\x91\x90b\0\x91\x1FV[b\0p\xB5\x91\x90b\0\x90\x1BV[`!T`@Qc\x8C\x87\x10\x19`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x86\x16`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x8C\x87\x10\x19\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0q\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0q3\x91\x90b\0\x8D\x95V[\x90P\x81\x81\x14b\0q\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FsharesFromUnderlying != expected`D\x82\x01Rg\x15\x98[\x1DYS\xDD]`\xC2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qc8\xF6\xB9G`\xE2\x1B\x81R`\x01`\x01``\x1B\x03\x86\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\xE3\xDA\xE5\x1C\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0q\xEAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0r\x10\x91\x90b\0\x8D\x95V[\x90P\x82\x81\x14b\0\x1D\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FsharesFromUnderlyingView != expe`D\x82\x01Rk\x18\xDD\x19Y\x15\x98[\x1DYS\xDD]`\xA2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\x01``\x1B\x03\x85\x16\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0r\xC9W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0r\xDEW=`\0\x80>=`\0\xFD[PPPPb\0r\xF6\x82`\x01`\x01``\x1B\x03\x16b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0sAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0sg\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01``\x1B\x03\x85\x16\x83\x10\x15`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0s\xB8W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0s\xCDW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x94P\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0t!W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0tG\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0t\x96W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0t\xBC\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\x08W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\x1DW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R`\x01`\x01``\x1B\x03\x89\x16`D\x82\x01R\x91\x16\x92Pc\xD9\xCA\xED\x12\x91P`d\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\x95W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\xEAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\xFFW=`\0\x80>=`\0\xFD[PP`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x93P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0vOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0vu\x91\x90b\0\x8D\x95V[\x90P`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0v\xCDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0v\xF3\x91\x90b\0\x8D\x95V[\x90P`\x01`\x01``\x1B\x03\x86\x16b\0w\x0B\x82\x87b\0\x8FsV[\x14b\0w+W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x91AV[\x84b\0wA`\x01`\x01``\x1B\x03\x88\x16\x86b\0\x91\x1FV[b\0wM\x91\x90b\0\x90\x1BV[b\0wY\x84\x84b\0\x8FsV[\x14b\0\x1D\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7Ftoken balance did not increase a`D\x82\x01Rkppropriately`\xA0\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0x\x11W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0x7\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x84\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0xpW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0x\x85W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x85\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0x\xD1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0x\xE6W=`\0\x80>=`\0\xFD[PPPP`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0y@W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0yf\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0y\xA0\x92\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0y\xC0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0y\xE6\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0z1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0zFW=`\0\x80>=`\0\xFD[PP`\x1BT`!T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0z\x88\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0z\xA3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0z\xB8W=`\0\x80>=`\0\xFD[PPPP\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8g\r\xE0\xB6\xB3\xA7d\0\0`@Qb\0z\xF6\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x92cG\xE7\xEF$\x92b\0{:\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0{ZW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0{\x80\x91\x90b\0\x8D\x95V[\x90P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0{\xD3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0{\xE8W=`\0\x80>=`\0\xFD[PPPP\x82\x81\x14b\0|=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FnewShares != amountToDeposit\0\0\0\0`D\x82\x01R`d\x01b\0\x08\xBAV[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0|\x88W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0|\xAE\x91\x90b\0\x8D\x95V[\x90P\x81b\0|\xBD\x84\x83b\0\x8FsV[\x14b\0|\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x90\xCEV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0}.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0}T\x91\x90b\0\x8D\x95V[g\r\xE0\xB6\xB3\xA7d\0\0\x14b\0\x15;W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0}\xB0W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0}\xC5W=`\0\x80>=`\0\xFD[PPPPb\0}\xD4\x81b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0~\x1FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0~E\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P`\0\x92\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0~\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0~\xBE\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x7F\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x7F3\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x7F\x7FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x7F\x94W=`\0\x80>=`\0\xFD[PP`\x1BT`!T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0\x7F\xD6\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x7F\xF1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x80\x06W=`\0\x80>=`\0\xFD[PPPP\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8g\r\xE0\xB6\xB3\xA7d\0\0`@Qb\0\x80D\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92c\xD9\xCA\xED\x12\x92b\0\x80\x87\x920\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x80\xA2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x80\xB7W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x81\x0CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x81!W=`\0\x80>=`\0\xFD[PP`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x93P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x81qW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x81\x97\x91\x90b\0\x8D\x95V[\x90P`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x81\xEFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x82\x15\x91\x90b\0\x8D\x95V[\x90P\x80\x15b\0\x828W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x91AV[\x83b\0\x82E\x84\x84b\0\x8FsV[\x14b\0\x0B\x95W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`?`$\x82\x01R\x7FtokenBalanceAfter - tokenBalance`D\x82\x01R\x7FBefore != strategyBalanceBefore\0`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x83\x0EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x834\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x86\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x83mW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x83\x82W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x87\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x83\xCEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x83\xE3W=`\0\x80>=`\0\xFD[PPPPb\0\x83\xF2\x83b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x84FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x84l\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x85\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x84\xA5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x84\xBAW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\0\x84\xF7\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x85\x17W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x85=\x91\x90b\0\x8E)V[P`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x85\x90W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x85\xB6\x91\x90b\0\x8D\x95V[\x90P`\0b\0\x85\xC8a\x03\xE8\x83b\0\x8EcV[\x90P`\0a\x03\xE8`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x86#W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x86I\x91\x90b\0\x8D\x95V[b\0\x86U\x91\x90b\0\x8EcV[b\0\x86j`\x01`\x01``\x1B\x03\x86\x16\x84b\0\x91\x1FV[b\0\x86v\x91\x90b\0\x90\x1BV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x87\x16`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x86\xCEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x86\xF4\x91\x90b\0\x8D\x95V[\x90P\x81\x81\x14b\0\x87XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FunderlyingFromShares != expected`D\x82\x01Rg\x15\x98[\x1DYS\xDD]`\xC2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qcz\x8B&7`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x87\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cz\x8B&7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x87\xABW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x87\xD1\x91\x90b\0\x8D\x95V[\x90P\x82\x81\x14b\x004\xF9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FunderlyingFromSharesView != expe`D\x82\x01Rk\x18\xDD\x19Y\x15\x98[\x1DYS\xDD]`\xA2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15b\0\x89;W`@\x80Qsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-` \x82\x01\x81\x90Re\x19\x98Z[\x19Y`\xD2\x1B\x92\x82\x01\x92\x90\x92R`\x01``\x82\x01R`\0\x91\x90\x7Fp\xCA\x10\xBB\xD0\xDB\xFD\x90 \xA9\xF4\xB14\x02\xC1l\xB1 p^\r\x1C\n\xEA\xB1\x0F\xA3S\xAEXo\xC4\x90`\x80\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0\x88\xD6\x92\x91` \x01b\0\x8F\xCAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0\x88\xF2\x91b\0\x8F\xFDV[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14b\0\x891W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0\x896V[``\x91P[PPPP[`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90UV[a\x1FM\x80b\0\x91\x87\x839\x01\x90V[a\x0E\x81\x80b\0\xB0\xD4\x839\x01\x90V[a\x0Et\x80b\0\xBFU\x839\x01\x90V[a\x0E`\x80b\0\xCD\xC9\x839\x01\x90V[a\x1A\xB4\x80b\0\xDC)\x839\x01\x90V[a\x07\x18\x80b\0\xF6\xDD\x839\x01\x90V[a\x07x\x80b\0\xFD\xF5\x839\x01\x90V[a\x17\x8E\x80b\x01\x05m\x839\x01\x90V[`\0\x80`@\x83\x85\x03\x12\x15b\0\x89\xD0W`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15b\0\x8A\x1AW\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01b\0\x89\xF3V[P\x94\x95\x94PPPPPV[` \x81R`\0b\x002\x11` \x83\x01\x84b\0\x89\xDFV[`\0` \x82\x84\x03\x12\x15b\0\x8AMW`\0\x80\xFD[P5\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x8AjW`\0\x80\xFD[PV[`\0` \x82\x84\x03\x12\x15b\0\x8A\x80W`\0\x80\xFD[\x815b\x002\x11\x81b\0\x8ATV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8A\xA3W`\0\x80\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[`\0` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x92P\x82\x86\x01\x91P\x82\x81`\x05\x1B\x87\x01\x01\x84\x88\x01`\0\x80[\x84\x81\x10\x15b\0\x8BbW\x89\x84\x03`?\x19\x01\x86R\x82Q\x80Q`\x01`\x01`\xA0\x1B\x03\x16\x85R\x88\x01Q\x88\x85\x01\x88\x90R\x80Q\x88\x86\x01\x81\x90R\x90\x89\x01\x90\x83\x90``\x87\x01\x90[\x80\x83\x10\x15b\0\x8BLW\x83Q`\x01`\x01`\xE0\x1B\x03\x19\x16\x82R\x92\x8B\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x8B\x01\x90b\0\x8B V[P\x97\x8A\x01\x97\x95PPP\x91\x87\x01\x91`\x01\x01b\0\x8A\xE2V[P\x91\x99\x98PPPPPPPPPV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8B\x85W`\0\x80\xFD[\x825\x91P` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14b\0\x8B\xA1W`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0[\x83\x81\x10\x15b\0\x8B\xC9W\x81\x81\x01Q\x83\x82\x01R` \x01b\0\x8B\xAFV[\x83\x81\x11\x15b\0\x15;WPP`\0\x91\x01RV[`\0\x81Q\x80\x84Rb\0\x8B\xF5\x81` \x86\x01` \x86\x01b\0\x8B\xACV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P\x83\x87\x01`\0[\x82\x81\x10\x15b\0\x8CbW`?\x19\x88\x86\x03\x01\x84Rb\0\x8CO\x85\x83Qb\0\x8B\xDBV[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01b\0\x8C0V[P\x92\x97\x96PPPPPPPV[\x805`\x01`\x01``\x1B\x03\x81\x16\x81\x14b\0M\xFAW`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8C\x9DW`\0\x80\xFD[\x835\x92P` \x84\x015\x91Pb\0\x8C\xB6`@\x85\x01b\0\x8CoV[\x90P\x92P\x92P\x92V[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8C\xD3W`\0\x80\xFD[b\0\x8C\xDE\x83b\0\x8CoV[\x91Pb\0\x8C\xEE` \x84\x01b\0\x8CoV[\x90P\x92P\x92\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8D\rW`\0\x80\xFD[\x835\x92P` \x84\x015\x91P`@\x84\x015b\0\x8D(\x81b\0\x8ATV[\x80\x91PP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15b\0\x8DFW`\0\x80\xFD[\x815`\x01`\x01`\xF0\x1B\x03\x81\x16\x81\x14b\x002\x11W`\0\x80\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x82R\x83\x16` \x82\x01R```@\x82\x01\x81\x90R`\0\x90b\0\x8D\x8C\x90\x83\x01\x84b\0\x8B\xDBV[\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15b\0\x8D\xA8W`\0\x80\xFD[PQ\x91\x90PV[` \x80\x82R`\x0E\x90\x82\x01Rm\x06&\x16B\x07FW7B\x076WGW`\x94\x1B`@\x82\x01R``\x01\x90V[` \x81R`\0b\x002\x11` \x83\x01\x84b\0\x8B\xDBV[`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x81R\x91\x90\x92\x16` \x82\x01R`@\x81\x01\x91\x90\x91R``\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[`\0` \x82\x84\x03\x12\x15b\0\x8E<W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14b\x002\x11W`\0\x80\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15b\0\x8EyWb\0\x8Eyb\0\x8EMV[P\x01\x90V[` \x80\x82R`\"\x90\x82\x01R\x7Ftotal shares not updated correct`@\x82\x01Raly`\xF0\x1B``\x82\x01R`\x80\x01\x90V[`\x80\x81R`\0b\0\x8E\xEB`\x80\x83\x01`\n\x81Ri*2\xB9\xBA\x10*7\xB5\xB2\xB7`\xB1\x1B` \x82\x01R`@\x01\x90V[\x82\x81\x03` \x84\x01Rb\0\x8F\x0F\x81`\x04\x81Rc\x15\x11T\xD5`\xE2\x1B` \x82\x01R`@\x01\x90V[`@\x84\x01\x95\x90\x95RPP`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16``\x90\x91\x01R\x90V[`\0` \x82\x84\x03\x12\x15b\0\x8FAW`\0\x80\xFD[\x81Qb\x002\x11\x81b\0\x8ATV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8FbW`\0\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[`\0\x82\x82\x10\x15b\0\x8F\x88Wb\0\x8F\x88b\0\x8EMV[P\x03\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x8F\xA2W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x8F\xC4WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x81R\x81Q`\0\x90b\0\x8F\xEF\x81`\x04\x85\x01` \x87\x01b\0\x8B\xACV[\x91\x90\x91\x01`\x04\x01\x93\x92PPPV[`\0\x82Qb\0\x90\x11\x81\x84` \x87\x01b\0\x8B\xACV[\x91\x90\x91\x01\x92\x91PPV[`\0\x82b\0\x909WcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0`\0\x19\x82\x14\x15b\0\x90UWb\0\x90Ub\0\x8EMV[P`\x01\x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`@\x81R`\0b\0\x90\x87`@\x83\x01\x85b\0\x89\xDFV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[\x94\x15\x15\x85R\x92\x15\x15` \x85\x01R\x90\x15\x15`@\x84\x01R\x15\x15``\x83\x01R`\x01`\x01`\xA0\x1B\x03\x16`\x80\x82\x01R`\xA0\x01\x90V[` \x80\x82R`1\x90\x82\x01R\x7FtotalSharesAfter - totalSharesBe`@\x82\x01Rpfore != newShares`x\x1B``\x82\x01R`\x80\x01\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15b\0\x91<Wb\0\x91<b\0\x8EMV[P\x02\x90V[` \x80\x82R`%\x90\x82\x01R\x7Fshares did not decrease appropri`@\x82\x01Rdately`\xD8\x1B``\x82\x01R`\x80\x01\x90V\xFE`\xA0`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x1FM8\x03\x80b\0\x1FM\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x01\x16V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80R\x80b\0\0Lb\0\0TV[PPb\0\x01HV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15b\0\0\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[`\0T`\xFF\x90\x81\x16\x10\x15b\0\x01\x14W`\0\x80T`\xFF\x19\x16`\xFF\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[V[`\0` \x82\x84\x03\x12\x15b\0\x01)W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01AW`\0\x80\xFD[\x93\x92PPPV[`\x80Qa\x1D\xD4b\0\x01y`\09`\0\x81\x81a\x02\x16\x01R\x81\x81a\x07\xA9\x01R\x81\x81a\x0B\xE7\x01Ra\x0C\xB2\x01Ra\x1D\xD4`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x01\x8EW`\x005`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xDEW\x80c\xABY!\xE1\x11a\0\x97W\x80c\xDFo\xAD\xC1\x11a\0qW\x80c\xDFo\xAD\xC1\x14a\x03fW\x80c\xE3\xDA\xE5\x1C\x14a\x03\x81W\x80c\xF3\xE78u\x14a\x03\x94W\x80c\xFA\xBC\x1C\xBC\x14a\x03\xA7W`\0\x80\xFD[\x80c\xABY!\xE1\x14a\x03+W\x80c\xCE|*\xC2\x14a\x03@W\x80c\xD9\xCA\xED\x12\x14a\x03SW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x02\xC8W\x80ca\xB0\x1B]\x14a\x02\xD0W\x80cz\x8B&7\x14a\x02\xD9W\x80c\x88o\x11\x95\x14a\x02\xECW\x80c\x8C\x87\x10\x19\x14a\x03\x05W\x80c\x8Fjb@\x14a\x03\x18W`\0\x80\xFD[\x80c:\x98\xEF9\x11a\x01KW\x80cH\\\xC9U\x11a\x01%W\x80cH\\\xC9U\x14a\x02kW\x80cU<\xA5\xF8\x14a\x02~W\x80cY\\jg\x14a\x02\x91W\x80cZ\xC8j\xB7\x14a\x02\x99W`\0\x80\xFD[\x80c:\x98\xEF9\x14a\x028W\x80cC\xFE\x08\xB0\x14a\x02OW\x80cG\xE7\xEF$\x14a\x02XW`\0\x80\xFD[\x80c\x01\x9E')\x14a\x01\x93W\x80c\x10\xD6z/\x14a\x01\xA8W\x80c\x11\xC7\x0C\x9D\x14a\x01\xBBW\x80c\x13d9\xDD\x14a\x01\xCEW\x80c$\x95\xA5\x99\x14a\x01\xE1W\x80c9\xB7\x0E8\x14a\x02\x11W[`\0\x80\xFD[a\x01\xA6a\x01\xA16`\x04a\x19\x83V[a\x03\xBAV[\0[a\x01\xA6a\x01\xB66`\x04a\x19\xCDV[a\x04\x9DV[a\x01\xA6a\x01\xC96`\x04a\x19\xEAV[a\x05PV[a\x01\xA6a\x01\xDC6`\x04a\x1A\x0CV[a\x06\x05V[`2Ta\x01\xF4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xF4\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02A`3T\x81V[`@Q\x90\x81R` \x01a\x02\x08V[a\x02A`dT\x81V[a\x02Aa\x02f6`\x04a\x1A%V[a\x07IV[a\x01\xA6a\x02y6`\x04a\x1AQV[a\t\x8DV[a\x02Aa\x02\x8C6`\x04a\x19\xCDV[a\n[V[a\x01\xA6a\noV[a\x02\xB8a\x02\xA76`\x04a\x1A\x99V[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02\x08V[`\x01Ta\x02AV[a\x02A`eT\x81V[a\x02Aa\x02\xE76`\x04a\x1A\x0CV[a\x0B;V[`\0Ta\x01\xF4\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02Aa\x03\x136`\x04a\x1A\x0CV[a\x0B\x86V[a\x02Aa\x03&6`\x04a\x19\xCDV[a\x0B\x91V[a\x033a\x0B\x9FV[`@Qa\x02\x08\x91\x90a\x1A\xE6V[a\x02Aa\x03N6`\x04a\x19\xCDV[a\x0B\xBFV[a\x01\xA6a\x03a6`\x04a\x1B\x19V[a\x0CTV[`dT`eT`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02\x08V[a\x02Aa\x03\x8F6`\x04a\x1A\x0CV[a\x0E:V[a\x02Aa\x03\xA26`\x04a\x1A\x0CV[a\x0EsV[a\x01\xA6a\x03\xB56`\x04a\x1A\x0CV[a\x0E~V[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x03\xDAWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\x03\xF4WP0;\x15\x80\x15a\x03\xF4WP`\0T`\xFF\x16`\x01\x14[a\x04\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1BZV[`@Q\x80\x91\x03\x90\xFD[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x04<W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x04F\x85\x85a\x0F\xDAV[a\x04P\x83\x83a\x10\xE7V[\x80\x15a\x04\x96W`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xF0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x14\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05DW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[a\x05M\x81a\x12:V[PV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xA3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xC7\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xF7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[a\x06\x01\x82\x82a\x0F\xDAV[PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06RW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06v\x91\x90a\x1C\x0FV[a\x06\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1C1V[`\x01T\x81\x81\x16\x14a\x07\x0BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T`\0\x91\x82\x91\x81\x16\x14\x15a\x07\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x10V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x08\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x10V[a\x08 \x84\x84a\x13?V[`3T`\0a\x081a\x03\xE8\x83a\x1C\x8FV[\x90P`\0a\x03\xE8a\x08@a\x14!V[a\x08J\x91\x90a\x1C\x8FV[\x90P`\0a\x08X\x87\x83a\x1C\xA7V[\x90P\x80a\x08e\x84\x89a\x1C\xBEV[a\x08o\x91\x90a\x1C\xDDV[\x95P\x85a\x08\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x04\x10V[a\x08\xDF\x86\x85a\x1C\x8FV[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\tiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[a\t\x82\x82a\x03\xE8`3Ta\t}\x91\x90a\x1C\x8FV[a\x14\x93V[PPPPP\x92\x91PPV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\t\xADWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\t\xC7WP0;\x15\x80\x15a\t\xC7WP`\0T`\xFF\x16`\x01\x14[a\t\xE3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1BZV[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\n\x06W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\n\x10\x83\x83a\x10\xE7V[\x80\x15a\nVW`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\0a\nia\x02\xE7\x83a\x0B\xBFV[\x92\x91PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xE0\x91\x90a\x1C\x0FV[a\n\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1C1V[`\0\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\0\x80a\x03\xE8`3Ta\x0BN\x91\x90a\x1C\x8FV[\x90P`\0a\x03\xE8a\x0B]a\x14!V[a\x0Bg\x91\x90a\x1C\x8FV[\x90P\x81a\x0Bt\x85\x83a\x1C\xBEV[a\x0B~\x91\x90a\x1C\xDDV[\x94\x93PPPPV[`\0a\ni\x82a\x0E:V[`\0a\nia\x03\xA2\x83a\x0B\xBFV[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x1DR`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R`\0\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\ni\x91\x90a\x1C\xFFV[`\x01\x80T`\x02\x90\x81\x16\x14\x15a\x0C\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x10V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\r\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x10V[a\r*\x84\x84\x84a\x14\xDFV[`3T\x80\x83\x11\x15a\r\xB9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\0a\r\xC7a\x03\xE8\x83a\x1C\x8FV[\x90P`\0a\x03\xE8a\r\xD6a\x14!V[a\r\xE0\x91\x90a\x1C\x8FV[\x90P`\0\x82a\r\xEF\x87\x84a\x1C\xBEV[a\r\xF9\x91\x90a\x1C\xDDV[\x90Pa\x0E\x05\x86\x85a\x1C\xA7V[`3Ua\x0E%a\x0E\x15\x82\x84a\x1C\xA7V[a\x03\xE8`3Ta\t}\x91\x90a\x1C\x8FV[a\x0E0\x88\x88\x83a\x15bV[PPPPPPPPV[`\0\x80a\x03\xE8`3Ta\x0EM\x91\x90a\x1C\x8FV[\x90P`\0a\x03\xE8a\x0E\\a\x14!V[a\x0Ef\x91\x90a\x1C\x8FV[\x90P\x80a\x0Bt\x83\x86a\x1C\xBEV[`\0a\ni\x82a\x0B;V[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xD1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xF5\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x0F%W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\x0F\xA3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x07>V[`dT`@\x80Q\x91\x82R` \x82\x01\x84\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x91\x01`@Q\x80\x91\x03\x90\xA1`eT`@\x80Q\x91\x82R` \x82\x01\x83\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1\x80\x82\x11\x15a\x10\xDCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`K`$\x82\x01R\x7FStrategyBaseTVLLimits._setTVLLim`D\x82\x01R\x7Fits: maxPerDeposit exceeds maxTo`d\x82\x01RjtalDeposits`\xA8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`d\x91\x90\x91U`eUV[`\0Ta\x01\0\x90\x04`\xFF\x16a\x11RW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x11x\x81`\0a\x15vV[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xEDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x11\x91\x90a\x1D\x18V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\0T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\0\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`dT\x81\x11\x15a\x13\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`eTa\x13\xB4a\x14!V[\x11\x15a\x14\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[a\x06\x01\x82\x82a\x16bV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14jW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\x8E\x91\x90a\x1C\xFFV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x14\xC7\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x1C\xBEV[a\x14\xD1\x91\x90a\x1C\xDDV[`@Q\x90\x81R` \x01a\x12.V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\nVW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[a\nV`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x16\xDEV[`\0Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x15\x9DWP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x16\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x06\x01\x82a\x12:V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x06\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\nV\x92\x86\x92\x91`\0\x91a\x17n\x91\x85\x16\x90\x84\x90a\x17\xEBV[\x80Q\x90\x91P\x15a\nVW\x80\x80` \x01\x90Q\x81\x01\x90a\x17\x8C\x91\x90a\x1C\x0FV[a\nVW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[``a\x17\xFA\x84\x84`\0\x85a\x18\x04V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x18eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x18\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x04\x10V[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x18\xD8\x91\x90a\x1D5V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x19\x15W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x19\x1AV[``\x91P[P\x91P\x91Pa\x19*\x82\x82\x86a\x195V[\x97\x96PPPPPPPV[``\x83\x15a\x19DWP\x81a\x17\xFDV[\x82Q\x15a\x19TW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x91\x90a\x1A\xE6V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05MW`\0\x80\xFD[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x19\x99W`\0\x80\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x19\xB2\x81a\x19nV[\x91P``\x85\x015a\x19\xC2\x81a\x19nV[\x93\x96\x92\x95P\x90\x93PPV[`\0` \x82\x84\x03\x12\x15a\x19\xDFW`\0\x80\xFD[\x815a\x17\xFD\x81a\x19nV[`\0\x80`@\x83\x85\x03\x12\x15a\x19\xFDW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x1A\x1EW`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x1A8W`\0\x80\xFD[\x825a\x1AC\x81a\x19nV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x1AdW`\0\x80\xFD[\x825a\x1Ao\x81a\x19nV[\x91P` \x83\x015a\x1A\x7F\x81a\x19nV[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x05MW`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x1A\xABW`\0\x80\xFD[\x815a\x17\xFD\x81a\x1A\x8AV[`\0[\x83\x81\x10\x15a\x1A\xD1W\x81\x81\x01Q\x83\x82\x01R` \x01a\x1A\xB9V[\x83\x81\x11\x15a\x1A\xE0W`\0\x84\x84\x01R[PPPPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x1B\x05\x81`@\x85\x01` \x87\x01a\x1A\xB6V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1B.W`\0\x80\xFD[\x835a\x1B9\x81a\x19nV[\x92P` \x84\x015a\x1BI\x81a\x19nV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[` \x80\x82R`.\x90\x82\x01R\x7FInitializable: contract is alrea`@\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x1B\xBAW`\0\x80\xFD[\x81Qa\x17\xFD\x81a\x19nV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x1C!W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x17\xFDW`\0\x80\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\x1C\xA2Wa\x1C\xA2a\x1CyV[P\x01\x90V[`\0\x82\x82\x10\x15a\x1C\xB9Wa\x1C\xB9a\x1CyV[P\x03\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15a\x1C\xD8Wa\x1C\xD8a\x1CyV[P\x02\x90V[`\0\x82a\x1C\xFAWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0` \x82\x84\x03\x12\x15a\x1D\x11W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x1D*W`\0\x80\xFD[\x81Qa\x17\xFD\x81a\x1A\x8AV[`\0\x82Qa\x1DG\x81\x84` \x87\x01a\x1A\xB6V[\x91\x90\x91\x01\x92\x91PPV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 \xAE\x19\x1Ahk CPb\xF1@'\xAD\xBC\xD9;\xCE\x8B\xA8\xDA\xB6\x89m\x1D\x89;Tx\xC9\xD9\x19\x7FdsolcC\0\x08\x0C\x003`\x80`@R`@Qb\0\x0E\x818\x03\x80b\0\x0E\x81\x839\x81\x01`@\x81\x90Rb\0\0&\x91b\0\x04\x90V[\x82\x81b\0\x006\x82\x82`\0b\0\0MV[Pb\0\0D\x90P\x82b\0\0\x8AV[PPPb\0\x05\xC3V[b\0\0X\x83b\0\0\xE5V[`\0\x82Q\x11\x80b\0\0fWP\x80[\x15b\0\0\x85Wb\0\0\x83\x83\x83b\0\x01'` \x1Bb\0\x02`\x17` \x1CV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fb\0\0\xB5b\0\x01VV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1b\0\0\xE2\x81b\0\x01\x8FV[PV[b\0\0\xF0\x81b\0\x02DV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``b\0\x01O\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01b\0\x0EZ`'\x919b\0\x02\xF8V[\x93\x92PPPV[`\0b\0\x01\x80`\0\x80Q` b\0\x0E:\x839\x81Q\x91R`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16b\0\x01\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80b\0\x02#`\0\x80Q` b\0\x0E:\x839\x81Q\x91R`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[b\0\x02Z\x81b\0\x03\xE1` \x1Bb\0\x02\x8C\x17` \x1CV[b\0\x02\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01b\0\x01\xF1V[\x80b\0\x02#\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[```\x01`\x01`\xA0\x1B\x03\x84\x16;b\0\x03bW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01b\0\x01\xF1V[`\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qb\0\x03\x7F\x91\x90b\0\x05pV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14b\0\x03\xBCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0\x03\xC1V[``\x91P[P\x90\x92P\x90Pb\0\x03\xD4\x82\x82\x86b\0\x03\xF0V[\x96\x95PPPPPPV[\x90V[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[``\x83\x15b\0\x04\x01WP\x81b\0\x01OV[\x82Q\x15b\0\x04\x12W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x01\xF1\x91\x90b\0\x05\x8EV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x04FW`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15b\0\x04~W\x81\x81\x01Q\x83\x82\x01R` \x01b\0\x04dV[\x83\x81\x11\x15b\0\0\x83WPP`\0\x91\x01RV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x04\xA6W`\0\x80\xFD[b\0\x04\xB1\x84b\0\x04.V[\x92Pb\0\x04\xC1` \x85\x01b\0\x04.V[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x04\xDFW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12b\0\x04\xF4W`\0\x80\xFD[\x81Q\x81\x81\x11\x15b\0\x05\tWb\0\x05\tb\0\x04KV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15b\0\x054Wb\0\x054b\0\x04KV[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15b\0\x05NW`\0\x80\xFD[b\0\x05a\x83` \x83\x01` \x88\x01b\0\x04aV[\x80\x95PPPPPP\x92P\x92P\x92V[`\0\x82Qb\0\x05\x84\x81\x84` \x87\x01b\0\x04aV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Rb\0\x05\xAF\x81`@\x85\x01` \x87\x01b\0\x04aV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[a\x08g\x80b\0\x05\xD3`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0NW`\x005`\xE0\x1C\x80c6Y\xCF\xE6\x14a\0eW\x80cO\x1E\xF2\x86\x14a\0\x85W\x80c\\`\xDA\x1B\x14a\0\x98W\x80c\x8F(9p\x14a\0\xC9W\x80c\xF8Q\xA4@\x14a\0\xE9Wa\0]V[6a\0]Wa\0[a\0\xFEV[\0[a\0[a\0\xFEV[4\x80\x15a\0qW`\0\x80\xFD[Pa\0[a\0\x806`\x04a\x06\xF1V[a\x01\x18V[a\0[a\0\x936`\x04a\x07\x0CV[a\x01_V[4\x80\x15a\0\xA4W`\0\x80\xFD[Pa\0\xADa\x01\xD0V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xD5W`\0\x80\xFD[Pa\0[a\0\xE46`\x04a\x06\xF1V[a\x02\x0BV[4\x80\x15a\0\xF5W`\0\x80\xFD[Pa\0\xADa\x025V[a\x01\x06a\x02\x9BV[a\x01\x16a\x01\x11a\x03:V[a\x03DV[V[a\x01 a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01WWa\x01T\x81`@Q\x80` \x01`@R\x80`\0\x81RP`\0a\x03\x9BV[PV[a\x01Ta\0\xFEV[a\x01ga\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01\xC8Wa\x01\xC3\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RP`\x01\x92Pa\x03\x9B\x91PPV[PPPV[a\x01\xC3a\0\xFEV[`\0a\x01\xDAa\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\0Wa\x01\xFBa\x03:V[\x90P\x90V[a\x02\x08a\0\xFEV[\x90V[a\x02\x13a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01WWa\x01T\x81a\x03\xC6V[`\0a\x02?a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\0Wa\x01\xFBa\x03hV[``a\x02\x85\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x08\x0B`'\x919a\x04\x1AV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[a\x02\xA3a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01Ra\x19]`\xF2\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xFBa\x04\xF7V[6`\0\x807`\0\x806`\0\x84Z\xF4=`\0\x80>\x80\x80\x15a\x03cW=`\0\xF3[=`\0\xFD[`\0\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[a\x03\xA4\x83a\x05\x1FV[`\0\x82Q\x11\x80a\x03\xB1WP\x80[\x15a\x01\xC3Wa\x03\xC0\x83\x83a\x02`V[PPPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03\xEFa\x03hV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x01T\x81a\x05_V[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x04\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01a\x031V[`\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x04\x9D\x91\x90a\x07\xBBV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x04\xD8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\xDDV[``\x91P[P\x91P\x91Pa\x04\xED\x82\x82\x86a\x06\x08V[\x96\x95PPPPPPV[`\0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x03\x8CV[a\x05(\x81a\x06AV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x05\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x031V[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[``\x83\x15a\x06\x17WP\x81a\x02\x85V[\x82Q\x15a\x06'W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x031\x91\x90a\x07\xD7V[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x06\xAEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x031V[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x05\xE7V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\xECW`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x07\x03W`\0\x80\xFD[a\x02\x85\x82a\x06\xD5V[`\0\x80`\0`@\x84\x86\x03\x12\x15a\x07!W`\0\x80\xFD[a\x07*\x84a\x06\xD5V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x07GW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x07[W`\0\x80\xFD[\x815\x81\x81\x11\x15a\x07jW`\0\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x07|W`\0\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x07\xAAW\x81\x81\x01Q\x83\x82\x01R` \x01a\x07\x92V[\x83\x81\x11\x15a\x03\xC0WPP`\0\x91\x01RV[`\0\x82Qa\x07\xCD\x81\x84` \x87\x01a\x07\x8FV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x07\xF6\x81`@\x85\x01` \x87\x01a\x07\x8FV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 ,\xE8{^H\x8E@\xB8X\xAB\xD0Z\x92\xFE\xCC\xB5\x03W\xE5\xCE\x08n<\xCB\xADvM\x9Cy\xD0\xE9\xB7dsolcC\0\x08\x0C\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x0Et8\x03\x80b\0\x0Et\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x02\xA5V[`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FERC20_SetTransferReverting_Mock\0\x81RP`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FERC20_SetTransferReverting_Mock\0\x81RP\x83\x83\x83\x83\x81`\x03\x90\x80Q\x90` \x01\x90b\0\0\xBC\x92\x91\x90b\0\x01\xFFV[P\x80Qb\0\0\xD2\x90`\x04\x90` \x84\x01\x90b\0\x01\xFFV[PPPb\0\0\xE7\x81\x83b\0\0\xF3` \x1B` \x1CV[PPPPPPb\0\x03HV[`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\x01NW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[b\0\x01\\`\0\x83\x83b\0\x01\xE9V[\x80`\x02`\0\x82\x82Tb\0\x01p\x91\x90b\0\x02\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90b\0\x01\x9F\x90\x84\x90b\0\x02\xE4V[\x90\x91UPP`@Q\x81\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90`\0\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[`\x05T`\xFF\x16\x15b\0\x01\xFAW`\0\x80\xFD[PPPV[\x82\x80Tb\0\x02\r\x90b\0\x03\x0BV[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82b\0\x021W`\0\x85Ub\0\x02|V[\x82`\x1F\x10b\0\x02LW\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ub\0\x02|V[\x82\x80\x01`\x01\x01\x85U\x82\x15b\0\x02|W\x91\x82\x01[\x82\x81\x11\x15b\0\x02|W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90b\0\x02_V[Pb\0\x02\x8A\x92\x91Pb\0\x02\x8EV[P\x90V[[\x80\x82\x11\x15b\0\x02\x8AW`\0\x81U`\x01\x01b\0\x02\x8FV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x02\xB9W`\0\x80\xFD[\x82Q` \x84\x01Q\x90\x92P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x02\xD9W`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0\x82\x19\x82\x11\x15b\0\x03\x06WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P\x01\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x03 W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x03BWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[a\x0B\x1C\x80b\0\x03X`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xF5W`\x005`\xE0\x1C\x80cp\xA0\x821\x11a\0\x97W\x80c\xA1\x90^$\x11a\0fW\x80c\xA1\x90^$\x14a\x01\xFCW\x80c\xA4W\xC2\xD7\x14a\x02\tW\x80c\xA9\x05\x9C\xBB\x14a\x02\x1CW\x80c\xDDb\xED>\x14a\x02/W`\0\x80\xFD[\x80cp\xA0\x821\x14a\x01\x97W\x80cy\xCCg\x90\x14a\x01\xC0W\x80c\x86s\xA7B\x14a\x01\xD3W\x80c\x95\xD8\x9BA\x14a\x01\xF4W`\0\x80\xFD[\x80c#\xB8r\xDD\x11a\0\xD3W\x80c#\xB8r\xDD\x14a\x01MW\x80c1<\xE5g\x14a\x01`W\x80c9P\x93Q\x14a\x01oW\x80cB\x96lh\x14a\x01\x82W`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xFAW\x80c\t^\xA7\xB3\x14a\x01\x18W\x80c\x18\x16\r\xDD\x14a\x01;W[`\0\x80\xFD[a\x01\x02a\x02BV[`@Qa\x01\x0F\x91\x90a\x08\xFFV[`@Q\x80\x91\x03\x90\xF3[a\x01+a\x01&6`\x04a\tpV[a\x02\xD4V[`@Q\x90\x15\x15\x81R` \x01a\x01\x0FV[`\x02T[`@Q\x90\x81R` \x01a\x01\x0FV[a\x01+a\x01[6`\x04a\t\x9AV[a\x02\xECV[`@Q`\x12\x81R` \x01a\x01\x0FV[a\x01+a\x01}6`\x04a\tpV[a\x03\x10V[a\x01\x95a\x01\x906`\x04a\t\xD6V[a\x032V[\0[a\x01?a\x01\xA56`\x04a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01\x95a\x01\xCE6`\x04a\tpV[a\x03?V[a\x01\x95a\x01\xE16`\x04a\n\x11V[`\x05\x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x01\x02a\x03XV[`\x05Ta\x01+\x90`\xFF\x16\x81V[a\x01+a\x02\x176`\x04a\tpV[a\x03gV[a\x01+a\x02*6`\x04a\tpV[a\x03\xE7V[a\x01?a\x02=6`\x04a\n3V[a\x03\xF5V[```\x03\x80Ta\x02Q\x90a\nfV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02}\x90a\nfV[\x80\x15a\x02\xCAW\x80`\x1F\x10a\x02\x9FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xCAV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xADW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\xE2\x81\x85\x85a\x04 V[P`\x01\x93\x92PPPV[`\x003a\x02\xFA\x85\x82\x85a\x05EV[a\x03\x05\x85\x85\x85a\x05\xBFV[P`\x01\x94\x93PPPPV[`\x003a\x02\xE2\x81\x85\x85a\x03#\x83\x83a\x03\xF5V[a\x03-\x91\x90a\n\xB7V[a\x04 V[a\x03<3\x82a\x07\x98V[PV[a\x03J\x823\x83a\x05EV[a\x03T\x82\x82a\x07\x98V[PPV[```\x04\x80Ta\x02Q\x90a\nfV[`\x003\x81a\x03u\x82\x86a\x03\xF5V[\x90P\x83\x81\x10\x15a\x03\xDAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\x05\x82\x86\x86\x84\x03a\x04 V[`\x003a\x02\xE2\x81\x85\x85a\x05\xBFV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\xE3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x05Q\x84\x84a\x03\xF5V[\x90P`\0\x19\x81\x14a\x05\xB9W\x81\x81\x10\x15a\x05\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03\xD1V[a\x05\xB9\x84\x84\x84\x84\x03a\x04 V[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x06#W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x06\x85W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[a\x06\x90\x83\x83\x83a\x08\xEFV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x07\x08W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R` \x81\x90R`@\x80\x82 \x85\x85\x03\x90U\x91\x85\x16\x81R\x90\x81 \x80T\x84\x92\x90a\x07?\x90\x84\x90a\n\xB7V[\x92PP\x81\x90UP\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x84`@Qa\x07\x8B\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3a\x05\xB9V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[a\x08\x04\x82`\0\x83a\x08\xEFV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x08xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x81 \x83\x83\x03\x90U`\x02\x80T\x84\x92\x90a\x08\xA7\x90\x84\x90a\n\xCFV[\x90\x91UPP`@Q\x82\x81R`\0\x90`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01a\x058V[PPPV[`\x05T`\xFF\x16\x15a\x08\xEAW`\0\x80\xFD[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\t,W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\t\x10V[\x81\x81\x11\x15a\t>W`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\tkW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\t\x83W`\0\x80\xFD[a\t\x8C\x83a\tTV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t\xAFW`\0\x80\xFD[a\t\xB8\x84a\tTV[\x92Pa\t\xC6` \x85\x01a\tTV[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\t\xE8W`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\n\x01W`\0\x80\xFD[a\n\n\x82a\tTV[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\n#W`\0\x80\xFD[\x815\x80\x15\x15\x81\x14a\n\nW`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\nFW`\0\x80\xFD[a\nO\x83a\tTV[\x91Pa\n]` \x84\x01a\tTV[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\nzW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\n\x9BWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\n\xCAWa\n\xCAa\n\xA1V[P\x01\x90V[`\0\x82\x82\x10\x15a\n\xE1Wa\n\xE1a\n\xA1V[P\x03\x90V\xFE\xA2dipfsX\"\x12 \xBEp\xB4un\xDB\xCA\x8B\xE3\x91\x81\x84\x04xJ\x027\xC2\xEAz\x0B\tf\xA2x\x15\xC6r\x997~&dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x0E`8\x03\x80b\0\x0E`\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x02\xDDV[\x83Q\x84\x90\x84\x90b\0\0M\x90`\x03\x90` \x85\x01\x90b\0\x01jV[P\x80Qb\0\0c\x90`\x04\x90` \x84\x01\x90b\0\x01jV[PPPb\0\0x\x81\x83b\0\0\x82` \x1B` \x1CV[PPPPb\0\x03\xD6V[`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\0\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x02`\0\x82\x82Tb\0\0\xF1\x91\x90b\0\x03rV[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90b\0\x01 \x90\x84\x90b\0\x03rV[\x90\x91UPP`@Q\x81\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90`\0\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[\x82\x80Tb\0\x01x\x90b\0\x03\x99V[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82b\0\x01\x9CW`\0\x85Ub\0\x01\xE7V[\x82`\x1F\x10b\0\x01\xB7W\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ub\0\x01\xE7V[\x82\x80\x01`\x01\x01\x85U\x82\x15b\0\x01\xE7W\x91\x82\x01[\x82\x81\x11\x15b\0\x01\xE7W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90b\0\x01\xCAV[Pb\0\x01\xF5\x92\x91Pb\0\x01\xF9V[P\x90V[[\x80\x82\x11\x15b\0\x01\xF5W`\0\x81U`\x01\x01b\0\x01\xFAV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12b\0\x028W`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x02UWb\0\x02Ub\0\x02\x10V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15b\0\x02\x80Wb\0\x02\x80b\0\x02\x10V[\x81`@R\x83\x81R` \x92P\x86\x83\x85\x88\x01\x01\x11\x15b\0\x02\x9DW`\0\x80\xFD[`\0\x91P[\x83\x82\x10\x15b\0\x02\xC1W\x85\x82\x01\x83\x01Q\x81\x83\x01\x84\x01R\x90\x82\x01\x90b\0\x02\xA2V[\x83\x82\x11\x15b\0\x02\xD3W`\0\x83\x85\x83\x01\x01R[\x96\x95PPPPPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15b\0\x02\xF4W`\0\x80\xFD[\x84Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x03\x0CW`\0\x80\xFD[b\0\x03\x1A\x88\x83\x89\x01b\0\x02&V[\x95P` \x87\x01Q\x91P\x80\x82\x11\x15b\0\x031W`\0\x80\xFD[Pb\0\x03@\x87\x82\x88\x01b\0\x02&V[`@\x87\x01Q``\x88\x01Q\x91\x95P\x93P\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x03gW`\0\x80\xFD[\x93\x96\x92\x95P\x90\x93PPV[`\0\x82\x19\x82\x11\x15b\0\x03\x94WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P\x01\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x03\xAEW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x03\xD0WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[a\nz\x80b\0\x03\xE6`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80cB\x96lh\x11a\0\x8CW\x80c\x95\xD8\x9BA\x11a\0fW\x80c\x95\xD8\x9BA\x14a\x01\xADW\x80c\xA4W\xC2\xD7\x14a\x01\xB5W\x80c\xA9\x05\x9C\xBB\x14a\x01\xC8W\x80c\xDDb\xED>\x14a\x01\xDBW`\0\x80\xFD[\x80cB\x96lh\x14a\x01\\W\x80cp\xA0\x821\x14a\x01qW\x80cy\xCCg\x90\x14a\x01\x9AW`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xD4W\x80c\t^\xA7\xB3\x14a\0\xF2W\x80c\x18\x16\r\xDD\x14a\x01\x15W\x80c#\xB8r\xDD\x14a\x01'W\x80c1<\xE5g\x14a\x01:W\x80c9P\x93Q\x14a\x01IW[`\0\x80\xFD[a\0\xDCa\x01\xEEV[`@Qa\0\xE9\x91\x90a\x08\x7FV[`@Q\x80\x91\x03\x90\xF3[a\x01\x05a\x01\x006`\x04a\x08\xF0V[a\x02\x80V[`@Q\x90\x15\x15\x81R` \x01a\0\xE9V[`\x02T[`@Q\x90\x81R` \x01a\0\xE9V[a\x01\x05a\x0156`\x04a\t\x1AV[a\x02\x98V[`@Q`\x12\x81R` \x01a\0\xE9V[a\x01\x05a\x01W6`\x04a\x08\xF0V[a\x02\xBCV[a\x01oa\x01j6`\x04a\tVV[a\x02\xDEV[\0[a\x01\x19a\x01\x7F6`\x04a\toV[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01oa\x01\xA86`\x04a\x08\xF0V[a\x02\xEBV[a\0\xDCa\x03\x04V[a\x01\x05a\x01\xC36`\x04a\x08\xF0V[a\x03\x13V[a\x01\x05a\x01\xD66`\x04a\x08\xF0V[a\x03\x93V[a\x01\x19a\x01\xE96`\x04a\t\x91V[a\x03\xA1V[```\x03\x80Ta\x01\xFD\x90a\t\xC4V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02)\x90a\t\xC4V[\x80\x15a\x02vW\x80`\x1F\x10a\x02KWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02vV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02YW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\x8E\x81\x85\x85a\x03\xCCV[P`\x01\x93\x92PPPV[`\x003a\x02\xA6\x85\x82\x85a\x04\xF1V[a\x02\xB1\x85\x85\x85a\x05kV[P`\x01\x94\x93PPPPV[`\x003a\x02\x8E\x81\x85\x85a\x02\xCF\x83\x83a\x03\xA1V[a\x02\xD9\x91\x90a\n\x15V[a\x03\xCCV[a\x02\xE83\x82a\x079V[PV[a\x02\xF6\x823\x83a\x04\xF1V[a\x03\0\x82\x82a\x079V[PPV[```\x04\x80Ta\x01\xFD\x90a\t\xC4V[`\x003\x81a\x03!\x82\x86a\x03\xA1V[\x90P\x83\x81\x10\x15a\x03\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xB1\x82\x86\x86\x84\x03a\x03\xCCV[`\x003a\x02\x8E\x81\x85\x85a\x05kV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04.W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x04\xFD\x84\x84a\x03\xA1V[\x90P`\0\x19\x81\x14a\x05eW\x81\x81\x10\x15a\x05XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03}V[a\x05e\x84\x84\x84\x84\x03a\x03\xCCV[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x05\xCFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x061W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x06\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R` \x81\x90R`@\x80\x82 \x85\x85\x03\x90U\x91\x85\x16\x81R\x90\x81 \x80T\x84\x92\x90a\x06\xE0\x90\x84\x90a\n\x15V[\x92PP\x81\x90UP\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x84`@Qa\x07,\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3a\x05eV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x08\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x81 \x83\x83\x03\x90U`\x02\x80T\x84\x92\x90a\x08<\x90\x84\x90a\n-V[\x90\x91UPP`@Q\x82\x81R`\0\x90`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01a\x04\xE4V[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x08\xACW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x08\x90V[\x81\x81\x11\x15a\x08\xBEW`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xEBW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\t\x03W`\0\x80\xFD[a\t\x0C\x83a\x08\xD4V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t/W`\0\x80\xFD[a\t8\x84a\x08\xD4V[\x92Pa\tF` \x85\x01a\x08\xD4V[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\thW`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t\x81W`\0\x80\xFD[a\t\x8A\x82a\x08\xD4V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\t\xA4W`\0\x80\xFD[a\t\xAD\x83a\x08\xD4V[\x91Pa\t\xBB` \x84\x01a\x08\xD4V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\t\xD8W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\t\xF9WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\n(Wa\n(a\t\xFFV[P\x01\x90V[`\0\x82\x82\x10\x15a\n?Wa\n?a\t\xFFV[P\x03\x90V\xFE\xA2dipfsX\"\x12 3\xD8\xDCF\x94yj!\xB3/\xD8\x96\xB1\xAC\x92F\x15\xFA\"C+\xC6\xD5l\x1A18_OgjkdsolcC\0\x08\x0C\x003`\xA0`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x1A\xB48\x03\x80b\0\x1A\xB4\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x01\x14V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80Rb\0\0Kb\0\0RV[Pb\0\x01FV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15b\0\0\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[`\0T`\xFF\x90\x81\x16\x10\x15b\0\x01\x12W`\0\x80T`\xFF\x19\x16`\xFF\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[V[`\0` \x82\x84\x03\x12\x15b\0\x01'W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01?W`\0\x80\xFD[\x93\x92PPPV[`\x80Qa\x19=b\0\x01w`\09`\0\x81\x81a\x01\x99\x01R\x81\x81a\x05p\x01R\x81\x81a\t\xF5\x01Ra\n\xC0\x01Ra\x19=`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x017W`\x005`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xB8W\x80c\xABY!\xE1\x11a\0|W\x80c\xABY!\xE1\x14a\x02\x9CW\x80c\xCE|*\xC2\x14a\x02\xB1W\x80c\xD9\xCA\xED\x12\x14a\x02\xC4W\x80c\xE3\xDA\xE5\x1C\x14a\x02\xD7W\x80c\xF3\xE78u\x14a\x02\xEAW\x80c\xFA\xBC\x1C\xBC\x14a\x02\xFDW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x02BW\x80cz\x8B&7\x14a\x02JW\x80c\x88o\x11\x95\x14a\x02]W\x80c\x8C\x87\x10\x19\x14a\x02vW\x80c\x8Fjb@\x14a\x02\x89W`\0\x80\xFD[\x80cG\xE7\xEF$\x11a\0\xFFW\x80cG\xE7\xEF$\x14a\x01\xD2W\x80cH\\\xC9U\x14a\x01\xE5W\x80cU<\xA5\xF8\x14a\x01\xF8W\x80cY\\jg\x14a\x02\x0BW\x80cZ\xC8j\xB7\x14a\x02\x13W`\0\x80\xFD[\x80c\x10\xD6z/\x14a\x01<W\x80c\x13d9\xDD\x14a\x01QW\x80c$\x95\xA5\x99\x14a\x01dW\x80c9\xB7\x0E8\x14a\x01\x94W\x80c:\x98\xEF9\x14a\x01\xBBW[`\0\x80\xFD[a\x01Oa\x01J6`\x04a\x15\xA6V[a\x03\x10V[\0[a\x01Oa\x01_6`\x04a\x15\xC3V[a\x03\xCCV[`2Ta\x01w\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01\xC4`3T\x81V[`@Q\x90\x81R` \x01a\x01\x8BV[a\x01\xC4a\x01\xE06`\x04a\x15\xDCV[a\x05\x10V[a\x01Oa\x01\xF36`\x04a\x16\x08V[a\x07TV[a\x01\xC4a\x02\x066`\x04a\x15\xA6V[a\x08iV[a\x01Oa\x08}V[a\x022a\x02!6`\x04a\x16PV[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x01\x8BV[`\x01Ta\x01\xC4V[a\x01\xC4a\x02X6`\x04a\x15\xC3V[a\tIV[`\0Ta\x01w\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\xC4a\x02\x846`\x04a\x15\xC3V[a\t\x94V[a\x01\xC4a\x02\x976`\x04a\x15\xA6V[a\t\x9FV[a\x02\xA4a\t\xADV[`@Qa\x01\x8B\x91\x90a\x16\x9DV[a\x01\xC4a\x02\xBF6`\x04a\x15\xA6V[a\t\xCDV[a\x01Oa\x02\xD26`\x04a\x16\xD0V[a\nbV[a\x01\xC4a\x02\xE56`\x04a\x15\xC3V[a\x0CHV[a\x01\xC4a\x02\xF86`\x04a\x15\xC3V[a\x0C\x81V[a\x01Oa\x03\x0B6`\x04a\x15\xC3V[a\x0C\x8CV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03cW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\x87\x91\x90a\x17\x11V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17.V[`@Q\x80\x91\x03\x90\xFD[a\x03\xC9\x81a\r\xE8V[PV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x19W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04=\x91\x90a\x17xV[a\x04YW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17\x9AV[`\x01T\x81\x81\x16\x14a\x04\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T`\0\x91\x82\x91\x81\x16\x14\x15a\x05eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x03\xB7V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x05\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x03\xB7V[a\x05\xE7\x84\x84a\x0E\xEDV[`3T`\0a\x05\xF8a\x03\xE8\x83a\x17\xF8V[\x90P`\0a\x03\xE8a\x06\x07a\x0FmV[a\x06\x11\x91\x90a\x17\xF8V[\x90P`\0a\x06\x1F\x87\x83a\x18\x10V[\x90P\x80a\x06,\x84\x89a\x18'V[a\x066\x91\x90a\x18FV[\x95P\x85a\x06\x9CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[a\x06\xA6\x86\x85a\x17\xF8V[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\x070W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[a\x07I\x82a\x03\xE8`3Ta\x07D\x91\x90a\x17\xF8V[a\x0F\xDFV[PPPPP\x92\x91PPV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x07tWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\x07\x8EWP0;\x15\x80\x15a\x07\x8EWP`\0T`\xFF\x16`\x01\x14[a\x07\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x08\x14W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x08\x1E\x83\x83a\x103V[\x80\x15a\x08dW`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\0a\x08wa\x02X\x83a\t\xCDV[\x92\x91PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\xCAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xEE\x91\x90a\x17xV[a\t\nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17\x9AV[`\0\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\0\x80a\x03\xE8`3Ta\t\\\x91\x90a\x17\xF8V[\x90P`\0a\x03\xE8a\tka\x0FmV[a\tu\x91\x90a\x17\xF8V[\x90P\x81a\t\x82\x85\x83a\x18'V[a\t\x8C\x91\x90a\x18FV[\x94\x93PPPPV[`\0a\x08w\x82a\x0CHV[`\0a\x08wa\x02\xF8\x83a\t\xCDV[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x18\xBB`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R`\0\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08w\x91\x90a\x18hV[`\x01\x80T`\x02\x90\x81\x16\x14\x15a\n\xB5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x03\xB7V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x0B-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x03\xB7V[a\x0B8\x84\x84\x84a\x11~V[`3T\x80\x83\x11\x15a\x0B\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\0a\x0B\xD5a\x03\xE8\x83a\x17\xF8V[\x90P`\0a\x03\xE8a\x0B\xE4a\x0FmV[a\x0B\xEE\x91\x90a\x17\xF8V[\x90P`\0\x82a\x0B\xFD\x87\x84a\x18'V[a\x0C\x07\x91\x90a\x18FV[\x90Pa\x0C\x13\x86\x85a\x18\x10V[`3Ua\x0C3a\x0C#\x82\x84a\x18\x10V[a\x03\xE8`3Ta\x07D\x91\x90a\x17\xF8V[a\x0C>\x88\x88\x83a\x12\x01V[PPPPPPPPV[`\0\x80a\x03\xE8`3Ta\x0C[\x91\x90a\x17\xF8V[\x90P`\0a\x03\xE8a\x0Cja\x0FmV[a\x0Ct\x91\x90a\x17\xF8V[\x90P\x80a\t\x82\x83\x86a\x18'V[`\0a\x08w\x82a\tIV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\xDFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x03\x91\x90a\x17\x11V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\r3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17.V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\r\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x05\x05V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0EvW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\0T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\0\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x0FiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[PPV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xB6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xDA\x91\x90a\x18hV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x10\x13\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x18'V[a\x10\x1D\x91\x90a\x18FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xA1PPV[`\0Ta\x01\0\x90\x04`\xFF\x16a\x10\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x10\xC4\x81`\0a\x12\x15V[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x119W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11]\x91\x90a\x18\x81V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01a\x10'V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x08dW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[a\x08d`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x13\x01V[`\0Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x12<WP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x12\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x0Fi\x82a\r\xE8V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\x08d\x92\x86\x92\x91`\0\x91a\x13\x91\x91\x85\x16\x90\x84\x90a\x14\x0EV[\x80Q\x90\x91P\x15a\x08dW\x80\x80` \x01\x90Q\x81\x01\x90a\x13\xAF\x91\x90a\x17xV[a\x08dW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[``a\x14\x1D\x84\x84`\0\x85a\x14'V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x14\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x14\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x03\xB7V[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x14\xFB\x91\x90a\x18\x9EV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x158W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x15=V[``\x91P[P\x91P\x91Pa\x15M\x82\x82\x86a\x15XV[\x97\x96PPPPPPPV[``\x83\x15a\x15gWP\x81a\x14 V[\x82Q\x15a\x15wW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x91\x90a\x16\x9DV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xC9W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x15\xB8W`\0\x80\xFD[\x815a\x14 \x81a\x15\x91V[`\0` \x82\x84\x03\x12\x15a\x15\xD5W`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x15\xEFW`\0\x80\xFD[\x825a\x15\xFA\x81a\x15\x91V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x16\x1BW`\0\x80\xFD[\x825a\x16&\x81a\x15\x91V[\x91P` \x83\x015a\x166\x81a\x15\x91V[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x03\xC9W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x16bW`\0\x80\xFD[\x815a\x14 \x81a\x16AV[`\0[\x83\x81\x10\x15a\x16\x88W\x81\x81\x01Q\x83\x82\x01R` \x01a\x16pV[\x83\x81\x11\x15a\x16\x97W`\0\x84\x84\x01R[PPPPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x16\xBC\x81`@\x85\x01` \x87\x01a\x16mV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x16\xE5W`\0\x80\xFD[\x835a\x16\xF0\x81a\x15\x91V[\x92P` \x84\x015a\x17\0\x81a\x15\x91V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`\0` \x82\x84\x03\x12\x15a\x17#W`\0\x80\xFD[\x81Qa\x14 \x81a\x15\x91V[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x17\x8AW`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x14 W`\0\x80\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\x18\x0BWa\x18\x0Ba\x17\xE2V[P\x01\x90V[`\0\x82\x82\x10\x15a\x18\"Wa\x18\"a\x17\xE2V[P\x03\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15a\x18AWa\x18Aa\x17\xE2V[P\x02\x90V[`\0\x82a\x18cWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0` \x82\x84\x03\x12\x15a\x18zW`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x18\x93W`\0\x80\xFD[\x81Qa\x14 \x81a\x16AV[`\0\x82Qa\x18\xB0\x81\x84` \x87\x01a\x16mV[\x91\x90\x91\x01\x92\x91PPV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 <\x18\x95\x94\xF4\xA1nR\xE7\xD9B\xA1D\xA6:;\xDF\xBA\xEAW\x8D\xC8\x10s`\xA1\xA2\xAB@a\xF6_dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\0\x1A3a\0\x1FV[a\0oV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x06\x9A\x80a\0~`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0{W`\x005`\xE0\x1C\x80c\x96#`\x9D\x11a\0NW\x80c\x96#`\x9D\x14a\x01\x11W\x80c\x99\xA8\x8E\xC4\x14a\x01$W\x80c\xF2\xFD\xE3\x8B\x14a\x01DW\x80c\xF3\xB7\xDE\xAD\x14a\x01dW`\0\x80\xFD[\x80c N\x1Cz\x14a\0\x80W\x80cqP\x18\xA6\x14a\0\xBCW\x80c~\xFF'^\x14a\0\xD3W\x80c\x8D\xA5\xCB[\x14a\0\xF3W[`\0\x80\xFD[4\x80\x15a\0\x8CW`\0\x80\xFD[Pa\0\xA0a\0\x9B6`\x04a\x04\x99V[a\x01\x84V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC8W`\0\x80\xFD[Pa\0\xD1a\x02\x15V[\0[4\x80\x15a\0\xDFW`\0\x80\xFD[Pa\0\xD1a\0\xEE6`\x04a\x04\xBDV[a\x02)V[4\x80\x15a\0\xFFW`\0\x80\xFD[P`\0T`\x01`\x01`\xA0\x1B\x03\x16a\0\xA0V[a\0\xD1a\x01\x1F6`\x04a\x05\x0CV[a\x02\x91V[4\x80\x15a\x010W`\0\x80\xFD[Pa\0\xD1a\x01?6`\x04a\x04\xBDV[a\x03\0V[4\x80\x15a\x01PW`\0\x80\xFD[Pa\0\xD1a\x01_6`\x04a\x04\x99V[a\x036V[4\x80\x15a\x01pW`\0\x80\xFD[Pa\0\xA0a\x01\x7F6`\x04a\x04\x99V[a\x03\xB4V[`\0\x80`\0\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xAA\x90c\\`\xDA\x1B`\xE0\x1B\x81R`\x04\x01\x90V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\x01\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x01\xEAV[``\x91P[P\x91P\x91P\x81a\x01\xF9W`\0\x80\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02\r\x91\x90a\x05\xE2V[\x94\x93PPPPV[a\x02\x1Da\x03\xDAV[a\x02'`\0a\x044V[V[a\x021a\x03\xDAV[`@Qc\x08\xF2\x83\x97`\xE4\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c\x8F(9p\x90`$\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x02uW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\x89W=`\0\x80>=`\0\xFD[PPPPPPV[a\x02\x99a\x03\xDAV[`@Qc'\x8FyC`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cO\x1E\xF2\x86\x904\x90a\x02\xC9\x90\x86\x90\x86\x90`\x04\x01a\x05\xFFV[`\0`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x02\xE2W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xF6W=`\0\x80>=`\0\xFD[PPPPPPPPV[a\x03\x08a\x03\xDAV[`@Qc\x1B,\xE7\xF3`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c6Y\xCF\xE6\x90`$\x01a\x02[V[a\x03>a\x03\xDAV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\xA8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\xB1\x81a\x044V[PV[`\0\x80`\0\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xAA\x90c\x03\xE1F\x91`\xE6\x1B\x81R`\x04\x01\x90V[`\0T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\x9FV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xB1W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x04\xABW`\0\x80\xFD[\x815a\x04\xB6\x81a\x04\x84V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x04\xD0W`\0\x80\xFD[\x825a\x04\xDB\x81a\x04\x84V[\x91P` \x83\x015a\x04\xEB\x81a\x04\x84V[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x05!W`\0\x80\xFD[\x835a\x05,\x81a\x04\x84V[\x92P` \x84\x015a\x05<\x81a\x04\x84V[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05YW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x05mW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x05\x7FWa\x05\x7Fa\x04\xF6V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x05\xA7Wa\x05\xA7a\x04\xF6V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x05\xC0W`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\x05\xF4W`\0\x80\xFD[\x81Qa\x04\xB6\x81a\x04\x84V[`\x01\x80`\xA0\x1B\x03\x83\x16\x81R`\0` `@\x81\x84\x01R\x83Q\x80`@\x85\x01R`\0[\x81\x81\x10\x15a\x06;W\x85\x81\x01\x83\x01Q\x85\x82\x01``\x01R\x82\x01a\x06\x1FV[\x81\x81\x11\x15a\x06MW`\0``\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01``\x01\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xA0I:k+\x90\xC3\xF2D\x08*\xD5\xC7\xC1^\x1A\xCC{)}\x84\xD4\0i\xF7\xD7L\xE1i\xD6\xC6\x17dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x07x8\x03\x80a\x07x\x839\x81\x01`@\x81\x90Ra\0/\x91a\x02cV[`\0[\x82Q\x81\x10\x15a\0wWa\0e\x83\x82\x81Q\x81\x10a\0PWa\0Pa\x039V[` \x02` \x01\x01Q`\x01a\0\x88` \x1B` \x1CV[\x80a\0o\x81a\x03OV[\x91PPa\x002V[Pa\0\x81\x81a\x01ZV[PPa\x03xV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\0\xF9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FPauserRegistry._setPauser: zero `D\x82\x01Rl\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x9A\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16\x85\x15\x15\x90\x81\x17\x90\x91U\x82Q\x93\x84R\x90\x83\x01R\x7Fe\xD3\xA1\xFDL\x13\xF0\\\xBA\x16O\x80\xD0<\xE9\x0F\xB4\xB5\xE2\x19F\xBF\xC3\xAB}\xBDCL-\x0B\x91R\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FPauserRegistry._setUnpauser: zer`D\x82\x01Rn\x1B\xC8\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x8A\x1B`d\x82\x01R`\x84\x01a\0\xF0V[`\x01T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7F\x06\xB4\x16z%(\x88z\x1E\x97\xA3f\xEE\xFE\x85I\xBF\xBF\x1E\xA3\xE6\xAC\x81\xCB%d\xA94\xD2\x0E\x88\x92\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02^W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x02vW`\0\x80\xFD[\x82Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x02\x8DW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x02\xA1W`\0\x80\xFD[\x81Q` \x82\x82\x11\x15a\x02\xB5Wa\x02\xB5a\x021V[\x81`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x86\x82\x11\x17\x15a\x02\xDAWa\x02\xDAa\x021V[`@R\x92\x83R\x81\x83\x01\x93P\x84\x81\x01\x82\x01\x92\x89\x84\x11\x15a\x02\xF8W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x03\x1DWa\x03\x0E\x86a\x02GV[\x85R\x94\x82\x01\x94\x93\x82\x01\x93a\x02\xFDV[\x96Pa\x03,\x90P\x87\x82\x01a\x02GV[\x94PPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x03qWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V[a\x03\xF1\x80a\x03\x87`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cF\xFB\xF6\x8E\x14a\0QW\x80c\x85hR\x06\x14a\0\x89W\x80c\xCET\x84(\x14a\0\x9EW\x80c\xEA\xB6mz\x14a\0\xB1W[`\0\x80\xFD[a\0ta\0_6`\x04a\x03\x13V[`\0` \x81\x90R\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x9Ca\0\x976`\x04a\x035V[a\0\xDCV[\0[a\0\x9Ca\0\xAC6`\x04a\x03\x13V[a\x01\x1DV[`\x01Ta\0\xC4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x80V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01\x0FW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x06\x90a\x03qV[`@Q\x80\x91\x03\x90\xFD[a\x01\x19\x82\x82a\x01SV[PPV[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01GW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x06\x90a\x03qV[a\x01P\x81a\x02 V[PV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x01\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FPauserRegistry._setPauser: zero `D\x82\x01Rl\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\x06V[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16\x85\x15\x15\x90\x81\x17\x90\x91U\x82Q\x93\x84R\x90\x83\x01R\x7Fe\xD3\xA1\xFDL\x13\xF0\\\xBA\x16O\x80\xD0<\xE9\x0F\xB4\xB5\xE2\x19F\xBF\xC3\xAB}\xBDCL-\x0B\x91R\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x02\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FPauserRegistry._setUnpauser: zer`D\x82\x01Rn\x1B\xC8\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x8A\x1B`d\x82\x01R`\x84\x01a\x01\x06V[`\x01T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7F\x06\xB4\x16z%(\x88z\x1E\x97\xA3f\xEE\xFE\x85I\xBF\xBF\x1E\xA3\xE6\xAC\x81\xCB%d\xA94\xD2\x0E\x88\x92\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\x0EW`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x03%W`\0\x80\xFD[a\x03.\x82a\x02\xF7V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x03HW`\0\x80\xFD[a\x03Q\x83a\x02\xF7V[\x91P` \x83\x015\x80\x15\x15\x81\x14a\x03fW`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V\xFE\xA2dipfsX\"\x12 @\x01\x07\xFB9\xE4\x07\x03)y\x982\xC0\xCEIGS\x97\xA5]\x18/\xD9\xF9\xC3\x8E\xE6xEAt0dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x17n\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x02SW`\x005`\xE0\x1C\x80c\x94\xF6I\xDD\x11a\x01FW\x80c\xC4b>\xA1\x11a\0\xC3W\x80c\xE2C\xDC<\x11a\0\x87W\x80c\xE2C\xDC<\x14a\x05\xA9W\x80c\xE2\xA8\x18\xC5\x14a\x05\xBCW\x80c\xE7\xA0P\xAA\x14a\x05\xCFW\x80c\xF2\xFD\xE3\x8B\x14a\x05\xE6W\x80c\xF6\x98\xDA%\x14a\x05\xF9W\x80c\xFA\xBC\x1C\xBC\x14a\x06\0W`\0\x80\xFD[\x80c\xC4b>\xA1\x14a\x05PW\x80c\xC6\x08\xC7\xF3\x14a\x05dW\x80c\xC6eg\x02\x14a\x05rW\x80c\xDF[5G\x14a\x05\x83W\x80c\xDF\\\xF7#\x14a\x05\x96W`\0\x80\xFD[\x80c\x9F\0\xFA$\x11a\x01\nW\x80c\x9F\0\xFA$\x14a\x04\xEFW\x80c\xA1x\x84\x84\x14a\x05\x01W\x80c\xA1\xCAx\x0B\x14a\x05!W\x80c\xB14Bq\x14a\x05/W\x80c\xB5\xD8\xB5\xB8\x14a\x05BW`\0\x80\xFD[\x80c\x94\xF6I\xDD\x14a\x04LW\x80c\x96\x7F\xC0\xD2\x14a\x04mW\x80c\x9A\x95\x19\xE0\x14a\x04\x80W\x80c\x9BM\xA0=\x14a\x04\x93W\x80c\x9B~/w\x14a\x04\xB6W`\0\x80\xFD[\x80c\\\x97Z\xBB\x11a\x01\xD4W\x80c\x88o\x11\x95\x11a\x01\x98W\x80c\x88o\x11\x95\x14a\x03\xF9W\x80c\x8B\x8A\xAC<\x14a\x04\x0CW\x80c\x8C\x80\xD4\xE5\x14a\x04!W\x80c\x8D\xA5\xCB[\x14a\x044W\x80c\x91\x04\xC3\x19\x14a\x04EW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x03\x9DW\x80cc\xFC\xA8\x88\x14a\x03\xA5W\x80cf<\x1D\xE4\x14a\x03\xB8W\x80cqP\x18\xA6\x14a\x03\xDBW\x80cz~\r\x92\x14a\x03\xE3W`\0\x80\xFD[\x80c6;\xF9d\x11a\x02\x1BW\x80c6;\xF9d\x14a\x02\xD7W\x80cFe\xBC\xDA\x14a\x03$W\x80cNZBc\x14a\x03OW\x80cY\\jg\x14a\x03bW\x80cZ\xC8j\xB7\x14a\x03jW`\0\x80\xFD[\x80c\x01\xF8 \xB2\x14a\x02XW\x80c\r9\x08\xF4\x14a\x02tW\x80c\x10\xD6z/\x14a\x02\x95W\x80c\x13d9\xDD\x14a\x02\xAAW\x80c2\xE8\x9A\xCE\x14a\x02\xBDW[`\0\x80\xFD[a\x02a`\xD2T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x02\x88a\x02\x826`\x04a\x10nV[P``\x90V[`@Qa\x02k\x91\x90a\x10\xD6V[a\x02\xA8a\x02\xA36`\x04a\x10nV[a\x06\x13V[\0[a\x02\xA8a\x02\xB86`\x04a\x10\xE9V[a\x06\xCCV[a\x02aa\x02\xCB6`\x04a\x11\x18V[`\0\x96\x95PPPPPPV[a\x02\xA8a\x02\xE56`\x04a\x12\x13V[`\xC9\x80T`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\xCB\x80T\x92\x85\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91U`\xCA\x80T\x92\x90\x93\x16\x91\x16\x17\x90UV[`\xCATa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x02kV[a\x02\xA8a\x03]6`\x04a\x12lV[a\x08\x0BV[a\x02\xA8a\x08yV[a\x03\x8Da\x03x6`\x04a\x12\xA5V[`\x98T`\x01`\xFF\x90\x92\x16\x91\x90\x91\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02kV[`\x98Ta\x02aV[a\x02aa\x03\xB36`\x04a\x12\xC8V[a\t@V[a\x03\x8Da\x03\xC66`\x04a\x10nV[`\xCF` R`\0\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x02\xA8a\tqV[a\x02aa\x03\xF16`\x04a\x12\xF4V[`\0\x92\x91PPV[`\x97Ta\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02aa\x04\x1A6`\x04a\x10nV[P`\xD2T\x90V[a\x02\xA8a\x04/6`\x04a\x13\"V[PPPV[`3T`\x01`\x01`\xA0\x1B\x03\x16a\x037V[`\0a\x037V[a\x04_a\x04Z6`\x04a\x10nV[a\t\x85V[`@Qa\x02k\x92\x91\x90a\x13cV[`\xCCTa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\xA8a\x04\x8E6`\x04a\x10\xE9V[`\xD2UV[a\x03\x8Da\x04\xA16`\x04a\x10nV[`\xD1` R`\0\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x02\xA8a\x04\xC46`\x04a\x12lV[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16`\0\x90\x81R`\xCF` R`@\x90 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x02\xA8a\x04\xFD6`\x04a\x12\xC8V[PPV[a\x02aa\x05\x0F6`\x04a\x10nV[`\xD0` R`\0\x90\x81R`@\x90 T\x81V[a\x02\xA8a\x04/6`\x04a\x13\xBAV[`\xCBTa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\xA8a\x04\xFD6`\x04a\x14;V[a\x02\xA8a\x05^6`\x04a\x14}V[PPPPV[a\x02\xA8a\x05^6`\x04a\x14\xCEV[a\x02\xA8a\x05\x806`\x04a\x10nV[PV[a\x02\xA8a\x05\x916`\x04a\x15!V[a\n^V[`\xC9Ta\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x037a\x05\xB76`\x04a\x12\xC8V[a\x0BOV[a\x02\xA8a\x05\xCA6`\x04a\x15\x8DV[a\x0B\x87V[a\x02aa\x05\xDD6`\x04a\x13\"V[`\0\x93\x92PPPV[a\x02\xA8a\x05\xF46`\x04a\x10nV[a\x0C1V[`\0a\x02aV[a\x02\xA8a\x06\x0E6`\x04a\x10\xE9V[a\x0C\xA7V[`\x97`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06fW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x8A\x91\x90a\x16\x10V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x06\xC3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16-V[`@Q\x80\x91\x03\x90\xFD[a\x05\x80\x81a\x0E\x03V[`\x97T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\x14W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x078\x91\x90a\x16wV[a\x07TW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16\x94V[`\x98T\x81\x81\x16\x14a\x07\xCDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xBAV[`\x98\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R\x82\x15\x15` \x82\x01R\x7Fw\xD90\xDFI7y4s\xA9P$\xD8z\x98\xFD,\xCB\x9E\x92\xD3\xC2F;=\xAC\xD6]>jW\x86\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16`\0\x90\x81R`\xD1` R`@\x90 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[`\x97T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\xC1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xE5\x91\x90a\x16wV[a\t\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16\x94V[`\0\x19`\x98\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\xCE` R\x81`\0R`@`\0 \x81\x81T\x81\x10a\t\\W`\0\x80\xFD[\x90`\0R` `\0 \x01`\0\x91P\x91PPT\x81V[a\tya\x0E\xFAV[a\t\x83`\0a\x0FTV[V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R`\xCD` \x90\x81R`@\x80\x83 `\xCE\x83R\x92\x81\x90 \x83T\x82Q\x81\x85\x02\x81\x01\x85\x01\x90\x93R\x80\x83R``\x94\x85\x94\x90\x93\x91\x84\x91\x83\x01\x82\x82\x80\x15a\t\xFCW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11a\t\xDEW[PPPPP\x91P\x80\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\nNW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\n:W[PPPPP\x90P\x91P\x91P\x91P\x91V[`\0[\x83\x81\x10\x15a\x0BHW`\x01`\xCF`\0\x87\x87\x85\x81\x81\x10a\n\x81Wa\n\x81a\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\n\x96\x91\x90a\x10nV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01`\0 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x82\x82\x82\x81\x81\x10a\n\xD0Wa\n\xD0a\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\n\xE5\x91\x90a\x16\xF2V[`\xD1`\0\x87\x87\x85\x81\x81\x10a\n\xFBWa\n\xFBa\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\x0B\x10\x91\x90a\x10nV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01`\0 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90Ua\x0BA\x81a\x17\x0FV[\x90Pa\naV[PPPPPV[`\xCD` R\x81`\0R`@`\0 \x81\x81T\x81\x10a\x0BkW`\0\x80\xFD[`\0\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x91P\x82\x90PV[\x82\x81\x14a\x0B\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FStrategyManagerMock: length mism`D\x82\x01Rc\x0C.\x8Cm`\xE3\x1B`d\x82\x01R`\x84\x01a\x06\xBAV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\xCD` R`@\x90 a\x0C\x05\x90\x85\x85a\x0F\xA6V[P`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\xCE` R`@\x90 a\x0C)\x90\x83\x83a\x10\tV[PPPPPPV[a\x0C9a\x0E\xFAV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0C\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x06\xBAV[a\x05\x80\x81a\x0FTV[`\x97`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\xFAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x1E\x91\x90a\x16\x10V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\rNW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16-V[`\x98T\x19\x81\x19`\x98T\x19\x16\x14a\r\xCCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xBAV[`\x98\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x08\0V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0E\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x06\xBAV[`\x97T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\x97\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`3T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x06\xBAV[`3\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90`\0\x90\xA3PPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0F\xF9W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0F\xF9W\x81T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x845\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a\x0F\xC6V[Pa\x10\x05\x92\x91Pa\x10DV[P\x90V[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0F\xF9W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0F\xF9W\x825\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x10)V[[\x80\x82\x11\x15a\x10\x05W`\0\x81U`\x01\x01a\x10EV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\x80W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x10\x80W`\0\x80\xFD[\x815a\x10\x8B\x81a\x10YV[\x93\x92PPPV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15a\x10\xCBW\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01a\x10\xA6V[P\x94\x95\x94PPPPPV[` \x81R`\0a\x10\x8B` \x83\x01\x84a\x10\x92V[`\0` \x82\x84\x03\x12\x15a\x10\xFBW`\0\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x111W`\0\x80\xFD[\x865a\x11<\x81a\x10YV[\x95P` \x87\x015a\x11L\x81a\x10YV[\x94P`@\x87\x015\x93P``\x87\x015a\x11c\x81a\x10YV[\x92P`\x80\x87\x015\x91P`\xA0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x11\x87W`\0\x80\xFD[\x81\x89\x01\x91P\x89`\x1F\x83\x01\x12a\x11\x9BW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x11\xADWa\x11\xADa\x11\x02V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x11\xD5Wa\x11\xD5a\x11\x02V[\x81`@R\x82\x81R\x8C` \x84\x87\x01\x01\x11\x15a\x11\xEEW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92\x95P\x92\x95P\x92\x95V[`\0\x80`\0``\x84\x86\x03\x12\x15a\x12(W`\0\x80\xFD[\x835a\x123\x81a\x10YV[\x92P` \x84\x015a\x12C\x81a\x10YV[\x91P`@\x84\x015a\x12S\x81a\x10YV[\x80\x91PP\x92P\x92P\x92V[\x80\x15\x15\x81\x14a\x05\x80W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x12\x7FW`\0\x80\xFD[\x825a\x12\x8A\x81a\x10YV[\x91P` \x83\x015a\x12\x9A\x81a\x12^V[\x80\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x12\xB7W`\0\x80\xFD[\x815`\xFF\x81\x16\x81\x14a\x10\x8BW`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x12\xDBW`\0\x80\xFD[\x825a\x12\xE6\x81a\x10YV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x13\x07W`\0\x80\xFD[\x825a\x13\x12\x81a\x10YV[\x91P` \x83\x015a\x12\x9A\x81a\x10YV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x137W`\0\x80\xFD[\x835a\x13B\x81a\x10YV[\x92P` \x84\x015a\x13R\x81a\x10YV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`@\x81R`\0a\x13v`@\x83\x01\x85a\x10\x92V[\x82\x81\x03` \x84\x81\x01\x91\x90\x91R\x84Q\x80\x83R\x85\x82\x01\x92\x82\x01\x90`\0[\x81\x81\x10\x15a\x13\xADW\x84Q\x83R\x93\x83\x01\x93\x91\x83\x01\x91`\x01\x01a\x13\x91V[P\x90\x97\x96PPPPPPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x13\xCFW`\0\x80\xFD[\x835a\x13\xDA\x81a\x10YV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[`\0\x80\x83`\x1F\x84\x01\x12a\x14\x01W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x19W`\0\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x144W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x14NW`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14eW`\0\x80\xFD[a\x14q\x85\x82\x86\x01a\x13\xEFV[\x90\x96\x90\x95P\x93PPPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x14\x93W`\0\x80\xFD[\x845a\x14\x9E\x81a\x10YV[\x93P` \x85\x015a\x14\xAE\x81a\x10YV[\x92P`@\x85\x015a\x14\xBE\x81a\x10YV[\x93\x96\x92\x95P\x92\x93``\x015\x92PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x14\xE4W`\0\x80\xFD[\x845a\x14\xEF\x81a\x10YV[\x93P` \x85\x015a\x14\xFF\x81a\x10YV[\x92P`@\x85\x015\x91P``\x85\x015a\x15\x16\x81a\x10YV[\x93\x96\x92\x95P\x90\x93PPV[`\0\x80`\0\x80`@\x85\x87\x03\x12\x15a\x157W`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15OW`\0\x80\xFD[a\x15[\x88\x83\x89\x01a\x13\xEFV[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x15tW`\0\x80\xFD[Pa\x15\x81\x87\x82\x88\x01a\x13\xEFV[\x95\x98\x94\x97P\x95PPPPV[`\0\x80`\0\x80`\0``\x86\x88\x03\x12\x15a\x15\xA5W`\0\x80\xFD[\x855a\x15\xB0\x81a\x10YV[\x94P` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15\xCDW`\0\x80\xFD[a\x15\xD9\x89\x83\x8A\x01a\x13\xEFV[\x90\x96P\x94P`@\x88\x015\x91P\x80\x82\x11\x15a\x15\xF2W`\0\x80\xFD[Pa\x15\xFF\x88\x82\x89\x01a\x13\xEFV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x16\"W`\0\x80\xFD[\x81Qa\x10\x8B\x81a\x10YV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x16\x89W`\0\x80\xFD[\x81Qa\x10\x8B\x81a\x12^V[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x17\x04W`\0\x80\xFD[\x815a\x10\x8B\x81a\x12^V[`\0`\0\x19\x82\x14\x15a\x171WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 *;\xFA(\x1AU\r\xA67\xB9\xF6\xDA\xB8\xB9\xF9\xD58<\x14`\x02\xEA\xB1\xB9\xF9\xF8\xFB\xD2\xE8\xE2\0\xDDdsolcC\0\x08\x0C\x003StrategyBase.withdraw: amountShares must be less than or equal to totalSharesStrategyBase.withdraw: Can only withdraw the strategy tokenmsg.sender is not permissioned as unpauserStrategyBaseTVLLimits: max per deposit exceededInitializable: contract is already initializedStrategyBase.deposit: newShares cannot be zeroStrategyBaseTVLLimits: max deposits exceededStrategyBaseTVLLimits._setTVLLimits: maxPerDeposit exceeds maxTotalDepositsStrategyBase.deposit: totalShares exceeds `MAX_TOTAL_SHARES`StrategyBase.deposit: Can only deposit underlyingToken\xA2dipfsX\"\x12 _\xA4\xEA\xDE\xF4Y-l{`M\xCE\xA5\xDD\xF7\x0C\xFE\x83\x96\x98\xA7\xF24y\xF8g\x82\xBC\xAF\xD5\xEA\x81dsolcC\0\x08\x0C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040523480156200001157600080fd5b5060043610620003135760003560e01c80636f37787c11620001a2578063b2d0beb111620000fc578063c643626211620000af578063e70b88351162000086578063e70b883514620006b1578063eab66d7a14620006c8578063f09bc87614620006dc578063fa7626d414620006e657600080fd5b8063c6436262146200067c578063d58966ca1462000690578063e20c9f7114620006a757600080fd5b8063b2d0beb1146200061c578063b5508aa91462000626578063ba414fa61462000630578063bd922b1c146200063a578063bf2d3151146200064e578063c4f81e3a146200066557600080fd5b8063958c96751162000155578063958c967514620005985780639fd0506d14620005af578063a135777714620005c3578063a8c62e7614620005da578063abcdfa9214620005ee578063add114c5146200060557600080fd5b80636f37787c14620005295780637a7c36d6146200054057806385226c811462000557578063886f11951462000570578063916a17c61462000584578063926e59ff146200058e57600080fd5b80633e47158c1162000271578063540d507711620002245780636639cad611620001fb5780636639cad614620004ba57806366d9a9a014620004e257806369c5cd0514620004fb5780636c94bbd3146200051257600080fd5b8063540d5077146200047557806359e9374b146200048c57806362b9f55b14620004a357600080fd5b80633e47158c14620004085780633e5e3c23146200041c5780633f7286f41462000426578063411ae37a14620004305780634652cf261462000447578063472e1522146200045e57600080fd5b806331363ee611620002ca57806331363ee6146200039e57806331d066cc14620003b2578063392eb3b214620003c957806339b70e3814620003d35780633b405c3e14620003e75780633c6efe8514620003f157600080fd5b80630a9254e414620003185780630bef1d0f146200032457806310db5f7b146200033b5780631ed7831c1462000345578063246af58914620003675780632495a5991462000371575b600080fd5b62000322620006f4565b005b6200032262000335366004620089bc565b62000984565b6200032262000b9d565b6200034f62000e48565b6040516200035e919062008a25565b60405180910390f35b6200032262000eac565b601f5462000385906001600160a01b031681565b6040516001600160a01b0390911681526020016200035e565b60265462000385906001600160a01b031681565b62000322620003c336600462008a3a565b62001082565b6200032262001450565b601e5462000385906001600160a01b031681565b6200032262001541565b620003226200040236600462008a6d565b620018a8565b601c5462000385906001600160a01b031681565b6200034f62001a31565b6200034f62001a93565b620003226200044136600462008a6d565b62001af5565b620003226200045836600462008a3a565b62001de7565b620003226200046f36600462008a6d565b62001ee9565b620003226200048636600462008a8d565b62002237565b620003226200049d366004620089bc565b62002457565b62000322620004b4366004620089bc565b6200255a565b620004d1620004cb36600462008a8d565b620025f3565b60405190151581526020016200035e565b620004ec62003218565b6040516200035e919062008aba565b620003226200050c366004620089bc565b6200330b565b620003226200052336600462008b71565b62003503565b620003226200053a366004620089bc565b62003606565b620003226200055136600462008a6d565b62003f74565b62000561620040fb565b6040516200035e919062008c09565b601d5462000385906001600160a01b031681565b620004ec620041d5565b62000322620042bf565b62000322620005a936600462008c87565b62004475565b60225462000385906001600160a01b031681565b62000322620005d436600462008cbf565b62004579565b60215462000385906001600160a01b031681565b62000322620005ff36600462008a3a565b62004685565b620003226200061636600462008cf7565b62004787565b620003226200496e565b6200056162004bea565b620004d162004cc4565b60205462000385906001600160a01b031681565b620003226200065f36600462008d33565b62004dff565b620003226200067636600462008a3a565b62004fd5565b60275462000385906001600160a01b031681565b62000322620006a136600462008c87565b620050d7565b6200034f620051db565b62000322620006c236600462008a3a565b6200523d565b60235462000385906001600160a01b031681565b6200032262005649565b600054620004d19060ff1681565b620006fe62005b24565b601e546040516001600160a01b03909116906200071b906200894c565b6001600160a01b039091168152602001604051809103906000f08015801562000748573d6000803e3d6000fd5b50602680546001600160a01b0319166001600160a01b03928316908117909155601c54602954602854601f54601d546040516024810194909452604484019290925285166064830152841660848201529192169063019e272960e01b9060a40160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620007e7906200895a565b620007f59392919062008d5e565b604051809103906000f08015801562000812573d6000803e3d6000fd5b50602780546001600160a01b0319166001600160a01b03929092169182179055602854604080516361b01b5d60e01b815290519192916361b01b5d916004808201926020929091908290030181865afa15801562000874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200089a919062008d95565b14620008c35760405162461bcd60e51b8152600401620008ba9062008daf565b60405180910390fd5b602954602760009054906101000a90046001600160a01b03166001600160a01b03166343fe08b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000940919062008d95565b14620009605760405162461bcd60e51b8152600401620008ba9062008daf565b602754602180546001600160a01b0319166001600160a01b03909216919091179055565b601b54604051632631f2b160e11b815283831060048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b158015620009ca57600080fd5b505afa158015620009df573d6000803e3d6000fd5b5050601b546023546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b15801562000a2d57600080fd5b505af115801562000a42573d6000803e3d6000fd5b5050601b546040805160808101909152604b8082526001600160a01b03909216935063f28dceb392509062011e6460208301396040518263ffffffff1660e01b815260040162000a93919062008dd7565b600060405180830381600087803b15801562000aae57600080fd5b505af115801562000ac3573d6000803e3d6000fd5b50506027546040516311c70c9d60e01b815260048101869052602481018590526001600160a01b0390911692506311c70c9d91506044015b600060405180830381600087803b15801562000b1657600080fd5b505af115801562000b2b573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505050505050565b6024546025546040516001600160a01b039091169062000bbd9062008968565b9182526001600160a01b03166020820152604001604051809103906000f08015801562000bee573d6000803e3d6000fd5b50601f80546001600160a01b0319166001600160a01b03928316908117909155602054601c54601d5460405160248101949094528416604484015290831692169063485cc95560e01b9060640160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162000c7a906200895a565b62000c889392919062008d5e565b604051809103906000f08015801562000ca5573d6000803e3d6000fd5b50602180546001600160a01b0319166001600160a01b0392909216919091179055670de0b6b3a764000062000cda8162004685565b601f54604051634339d3a160e11b815260016004820152670de0b6b3a7640000916001600160a01b031690638673a74290602401600060405180830381600087803b15801562000d2957600080fd5b505af115801562000d3e573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d9357600080fd5b505af115801562000da8573d6000803e3d6000fd5b5050601b54601e546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b15801562000df657600080fd5b505af115801562000e0b573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81526001600160a01b03928316945063d9caed12935062000afb9230921690869060040162008dec565b6060600d80548060200260200160405190810160405280929190818152602001828054801562000ea257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000e83575b5050505050905090565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015260009291909116906306447d5690602401600060405180830381600087803b15801562000efb57600080fd5b505af115801562000f10573d6000803e3d6000fd5b5050601b546040805160608101909152602e8082526001600160a01b03909216935063f28dceb392509062011e0a60208301396040518263ffffffff1660e01b815260040162000f61919062008dd7565b600060405180830381600087803b15801562000f7c57600080fd5b505af115801562000f91573d6000803e3d6000fd5b5050602154601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef24935062000fce9290911690859060040162008e10565b6020604051808303816000875af115801562000fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001014919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200106657600080fd5b505af11580156200107b573d6000803e3d6000fd5b5050505050565b64e8d4a510006028556445d964b800602955601b54604051632631f2b160e11b815282151560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b158015620010da57600080fd5b505afa158015620010ef573d6000803e3d6000fd5b5050601b54602954604051632631f2b160e11b815290851060048201526001600160a01b039091169250634c63e562915060240160006040518083038186803b1580156200113c57600080fd5b505afa15801562001151573d6000803e3d6000fd5b505050506200116560295460285462005de2565b601f5460275460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926200119d92911690859060040162008e10565b6020604051808303816000875af1158015620011bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e3919062008e29565b5060275460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa1580156200122f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001255919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b158015620012a157600080fd5b505af1158015620012b6573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620012f39290911690869060040162008e10565b6020604051808303816000875af115801562001313573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001339919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138b57600080fd5b505af1158015620013a0573d6000803e3d6000fd5b505050508082620013b2919062008e63565b602760009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001406573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200142c919062008d95565b146200144c5760405162461bcd60e51b8152600401620008ba9062008e7e565b5050565b601b546040805160608101909152602e8082526001600160a01b039092169163f28dceb3919062011ddc60208301396040518263ffffffff1660e01b81526004016200149d919062008dd7565b600060405180830381600087803b158015620014b857600080fd5b505af1158015620014cd573d6000803e3d6000fd5b5050602154601f54601d5460405163485cc95560e01b81526001600160a01b03928316600482015290821660248201529116925063485cc9559150604401600060405180830381600087803b1580156200152657600080fd5b505af11580156200153b573d6000803e3d6000fd5b50505050565b6025546040517002f050fe938943acc45f65568000000000916001600160a01b0316906200156f9062008976565b6200157c92919062008ec0565b604051809103906000f08015801562001599573d6000803e3d6000fd5b50601f80546001600160a01b0319166001600160a01b03928316179055601e54604051911690620015ca9062008984565b6001600160a01b039091168152602001604051809103906000f080158015620015f7573d6000803e3d6000fd5b50602080546001600160a01b039283166001600160a01b031990911681178255601c54601f54601d54604080519287166024840152908616604480840191909152815180840390910181526064909201815293810180516001600160e01b031663485cc95560e01b1790529251919316919062001674906200895a565b620016829392919062008d5e565b604051809103906000f0801580156200169f573d6000803e3d6000fd5b50602180546001600160a01b0319166001600160a01b03928316908117909155601f5460405163a9059cbb60e01b81527002f050fe938943acc45f6556800000000093919091169163a9059cbb91620016fe9190859060040162008e10565b6020604051808303816000875af11580156200171e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001744919062008e29565b50601b54601e5460405163ca669fa760e01b81526001600160a01b03918216600482015291169063ca669fa790602401600060405180830381600087803b1580156200178f57600080fd5b505af1158015620017a4573d6000803e3d6000fd5b5050601b546040805160608101909152603c8082526001600160a01b03909216935063f28dceb392509062011eaf60208301396040518263ffffffff1660e01b8152600401620017f5919062008dd7565b600060405180830381600087803b1580156200181057600080fd5b505af115801562001825573d6000803e3d6000fd5b5050602154601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620018629290911690859060040162008e10565b6020604051808303816000875af115801562001882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200144c919062008d95565b601b54601f54604051632631f2b160e11b81526001600160a01b0391821684831614156004820152911690634c63e5629060240160006040518083038186803b158015620018f557600080fd5b505afa1580156200190a573d6000803e3d6000fd5b5050601b546040805160608101909152603b808252670de0b6b3a764000094506001600160a01b03909216925063f28dceb39162011d4860208301396040518263ffffffff1660e01b815260040162001964919062008dd7565b600060405180830381600087803b1580156200197f57600080fd5b505af115801562001994573d6000803e3d6000fd5b5050601b54601e546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b158015620019e257600080fd5b505af1158015620019f7573d6000803e3d6000fd5b5050602154604051636ce5768960e11b81526001600160a01b03909116925063d9caed12915062000afb9030908690869060040162008dec565b6060600f80548060200260200160405190810160405280929190818152602001828054801562000ea2576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000e83575050505050905090565b6060600e80548060200260200160405190810160405280929190818152602001828054801562000ea2576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000e83575050505050905090565b601b5460215460408051630736e1c760e31b815290516001600160a01b0393841693634c63e5629316916339b70e389160048083019260209291908290030181865afa15801562001b4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b70919062008f2e565b6001600160a01b0316836001600160a01b03161415801562001ba05750601c546001600160a01b03848116911614155b6040518263ffffffff1660e01b815260040162001bc1911515815260200190565b60006040518083038186803b15801562001bda57600080fd5b505afa15801562001bef573d6000803e3d6000fd5b505050506000670de0b6b3a7640000905062001c0b8162004685565b601b5460408051808201825260208082527f5374726174656779426173652e6f6e6c7953747261746567794d616e6167657290820152905163f28dceb360e01b8152670de0b6b3a7640000926001600160a01b03169163f28dceb39162001c76919060040162008dd7565b600060405180830381600087803b15801562001c9157600080fd5b505af115801562001ca6573d6000803e3d6000fd5b5050601b546040516303223eab60e11b81526001600160a01b03878116600483015290911692506306447d569150602401600060405180830381600087803b15801562001cf257600080fd5b505af115801562001d07573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81526001600160a01b03928316945063d9caed12935062001d449230921690869060040162008dec565b600060405180830381600087803b15801562001d5f57600080fd5b505af115801562001d74573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001dc957600080fd5b505af115801562001dde573d6000803e3d6000fd5b50505050505050565b80600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa15801562001e3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e64919062008f4e565b601b5491935091506001600160a01b0316634c63e56283851180159062001e8b5750828511155b6040518263ffffffff1660e01b815260040162001eac911515815260200190565b60006040518083038186803b15801562001ec557600080fd5b505afa15801562001eda573d6000803e3d6000fd5b505050506200153b84620060d8565b601b5460215460408051630736e1c760e31b815290516001600160a01b0393841693634c63e5629316916339b70e389160048083019260209291908290030181865afa15801562001f3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f64919062008f2e565b6001600160a01b0316836001600160a01b03161415801562001f945750601c546001600160a01b03848116911614155b6040518263ffffffff1660e01b815260040162001fb5911515815260200190565b60006040518083038186803b15801562001fce57600080fd5b505afa15801562001fe3573d6000803e3d6000fd5b5050601f5460215460405163a9059cbb60e01b8152670de0b6b3a764000094506001600160a01b03928316935063a9059cbb9262002028921690859060040162008e10565b6020604051808303816000875af115801562002048573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200206e919062008e29565b50601b5460408051808201825260208082527f5374726174656779426173652e6f6e6c7953747261746567794d616e6167657290820152905163f28dceb360e01b81526001600160a01b039092169163f28dceb391620020d19160040162008dd7565b600060405180830381600087803b158015620020ec57600080fd5b505af115801562002101573d6000803e3d6000fd5b5050601b546040516303223eab60e11b81526001600160a01b03868116600483015290911692506306447d569150602401600060405180830381600087803b1580156200214d57600080fd5b505af115801562002162573d6000803e3d6000fd5b5050602154601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef2493506200219f9290911690859060040162008e10565b6020604051808303816000875af1158015620021bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021e5919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b8057600080fd5b601b54604051632631f2b160e11b815284831160048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b1580156200227d57600080fd5b505afa15801562002292573d6000803e3d6000fd5b50505050620022a2838362005de2565b601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b158015620022ec57600080fd5b505af115801562002301573d6000803e3d6000fd5b5050601b546040805160608101909152602f8082526001600160a01b03909216935063f28dceb392509062011dad60208301396040518263ffffffff1660e01b815260040162002352919062008dd7565b600060405180830381600087803b1580156200236d57600080fd5b505af115801562002382573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620023bf9290911690859060040162008e10565b6020604051808303816000875af1158015620023df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002405919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001dc957600080fd5b81600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa158015620024ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024d4919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620024fb5750828511155b6040518263ffffffff1660e01b81526004016200251c911515815260200190565b60006040518083038186803b1580156200253557600080fd5b505afa1580156200254a573d6000803e3d6000fd5b505050506200107b8585620062f5565b62002566828262005de2565b6027546040805163df6fadc160e01b8152815160009384936001600160a01b039091169263df6fadc192600480830193928290030181865afa158015620025b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025d7919062008f4e565b91509150620025e782856200654f565b6200153b81846200654f565b601b54604051632631f2b160e11b815283851060048201526000916001600160a01b031690634c63e5629060240160006040518083038186803b1580156200263a57600080fd5b505afa1580156200264f573d6000803e3d6000fd5b5050601b5460248054604051632631f2b160e11b81529087111560048201526001600160a01b039092169350634c63e56292500160006040518083038186803b1580156200269c57600080fd5b505afa158015620026b1573d6000803e3d6000fd5b50505050620026c1848462005de2565b602754604051638c87101960e01b8152600481018490526000916001600160a01b031690638c87101990602401602060405180830381865afa1580156200270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002732919062008d95565b601f5460275460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926200276c921690879060040162008e10565b6020604051808303816000875af11580156200278c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027b2919062008e29565b508483111562002b0257601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200280657600080fd5b505af11580156200281b573d6000803e3d6000fd5b5050601b5460405163f28dceb360e01b815260206004820152602f60248201527f53747261746567794261736554564c4c696d6974733a206d617820706572206460448201526e195c1bdcda5d08195e18d959591959608a1b60648201526001600160a01b03909116925063f28dceb391506084015b600060405180830381600087803b158015620028ac57600080fd5b505af1158015620028c1573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620028fe9290911690879060040162008e10565b6020604051808303816000875af11580156200291e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002944919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200299657600080fd5b505af1158015620029ab573d6000803e3d6000fd5b5050601b546027546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b158015620029f957600080fd5b505af115801562002a0e573d6000803e3d6000fd5b5050601f5460405163a9059cbb60e01b81526001600160a01b03909116925063a9059cbb915062002a46903090879060040162008e10565b6020604051808303816000875af115801562002a66573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a8c919062008e29565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002ade57600080fd5b505af115801562002af3573d6000803e3d6000fd5b50505050600191505062003211565b601f546027546040516370a0823160e01b81526001600160a01b039182166004820152869291909116906370a0823190602401602060405180830381865afa15801562002b53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b79919062008d95565b111562002c5757601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b15801562002bca57600080fd5b505af115801562002bdf573d6000803e3d6000fd5b5050601b5460405163f28dceb360e01b815260206004820152602c60248201527f53747261746567794261736554564c4c696d6974733a206d6178206465706f7360448201526b1a5d1cc8195e18d95959195960a21b60648201526001600160a01b03909116925063f28dceb3915060840162002891565b60275460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562002ca2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cc8919062008d95565b9050816200301557601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b15801562002d1a57600080fd5b505af115801562002d2f573d6000803e3d6000fd5b5050601b5460405163f28dceb360e01b815260206004820152602e60248201527f5374726174656779426173652e6465706f7369743a206e65775368617265732060448201526d63616e6e6f74206265207a65726f60901b60648201526001600160a01b03909116925063f28dceb39150608401600060405180830381600087803b15801562002dbe57600080fd5b505af115801562002dd3573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef24935062002e109290911690889060040162008e10565b6020604051808303816000875af115801562002e30573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e56919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002ea857600080fd5b505af115801562002ebd573d6000803e3d6000fd5b5050601b546027546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b15801562002f0b57600080fd5b505af115801562002f20573d6000803e3d6000fd5b5050601f5460405163a9059cbb60e01b81526001600160a01b03909116925063a9059cbb915062002f58903090889060040162008e10565b6020604051808303816000875af115801562002f78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f9e919062008e29565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002ff057600080fd5b505af115801562003005573d6000803e3d6000fd5b5050505060019250505062003211565b601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200305f57600080fd5b505af115801562003074573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620030b19290911690889060040162008e10565b6020604051808303816000875af1158015620030d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030f7919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200314957600080fd5b505af11580156200315e573d6000803e3d6000fd5b50505050808262003170919062008e63565b602760009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015620031c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620031ea919062008d95565b146200320a5760405162461bcd60e51b8152600401620008ba9062008e7e565b6000925050505b9392505050565b60606012805480602002602001604051908101604052809291908181526020016000905b82821015620033025760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620032e957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620032aa5790505b505050505081525050815260200190600101906200323c565b50505050905090565b81600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa15801562003362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003388919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620033af5750828511155b6040518263ffffffff1660e01b8152600401620033d0911515815260200190565b60006040518083038186803b158015620033e957600080fd5b505afa158015620033fe573d6000803e3d6000fd5b50506027546040805163df6fadc160e01b815281518995506000945084936001600160a01b03169263df6fadc192600480820193918290030181865afa1580156200344d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003473919062008f4e565b601b5491935091506001600160a01b0316634c63e5628385118015906200349a5750828511155b6040518263ffffffff1660e01b8152600401620034bb911515815260200190565b60006040518083038186803b158015620034d457600080fd5b505afa158015620034e9573d6000803e3d6000fd5b50505050620034f988886200667a565b5050505050505050565b81600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa1580156200355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003580919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620035a75750828511155b6040518263ffffffff1660e01b8152600401620035c8911515815260200190565b60006040518083038186803b158015620035e157600080fd5b505afa158015620035f6573d6000803e3d6000fd5b505050506200107b858562006b04565b601b54604051632631f2b160e11b815283151560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b1580156200364c57600080fd5b505afa15801562003661573d6000803e3d6000fd5b5050601b54604051632631f2b160e11b815285851160048201526001600160a01b039091169250634c63e562915060240160006040518083038186803b158015620036ab57600080fd5b505afa158015620036c0573d6000803e3d6000fd5b5050601b5460248054604051632631f2b160e11b815290861060048201526001600160a01b039092169350634c63e56292500160006040518083038186803b1580156200370c57600080fd5b505afa15801562003721573d6000803e3d6000fd5b5050601b546023546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b1580156200376f57600080fd5b505af115801562003784573d6000803e3d6000fd5b50506027546040516311c70c9d60e01b815260048101869052602481018690526001600160a01b0390911692506311c70c9d9150604401600060405180830381600087803b158015620037d657600080fd5b505af1158015620037eb573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200384057600080fd5b505af115801562003855573d6000803e3d6000fd5b5050601f5460275460405163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb9350620038929290911690869060040162008e10565b6020604051808303816000875af1158015620038b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620038d8919062008e29565b5060275460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562003924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200394a919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b1580156200399657600080fd5b505af1158015620039ab573d6000803e3d6000fd5b5050602754601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620039e89290911690879060040162008e10565b6020604051808303816000875af115801562003a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a2e919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003a8057600080fd5b505af115801562003a95573d6000803e3d6000fd5b50505050808362003aa7919062008e63565b602760009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003afb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b21919062008d95565b1462003b415760405162461bcd60e51b8152600401620008ba9062008e7e565b601b546023546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b15801562003b8b57600080fd5b505af115801562003ba0573d6000803e3d6000fd5b50506027546040516311c70c9d60e01b815260048101869052602481018690526001600160a01b0390911692506311c70c9d9150604401600060405180830381600087803b15801562003bf257600080fd5b505af115801562003c07573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003c5c57600080fd5b505af115801562003c71573d6000803e3d6000fd5b5050601f546027546001600160a01b03918216935063a9059cbb92501662003c9a868662008f73565b6040518363ffffffff1660e01b815260040162003cb992919062008e10565b6020604051808303816000875af115801562003cd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cff919062008e29565b50602760009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003d54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d7a919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b15801562003dc657600080fd5b505af115801562003ddb573d6000803e3d6000fd5b5050602754601f546001600160a01b0391821693506347e7ef2492501662003e04868662008f73565b6040518363ffffffff1660e01b815260040162003e2392919062008e10565b6020604051808303816000875af115801562003e43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e69919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003ebb57600080fd5b505af115801562003ed0573d6000803e3d6000fd5b5050505081602760009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003f29573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f4f919062008d95565b1462003f6f5760405162461bcd60e51b8152600401620008ba9062008e7e565b505050565b601b54601f54604051632631f2b160e11b81526001600160a01b0391821684831614156004820152911690634c63e5629060240160006040518083038186803b15801562003fc157600080fd5b505afa15801562003fd6573d6000803e3d6000fd5b5050601b5460408051606081019091526036808252670de0b6b3a764000094506001600160a01b03909216925063f28dceb39162011eeb60208301396040518263ffffffff1660e01b815260040162004030919062008dd7565b600060405180830381600087803b1580156200404b57600080fd5b505af115801562004060573d6000803e3d6000fd5b5050601b54601e546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b158015620040ae57600080fd5b505af1158015620040c3573d6000803e3d6000fd5b50506021546040516311f9fbc960e21b81526001600160a01b0390911692506347e7ef2491506200219f908590859060040162008e10565b60606011805480602002602001604051908101604052809291908181526020016000905b8282101562003302578382906000526020600020018054620041419062008f8d565b80601f01602080910402602001604051908101604052809291908181526020018280546200416f9062008f8d565b8015620041c05780601f106200419457610100808354040283529160200191620041c0565b820191906000526020600020905b815481529060010190602001808311620041a257829003601f168201915b5050505050815260200190600101906200411f565b60606013805480602002602001604051908101604052809291908181526020016000905b82821015620033025760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620042a657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620042675790505b50505050508152505081526020019060010190620041f9565b601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200430957600080fd5b505af11580156200431e573d6000803e3d6000fd5b5050601b546040805160608101909152602e8082526001600160a01b03909216935063f28dceb392509062011e0a60208301396040518263ffffffff1660e01b81526004016200436f919062008dd7565b600060405180830381600087803b1580156200438a57600080fd5b505af11580156200439f573d6000803e3d6000fd5b5050602154601f546040516311f9fbc960e21b81526001600160a01b0392831694506347e7ef249350620043dd929091169060009060040162008e10565b6020604051808303816000875af1158015620043fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004423919062008d95565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200152657600080fd5b82600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa158015620044cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620044f2919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620045195750828511155b6040518263ffffffff1660e01b81526004016200453a911515815260200190565b60006040518083038186803b1580156200455357600080fd5b505afa15801562004568573d6000803e3d6000fd5b5050505062000b9586868662006cfc565b816001600160601b0316600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa158015620045d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045ff919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620046265750828511155b6040518263ffffffff1660e01b815260040162004647911515815260200190565b60006040518083038186803b1580156200466057600080fd5b505afa15801562004675573d6000803e3d6000fd5b505050506200107b858562007278565b80600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa158015620046dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004702919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620047295750828511155b6040518263ffffffff1660e01b81526004016200474a911515815260200190565b60006040518083038186803b1580156200476357600080fd5b505afa15801562004778573d6000803e3d6000fd5b505050506200153b84620077bd565b601b54601c54604051632631f2b160e11b81526001600160a01b0391821684831614156004820152911690634c63e5629060240160006040518083038186803b158015620047d457600080fd5b505afa158015620047e9573d6000803e3d6000fd5b5050601b54602354604051632631f2b160e11b81526001600160a01b039182168683161415600482015291169250634c63e562915060240160006040518083038186803b1580156200483a57600080fd5b505afa1580156200484f573d6000803e3d6000fd5b5050601b546040516303223eab60e11b81526001600160a01b03858116600483015290911692506306447d569150602401600060405180830381600087803b1580156200489b57600080fd5b505af1158015620048b0573d6000803e3d6000fd5b5050601b546040805160608101909152602a8082526001600160a01b03909216935063f28dceb392509062011d8360208301396040518263ffffffff1660e01b815260040162004901919062008dd7565b600060405180830381600087803b1580156200491c57600080fd5b505af115801562004931573d6000803e3d6000fd5b50506027546040516311c70c9d60e01b815260048101879052602481018690526001600160a01b0390911692506311c70c9d915060440162001d44565b601b546022546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b158015620049b857600080fd5b505af1158015620049cd573d6000803e3d6000fd5b505060215460405163136439dd60e01b8152600160048201526001600160a01b03909116925063136439dd9150602401600060405180830381600087803b15801562004a1857600080fd5b505af115801562004a2d573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562004a8257600080fd5b505af115801562004a97573d6000803e3d6000fd5b5050601f5460215460405163a9059cbb60e01b8152670de0b6b3a764000094506001600160a01b03928316935063a9059cbb9262004adc921690859060040162008e10565b6020604051808303816000875af115801562004afc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004b22919062008e29565b50601b54604080518082018252601981527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6020820152905163f28dceb360e01b81526001600160a01b039092169163f28dceb39162004b819160040162008dd7565b600060405180830381600087803b15801562004b9c57600080fd5b505af115801562004bb1573d6000803e3d6000fd5b5050601b54601e546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d56915060240162000f61565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156200330257838290600052602060002001805462004c309062008f8d565b80601f016020809104026020016040519081016040528092919081815260200182805462004c5e9062008f8d565b801562004caf5780601f1062004c835761010080835404028352916020019162004caf565b820191906000526020600020905b81548152906001019060200180831162004c9157829003601f168201915b50505050508152602001906001019062004c0e565b60008054610100900460ff161562004ce55750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1562004dfa57604051600090737109709ecfa91a80626ff3989d68f67f5b1dd12d907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062004d5c9083906519985a5b195960d21b9060200162008e10565b60408051601f198184030181529082905262004d7c929160200162008fca565b60408051601f198184030181529082905262004d989162008ffd565b6000604051808303816000865af19150503d806000811462004dd7576040519150601f19603f3d011682016040523d82523d6000602084013e62004ddc565b606091505b509150508080602001905181019062004df6919062008e29565b9150505b919050565b60215460405163f3e7387560e01b81526001600160f01b03831660048201526000916001600160a01b03169063f3e7387590602401602060405180830381865afa15801562004e52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004e78919062008d95565b9050816001600160f01b0316811462004ee85760405162461bcd60e51b815260206004820152602b60248201527f756e6465726c79696e6746726f6d53686172657320213d20616d6f756e74536860448201526a61726573546f517565727960a81b6064820152608401620008ba565b602154604051637a8b263760e01b81526001600160f01b03841660048201526000916001600160a01b031690637a8b263790602401602060405180830381865afa15801562004f3b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004f61919062008d95565b9050826001600160f01b0316811462003f6f5760405162461bcd60e51b815260206004820152602f60248201527f756e6465726c79696e6746726f6d5368617265735669657720213d20616d6f7560448201526e6e74536861726573546f517565727960881b6064820152608401620008ba565b80600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa1580156200502c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005052919062008f4e565b601b5491935091506001600160a01b0316634c63e562838511801590620050795750828511155b6040518263ffffffff1660e01b81526004016200509a911515815260200190565b60006040518083038186803b158015620050b357600080fd5b505afa158015620050c8573d6000803e3d6000fd5b505050506200153b8462007d68565b82600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa1580156200512e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005154919062008f4e565b601b5491935091506001600160a01b0316634c63e5628385118015906200517b5750828511155b6040518263ffffffff1660e01b81526004016200519c911515815260200190565b60006040518083038186803b158015620051b557600080fd5b505afa158015620051ca573d6000803e3d6000fd5b5050505062000b95868686620082ba565b6060600c80548060200260200160405190810160405280929190818152602001828054801562000ea2576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000e83575050505050905090565b601b54604051632631f2b160e11b8152600183101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b1580156200528557600080fd5b505afa1580156200529a573d6000803e3d6000fd5b50505050620052a98162004685565b600080602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005300573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005326919062008d95565b601f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801562005375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200539b919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b158015620053e757600080fd5b505af1158015620053fc573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81526001600160a01b03928316945063d9caed129350620054399230921690889060040162008dec565b600060405180830381600087803b1580156200545457600080fd5b505af115801562005469573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620054be57600080fd5b505af1158015620054d3573d6000803e3d6000fd5b50505050602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200552b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005551919062008d95565b8214620055925760405162461bcd60e51b815260206004820152600e60248201526d1cda185c995cc818da185b99d95960921b6044820152606401620008ba565b601f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015620055db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005601919062008d95565b81146200153b5760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b8818985b185b98d94818da185b99d959605a1b6044820152606401620008ba565b64e8d4a5100060288190556445d964b80060298190556000916200566e91906200901b565b90506200568060295460285462005de2565b601f54601e5460285460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb93620056b99391169160040162008e10565b6020604051808303816000875af1158015620056d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620056ff919062008e29565b50601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200574a57600080fd5b505af11580156200575f573d6000803e3d6000fd5b5050505060005b818110156200588457601f5460275460295460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb93620057a89391169160040162008e10565b6020604051808303816000875af1158015620057c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620057ee919062008e29565b50602754601f546029546040516311f9fbc960e21b81526001600160a01b03938416936347e7ef2493620058289391169160040162008e10565b6020604051808303816000875af115801562005848573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200586e919062008d95565b50806200587b816200903e565b91505062005766565b50601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620058d657600080fd5b505af1158015620058eb573d6000803e3d6000fd5b5050601f5460275460295460405163a9059cbb60e01b81526001600160a01b03938416955063a9059cbb945062005929939092169160040162008e10565b6020604051808303816000875af115801562005949573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200596f919062008e29565b50602854601f546027546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015620059c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620059e6919062008d95565b1162005a065760405162461bcd60e51b8152600401620008ba9062008daf565b601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b15801562005a5057600080fd5b505af115801562005a65573d6000803e3d6000fd5b5050601b546040805160608101909152602c8082526001600160a01b03909216935063f28dceb392509062011e3860208301396040518263ffffffff1660e01b815260040162005ab6919062008dd7565b600060405180830381600087803b15801562005ad157600080fd5b505af115801562005ae6573d6000803e3d6000fd5b5050602754601f546029546040516311f9fbc960e21b81526001600160a01b0393841695506347e7ef24945062000fce939092169160040162008e10565b60405162005b329062008992565b604051809103906000f08015801562005b4f573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b039290921691909117905560408051600180825281830190925260009160208083019080368337505060225482519293506001600160a01b03169183915060009062005bb55762005bb56200905c565b6001600160a01b0392831660209182029290920101526023546040518392919091169062005be390620089a0565b62005bf092919062009072565b604051809103906000f08015801562005c0d573d6000803e3d6000fd5b50601d80546001600160a01b0319166001600160a01b039290921691909117905560405162005c3c90620089ae565b604051809103906000f08015801562005c59573d6000803e3d6000fd5b50601e80546001600160a01b0319166001600160a01b039283161790556024546025546040519192169062005c8e9062008976565b62005c9b92919062008ec0565b604051809103906000f08015801562005cb8573d6000803e3d6000fd5b50601f80546001600160a01b0319166001600160a01b03928316179055601e5460405191169062005ce99062008984565b6001600160a01b039091168152602001604051809103906000f08015801562005d16573d6000803e3d6000fd5b50602080546001600160a01b039283166001600160a01b031990911681178255601c54601f54601d54604080519287166024840152908616604480840191909152815180840390910181526064909201815293810180516001600160e01b031663485cc95560e01b1790529251919316919062005d93906200895a565b62005da19392919062008d5e565b604051809103906000f08015801562005dbe573d6000803e3d6000fd5b50602180546001600160a01b0319166001600160a01b039290921691909117905550565b601b54604051632631f2b160e11b815282841060048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b15801562005e2857600080fd5b505afa15801562005e3d573d6000803e3d6000fd5b50505050600080602760009054906101000a90046001600160a01b03166001600160a01b031663df6fadc16040518163ffffffff1660e01b81526004016040805180830381865afa15801562005e97573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ebd919062008f4e565b601b546023546040516303223eab60e11b81526001600160a01b03918216600482015293955091935016906306447d5690602401600060405180830381600087803b15801562005f0c57600080fd5b505af115801562005f21573d6000803e3d6000fd5b5050601b546027546040516381bad6f360e01b81526001600160a01b0392831694506381bad6f3935062005f639260019283928392839216906004016200909e565b600060405180830381600087803b15801562005f7e57600080fd5b505af115801562005f93573d6000803e3d6000fd5b505060408051858152602081018890527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5935001905060405180910390a160408051828152602081018590527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a16027546040516311c70c9d60e01b815260048101869052602481018590526001600160a01b03909116906311c70c9d906044015b600060405180830381600087803b1580156200605957600080fd5b505af11580156200606e573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620060c357600080fd5b505af1158015620034f9573d6000803e3d6000fd5b601b54604051632631f2b160e11b8152600183101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b1580156200612057600080fd5b505afa15801562006135573d6000803e3d6000fd5b50505050620061448162004685565b601b546022546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200618e57600080fd5b505af1158015620061a3573d6000803e3d6000fd5b505060215460405163136439dd60e01b8152600260048201526001600160a01b03909116925063136439dd9150602401600060405180830381600087803b158015620061ee57600080fd5b505af115801562006203573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200625857600080fd5b505af11580156200626d573d6000803e3d6000fd5b5050601b54604080518082018252601981527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6020820152905163f28dceb360e01b8152670de0b6b3a764000094506001600160a01b03909216925063f28dceb391620062da919060040162008dd7565b600060405180830381600087803b15801562000d9357600080fd5b601b54604051632631f2b160e11b8152600184101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b1580156200633d57600080fd5b505afa15801562006352573d6000803e3d6000fd5b50505050620063618262004685565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa158015620063ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620063d2919062008d95565b601b54604051632631f2b160e11b815282851160048201529192506001600160a01b031690634c63e5629060240160006040518083038186803b1580156200641957600080fd5b505afa1580156200642e573d6000803e3d6000fd5b5050601b546040805160808101909152604d8082526001600160a01b03909216935063f28dceb392509062011cfb60208301396040518263ffffffff1660e01b81526004016200647f919062008dd7565b600060405180830381600087803b1580156200649a57600080fd5b505af1158015620064af573d6000803e3d6000fd5b5050601b54601e546040516303223eab60e11b81526001600160a01b039182166004820152911692506306447d569150602401600060405180830381600087803b158015620064fd57600080fd5b505af115801562006512573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81526001600160a01b03928316945063d9caed12935062001d449230921690879060040162008dec565b8082146200144c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620065c29060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16200144c62008839565b601b546001600160a01b0316634c63e562600184108015906200669d5750600083115b6040518263ffffffff1660e01b8152600401620066be911515815260200190565b60006040518083038186803b158015620066d757600080fd5b505afa158015620066ec573d6000803e3d6000fd5b50505050620066fb8262004685565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa1580156200674f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006775919062008d95565b6040516001600160e01b031960e084901b16815290841115600482015260240160006040518083038186803b158015620067ae57600080fd5b505afa158015620067c3573d6000803e3d6000fd5b505050506000602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200681d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006843919062008d95565b601f5460215460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926200687d921690869060040162008e10565b6020604051808303816000875af11580156200689d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620068c3919062008e29565b50601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b1580156200690e57600080fd5b505af115801562006923573d6000803e3d6000fd5b5050602154601f546040516311f9fbc960e21b8152600094506001600160a01b0392831693506347e7ef249262006961921690879060040162008e10565b6020604051808303816000875af115801562006981573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620069a7919062008d95565b9050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620069fa57600080fd5b505af115801562006a0f573d6000803e3d6000fd5b5050505082811462006a645760405162461bcd60e51b815260206004820152601c60248201527f6e657753686172657320213d20616d6f756e74546f4465706f736974000000006044820152606401620008ba565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562006aaf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006ad5919062008d95565b90508162006ae4848362008f73565b146200107b5760405162461bcd60e51b8152600401620008ba90620090ce565b601b54604051632631f2b160e11b8152600184101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b15801562006b4c57600080fd5b505afa15801562006b61573d6000803e3d6000fd5b5050505062006b708262004685565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562006bbb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006be1919062008d95565b601b54604051632631f2b160e11b815263ffffffff851683101560048201529192506001600160a01b031690634c63e5629060240160006040518083038186803b15801562006c2f57600080fd5b505afa15801562006c44573d6000803e3d6000fd5b5050505060008263ffffffff168262006c5e919062008f73565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b15801562006caa57600080fd5b505af115801562006cbf573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81526001600160a01b03928316945063d9caed1293506200603e9230921690869060040162008dec565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa15801562006d50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006d76919062008d95565b6040516001600160e01b031960e084901b16815290861115600482015260240160006040518083038186803b15801562006daf57600080fd5b505afa15801562006dc4573d6000803e3d6000fd5b5050601b54604051632631f2b160e11b8152600187101560048201526001600160a01b039091169250634c63e562915060240160006040518083038186803b15801562006e1057600080fd5b505afa15801562006e25573d6000803e3d6000fd5b5050505062006e348362004685565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa15801562006e88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006eae919062008d95565b6040516001600160e01b031960e084901b16815290851115600482015260240160006040518083038186803b15801562006ee757600080fd5b505afa15801562006efc573d6000803e3d6000fd5b5050601f5460215460405163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb935062006f399290911690869060040162008e10565b6020604051808303816000875af115801562006f59573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006f7f919062008e29565b50601f546021546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562006fd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006ff8919062008d95565b905060006200700a6103e88362008e63565b836001600160601b03166103e8602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200706b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007091919062008d95565b6200709d919062008e63565b620070a991906200911f565b620070b591906200901b565b602154604051638c87101960e01b81526001600160601b03861660048201529192506000916001600160a01b0390911690638c87101990602401602060405180830381865afa1580156200710d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007133919062008d95565b9050818114620071975760405162461bcd60e51b815260206004820152602860248201527f73686172657346726f6d556e6465726c79696e6720213d20657870656374656460448201526715985b1d5953dd5d60c21b6064820152608401620008ba565b6021546040516338f6b94760e21b81526001600160601b03861660048201526000916001600160a01b03169063e3dae51c90602401602060405180830381865afa158015620071ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007210919062008d95565b905082811462001dde5760405162461bcd60e51b815260206004820152602c60248201527f73686172657346726f6d556e6465726c79696e675669657720213d206578706560448201526b18dd195915985b1d5953dd5d60a21b6064820152608401620008ba565b601b54604051632631f2b160e11b815260016001600160601b038516101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b158015620072c957600080fd5b505afa158015620072de573d6000803e3d6000fd5b50505050620072f6826001600160601b031662004685565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562007341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007367919062008d95565b601b54604051632631f2b160e11b81526001600160601b03851683101560048201529192506001600160a01b031690634c63e5629060240160006040518083038186803b158015620073b857600080fd5b505afa158015620073cd573d6000803e3d6000fd5b5050601f546021546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a0823190602401602060405180830381865afa15801562007421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007447919062008d95565b601f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801562007496573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620074bc919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b1580156200750857600080fd5b505af11580156200751d573d6000803e3d6000fd5b5050602154601f54604051636ce5768960e11b81523060048201526001600160a01b0391821660248201526001600160601b03891660448201529116925063d9caed129150606401600060405180830381600087803b1580156200758057600080fd5b505af115801562007595573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620075ea57600080fd5b505af1158015620075ff573d6000803e3d6000fd5b5050601f546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156200764f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007675919062008d95565b90506000602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015620076cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620076f3919062008d95565b90506001600160601b0386166200770b828762008f73565b146200772b5760405162461bcd60e51b8152600401620008ba9062009141565b84620077416001600160601b038816866200911f565b6200774d91906200901b565b62007759848462008f73565b1462001dde5760405162461bcd60e51b815260206004820152602c60248201527f746f6b656e2062616c616e636520646964206e6f7420696e637265617365206160448201526b7070726f7072696174656c7960a01b6064820152608401620008ba565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa15801562007811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007837919062008d95565b6040516001600160e01b031960e084901b16815290841115600482015260240160006040518083038186803b1580156200787057600080fd5b505afa15801562007885573d6000803e3d6000fd5b5050601b54604051632631f2b160e11b8152600185101560048201526001600160a01b039091169250634c63e562915060240160006040518083038186803b158015620078d157600080fd5b505afa158015620078e6573d6000803e3d6000fd5b505050506000602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562007940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007966919062008d95565b601f5460215460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92620079a0921690869060040162008e10565b6020604051808303816000875af1158015620079c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620079e6919062008e29565b50601b54601e546040516303223eab60e11b81526001600160a01b0391821660048201529116906306447d5690602401600060405180830381600087803b15801562007a3157600080fd5b505af115801562007a46573d6000803e3d6000fd5b5050601b546021546040516381bad6f360e01b81526001600160a01b0392831694506381bad6f3935062007a889260019283928392839216906004016200909e565b600060405180830381600087803b15801562007aa357600080fd5b505af115801562007ab8573d6000803e3d6000fd5b505050507fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8670de0b6b3a764000060405162007af691815260200190565b60405180910390a1602154601f546040516311f9fbc960e21b81526000926001600160a01b03908116926347e7ef249262007b3a9290911690879060040162008e10565b6020604051808303816000875af115801562007b5a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007b80919062008d95565b9050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562007bd357600080fd5b505af115801562007be8573d6000803e3d6000fd5b5050505082811462007c3d5760405162461bcd60e51b815260206004820152601c60248201527f6e657753686172657320213d20616d6f756e74546f4465706f736974000000006044820152606401620008ba565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562007c88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007cae919062008d95565b90508162007cbd848362008f73565b1462007cdd5760405162461bcd60e51b8152600401620008ba90620090ce565b60215460405163f3e7387560e01b8152670de0b6b3a764000060048201526001600160a01b039091169063f3e7387590602401602060405180830381865afa15801562007d2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007d54919062008d95565b670de0b6b3a7640000146200153b57600080fd5b601b54604051632631f2b160e11b8152600183101560048201526001600160a01b0390911690634c63e5629060240160006040518083038186803b15801562007db057600080fd5b505afa15801562007dc5573d6000803e3d6000fd5b5050505062007dd48162004685565b60215460408051633a98ef3960e01b815290516000926001600160a01b031691633a98ef399160048083019260209291908290030181865afa15801562007e1f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007e45919062008d95565b601f546021546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562007e98573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007ebe919062008d95565b601f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801562007f0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007f33919062008d95565b601b54601e546040516303223eab60e11b81526001600160a01b03918216600482015292935016906306447d5690602401600060405180830381600087803b15801562007f7f57600080fd5b505af115801562007f94573d6000803e3d6000fd5b5050601b546021546040516381bad6f360e01b81526001600160a01b0392831694506381bad6f3935062007fd69260019283928392839216906004016200909e565b600060405180830381600087803b15801562007ff157600080fd5b505af115801562008006573d6000803e3d6000fd5b505050507fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8670de0b6b3a76400006040516200804491815260200190565b60405180910390a1602154601f54604051636ce5768960e11b81526001600160a01b039283169263d9caed12926200808792309290911690889060040162008dec565b600060405180830381600087803b158015620080a257600080fd5b505af1158015620080b7573d6000803e3d6000fd5b50505050601b60009054906101000a90046001600160a01b03166001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200810c57600080fd5b505af115801562008121573d6000803e3d6000fd5b5050601f546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa15801562008171573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008197919062008d95565b90506000602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015620081ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008215919062008d95565b90508015620082385760405162461bcd60e51b8152600401620008ba9062009141565b8362008245848462008f73565b1462000b955760405162461bcd60e51b815260206004820152603f60248201527f746f6b656e42616c616e63654166746572202d20746f6b656e42616c616e636560448201527f4265666f726520213d20737472617465677942616c616e63654265666f7265006064820152608401620008ba565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa1580156200830e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008334919062008d95565b6040516001600160e01b031960e084901b16815290861115600482015260240160006040518083038186803b1580156200836d57600080fd5b505afa15801562008382573d6000803e3d6000fd5b5050601b54604051632631f2b160e11b8152600187101560048201526001600160a01b039091169250634c63e562915060240160006040518083038186803b158015620083ce57600080fd5b505afa158015620083e3573d6000803e3d6000fd5b50505050620083f28362004685565b601b54601f546040516370a0823160e01b81523060048201526001600160a01b0392831692634c63e5629216906370a0823190602401602060405180830381865afa15801562008446573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200846c919062008d95565b6040516001600160e01b031960e084901b16815290851115600482015260240160006040518083038186803b158015620084a557600080fd5b505afa158015620084ba573d6000803e3d6000fd5b5050601f5460215460405163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb9350620084f79290911690869060040162008e10565b6020604051808303816000875af115801562008517573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200853d919062008e29565b50601f546021546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562008590573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620085b6919062008d95565b90506000620085c86103e88362008e63565b905060006103e8602160009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562008623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008649919062008d95565b62008655919062008e63565b6200866a6001600160601b038616846200911f565b6200867691906200901b565b60215460405163f3e7387560e01b81526001600160601b03871660048201529192506000916001600160a01b039091169063f3e7387590602401602060405180830381865afa158015620086ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620086f4919062008d95565b9050818114620087585760405162461bcd60e51b815260206004820152602860248201527f756e6465726c79696e6746726f6d53686172657320213d20657870656374656460448201526715985b1d5953dd5d60c21b6064820152608401620008ba565b602154604051637a8b263760e01b81526001600160601b03871660048201526000916001600160a01b031690637a8b263790602401602060405180830381865afa158015620087ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620087d1919062008d95565b9050828114620034f95760405162461bcd60e51b815260206004820152602c60248201527f756e6465726c79696e6746726f6d5368617265735669657720213d206578706560448201526b18dd195915985b1d5953dd5d60a21b6064820152608401620008ba565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156200893b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052620088d6929160200162008fca565b60408051601f1981840301815290829052620088f29162008ffd565b6000604051808303816000865af19150503d806000811462008931576040519150601f19603f3d011682016040523d82523d6000602084013e62008936565b606091505b505050505b6000805461ff001916610100179055565b611f4d806200918783390190565b610e81806200b0d483390190565b610e74806200bf5583390190565b610e60806200cdc983390190565b611ab4806200dc2983390190565b610718806200f6dd83390190565b610778806200fdf583390190565b61178e806201056d83390190565b60008060408385031215620089d057600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101562008a1a5781516001600160a01b031687529582019590820190600101620089f3565b509495945050505050565b602081526000620032116020830184620089df565b60006020828403121562008a4d57600080fd5b5035919050565b6001600160a01b038116811462008a6a57600080fd5b50565b60006020828403121562008a8057600080fd5b8135620032118162008a54565b60008060006060848603121562008aa357600080fd5b505081359360208301359350604090920135919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101562008b6257898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562008b4c5783516001600160e01b0319168252928b019260019290920191908b019062008b20565b50978a0197955050509187019160010162008ae2565b50919998505050505050505050565b6000806040838503121562008b8557600080fd5b82359150602083013563ffffffff8116811462008ba157600080fd5b809150509250929050565b60005b8381101562008bc957818101518382015260200162008baf565b838111156200153b5750506000910152565b6000815180845262008bf581602086016020860162008bac565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562008c6257603f1988860301845262008c4f85835162008bdb565b9450928501929085019060010162008c30565b5092979650505050505050565b80356001600160601b038116811462004dfa57600080fd5b60008060006060848603121562008c9d57600080fd5b833592506020840135915062008cb66040850162008c6f565b90509250925092565b6000806040838503121562008cd357600080fd5b62008cde8362008c6f565b915062008cee6020840162008c6f565b90509250929050565b60008060006060848603121562008d0d57600080fd5b8335925060208401359150604084013562008d288162008a54565b809150509250925092565b60006020828403121562008d4657600080fd5b81356001600160f01b03811681146200321157600080fd5b6001600160a01b0384811682528316602082015260606040820181905260009062008d8c9083018462008bdb565b95945050505050565b60006020828403121562008da857600080fd5b5051919050565b6020808252600e908201526d062616420746573742073657475760941b604082015260600190565b60208152600062003211602083018462008bdb565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121562008e3c57600080fd5b815180151581146200321157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111562008e795762008e7962008e4d565b500190565b60208082526022908201527f746f74616c20736861726573206e6f74207570646174656420636f72726563746040820152616c7960f01b606082015260800190565b60808152600062008eeb60808301600a8152692a32b9ba102a37b5b2b760b11b602082015260400190565b828103602084015262008f0f816004815263151154d560e21b602082015260400190565b604084019590955250506001600160a01b039190911660609091015290565b60006020828403121562008f4157600080fd5b8151620032118162008a54565b6000806040838503121562008f6257600080fd5b505080516020909101519092909150565b60008282101562008f885762008f8862008e4d565b500390565b600181811c9082168062008fa257607f821691505b6020821081141562008fc457634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b031983168152815160009062008fef81600485016020870162008bac565b919091016004019392505050565b600082516200901181846020870162008bac565b9190910192915050565b6000826200903957634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141562009055576200905562008e4d565b5060010190565b634e487b7160e01b600052603260045260246000fd5b604081526000620090876040830185620089df565b905060018060a01b03831660208301529392505050565b941515855292151560208501529015156040840152151560608301526001600160a01b0316608082015260a00190565b60208082526031908201527f746f74616c5368617265734166746572202d20746f74616c5368617265734265604082015270666f726520213d206e657753686172657360781b606082015260800190565b60008160001904831182151516156200913c576200913c62008e4d565b500290565b60208082526025908201527f73686172657320646964206e6f7420646563726561736520617070726f7072696040820152646174656c7960d81b60608201526080019056fe60a06040523480156200001157600080fd5b5060405162001f4d38038062001f4d833981016040819052620000349162000116565b6001600160a01b038116608052806200004c62000054565b505062000148565b600054610100900460ff1615620000c15760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000114576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012957600080fd5b81516001600160a01b03811681146200014157600080fd5b9392505050565b608051611dd46200017960003960008181610216015281816107a901528181610be70152610cb20152611dd46000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80635c975abb116100de578063ab5921e111610097578063df6fadc111610071578063df6fadc114610366578063e3dae51c14610381578063f3e7387514610394578063fabc1cbc146103a757600080fd5b8063ab5921e11461032b578063ce7c2ac214610340578063d9caed121461035357600080fd5b80635c975abb146102c857806361b01b5d146102d05780637a8b2637146102d9578063886f1195146102ec5780638c871019146103055780638f6a62401461031857600080fd5b80633a98ef391161014b578063485cc95511610125578063485cc9551461026b578063553ca5f81461027e578063595c6a67146102915780635ac86ab71461029957600080fd5b80633a98ef391461023857806343fe08b01461024f57806347e7ef241461025857600080fd5b8063019e27291461019357806310d67a2f146101a857806311c70c9d146101bb578063136439dd146101ce5780632495a599146101e157806339b70e3814610211575b600080fd5b6101a66101a1366004611983565b6103ba565b005b6101a66101b63660046119cd565b61049d565b6101a66101c93660046119ea565b610550565b6101a66101dc366004611a0c565b610605565b6032546101f4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f47f000000000000000000000000000000000000000000000000000000000000000081565b61024160335481565b604051908152602001610208565b61024160645481565b610241610266366004611a25565b610749565b6101a6610279366004611a51565b61098d565b61024161028c3660046119cd565b610a5b565b6101a6610a6f565b6102b86102a7366004611a99565b6001805460ff9092161b9081161490565b6040519015158152602001610208565b600154610241565b61024160655481565b6102416102e7366004611a0c565b610b3b565b6000546101f4906201000090046001600160a01b031681565b610241610313366004611a0c565b610b86565b6102416103263660046119cd565b610b91565b610333610b9f565b6040516102089190611ae6565b61024161034e3660046119cd565b610bbf565b6101a6610361366004611b19565b610c54565b60645460655460408051928352602083019190915201610208565b61024161038f366004611a0c565b610e3a565b6102416103a2366004611a0c565b610e73565b6101a66103b5366004611a0c565b610e7e565b600054610100900460ff16158080156103da5750600054600160ff909116105b806103f45750303b1580156103f4575060005460ff166001145b6104195760405162461bcd60e51b815260040161041090611b5a565b60405180910390fd5b6000805460ff19166001179055801561043c576000805461ff0019166101001790555b6104468585610fda565b61045083836110e7565b8015610496576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190611ba8565b6001600160a01b0316336001600160a01b0316146105445760405162461bcd60e51b815260040161041090611bc5565b61054d8161123a565b50565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190611ba8565b6001600160a01b0316336001600160a01b0316146105f75760405162461bcd60e51b815260040161041090611bc5565b6106018282610fda565b5050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611c0f565b6106925760405162461bcd60e51b815260040161041090611c31565b6001548181161461070b5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608401610410565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b6001805460009182918116141561079e5760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610410565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108165760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610410565b610820848461133f565b60335460006108316103e883611c8f565b905060006103e8610840611421565b61084a9190611c8f565b905060006108588783611ca7565b9050806108658489611cbe565b61086f9190611cdd565b9550856108d55760405162461bcd60e51b815260206004820152602e60248201527f5374726174656779426173652e6465706f7369743a206e65775368617265732060448201526d63616e6e6f74206265207a65726f60901b6064820152608401610410565b6108df8685611c8f565b60338190556f4b3b4ca85a86c47a098a223fffffffff10156109695760405162461bcd60e51b815260206004820152603c60248201527f5374726174656779426173652e6465706f7369743a20746f74616c536861726560448201527f73206578636565647320604d41585f544f54414c5f53484152455360000000006064820152608401610410565b610982826103e860335461097d9190611c8f565b611493565b505050505092915050565b600054610100900460ff16158080156109ad5750600054600160ff909116105b806109c75750303b1580156109c7575060005460ff166001145b6109e35760405162461bcd60e51b815260040161041090611b5a565b6000805460ff191660011790558015610a06576000805461ff0019166101001790555b610a1083836110e7565b8015610a56576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000610a696102e783610bbf565b92915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611c0f565b610afc5760405162461bcd60e51b815260040161041090611c31565b600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6000806103e8603354610b4e9190611c8f565b905060006103e8610b5d611421565b610b679190611c8f565b905081610b748583611cbe565b610b7e9190611cdd565b949350505050565b6000610a6982610e3a565b6000610a696103a283610bbf565b60606040518060800160405280604d8152602001611d52604d9139905090565b604051633d3f06c960e11b81526001600160a01b0382811660048301523060248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690637a7e0d9290604401602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a699190611cff565b6001805460029081161415610ca75760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610410565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d1f5760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610410565b610d2a8484846114df565b60335480831115610db95760405162461bcd60e51b815260206004820152604d60248201527f5374726174656779426173652e77697468647261773a20616d6f756e7453686160448201527f726573206d757374206265206c657373207468616e206f7220657175616c207460648201526c6f20746f74616c53686172657360981b608482015260a401610410565b6000610dc76103e883611c8f565b905060006103e8610dd6611421565b610de09190611c8f565b9050600082610def8784611cbe565b610df99190611cdd565b9050610e058685611ca7565b603355610e25610e158284611ca7565b6103e860335461097d9190611c8f565b610e30888883611562565b5050505050505050565b6000806103e8603354610e4d9190611c8f565b905060006103e8610e5c611421565b610e669190611c8f565b905080610b748386611cbe565b6000610a6982610b3b565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190611ba8565b6001600160a01b0316336001600160a01b031614610f255760405162461bcd60e51b815260040161041090611bc5565b600154198119600154191614610fa35760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608401610410565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c9060200161073e565b60645460408051918252602082018490527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5910160405180910390a160655460408051918252602082018390527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a1808211156110dc5760405162461bcd60e51b815260206004820152604b60248201527f53747261746567794261736554564c4c696d6974732e5f73657454564c4c696d60448201527f6974733a206d61785065724465706f7369742065786365656473206d6178546f60648201526a74616c4465706f7369747360a81b608482015260a401610410565b606491909155606555565b600054610100900460ff166111525760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610410565b603280546001600160a01b0319166001600160a01b038416179055611178816000611576565b7f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af557507603260009054906101000a90046001600160a01b0316836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190611d18565b604080516001600160a01b03909316835260ff9091166020830152015b60405180910390a15050565b6001600160a01b0381166112c85760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a401610410565b600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6064548111156113a95760405162461bcd60e51b815260206004820152602f60248201527f53747261746567794261736554564c4c696d6974733a206d617820706572206460448201526e195c1bdcda5d08195e18d959591959608a1b6064820152608401610410565b6065546113b4611421565b11156114175760405162461bcd60e51b815260206004820152602c60248201527f53747261746567794261736554564c4c696d6974733a206d6178206465706f7360448201526b1a5d1cc8195e18d95959195960a21b6064820152608401610410565b6106018282611662565b6032546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190611cff565b905090565b7fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8816114c784670de0b6b3a7640000611cbe565b6114d19190611cdd565b60405190815260200161122e565b6032546001600160a01b03838116911614610a565760405162461bcd60e51b815260206004820152603b60248201527f5374726174656779426173652e77697468647261773a2043616e206f6e6c792060448201527f77697468647261772074686520737472617465677920746f6b656e00000000006064820152608401610410565b610a566001600160a01b03831684836116de565b6000546201000090046001600160a01b031615801561159d57506001600160a01b03821615155b61161f5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a401610410565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26106018261123a565b6032546001600160a01b038381169116146106015760405162461bcd60e51b815260206004820152603660248201527f5374726174656779426173652e6465706f7369743a2043616e206f6e6c79206460448201527532b837b9b4ba103ab73232b9363cb4b733aa37b5b2b760511b6064820152608401610410565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610a569286929160009161176e9185169084906117eb565b805190915015610a56578080602001905181019061178c9190611c0f565b610a565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610410565b60606117fa8484600085611804565b90505b9392505050565b6060824710156118655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610410565b6001600160a01b0385163b6118bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610410565b600080866001600160a01b031685876040516118d89190611d35565b60006040518083038185875af1925050503d8060008114611915576040519150601f19603f3d011682016040523d82523d6000602084013e61191a565b606091505b509150915061192a828286611935565b979650505050505050565b606083156119445750816117fd565b8251156119545782518084602001fd5b8160405162461bcd60e51b81526004016104109190611ae6565b6001600160a01b038116811461054d57600080fd5b6000806000806080858703121561199957600080fd5b843593506020850135925060408501356119b28161196e565b915060608501356119c28161196e565b939692955090935050565b6000602082840312156119df57600080fd5b81356117fd8161196e565b600080604083850312156119fd57600080fd5b50508035926020909101359150565b600060208284031215611a1e57600080fd5b5035919050565b60008060408385031215611a3857600080fd5b8235611a438161196e565b946020939093013593505050565b60008060408385031215611a6457600080fd5b8235611a6f8161196e565b91506020830135611a7f8161196e565b809150509250929050565b60ff8116811461054d57600080fd5b600060208284031215611aab57600080fd5b81356117fd81611a8a565b60005b83811015611ad1578181015183820152602001611ab9565b83811115611ae0576000848401525b50505050565b6020815260008251806020840152611b05816040850160208701611ab6565b601f01601f19169190910160400192915050565b600080600060608486031215611b2e57600080fd5b8335611b398161196e565b92506020840135611b498161196e565b929592945050506040919091013590565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215611bba57600080fd5b81516117fd8161196e565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b600060208284031215611c2157600080fd5b815180151581146117fd57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611ca257611ca2611c79565b500190565b600082821015611cb957611cb9611c79565b500390565b6000816000190483118215151615611cd857611cd8611c79565b500290565b600082611cfa57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d1157600080fd5b5051919050565b600060208284031215611d2a57600080fd5b81516117fd81611a8a565b60008251611d47818460208701611ab6565b919091019291505056fe4261736520537472617465677920696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a2646970667358221220ae191a686b20435062f14027adbcd93bce8ba8dab6896d1d893b5478c9d9197f64736f6c634300080c0033608060405260405162000e8138038062000e81833981016040819052620000269162000490565b828162000036828260006200004d565b50620000449050826200008a565b505050620005c3565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000e5a60279139620002f8565b9392505050565b60006200018060008051602062000e3a83398151915260001b620003de60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e3a83398151915260001b620003de60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200028c1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620002081760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000570565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f191906200058e565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b83811115620000835750506000910152565b600080600060608486031215620004a657600080fd5b620004b1846200042e565b9250620004c1602085016200042e565b60408501519092506001600160401b0380821115620004df57600080fd5b818601915086601f830112620004f457600080fd5b8151818111156200050957620005096200044b565b604051601f8201601f19908116603f011681019083821181831017156200053457620005346200044b565b816040528281528960208487010111156200054e57600080fd5b6200056183602083016020880162000461565b80955050505050509250925092565b600082516200058481846020870162000461565b9190910192915050565b6020815260008251806020840152620005af81604085016020870162000461565b601f01601f19169190910160400192915050565b61086780620005d36000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106f1565b610118565b61005b61009336600461070c565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106f1565b61020b565b3480156100f557600080fd5b506100ad610235565b61010661029b565b61011661011161033a565b610344565b565b610120610368565b6001600160a01b0316336001600160a01b03161415610157576101548160405180602001604052806000815250600061039b565b50565b6101546100fe565b610167610368565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061039b915050565b505050565b6101c36100fe565b60006101da610368565b6001600160a01b0316336001600160a01b03161415610200576101fb61033a565b905090565b6102086100fe565b90565b610213610368565b6001600160a01b0316336001600160a01b0316141561015757610154816103c6565b600061023f610368565b6001600160a01b0316336001600160a01b03161415610200576101fb610368565b6060610285838360405180606001604052806027815260200161080b6027913961041a565b9392505050565b6001600160a01b03163b151590565b6102a3610368565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104f7565b3660008037600080366000845af43d6000803e808015610363573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103a48361051f565b6000825111806103b15750805b156101c3576103c08383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103ef610368565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161055f565b60606001600160a01b0384163b6104825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610331565b600080856001600160a01b03168560405161049d91906107bb565b600060405180830381855af49150503d80600081146104d8576040519150601f19603f3d011682016040523d82523d6000602084013e6104dd565b606091505b50915091506104ed828286610608565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61038c565b61052881610641565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105c45760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610331565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610617575081610285565b8251156106275782518084602001fd5b8160405162461bcd60e51b815260040161033191906107d7565b6001600160a01b0381163b6106ae5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610331565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105e7565b80356001600160a01b03811681146106ec57600080fd5b919050565b60006020828403121561070357600080fd5b610285826106d5565b60008060006040848603121561072157600080fd5b61072a846106d5565b9250602084013567ffffffffffffffff8082111561074757600080fd5b818601915086601f83011261075b57600080fd5b81358181111561076a57600080fd5b87602082850101111561077c57600080fd5b6020830194508093505050509250925092565b60005b838110156107aa578181015183820152602001610792565b838111156103c05750506000910152565b600082516107cd81846020870161078f565b9190910192915050565b60208152600082518060208401526107f681604085016020870161078f565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202ce87b5e488e40b858abd05a92feccb50357e5ce086e3ccbad764d9c79d0e9b764736f6c634300080c0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656460806040523480156200001157600080fd5b5060405162000e7438038062000e748339810160408190526200003491620002a5565b6040518060400160405280601f81526020017f45524332305f5365745472616e73666572526576657274696e675f4d6f636b008152506040518060400160405280601f81526020017f45524332305f5365745472616e73666572526576657274696e675f4d6f636b00815250838383838160039080519060200190620000bc929190620001ff565b508051620000d2906004906020840190620001ff565b505050620000e78183620000f360201b60201c565b50505050505062000348565b6001600160a01b0382166200014e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b6200015c60008383620001e9565b8060026000828254620001709190620002e4565b90915550506001600160a01b038216600090815260208190526040812080548392906200019f908490620002e4565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60055460ff1615620001fa57600080fd5b505050565b8280546200020d906200030b565b90600052602060002090601f0160209004810192826200023157600085556200027c565b82601f106200024c57805160ff19168380011785556200027c565b828001600101855582156200027c579182015b828111156200027c5782518255916020019190600101906200025f565b506200028a9291506200028e565b5090565b5b808211156200028a57600081556001016200028f565b60008060408385031215620002b957600080fd5b825160208401519092506001600160a01b0381168114620002d957600080fd5b809150509250929050565b600082198211156200030657634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200032057607f821691505b602082108114156200034257634e487b7160e01b600052602260045260246000fd5b50919050565b610b1c80620003586000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a1905e2411610066578063a1905e24146101fc578063a457c2d714610209578063a9059cbb1461021c578063dd62ed3e1461022f57600080fd5b806370a082311461019757806379cc6790146101c05780638673a742146101d357806395d89b41146101f457600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806342966c681461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610242565b60405161010f91906108ff565b60405180910390f35b61012b610126366004610970565b6102d4565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b36600461099a565b6102ec565b6040516012815260200161010f565b61012b61017d366004610970565b610310565b6101956101903660046109d6565b610332565b005b61013f6101a53660046109ef565b6001600160a01b031660009081526020819052604090205490565b6101956101ce366004610970565b61033f565b6101956101e1366004610a11565b6005805460ff1916911515919091179055565b610102610358565b60055461012b9060ff1681565b61012b610217366004610970565b610367565b61012b61022a366004610970565b6103e7565b61013f61023d366004610a33565b6103f5565b60606003805461025190610a66565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90610a66565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050905090565b6000336102e2818585610420565b5060019392505050565b6000336102fa858285610545565b6103058585856105bf565b506001949350505050565b6000336102e281858561032383836103f5565b61032d9190610ab7565b610420565b61033c3382610798565b50565b61034a823383610545565b6103548282610798565b5050565b60606004805461025190610a66565b6000338161037582866103f5565b9050838110156103da5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103058286868403610420565b6000336102e28185856105bf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104825760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d1565b6001600160a01b0382166104e35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061055184846103f5565b905060001981146105b957818110156105ac5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103d1565b6105b98484848403610420565b50505050565b6001600160a01b0383166106235760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d1565b6001600160a01b0382166106855760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d1565b6106908383836108ef565b6001600160a01b038316600090815260208190526040902054818110156107085760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d1565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061073f908490610ab7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161078b91815260200190565b60405180910390a36105b9565b6001600160a01b0382166107f85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d1565b610804826000836108ef565b6001600160a01b038216600090815260208190526040902054818110156108785760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d1565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108a7908490610acf565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610538565b505050565b60055460ff16156108ea57600080fd5b600060208083528351808285015260005b8181101561092c57858101830151858201604001528201610910565b8181111561093e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461096b57600080fd5b919050565b6000806040838503121561098357600080fd5b61098c83610954565b946020939093013593505050565b6000806000606084860312156109af57600080fd5b6109b884610954565b92506109c660208501610954565b9150604084013590509250925092565b6000602082840312156109e857600080fd5b5035919050565b600060208284031215610a0157600080fd5b610a0a82610954565b9392505050565b600060208284031215610a2357600080fd5b81358015158114610a0a57600080fd5b60008060408385031215610a4657600080fd5b610a4f83610954565b9150610a5d60208401610954565b90509250929050565b600181811c90821680610a7a57607f821691505b60208210811415610a9b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aca57610aca610aa1565b500190565b600082821015610ae157610ae1610aa1565b50039056fea2646970667358221220be70b4756edbca8be391818404784a0237c2ea7a0b0966a27815c67299377e2664736f6c634300080c003360806040523480156200001157600080fd5b5060405162000e6038038062000e608339810160408190526200003491620002dd565b8351849084906200004d9060039060208501906200016a565b508051620000639060049060208401906200016a565b5050506200007881836200008260201b60201c565b50505050620003d6565b6001600160a01b038216620000dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f1919062000372565b90915550506001600160a01b038216600090815260208190526040812080548392906200012090849062000372565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001789062000399565b90600052602060002090601f0160209004810192826200019c5760008555620001e7565b82601f10620001b757805160ff1916838001178555620001e7565b82800160010185558215620001e7579182015b82811115620001e7578251825591602001919060010190620001ca565b50620001f5929150620001f9565b5090565b5b80821115620001f55760008155600101620001fa565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023857600080fd5b81516001600160401b038082111562000255576200025562000210565b604051601f8301601f19908116603f0116810190828211818310171562000280576200028062000210565b816040528381526020925086838588010111156200029d57600080fd5b600091505b83821015620002c15785820183015181830184015290820190620002a2565b83821115620002d35760008385830101525b9695505050505050565b60008060008060808587031215620002f457600080fd5b84516001600160401b03808211156200030c57600080fd5b6200031a8883890162000226565b955060208701519150808211156200033157600080fd5b50620003408782880162000226565b60408701516060880151919550935090506001600160a01b03811681146200036757600080fd5b939692955090935050565b600082198211156200039457634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003ae57607f821691505b60208210811415620003d057634e487b7160e01b600052602260045260246000fd5b50919050565b610a7a80620003e66000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101ee565b6040516100e9919061087f565b60405180910390f35b6101056101003660046108f0565b610280565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b61010561013536600461091a565b610298565b604051601281526020016100e9565b6101056101573660046108f0565b6102bc565b61016f61016a366004610956565b6102de565b005b61011961017f36600461096f565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046108f0565b6102eb565b6100dc610304565b6101056101c33660046108f0565b610313565b6101056101d63660046108f0565b610393565b6101196101e9366004610991565b6103a1565b6060600380546101fd906109c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610229906109c4565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b5050505050905090565b60003361028e8185856103cc565b5060019392505050565b6000336102a68582856104f1565b6102b185858561056b565b506001949350505050565b60003361028e8185856102cf83836103a1565b6102d99190610a15565b6103cc565b6102e83382610739565b50565b6102f68233836104f1565b6103008282610739565b5050565b6060600480546101fd906109c4565b6000338161032182866103a1565b9050838110156103865760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102b182868684036103cc565b60003361028e81858561056b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661042e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037d565b6001600160a01b03821661048f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161037d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006104fd84846103a1565b9050600019811461056557818110156105585760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161037d565b61056584848484036103cc565b50505050565b6001600160a01b0383166105cf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037d565b6001600160a01b0382166106315760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037d565b6001600160a01b038316600090815260208190526040902054818110156106a95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037d565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106e0908490610a15565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161072c91815260200190565b60405180910390a3610565565b6001600160a01b0382166107995760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161037d565b6001600160a01b0382166000908152602081905260409020548181101561080d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161037d565b6001600160a01b038316600090815260208190526040812083830390556002805484929061083c908490610a2d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016104e4565b600060208083528351808285015260005b818110156108ac57858101830151858201604001528201610890565b818111156108be576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108eb57600080fd5b919050565b6000806040838503121561090357600080fd5b61090c836108d4565b946020939093013593505050565b60008060006060848603121561092f57600080fd5b610938846108d4565b9250610946602085016108d4565b9150604084013590509250925092565b60006020828403121561096857600080fd5b5035919050565b60006020828403121561098157600080fd5b61098a826108d4565b9392505050565b600080604083850312156109a457600080fd5b6109ad836108d4565b91506109bb602084016108d4565b90509250929050565b600181811c908216806109d857607f821691505b602082108114156109f957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a2857610a286109ff565b500190565b600082821015610a3f57610a3f6109ff565b50039056fea264697066735822122033d8dc4694796a21b32fd896b1ac924615fa22432bc6d56c1a31385f4f676a6b64736f6c634300080c003360a06040523480156200001157600080fd5b5060405162001ab438038062001ab4833981016040819052620000349162000114565b6001600160a01b0381166080526200004b62000052565b5062000146565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000112576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012757600080fd5b81516001600160a01b03811681146200013f57600080fd5b9392505050565b60805161193d620001776000396000818161019901528181610570015281816109f50152610ac0015261193d6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635c975abb116100b8578063ab5921e11161007c578063ab5921e11461029c578063ce7c2ac2146102b1578063d9caed12146102c4578063e3dae51c146102d7578063f3e73875146102ea578063fabc1cbc146102fd57600080fd5b80635c975abb146102425780637a8b26371461024a578063886f11951461025d5780638c871019146102765780638f6a62401461028957600080fd5b806347e7ef24116100ff57806347e7ef24146101d2578063485cc955146101e5578063553ca5f8146101f8578063595c6a671461020b5780635ac86ab71461021357600080fd5b806310d67a2f1461013c578063136439dd146101515780632495a5991461016457806339b70e38146101945780633a98ef39146101bb575b600080fd5b61014f61014a3660046115a6565b610310565b005b61014f61015f3660046115c3565b6103cc565b603254610177906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6101c460335481565b60405190815260200161018b565b6101c46101e03660046115dc565b610510565b61014f6101f3366004611608565b610754565b6101c46102063660046115a6565b610869565b61014f61087d565b610232610221366004611650565b6001805460ff9092161b9081161490565b604051901515815260200161018b565b6001546101c4565b6101c46102583660046115c3565b610949565b600054610177906201000090046001600160a01b031681565b6101c46102843660046115c3565b610994565b6101c46102973660046115a6565b61099f565b6102a46109ad565b60405161018b919061169d565b6101c46102bf3660046115a6565b6109cd565b61014f6102d23660046116d0565b610a62565b6101c46102e53660046115c3565b610c48565b6101c46102f83660046115c3565b610c81565b61014f61030b3660046115c3565b610c8c565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103879190611711565b6001600160a01b0316336001600160a01b0316146103c05760405162461bcd60e51b81526004016103b79061172e565b60405180910390fd5b6103c981610de8565b50565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d9190611778565b6104595760405162461bcd60e51b81526004016103b79061179a565b600154818116146104d25760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016103b7565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b600180546000918291811614156105655760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b60448201526064016103b7565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105dd5760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e6167657260448201526064016103b7565b6105e78484610eed565b60335460006105f86103e8836117f8565b905060006103e8610607610f6d565b61061191906117f8565b9050600061061f8783611810565b90508061062c8489611827565b6106369190611846565b95508561069c5760405162461bcd60e51b815260206004820152602e60248201527f5374726174656779426173652e6465706f7369743a206e65775368617265732060448201526d63616e6e6f74206265207a65726f60901b60648201526084016103b7565b6106a686856117f8565b60338190556f4b3b4ca85a86c47a098a223fffffffff10156107305760405162461bcd60e51b815260206004820152603c60248201527f5374726174656779426173652e6465706f7369743a20746f74616c536861726560448201527f73206578636565647320604d41585f544f54414c5f534841524553600000000060648201526084016103b7565b610749826103e860335461074491906117f8565b610fdf565b505050505092915050565b600054610100900460ff16158080156107745750600054600160ff909116105b8061078e5750303b15801561078e575060005460ff166001145b6107f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b7565b6000805460ff191660011790558015610814576000805461ff0019166101001790555b61081e8383611033565b8015610864576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000610877610258836109cd565b92915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190611778565b61090a5760405162461bcd60e51b81526004016103b79061179a565b600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6000806103e860335461095c91906117f8565b905060006103e861096b610f6d565b61097591906117f8565b9050816109828583611827565b61098c9190611846565b949350505050565b600061087782610c48565b60006108776102f8836109cd565b60606040518060800160405280604d81526020016118bb604d9139905090565b604051633d3f06c960e11b81526001600160a01b0382811660048301523060248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690637a7e0d9290604401602060405180830381865afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190611868565b6001805460029081161415610ab55760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b60448201526064016103b7565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b2d5760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e6167657260448201526064016103b7565b610b3884848461117e565b60335480831115610bc75760405162461bcd60e51b815260206004820152604d60248201527f5374726174656779426173652e77697468647261773a20616d6f756e7453686160448201527f726573206d757374206265206c657373207468616e206f7220657175616c207460648201526c6f20746f74616c53686172657360981b608482015260a4016103b7565b6000610bd56103e8836117f8565b905060006103e8610be4610f6d565b610bee91906117f8565b9050600082610bfd8784611827565b610c079190611846565b9050610c138685611810565b603355610c33610c238284611810565b6103e860335461074491906117f8565b610c3e888883611201565b5050505050505050565b6000806103e8603354610c5b91906117f8565b905060006103e8610c6a610f6d565b610c7491906117f8565b9050806109828386611827565b600061087782610949565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190611711565b6001600160a01b0316336001600160a01b031614610d335760405162461bcd60e51b81526004016103b79061172e565b600154198119600154191614610db15760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016103b7565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610505565b6001600160a01b038116610e765760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016103b7565b600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6032546001600160a01b03838116911614610f695760405162461bcd60e51b815260206004820152603660248201527f5374726174656779426173652e6465706f7369743a2043616e206f6e6c79206460448201527532b837b9b4ba103ab73232b9363cb4b733aa37b5b2b760511b60648201526084016103b7565b5050565b6032546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611868565b905090565b7fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be88161101384670de0b6b3a7640000611827565b61101d9190611846565b6040519081526020015b60405180910390a15050565b600054610100900460ff1661109e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103b7565b603280546001600160a01b0319166001600160a01b0384161790556110c4816000611215565b7f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af557507603260009054906101000a90046001600160a01b0316836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d9190611881565b604080516001600160a01b03909316835260ff909116602083015201611027565b6032546001600160a01b038381169116146108645760405162461bcd60e51b815260206004820152603b60248201527f5374726174656779426173652e77697468647261773a2043616e206f6e6c792060448201527f77697468647261772074686520737472617465677920746f6b656e000000000060648201526084016103b7565b6108646001600160a01b0383168483611301565b6000546201000090046001600160a01b031615801561123c57506001600160a01b03821615155b6112be5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016103b7565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2610f6982610de8565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526108649286929160009161139191851690849061140e565b80519091501561086457808060200190518101906113af9190611778565b6108645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103b7565b606061141d8484600085611427565b90505b9392505050565b6060824710156114885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103b7565b6001600160a01b0385163b6114df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b7565b600080866001600160a01b031685876040516114fb919061189e565b60006040518083038185875af1925050503d8060008114611538576040519150601f19603f3d011682016040523d82523d6000602084013e61153d565b606091505b509150915061154d828286611558565b979650505050505050565b60608315611567575081611420565b8251156115775782518084602001fd5b8160405162461bcd60e51b81526004016103b7919061169d565b6001600160a01b03811681146103c957600080fd5b6000602082840312156115b857600080fd5b813561142081611591565b6000602082840312156115d557600080fd5b5035919050565b600080604083850312156115ef57600080fd5b82356115fa81611591565b946020939093013593505050565b6000806040838503121561161b57600080fd5b823561162681611591565b9150602083013561163681611591565b809150509250929050565b60ff811681146103c957600080fd5b60006020828403121561166257600080fd5b813561142081611641565b60005b83811015611688578181015183820152602001611670565b83811115611697576000848401525b50505050565b60208152600082518060208401526116bc81604085016020870161166d565b601f01601f19169190910160400192915050565b6000806000606084860312156116e557600080fd5b83356116f081611591565b9250602084013561170081611591565b929592945050506040919091013590565b60006020828403121561172357600080fd5b815161142081611591565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561178a57600080fd5b8151801515811461142057600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561180b5761180b6117e2565b500190565b600082821015611822576118226117e2565b500390565b6000816000190483118215151615611841576118416117e2565b500290565b60008261186357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561187a57600080fd5b5051919050565b60006020828403121561189357600080fd5b815161142081611641565b600082516118b081846020870161166d565b919091019291505056fe4261736520537472617465677920696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a26469706673582212203c189594f4a16e52e7d942a144a63a3bdfbaea578dc8107360a1a2ab4061f65f64736f6c634300080c0033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61069a8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610499565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee3660046104bd565b610229565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461050c565b610291565b34801561013057600080fd5b506100d161013f3660046104bd565b610300565b34801561015057600080fd5b506100d161015f366004610499565b610336565b34801561017057600080fd5b506100a061017f366004610499565b6103b4565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d91906105e2565b949350505050565b61021d6103da565b6102276000610434565b565b6102316103da565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561027557600080fd5b505af1158015610289573d6000803e3d6000fd5b505050505050565b6102996103da565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906102c990869086906004016105ff565b6000604051808303818588803b1580156102e257600080fd5b505af11580156102f6573d6000803e3d6000fd5b5050505050505050565b6103086103da565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe69060240161025b565b61033e6103da565b6001600160a01b0381166103a85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103b181610434565b50565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b6000546001600160a01b031633146102275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146103b157600080fd5b6000602082840312156104ab57600080fd5b81356104b681610484565b9392505050565b600080604083850312156104d057600080fd5b82356104db81610484565b915060208301356104eb81610484565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561052157600080fd5b833561052c81610484565b9250602084013561053c81610484565b9150604084013567ffffffffffffffff8082111561055957600080fd5b818601915086601f83011261056d57600080fd5b81358181111561057f5761057f6104f6565b604051601f8201601f19908116603f011681019083821181831017156105a7576105a76104f6565b816040528281528960208487010111156105c057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156105f457600080fd5b81516104b681610484565b60018060a01b038316815260006020604081840152835180604085015260005b8181101561063b5785810183015185820160600152820161061f565b8181111561064d576000606083870101525b50601f01601f19169290920160600194935050505056fea2646970667358221220a0493a6b2b90c3f244082ad5c7c15e1acc7b297d84d40069f7d74ce169d6c61764736f6c634300080c0033608060405234801561001057600080fd5b5060405161077838038061077883398101604081905261002f91610263565b60005b82518110156100775761006583828151811061005057610050610339565b6020026020010151600161008860201b60201c565b8061006f8161034f565b915050610032565b506100818161015a565b5050610378565b6001600160a01b0382166100f95760405162461bcd60e51b815260206004820152602d60248201527f50617573657252656769737472792e5f7365745061757365723a207a65726f2060448201526c1859191c995cdcc81a5b9c1d5d609a1b60648201526084015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff19168515159081179091558251938452908301527f65d3a1fd4c13f05cba164f80d03ce90fb4b5e21946bfc3ab7dbd434c2d0b9152910160405180910390a15050565b6001600160a01b0381166101c85760405162461bcd60e51b815260206004820152602f60248201527f50617573657252656769737472792e5f736574556e7061757365723a207a657260448201526e1bc81859191c995cdcc81a5b9c1d5d608a1b60648201526084016100f0565b600154604080516001600160a01b03928316815291831660208301527f06b4167a2528887a1e97a366eefe8549bfbf1ea3e6ac81cb2564a934d20e8892910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461025e57600080fd5b919050565b6000806040838503121561027657600080fd5b82516001600160401b038082111561028d57600080fd5b818501915085601f8301126102a157600080fd5b81516020828211156102b5576102b5610231565b8160051b604051601f19603f830116810181811086821117156102da576102da610231565b6040529283528183019350848101820192898411156102f857600080fd5b948201945b8386101561031d5761030e86610247565b855294820194938201936102fd565b965061032c9050878201610247565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561037157634e487b7160e01b600052601160045260246000fd5b5060010190565b6103f1806103876000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806346fbf68e146100515780638568520614610089578063ce5484281461009e578063eab66d7a146100b1575b600080fd5b61007461005f366004610313565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61009c610097366004610335565b6100dc565b005b61009c6100ac366004610313565b61011d565b6001546100c4906001600160a01b031681565b6040516001600160a01b039091168152602001610080565b6001546001600160a01b0316331461010f5760405162461bcd60e51b815260040161010690610371565b60405180910390fd5b6101198282610153565b5050565b6001546001600160a01b031633146101475760405162461bcd60e51b815260040161010690610371565b61015081610220565b50565b6001600160a01b0382166101bf5760405162461bcd60e51b815260206004820152602d60248201527f50617573657252656769737472792e5f7365745061757365723a207a65726f2060448201526c1859191c995cdcc81a5b9c1d5d609a1b6064820152608401610106565b6001600160a01b03821660008181526020818152604091829020805460ff19168515159081179091558251938452908301527f65d3a1fd4c13f05cba164f80d03ce90fb4b5e21946bfc3ab7dbd434c2d0b9152910160405180910390a15050565b6001600160a01b03811661028e5760405162461bcd60e51b815260206004820152602f60248201527f50617573657252656769737472792e5f736574556e7061757365723a207a657260448201526e1bc81859191c995cdcc81a5b9c1d5d608a1b6064820152608401610106565b600154604080516001600160a01b03928316815291831660208301527f06b4167a2528887a1e97a366eefe8549bfbf1ea3e6ac81cb2564a934d20e8892910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461030e57600080fd5b919050565b60006020828403121561032557600080fd5b61032e826102f7565b9392505050565b6000806040838503121561034857600080fd5b610351836102f7565b91506020830135801515811461036657600080fd5b809150509250929050565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b60608201526080019056fea2646970667358221220400107fb39e4070329799832c0ce49475397a55d182fd9f9c38ee6784541743064736f6c634300080c0033608060405234801561001057600080fd5b5061176e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c806394f649dd11610146578063c4623ea1116100c3578063e243dc3c11610087578063e243dc3c146105a9578063e2a818c5146105bc578063e7a050aa146105cf578063f2fde38b146105e6578063f698da25146105f9578063fabc1cbc1461060057600080fd5b8063c4623ea114610550578063c608c7f314610564578063c665670214610572578063df5b354714610583578063df5cf7231461059657600080fd5b80639f00fa241161010a5780639f00fa24146104ef578063a178848414610501578063a1ca780b14610521578063b13442711461052f578063b5d8b5b81461054257600080fd5b806394f649dd1461044c578063967fc0d21461046d5780639a9519e0146104805780639b4da03d146104935780639b7e2f77146104b657600080fd5b80635c975abb116101d4578063886f119511610198578063886f1195146103f95780638b8aac3c1461040c5780638c80d4e5146104215780638da5cb5b146104345780639104c3191461044557600080fd5b80635c975abb1461039d57806363fca888146103a5578063663c1de4146103b8578063715018a6146103db5780637a7e0d92146103e357600080fd5b8063363bf9641161021b578063363bf964146102d75780634665bcda146103245780634e5a42631461034f578063595c6a67146103625780635ac86ab71461036a57600080fd5b806301f820b2146102585780630d3908f41461027457806310d67a2f14610295578063136439dd146102aa57806332e89ace146102bd575b600080fd5b61026160d25481565b6040519081526020015b60405180910390f35b61028861028236600461106e565b50606090565b60405161026b91906110d6565b6102a86102a336600461106e565b610613565b005b6102a86102b83660046110e9565b6106cc565b6102616102cb366004611118565b60009695505050505050565b6102a86102e5366004611213565b60c980546001600160a01b039485166001600160a01b03199182161790915560cb80549285169282169290921790915560ca8054929093169116179055565b60ca54610337906001600160a01b031681565b6040516001600160a01b03909116815260200161026b565b6102a861035d36600461126c565b61080b565b6102a8610879565b61038d6103783660046112a5565b609854600160ff9092169190911b9081161490565b604051901515815260200161026b565b609854610261565b6102616103b33660046112c8565b610940565b61038d6103c636600461106e565b60cf6020526000908152604090205460ff1681565b6102a8610971565b6102616103f13660046112f4565b600092915050565b609754610337906001600160a01b031681565b61026161041a36600461106e565b5060d25490565b6102a861042f366004611322565b505050565b6033546001600160a01b0316610337565b6000610337565b61045f61045a36600461106e565b610985565b60405161026b929190611363565b60cc54610337906001600160a01b031681565b6102a861048e3660046110e9565b60d255565b61038d6104a136600461106e565b60d16020526000908152604090205460ff1681565b6102a86104c436600461126c565b6001600160a01b0391909116600090815260cf60205260409020805460ff1916911515919091179055565b6102a86104fd3660046112c8565b5050565b61026161050f36600461106e565b60d06020526000908152604090205481565b6102a861042f3660046113ba565b60cb54610337906001600160a01b031681565b6102a86104fd36600461143b565b6102a861055e36600461147d565b50505050565b6102a861055e3660046114ce565b6102a861058036600461106e565b50565b6102a8610591366004611521565b610a5e565b60c954610337906001600160a01b031681565b6103376105b73660046112c8565b610b4f565b6102a86105ca36600461158d565b610b87565b6102616105dd366004611322565b60009392505050565b6102a86105f436600461106e565b610c31565b6000610261565b6102a861060e3660046110e9565b610ca7565b609760009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611610565b6001600160a01b0316336001600160a01b0316146106c35760405162461bcd60e51b81526004016106ba9061162d565b60405180910390fd5b61058081610e03565b60975460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190611677565b6107545760405162461bcd60e51b81526004016106ba90611694565b609854818116146107cd5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016106ba565b609881905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b604080516001600160a01b038416815282151560208201527f77d930df4937793473a95024d87a98fd2ccb9e92d3c2463b3dacd65d3e6a5786910160405180910390a16001600160a01b0391909116600090815260d160205260409020805460ff1916911515919091179055565b60975460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190611677565b6109015760405162461bcd60e51b81526004016106ba90611694565b600019609881905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60ce602052816000526040600020818154811061095c57600080fd5b90600052602060002001600091509150505481565b610979610efa565b6109836000610f54565b565b6001600160a01b038116600090815260cd6020908152604080832060ce8352928190208354825181850281018501909352808352606094859490939184918301828280156109fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109de575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610a4e57602002820191906000526020600020905b815481526020019060010190808311610a3a575b5050505050905091509150915091565b60005b83811015610b4857600160cf6000878785818110610a8157610a816116dc565b9050602002016020810190610a96919061106e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610ad057610ad06116dc565b9050602002016020810190610ae591906116f2565b60d16000878785818110610afb57610afb6116dc565b9050602002016020810190610b10919061106e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610b418161170f565b9050610a61565b5050505050565b60cd6020528160005260406000208181548110610b6b57600080fd5b6000918252602090912001546001600160a01b03169150829050565b828114610be25760405162461bcd60e51b8152602060048201526024808201527f53747261746567794d616e616765724d6f636b3a206c656e677468206d69736d6044820152630c2e8c6d60e31b60648201526084016106ba565b6001600160a01b038516600090815260cd60205260409020610c05908585610fa6565b506001600160a01b038516600090815260ce60205260409020610c29908383611009565b505050505050565b610c39610efa565b6001600160a01b038116610c9e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b61058081610f54565b609760009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1e9190611610565b6001600160a01b0316336001600160a01b031614610d4e5760405162461bcd60e51b81526004016106ba9061162d565b609854198119609854191614610dcc5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016106ba565b609881905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610800565b6001600160a01b038116610e915760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016106ba565b609754604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1609780546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146109835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054828255906000526020600020908101928215610ff9579160200282015b82811115610ff95781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190610fc6565b50611005929150611044565b5090565b828054828255906000526020600020908101928215610ff9579160200282015b82811115610ff9578235825591602001919060010190611029565b5b808211156110055760008155600101611045565b6001600160a01b038116811461058057600080fd5b60006020828403121561108057600080fd5b813561108b81611059565b9392505050565b600081518084526020808501945080840160005b838110156110cb5781516001600160a01b0316875295820195908201906001016110a6565b509495945050505050565b60208152600061108b6020830184611092565b6000602082840312156110fb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561113157600080fd5b863561113c81611059565b9550602087013561114c81611059565b945060408701359350606087013561116381611059565b92506080870135915060a087013567ffffffffffffffff8082111561118757600080fd5b818901915089601f83011261119b57600080fd5b8135818111156111ad576111ad611102565b604051601f8201601f19908116603f011681019083821181831017156111d5576111d5611102565b816040528281528c60208487010111156111ee57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60008060006060848603121561122857600080fd5b833561123381611059565b9250602084013561124381611059565b9150604084013561125381611059565b809150509250925092565b801515811461058057600080fd5b6000806040838503121561127f57600080fd5b823561128a81611059565b9150602083013561129a8161125e565b809150509250929050565b6000602082840312156112b757600080fd5b813560ff8116811461108b57600080fd5b600080604083850312156112db57600080fd5b82356112e681611059565b946020939093013593505050565b6000806040838503121561130757600080fd5b823561131281611059565b9150602083013561129a81611059565b60008060006060848603121561133757600080fd5b833561134281611059565b9250602084013561135281611059565b929592945050506040919091013590565b6040815260006113766040830185611092565b82810360208481019190915284518083528582019282019060005b818110156113ad57845183529383019391830191600101611391565b5090979650505050505050565b6000806000606084860312156113cf57600080fd5b83356113da81611059565b95602085013595506040909401359392505050565b60008083601f84011261140157600080fd5b50813567ffffffffffffffff81111561141957600080fd5b6020830191508360208260051b850101111561143457600080fd5b9250929050565b6000806020838503121561144e57600080fd5b823567ffffffffffffffff81111561146557600080fd5b611471858286016113ef565b90969095509350505050565b6000806000806080858703121561149357600080fd5b843561149e81611059565b935060208501356114ae81611059565b925060408501356114be81611059565b9396929550929360600135925050565b600080600080608085870312156114e457600080fd5b84356114ef81611059565b935060208501356114ff81611059565b925060408501359150606085013561151681611059565b939692955090935050565b6000806000806040858703121561153757600080fd5b843567ffffffffffffffff8082111561154f57600080fd5b61155b888389016113ef565b9096509450602087013591508082111561157457600080fd5b50611581878288016113ef565b95989497509550505050565b6000806000806000606086880312156115a557600080fd5b85356115b081611059565b9450602086013567ffffffffffffffff808211156115cd57600080fd5b6115d989838a016113ef565b909650945060408801359150808211156115f257600080fd5b506115ff888289016113ef565b969995985093965092949392505050565b60006020828403121561162257600080fd5b815161108b81611059565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561168957600080fd5b815161108b8161125e565b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561170457600080fd5b813561108b8161125e565b600060001982141561173157634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202a3bfa281a550da637b9f6dab8b9f9d5383c146002eab1b9f9f8fbd2e8e200dd64736f6c634300080c00335374726174656779426173652e77697468647261773a20616d6f756e74536861726573206d757374206265206c657373207468616e206f7220657175616c20746f20746f74616c5368617265735374726174656779426173652e77697468647261773a2043616e206f6e6c792077697468647261772074686520737472617465677920746f6b656e6d73672e73656e646572206973206e6f74207065726d697373696f6e656420617320756e70617573657253747261746567794261736554564c4c696d6974733a206d617820706572206465706f736974206578636565646564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645374726174656779426173652e6465706f7369743a206e65775368617265732063616e6e6f74206265207a65726f53747261746567794261736554564c4c696d6974733a206d6178206465706f7369747320657863656564656453747261746567794261736554564c4c696d6974732e5f73657454564c4c696d6974733a206d61785065724465706f7369742065786365656473206d6178546f74616c4465706f736974735374726174656779426173652e6465706f7369743a20746f74616c536861726573206578636565647320604d41585f544f54414c5f534841524553605374726174656779426173652e6465706f7369743a2043616e206f6e6c79206465706f73697420756e6465726c79696e67546f6b656ea26469706673582212205fa4eadef4592d6c7b604dcea5ddf70cfe839698a7f23479f86782bcafd5ea8164736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`\x046\x10b\0\x03\x13W`\x005`\xE0\x1C\x80co7x|\x11b\0\x01\xA2W\x80c\xB2\xD0\xBE\xB1\x11b\0\0\xFCW\x80c\xC6Cbb\x11b\0\0\xAFW\x80c\xE7\x0B\x885\x11b\0\0\x86W\x80c\xE7\x0B\x885\x14b\0\x06\xB1W\x80c\xEA\xB6mz\x14b\0\x06\xC8W\x80c\xF0\x9B\xC8v\x14b\0\x06\xDCW\x80c\xFAv&\xD4\x14b\0\x06\xE6W`\0\x80\xFD[\x80c\xC6Cbb\x14b\0\x06|W\x80c\xD5\x89f\xCA\x14b\0\x06\x90W\x80c\xE2\x0C\x9Fq\x14b\0\x06\xA7W`\0\x80\xFD[\x80c\xB2\xD0\xBE\xB1\x14b\0\x06\x1CW\x80c\xB5P\x8A\xA9\x14b\0\x06&W\x80c\xBAAO\xA6\x14b\0\x060W\x80c\xBD\x92+\x1C\x14b\0\x06:W\x80c\xBF-1Q\x14b\0\x06NW\x80c\xC4\xF8\x1E:\x14b\0\x06eW`\0\x80\xFD[\x80c\x95\x8C\x96u\x11b\0\x01UW\x80c\x95\x8C\x96u\x14b\0\x05\x98W\x80c\x9F\xD0Pm\x14b\0\x05\xAFW\x80c\xA15ww\x14b\0\x05\xC3W\x80c\xA8\xC6.v\x14b\0\x05\xDAW\x80c\xAB\xCD\xFA\x92\x14b\0\x05\xEEW\x80c\xAD\xD1\x14\xC5\x14b\0\x06\x05W`\0\x80\xFD[\x80co7x|\x14b\0\x05)W\x80cz|6\xD6\x14b\0\x05@W\x80c\x85\"l\x81\x14b\0\x05WW\x80c\x88o\x11\x95\x14b\0\x05pW\x80c\x91j\x17\xC6\x14b\0\x05\x84W\x80c\x92nY\xFF\x14b\0\x05\x8EW`\0\x80\xFD[\x80c>G\x15\x8C\x11b\0\x02qW\x80cT\rPw\x11b\0\x02$W\x80cf9\xCA\xD6\x11b\0\x01\xFBW\x80cf9\xCA\xD6\x14b\0\x04\xBAW\x80cf\xD9\xA9\xA0\x14b\0\x04\xE2W\x80ci\xC5\xCD\x05\x14b\0\x04\xFBW\x80cl\x94\xBB\xD3\x14b\0\x05\x12W`\0\x80\xFD[\x80cT\rPw\x14b\0\x04uW\x80cY\xE97K\x14b\0\x04\x8CW\x80cb\xB9\xF5[\x14b\0\x04\xA3W`\0\x80\xFD[\x80c>G\x15\x8C\x14b\0\x04\x08W\x80c>^<#\x14b\0\x04\x1CW\x80c?r\x86\xF4\x14b\0\x04&W\x80cA\x1A\xE3z\x14b\0\x040W\x80cFR\xCF&\x14b\0\x04GW\x80cG.\x15\"\x14b\0\x04^W`\0\x80\xFD[\x80c16>\xE6\x11b\0\x02\xCAW\x80c16>\xE6\x14b\0\x03\x9EW\x80c1\xD0f\xCC\x14b\0\x03\xB2W\x80c9.\xB3\xB2\x14b\0\x03\xC9W\x80c9\xB7\x0E8\x14b\0\x03\xD3W\x80c;@\\>\x14b\0\x03\xE7W\x80c<n\xFE\x85\x14b\0\x03\xF1W`\0\x80\xFD[\x80c\n\x92T\xE4\x14b\0\x03\x18W\x80c\x0B\xEF\x1D\x0F\x14b\0\x03$W\x80c\x10\xDB_{\x14b\0\x03;W\x80c\x1E\xD7\x83\x1C\x14b\0\x03EW\x80c$j\xF5\x89\x14b\0\x03gW\x80c$\x95\xA5\x99\x14b\0\x03qW[`\0\x80\xFD[b\0\x03\"b\0\x06\xF4V[\0[b\0\x03\"b\0\x0356`\x04b\0\x89\xBCV[b\0\t\x84V[b\0\x03\"b\0\x0B\x9DV[b\0\x03Ob\0\x0EHV[`@Qb\0\x03^\x91\x90b\0\x8A%V[`@Q\x80\x91\x03\x90\xF3[b\0\x03\"b\0\x0E\xACV[`\x1FTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01b\0\x03^V[`&Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x03\xC36`\x04b\0\x8A:V[b\0\x10\x82V[b\0\x03\"b\0\x14PV[`\x1ETb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x15AV[b\0\x03\"b\0\x04\x026`\x04b\0\x8AmV[b\0\x18\xA8V[`\x1CTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03Ob\0\x1A1V[b\0\x03Ob\0\x1A\x93V[b\0\x03\"b\0\x04A6`\x04b\0\x8AmV[b\0\x1A\xF5V[b\0\x03\"b\0\x04X6`\x04b\0\x8A:V[b\0\x1D\xE7V[b\0\x03\"b\0\x04o6`\x04b\0\x8AmV[b\0\x1E\xE9V[b\0\x03\"b\0\x04\x866`\x04b\0\x8A\x8DV[b\0\"7V[b\0\x03\"b\0\x04\x9D6`\x04b\0\x89\xBCV[b\0$WV[b\0\x03\"b\0\x04\xB46`\x04b\0\x89\xBCV[b\0%ZV[b\0\x04\xD1b\0\x04\xCB6`\x04b\0\x8A\x8DV[b\0%\xF3V[`@Q\x90\x15\x15\x81R` \x01b\0\x03^V[b\0\x04\xECb\x002\x18V[`@Qb\0\x03^\x91\x90b\0\x8A\xBAV[b\0\x03\"b\0\x05\x0C6`\x04b\0\x89\xBCV[b\x003\x0BV[b\0\x03\"b\0\x05#6`\x04b\0\x8BqV[b\x005\x03V[b\0\x03\"b\0\x05:6`\x04b\0\x89\xBCV[b\x006\x06V[b\0\x03\"b\0\x05Q6`\x04b\0\x8AmV[b\0?tV[b\0\x05ab\0@\xFBV[`@Qb\0\x03^\x91\x90b\0\x8C\tV[`\x1DTb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x04\xECb\0A\xD5V[b\0\x03\"b\0B\xBFV[b\0\x03\"b\0\x05\xA96`\x04b\0\x8C\x87V[b\0DuV[`\"Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x05\xD46`\x04b\0\x8C\xBFV[b\0EyV[`!Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x05\xFF6`\x04b\0\x8A:V[b\0F\x85V[b\0\x03\"b\0\x06\x166`\x04b\0\x8C\xF7V[b\0G\x87V[b\0\x03\"b\0InV[b\0\x05ab\0K\xEAV[b\0\x04\xD1b\0L\xC4V[` Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x06_6`\x04b\0\x8D3V[b\0M\xFFV[b\0\x03\"b\0\x06v6`\x04b\0\x8A:V[b\0O\xD5V[`'Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0\x06\xA16`\x04b\0\x8C\x87V[b\0P\xD7V[b\0\x03Ob\0Q\xDBV[b\0\x03\"b\0\x06\xC26`\x04b\0\x8A:V[b\0R=V[`#Tb\0\x03\x85\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[b\0\x03\"b\0VIV[`\0Tb\0\x04\xD1\x90`\xFF\x16\x81V[b\0\x06\xFEb\0[$V[`\x1ET`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90b\0\x07\x1B\x90b\0\x89LV[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x07HW=`\0\x80>=`\0\xFD[P`&\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`\x1CT`)T`(T`\x1FT`\x1DT`@Q`$\x81\x01\x94\x90\x94R`D\x84\x01\x92\x90\x92R\x85\x16`d\x83\x01R\x84\x16`\x84\x82\x01R\x91\x92\x16\x90c\x01\x9E')`\xE0\x1B\x90`\xA4\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qb\0\x07\xE7\x90b\0\x89ZV[b\0\x07\xF5\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x08\x12W=`\0\x80>=`\0\xFD[P`'\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x82\x17\x90U`(T`@\x80Qca\xB0\x1B]`\xE0\x1B\x81R\x90Q\x91\x92\x91ca\xB0\x1B]\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x08tW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x08\x9A\x91\x90b\0\x8D\x95V[\x14b\0\x08\xC3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`@Q\x80\x91\x03\x90\xFD[`)T`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16cC\xFE\x08\xB0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\t\x1AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\t@\x91\x90b\0\x8D\x95V[\x14b\0\t`W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`'T`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x83\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\t\xCAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\t\xDFW=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\n-W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\nBW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q`\x80\x81\x01\x90\x91R`K\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1Ed` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\n\x93\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\n\xAEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\n\xC3W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x16W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0B+W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0B\x95W=`\0\x80>=`\0\xFD[PPPPPPV[`$T`%T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90b\0\x0B\xBD\x90b\0\x89hV[\x91\x82R`\x01`\x01`\xA0\x1B\x03\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x0B\xEEW=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U` T`\x1CT`\x1DT`@Q`$\x81\x01\x94\x90\x94R\x84\x16`D\x84\x01R\x90\x83\x16\x92\x16\x90cH\\\xC9U`\xE0\x1B\x90`d\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qb\0\x0Cz\x90b\0\x89ZV[b\0\x0C\x88\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x0C\xA5W=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ug\r\xE0\xB6\xB3\xA7d\0\0b\0\x0C\xDA\x81b\0F\x85V[`\x1FT`@QcC9\xD3\xA1`\xE1\x1B\x81R`\x01`\x04\x82\x01Rg\r\xE0\xB6\xB3\xA7d\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\x86s\xA7B\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r)W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\r>W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xF4\x84H\x14`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\x93W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\r\xA8W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\xF6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0E\x0BW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\n\xFB\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[```\r\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83W[PPPPP\x90P\x90V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0E\xFBW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0F\x10W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\n` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x0Fa\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0F|W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x0F\x91W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x0F\xCE\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x0F\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x10\x14\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x10fW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x10{W=`\0\x80>=`\0\xFD[PPPPPV[d\xE8\xD4\xA5\x10\0`(UdE\xD9d\xB8\0`)U`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x15\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x10\xDAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x10\xEFW=`\0\x80>=`\0\xFD[PP`\x1BT`)T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x85\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x11<W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x11QW=`\0\x80>=`\0\xFD[PPPPb\0\x11e`)T`(Tb\0]\xE2V[`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92c\xA9\x05\x9C\xBB\x92b\0\x11\x9D\x92\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x11\xBDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x11\xE3\x91\x90b\0\x8E)V[P`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x12/W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x12U\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x12\xA1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x12\xB6W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x12\xF3\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x13\x13W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x139\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x13\x8BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x13\xA0W=`\0\x80>=`\0\xFD[PPPP\x80\x82b\0\x13\xB2\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x14\x06W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x14,\x91\x90b\0\x8D\x95V[\x14b\0\x14LW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[PPV[`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91\x90b\x01\x1D\xDC` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x14\x9D\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x14\xB8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x14\xCDW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`\x1DT`@QcH\\\xC9U`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01R\x90\x82\x16`$\x82\x01R\x91\x16\x92PcH\\\xC9U\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x15&W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x15;W=`\0\x80>=`\0\xFD[PPPPV[`%T`@Qp\x02\xF0P\xFE\x93\x89C\xAC\xC4_eV\x80\0\0\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90b\0\x15o\x90b\0\x89vV[b\0\x15|\x92\x91\x90b\0\x8E\xC0V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x15\x99W=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`\x1ET`@Q\x91\x16\x90b\0\x15\xCA\x90b\0\x89\x84V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x15\xF7W=`\0\x80>=`\0\xFD[P` \x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x81\x17\x82U`\x1CT`\x1FT`\x1DT`@\x80Q\x92\x87\x16`$\x84\x01R\x90\x86\x16`D\x80\x84\x01\x91\x90\x91R\x81Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x81R\x93\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cH\\\xC9U`\xE0\x1B\x17\x90R\x92Q\x91\x93\x16\x91\x90b\0\x16t\x90b\0\x89ZV[b\0\x16\x82\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\x16\x9FW=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x81\x17\x90\x91U`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rp\x02\xF0P\xFE\x93\x89C\xAC\xC4_eV\x80\0\0\0\0\x93\x91\x90\x91\x16\x91c\xA9\x05\x9C\xBB\x91b\0\x16\xFE\x91\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x17\x1EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x17D\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x17\x8FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x17\xA4W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`<\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\xAF` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x17\xF5\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x18\x10W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x18%W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0\x18b\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x18\x82W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x14L\x91\x90b\0\x8D\x95V[`\x1BT`\x1FT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x18\xF5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x19\nW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`;\x80\x82Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\x01\x1DH` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x19d\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x19\x7FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x19\x94W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x19\xE2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x19\xF7W=`\0\x80>=`\0\xFD[PP`!T`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xD9\xCA\xED\x12\x91Pb\0\n\xFB\x900\x90\x86\x90\x86\x90`\x04\x01b\0\x8D\xECV[```\x0F\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[```\x0E\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[`\x1BT`!T`@\x80Qc\x076\xE1\xC7`\xE3\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cLc\xE5b\x93\x16\x91c9\xB7\x0E8\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x1BJW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Bp\x91\x90b\0\x8F.V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15\x80\x15b\0\x1B\xA0WP`\x1CT`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x16\x14\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1B\xC1\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1B\xDAW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1B\xEFW=`\0\x80>=`\0\xFD[PPPP`\0g\r\xE0\xB6\xB3\xA7d\0\0\x90Pb\0\x1C\x0B\x81b\0F\x85V[`\x1BT`@\x80Q\x80\x82\x01\x82R` \x80\x82R\x7FStrategyBase.onlyStrategyManager\x90\x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\xF2\x8D\xCE\xB3\x91b\0\x1Cv\x91\x90`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1C\x91W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1C\xA6W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1C\xF2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1D\x07W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\x1DD\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D_W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1DtW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D\xC9W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x1D\xDEW=`\0\x80>=`\0\xFD[PPPPPPPV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x1E>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Ed\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0\x1E\x8BWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1E\xAC\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1E\xC5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1E\xDAW=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0`\xD8V[`\x1BT`!T`@\x80Qc\x076\xE1\xC7`\xE3\x1B\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cLc\xE5b\x93\x16\x91c9\xB7\x0E8\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0\x1F>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x1Fd\x91\x90b\0\x8F.V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15\x80\x15b\0\x1F\x94WP`\x1CT`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x16\x14\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x1F\xB5\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x1F\xCEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x1F\xE3W=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93Pc\xA9\x05\x9C\xBB\x92b\0 (\x92\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0 HW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0 n\x91\x90b\0\x8E)V[P`\x1BT`@\x80Q\x80\x82\x01\x82R` \x80\x82R\x7FStrategyBase.onlyStrategyManager\x90\x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91b\0 \xD1\x91`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0 \xECW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0!\x01W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0!MW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0!bW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0!\x9F\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0!\xBFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0!\xE5\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x0B\x80W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x84\x83\x11`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\"}W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\"\x92W=`\0\x80>=`\0\xFD[PPPPb\0\"\xA2\x83\x83b\0]\xE2V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\"\xECW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0#\x01W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`/\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1D\xAD` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0#R\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0#mW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0#\x82W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0#\xBF\x92\x90\x91\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0#\xDFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0$\x05\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x1D\xC9W`\0\x80\xFD[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0$\xAEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0$\xD4\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0$\xFBWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0%\x1C\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0%5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0%JW=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0b\xF5V[b\0%f\x82\x82b\0]\xE2V[`'T`@\x80Qc\xDFo\xAD\xC1`\xE0\x1B\x81R\x81Q`\0\x93\x84\x93`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92c\xDFo\xAD\xC1\x92`\x04\x80\x83\x01\x93\x92\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0%\xB1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0%\xD7\x91\x90b\0\x8FNV[\x91P\x91Pb\0%\xE7\x82\x85b\0eOV[b\0\x15;\x81\x84b\0eOV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x85\x10`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0&:W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0&OW=`\0\x80>=`\0\xFD[PP`\x1BT`$\x80T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x87\x11\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcLc\xE5b\x92P\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0&\x9CW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0&\xB1W=`\0\x80>=`\0\xFD[PPPPb\0&\xC1\x84\x84b\0]\xE2V[`'T`@Qc\x8C\x87\x10\x19`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\x8C\x87\x10\x19\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0'\x0CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0'2\x91\x90b\0\x8D\x95V[`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0'l\x92\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0'\x8CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0'\xB2\x91\x90b\0\x8E)V[P\x84\x83\x11\x15b\0+\x02W`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0(\x06W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0(\x1BW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0(\xACW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0(\xC1W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0(\xFE\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0)\x1EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0)D\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0)\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0)\xABW=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0)\xF9W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0*\x0EW=`\0\x80>=`\0\xFD[PP`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91Pb\0*F\x900\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0*fW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0*\x8C\x91\x90b\0\x8E)V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0*\xDEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0*\xF3W=`\0\x80>=`\0\xFD[PPPP`\x01\x91PPb\x002\x11V[`\x1FT`'T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x86\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0+SW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0+y\x91\x90b\0\x8D\x95V[\x11\x15b\0,WW`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0+\xCAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0+\xDFW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01b\0(\x91V[`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0,\xA2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0,\xC8\x91\x90b\0\x8D\x95V[\x90P\x81b\x000\x15W`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0-\x1AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0-/W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xF2\x8D\xCE\xB3\x91P`\x84\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0-\xBEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0-\xD3W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0.\x10\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0.0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0.V\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0.\xA8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0.\xBDW=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0/\x0BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0/ W=`\0\x80>=`\0\xFD[PP`\x1FT`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91Pb\0/X\x900\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0/xW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0/\x9E\x91\x90b\0\x8E)V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0/\xF0W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x000\x05W=`\0\x80>=`\0\xFD[PPPP`\x01\x92PPPb\x002\x11V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x000_W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x000tW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\x000\xB1\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\x000\xD1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x000\xF7\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x001IW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x001^W=`\0\x80>=`\0\xFD[PPPP\x80\x82b\x001p\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x001\xC4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x001\xEA\x91\x90b\0\x8D\x95V[\x14b\x002\nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[`\0\x92PPP[\x93\x92PPPV[```\x12\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W`\0\x84\x81R` \x90\x81\x90 `@\x80Q\x80\x82\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T`\x01`\x01`\xA0\x1B\x03\x16\x83R`\x01\x81\x01\x80T\x83Q\x81\x87\x02\x81\x01\x87\x01\x90\x94R\x80\x84R\x93\x94\x91\x93\x85\x83\x01\x93\x92\x83\x01\x82\x82\x80\x15b\x002\xE9W` \x02\x82\x01\x91\x90`\0R` `\0 \x90`\0\x90[\x82\x82\x90T\x90a\x01\0\n\x90\x04`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x16\x81R` \x01\x90`\x04\x01\x90` \x82`\x03\x01\x04\x92\x83\x01\x92`\x01\x03\x82\x02\x91P\x80\x84\x11b\x002\xAAW\x90P[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90b\x002<V[PPPP\x90P\x90V[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x003bW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x003\x88\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x003\xAFWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x003\xD0\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x003\xE9W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x003\xFEW=`\0\x80>=`\0\xFD[PP`'T`@\x80Qc\xDFo\xAD\xC1`\xE0\x1B\x81R\x81Q\x89\x95P`\0\x94P\x84\x93`\x01`\x01`\xA0\x1B\x03\x16\x92c\xDFo\xAD\xC1\x92`\x04\x80\x82\x01\x93\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\x004MW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x004s\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x004\x9AWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x004\xBB\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x004\xD4W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x004\xE9W=`\0\x80>=`\0\xFD[PPPPb\x004\xF9\x88\x88b\0fzV[PPPPPPPPV[\x81`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\x005ZW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\x005\x80\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\x005\xA7WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\x005\xC8\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x005\xE1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x005\xF6W=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0k\x04V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x83\x15\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x006LW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x006aW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x85\x85\x11`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x006\xABW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x006\xC0W=`\0\x80>=`\0\xFD[PP`\x1BT`$\x80T`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x90\x86\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcLc\xE5b\x92P\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\x007\x0CW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\x007!W=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x007oW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x007\x84W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\x007\xD6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x007\xEBW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\08@W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\08UW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\08\x92\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\08\xB2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\08\xD8\x91\x90b\0\x8E)V[P`'T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\09$W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\09J\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\09\x96W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\09\xABW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\09\xE8\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0:\x08W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0:.\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0:\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0:\x95W=`\0\x80>=`\0\xFD[PPPP\x80\x83b\0:\xA7\x91\x90b\0\x8EcV[`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0:\xFBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0;!\x91\x90b\0\x8D\x95V[\x14b\0;AW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0;\x8BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0;\xA0W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0;\xF2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0<\x07W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0<\\W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0<qW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93Pc\xA9\x05\x9C\xBB\x92P\x16b\0<\x9A\x86\x86b\0\x8FsV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0<\xB9\x92\x91\x90b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0<\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0<\xFF\x91\x90b\0\x8E)V[P`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0=TW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0=z\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0=\xC6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0=\xDBW=`\0\x80>=`\0\xFD[PP`'T`\x1FT`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93PcG\xE7\xEF$\x92P\x16b\0>\x04\x86\x86b\0\x8FsV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0>#\x92\x91\x90b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0>CW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0>i\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0>\xBBW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0>\xD0W=`\0\x80>=`\0\xFD[PPPP\x81`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0?)W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0?O\x91\x90b\0\x8D\x95V[\x14b\0?oW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8E~V[PPPV[`\x1BT`\x1FT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0?\xC1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0?\xD6W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`6\x80\x82Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\x01\x1E\xEB` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0@0\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0@KW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0@`W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0@\xAEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0@\xC3W=`\0\x80>=`\0\xFD[PP`!T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcG\xE7\xEF$\x91Pb\0!\x9F\x90\x85\x90\x85\x90`\x04\x01b\0\x8E\x10V[```\x11\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W\x83\x82\x90`\0R` `\0 \x01\x80Tb\0AA\x90b\0\x8F\x8DV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Tb\0Ao\x90b\0\x8F\x8DV[\x80\x15b\0A\xC0W\x80`\x1F\x10b\0A\x94Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91b\0A\xC0V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11b\0A\xA2W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90b\0A\x1FV[```\x13\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W`\0\x84\x81R` \x90\x81\x90 `@\x80Q\x80\x82\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T`\x01`\x01`\xA0\x1B\x03\x16\x83R`\x01\x81\x01\x80T\x83Q\x81\x87\x02\x81\x01\x87\x01\x90\x94R\x80\x84R\x93\x94\x91\x93\x85\x83\x01\x93\x92\x83\x01\x82\x82\x80\x15b\0B\xA6W` \x02\x82\x01\x91\x90`\0R` `\0 \x90`\0\x90[\x82\x82\x90T\x90a\x01\0\n\x90\x04`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x16\x81R` \x01\x90`\x04\x01\x90` \x82`\x03\x01\x04\x92\x83\x01\x92`\x01\x03\x82\x02\x91P\x80\x84\x11b\0BgW\x90P[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90b\0A\xF9V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0C\tW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0C\x1EW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`.\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E\n` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Co\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0C\x8AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0C\x9FW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94PcG\xE7\xEF$\x93Pb\0C\xDD\x92\x90\x91\x16\x90`\0\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0C\xFDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0D#\x91\x90b\0\x8D\x95V[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x15&W`\0\x80\xFD[\x82`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0D\xCCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0D\xF2\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0E\x19WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0E:\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0ESW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0EhW=`\0\x80>=`\0\xFD[PPPPb\0\x0B\x95\x86\x86\x86b\0l\xFCV[\x81`\x01`\x01``\x1B\x03\x16`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0E\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0E\xFF\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0F&WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0FG\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0F`W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0FuW=`\0\x80>=`\0\xFD[PPPPb\0\x10{\x85\x85b\0rxV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0F\xDCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0G\x02\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0G)WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0GJ\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0GcW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0GxW=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0w\xBDV[`\x1BT`\x1CT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x84\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0G\xD4W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0G\xE9W=`\0\x80>=`\0\xFD[PP`\x1BT`#T`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x86\x83\x16\x14\x15`\x04\x82\x01R\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0H:W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0HOW=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x90\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0H\x9BW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0H\xB0W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`*\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1D\x83` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0I\x01\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0I\x1CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0I1W=`\0\x80>=`\0\xFD[PP`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x87\x90R`$\x81\x01\x86\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x11\xC7\x0C\x9D\x91P`D\x01b\0\x1DDV[`\x1BT`\"T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0I\xB8W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0I\xCDW=`\0\x80>=`\0\xFD[PP`!T`@Qc\x13d9\xDD`\xE0\x1B\x81R`\x01`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x13d9\xDD\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0J\x18W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0J-W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0J\x82W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0J\x97W=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93Pc\xA9\x05\x9C\xBB\x92b\0J\xDC\x92\x16\x90\x85\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0J\xFCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0K\"\x91\x90b\0\x8E)V[P`\x1BT`@\x80Q\x80\x82\x01\x82R`\x19\x81Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B` \x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91c\xF2\x8D\xCE\xB3\x91b\0K\x81\x91`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0K\x9CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0K\xB1W=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01b\0\x0FaV[```\x10\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15b\x003\x02W\x83\x82\x90`\0R` `\0 \x01\x80Tb\0L0\x90b\0\x8F\x8DV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Tb\0L^\x90b\0\x8F\x8DV[\x80\x15b\0L\xAFW\x80`\x1F\x10b\0L\x83Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91b\0L\xAFV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11b\0L\x91W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90b\0L\x0EV[`\0\x80Ta\x01\0\x90\x04`\xFF\x16\x15b\0L\xE5WP`\0Ta\x01\0\x90\x04`\xFF\x16\x90V[`\0sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15b\0M\xFAW`@Q`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90\x7Ff\x7F\x9Dp\xCAA\x1Dp\xEA\xD5\r\x8D\\\"\x07\r\xAF\xC3j\xD7_=\xCF^r7\xB2*\xDE\x9A\xEC\xC4\x90b\0M\\\x90\x83\x90e\x19\x98Z[\x19Y`\xD2\x1B\x90` \x01b\0\x8E\x10V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0M|\x92\x91` \x01b\0\x8F\xCAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0M\x98\x91b\0\x8F\xFDV[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14b\0M\xD7W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0M\xDCV[``\x91P[P\x91PP\x80\x80` \x01\x90Q\x81\x01\x90b\0M\xF6\x91\x90b\0\x8E)V[\x91PP[\x91\x90PV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81R`\x01`\x01`\xF0\x1B\x03\x83\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0NRW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Nx\x91\x90b\0\x8D\x95V[\x90P\x81`\x01`\x01`\xF0\x1B\x03\x16\x81\x14b\0N\xE8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FunderlyingFromShares != amountSh`D\x82\x01RjaresToQuery`\xA8\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qcz\x8B&7`\xE0\x1B\x81R`\x01`\x01`\xF0\x1B\x03\x84\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cz\x8B&7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0O;W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Oa\x91\x90b\0\x8D\x95V[\x90P\x82`\x01`\x01`\xF0\x1B\x03\x16\x81\x14b\0?oW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FunderlyingFromSharesView != amou`D\x82\x01RnntSharesToQuery`\x88\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[\x80`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0P,W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0PR\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0PyWP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0P\x9A\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0P\xB3W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0P\xC8W=`\0\x80>=`\0\xFD[PPPPb\0\x15;\x84b\0}hV[\x82`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0Q.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0QT\x91\x90b\0\x8FNV[`\x1BT\x91\x93P\x91P`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b\x83\x85\x11\x80\x15\x90b\0Q{WP\x82\x85\x11\x15[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Q\x9C\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0Q\xB5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0Q\xCAW=`\0\x80>=`\0\xFD[PPPPb\0\x0B\x95\x86\x86\x86b\0\x82\xBAV[```\x0C\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15b\0\x0E\xA2W` \x02\x82\x01\x91\x90`\0R` `\0 \x90\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11b\0\x0E\x83WPPPPP\x90P\x90V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0R\x85W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0R\x9AW=`\0\x80>=`\0\xFD[PPPPb\0R\xA9\x81b\0F\x85V[`\0\x80`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0S\0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0S&\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0SuW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0S\x9B\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0S\xE7W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0S\xFCW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0T9\x920\x92\x16\x90\x88\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0TTW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0TiW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0T\xBEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0T\xD3W=`\0\x80>=`\0\xFD[PPPP`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0U+W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0UQ\x91\x90b\0\x8D\x95V[\x82\x14b\0U\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x1C\xDA\x18\\\x99\\\xC8\x18\xDA\x18[\x99\xD9Y`\x92\x1B`D\x82\x01R`d\x01b\0\x08\xBAV[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0U\xDBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0V\x01\x91\x90b\0\x8D\x95V[\x81\x14b\0\x15;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1D\x1B\xDA\xD9[\x88\x18\x98[\x18[\x98\xD9H\x18\xDA\x18[\x99\xD9Y`Z\x1B`D\x82\x01R`d\x01b\0\x08\xBAV[d\xE8\xD4\xA5\x10\0`(\x81\x90UdE\xD9d\xB8\0`)\x81\x90U`\0\x91b\0Vn\x91\x90b\0\x90\x1BV[\x90Pb\0V\x80`)T`(Tb\0]\xE2V[`\x1FT`\x1ET`(T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93c\xA9\x05\x9C\xBB\x93b\0V\xB9\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0V\xD9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0V\xFF\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0WJW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0W_W=`\0\x80>=`\0\xFD[PPPP`\0[\x81\x81\x10\x15b\0X\x84W`\x1FT`'T`)T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93c\xA9\x05\x9C\xBB\x93b\0W\xA8\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0W\xC8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0W\xEE\x91\x90b\0\x8E)V[P`'T`\x1FT`)T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x93cG\xE7\xEF$\x93b\0X(\x93\x91\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0XHW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Xn\x91\x90b\0\x8D\x95V[P\x80b\0X{\x81b\0\x90>V[\x91PPb\0WfV[P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0X\xD6W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0X\xEBW=`\0\x80>=`\0\xFD[PP`\x1FT`'T`)T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x95Pc\xA9\x05\x9C\xBB\x94Pb\0Y)\x93\x90\x92\x16\x91`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0YIW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Yo\x91\x90b\0\x8E)V[P`(T`\x1FT`'T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0Y\xC0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0Y\xE6\x91\x90b\0\x8D\x95V[\x11b\0Z\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x8D\xAFV[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0ZPW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0ZeW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q``\x81\x01\x90\x91R`,\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1E8` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0Z\xB6\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0Z\xD1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0Z\xE6W=`\0\x80>=`\0\xFD[PP`'T`\x1FT`)T`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x95PcG\xE7\xEF$\x94Pb\0\x0F\xCE\x93\x90\x92\x16\x91`\x04\x01b\0\x8E\x10V[`@Qb\0[2\x90b\0\x89\x92V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0[OW=`\0\x80>=`\0\xFD[P`\x1C\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91` \x80\x83\x01\x90\x806\x837PP`\"T\x82Q\x92\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91\x83\x91P`\0\x90b\0[\xB5Wb\0[\xB5b\0\x90\\V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16` \x91\x82\x02\x92\x90\x92\x01\x01R`#T`@Q\x83\x92\x91\x90\x91\x16\x90b\0[\xE3\x90b\0\x89\xA0V[b\0[\xF0\x92\x91\x90b\0\x90rV[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\\rW=`\0\x80>=`\0\xFD[P`\x1D\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`@Qb\0\\<\x90b\0\x89\xAEV[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\YW=`\0\x80>=`\0\xFD[P`\x1E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`$T`%T`@Q\x91\x92\x16\x90b\0\\\x8E\x90b\0\x89vV[b\0\\\x9B\x92\x91\x90b\0\x8E\xC0V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\\\xB8W=`\0\x80>=`\0\xFD[P`\x1F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U`\x1ET`@Q\x91\x16\x90b\0\\\xE9\x90b\0\x89\x84V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0]\x16W=`\0\x80>=`\0\xFD[P` \x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x81\x17\x82U`\x1CT`\x1FT`\x1DT`@\x80Q\x92\x87\x16`$\x84\x01R\x90\x86\x16`D\x80\x84\x01\x91\x90\x91R\x81Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x81R\x93\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cH\\\xC9U`\xE0\x1B\x17\x90R\x92Q\x91\x93\x16\x91\x90b\0]\x93\x90b\0\x89ZV[b\0]\xA1\x93\x92\x91\x90b\0\x8D^V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0]\xBEW=`\0\x80>=`\0\xFD[P`!\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x84\x10`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0^(W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0^=W=`\0\x80>=`\0\xFD[PPPP`\0\x80`'`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xDFo\xAD\xC1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`@\x80Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0^\x97W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0^\xBD\x91\x90b\0\x8FNV[`\x1BT`#T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x93\x95P\x91\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0_\x0CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0_!W=`\0\x80>=`\0\xFD[PP`\x1BT`'T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0_c\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0_~W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0_\x93W=`\0\x80>=`\0\xFD[PP`@\x80Q\x85\x81R` \x81\x01\x88\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x93P\x01\x90P`@Q\x80\x91\x03\x90\xA1`@\x80Q\x82\x81R` \x81\x01\x85\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1`'T`@Qc\x11\xC7\x0C\x9D`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x11\xC7\x0C\x9D\x90`D\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0`YW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0`nW=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0`\xC3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\x004\xF9W=`\0\x80>=`\0\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0a W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0a5W=`\0\x80>=`\0\xFD[PPPPb\0aD\x81b\0F\x85V[`\x1BT`\"T`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0a\x8EW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0a\xA3W=`\0\x80>=`\0\xFD[PP`!T`@Qc\x13d9\xDD`\xE0\x1B\x81R`\x02`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x13d9\xDD\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0a\xEEW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0b\x03W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0bXW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0bmW=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q\x80\x82\x01\x82R`\x19\x81Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B` \x82\x01R\x90Qc\xF2\x8D\xCE\xB3`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0\x94P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92Pc\xF2\x8D\xCE\xB3\x91b\0b\xDA\x91\x90`\x04\x01b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\r\x93W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x84\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0c=W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0cRW=`\0\x80>=`\0\xFD[PPPPb\0ca\x82b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0c\xACW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0c\xD2\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R\x82\x85\x11`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0d\x19W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0d.W=`\0\x80>=`\0\xFD[PP`\x1BT`@\x80Q`\x80\x81\x01\x90\x91R`M\x80\x82R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93Pc\xF2\x8D\xCE\xB3\x92P\x90b\x01\x1C\xFB` \x83\x019`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0d\x7F\x91\x90b\0\x8D\xD7V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0d\x9AW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0d\xAFW=`\0\x80>=`\0\xFD[PP`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x92Pc\x06D}V\x91P`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0d\xFDW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0e\x12W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0\x1DD\x920\x92\x16\x90\x87\x90`\x04\x01b\0\x8D\xECV[\x80\x82\x14b\0\x14LW\x7FA0O\xAC\xD92=u\xB1\x1B\xCD\xD6\t\xCB8\xEF\xFF\xFD\xB0W\x10\xF7\xCA\xF0\xE9\xB1lm\x9Dp\x9FP`@Qb\0e\xC2\x90` \x80\x82R`\"\x90\x82\x01R\x7FError: a == b not satisfied [uin`@\x82\x01Rat]`\xF0\x1B``\x82\x01R`\x80\x01\x90V[`@Q\x80\x91\x03\x90\xA1`@\x80Q\x81\x81R`\n\x81\x83\x01Ri\x08\x08\x08\x08\x08\x08\x13\x19Y\x9D`\xB2\x1B``\x82\x01R` \x81\x01\x84\x90R\x90Q\x7F\xB2\xDE/\xBE\x80\x1A\r\xF6\xC0\xCB\xDD\xFDD\x8B\xA3\xC4\x1DH\xA0@\xCA5\xC5l\x81\x96\xEF\x0F\xCA\xE7!\xA8\x91\x81\x90\x03`\x80\x01\x90\xA1`@\x80Q\x81\x81R`\n\x81\x83\x01Ri\x08\x08\x08\x08\x08\x14\x9AY\xDA\x1D`\xB2\x1B``\x82\x01R` \x81\x01\x83\x90R\x90Q\x7F\xB2\xDE/\xBE\x80\x1A\r\xF6\xC0\xCB\xDD\xFDD\x8B\xA3\xC4\x1DH\xA0@\xCA5\xC5l\x81\x96\xEF\x0F\xCA\xE7!\xA8\x91\x81\x90\x03`\x80\x01\x90\xA1b\0\x14Lb\0\x889V[`\x1BT`\x01`\x01`\xA0\x1B\x03\x16cLc\xE5b`\x01\x84\x10\x80\x15\x90b\0f\x9DWP`\0\x83\x11[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0f\xBE\x91\x15\x15\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0f\xD7W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0f\xECW=`\0\x80>=`\0\xFD[PPPPb\0f\xFB\x82b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0gOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0gu\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x84\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0g\xAEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0g\xC3W=`\0\x80>=`\0\xFD[PPPP`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0h\x1DW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0hC\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0h}\x92\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0h\x9DW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0h\xC3\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0i\x0EW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0i#W=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\0\x94P`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x93PcG\xE7\xEF$\x92b\0ia\x92\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0i\x81W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0i\xA7\x91\x90b\0\x8D\x95V[\x90P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0i\xFAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0j\x0FW=`\0\x80>=`\0\xFD[PPPP\x82\x81\x14b\0jdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FnewShares != amountToDeposit\0\0\0\0`D\x82\x01R`d\x01b\0\x08\xBAV[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0j\xAFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0j\xD5\x91\x90b\0\x8D\x95V[\x90P\x81b\0j\xE4\x84\x83b\0\x8FsV[\x14b\0\x10{W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x90\xCEV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x84\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0kLW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0kaW=`\0\x80>=`\0\xFD[PPPPb\0kp\x82b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0k\xBBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0k\xE1\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x85\x16\x83\x10\x15`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0l/W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0lDW=`\0\x80>=`\0\xFD[PPPP`\0\x82c\xFF\xFF\xFF\xFF\x16\x82b\0l^\x91\x90b\0\x8FsV[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0l\xAAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0l\xBFW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xD9\xCA\xED\x12\x93Pb\0`>\x920\x92\x16\x90\x86\x90`\x04\x01b\0\x8D\xECV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0mPW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0mv\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x86\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0m\xAFW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0m\xC4W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x87\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0n\x10W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0n%W=`\0\x80>=`\0\xFD[PPPPb\0n4\x83b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0n\x88W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0n\xAE\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x85\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0n\xE7W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0n\xFCW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\0o9\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0oYW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0o\x7F\x91\x90b\0\x8E)V[P`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0o\xD2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0o\xF8\x91\x90b\0\x8D\x95V[\x90P`\0b\0p\na\x03\xE8\x83b\0\x8EcV[\x83`\x01`\x01``\x1B\x03\x16a\x03\xE8`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0pkW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0p\x91\x91\x90b\0\x8D\x95V[b\0p\x9D\x91\x90b\0\x8EcV[b\0p\xA9\x91\x90b\0\x91\x1FV[b\0p\xB5\x91\x90b\0\x90\x1BV[`!T`@Qc\x8C\x87\x10\x19`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x86\x16`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x8C\x87\x10\x19\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0q\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0q3\x91\x90b\0\x8D\x95V[\x90P\x81\x81\x14b\0q\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FsharesFromUnderlying != expected`D\x82\x01Rg\x15\x98[\x1DYS\xDD]`\xC2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qc8\xF6\xB9G`\xE2\x1B\x81R`\x01`\x01``\x1B\x03\x86\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90c\xE3\xDA\xE5\x1C\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0q\xEAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0r\x10\x91\x90b\0\x8D\x95V[\x90P\x82\x81\x14b\0\x1D\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FsharesFromUnderlyingView != expe`D\x82\x01Rk\x18\xDD\x19Y\x15\x98[\x1DYS\xDD]`\xA2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01`\x01``\x1B\x03\x85\x16\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0r\xC9W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0r\xDEW=`\0\x80>=`\0\xFD[PPPPb\0r\xF6\x82`\x01`\x01``\x1B\x03\x16b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0sAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0sg\x91\x90b\0\x8D\x95V[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01`\x01``\x1B\x03\x85\x16\x83\x10\x15`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0s\xB8W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0s\xCDW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x94P\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0t!W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0tG\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0t\x96W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0t\xBC\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\x08W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\x1DW=`\0\x80>=`\0\xFD[PP`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R`\x01`\x01``\x1B\x03\x89\x16`D\x82\x01R\x91\x16\x92Pc\xD9\xCA\xED\x12\x91P`d\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\x80W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\x95W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0u\xEAW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0u\xFFW=`\0\x80>=`\0\xFD[PP`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x93P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0vOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0vu\x91\x90b\0\x8D\x95V[\x90P`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0v\xCDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0v\xF3\x91\x90b\0\x8D\x95V[\x90P`\x01`\x01``\x1B\x03\x86\x16b\0w\x0B\x82\x87b\0\x8FsV[\x14b\0w+W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x91AV[\x84b\0wA`\x01`\x01``\x1B\x03\x88\x16\x86b\0\x91\x1FV[b\0wM\x91\x90b\0\x90\x1BV[b\0wY\x84\x84b\0\x8FsV[\x14b\0\x1D\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7Ftoken balance did not increase a`D\x82\x01Rkppropriately`\xA0\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0x\x11W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0x7\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x84\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0xpW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0x\x85W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x85\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0x\xD1W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0x\xE6W=`\0\x80>=`\0\xFD[PPPP`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0y@W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0yf\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R\x92\x93P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92c\xA9\x05\x9C\xBB\x92b\0y\xA0\x92\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0y\xC0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0y\xE6\x91\x90b\0\x8E)V[P`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x91\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0z1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0zFW=`\0\x80>=`\0\xFD[PP`\x1BT`!T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0z\x88\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0z\xA3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0z\xB8W=`\0\x80>=`\0\xFD[PPPP\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8g\r\xE0\xB6\xB3\xA7d\0\0`@Qb\0z\xF6\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1`!T`\x1FT`@Qc\x11\xF9\xFB\xC9`\xE2\x1B\x81R`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x92cG\xE7\xEF$\x92b\0{:\x92\x90\x91\x16\x90\x87\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0{ZW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0{\x80\x91\x90b\0\x8D\x95V[\x90P`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0{\xD3W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0{\xE8W=`\0\x80>=`\0\xFD[PPPP\x82\x81\x14b\0|=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FnewShares != amountToDeposit\0\0\0\0`D\x82\x01R`d\x01b\0\x08\xBAV[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0|\x88W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0|\xAE\x91\x90b\0\x8D\x95V[\x90P\x81b\0|\xBD\x84\x83b\0\x8FsV[\x14b\0|\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x90\xCEV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81Rg\r\xE0\xB6\xB3\xA7d\0\0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0}.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0}T\x91\x90b\0\x8D\x95V[g\r\xE0\xB6\xB3\xA7d\0\0\x14b\0\x15;W`\0\x80\xFD[`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x83\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cLc\xE5b\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0}\xB0W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0}\xC5W=`\0\x80>=`\0\xFD[PPPPb\0}\xD4\x81b\0F\x85V[`!T`@\x80Qc:\x98\xEF9`\xE0\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c:\x98\xEF9\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15b\0~\x1FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0~E\x91\x90b\0\x8D\x95V[`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P`\0\x92\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0~\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0~\xBE\x91\x90b\0\x8D\x95V[`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x7F\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x7F3\x91\x90b\0\x8D\x95V[`\x1BT`\x1ET`@Qc\x03\">\xAB`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R\x92\x93P\x16\x90c\x06D}V\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x7F\x7FW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x7F\x94W=`\0\x80>=`\0\xFD[PP`\x1BT`!T`@Qc\x81\xBA\xD6\xF3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\x81\xBA\xD6\xF3\x93Pb\0\x7F\xD6\x92`\x01\x92\x83\x92\x83\x92\x83\x92\x16\x90`\x04\x01b\0\x90\x9EV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x7F\xF1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x80\x06W=`\0\x80>=`\0\xFD[PPPP\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8g\r\xE0\xB6\xB3\xA7d\0\0`@Qb\0\x80D\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1`!T`\x1FT`@Qcl\xE5v\x89`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92c\xD9\xCA\xED\x12\x92b\0\x80\x87\x920\x92\x90\x91\x16\x90\x88\x90`\x04\x01b\0\x8D\xECV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x80\xA2W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x80\xB7W=`\0\x80>=`\0\xFD[PPPP`\x1B`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x90\xC5\x01;`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\x81\x0CW`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\x81!W=`\0\x80>=`\0\xFD[PP`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x93P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91Pcp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x81qW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x81\x97\x91\x90b\0\x8D\x95V[\x90P`\0`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x81\xEFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x82\x15\x91\x90b\0\x8D\x95V[\x90P\x80\x15b\0\x828W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x08\xBA\x90b\0\x91AV[\x83b\0\x82E\x84\x84b\0\x8FsV[\x14b\0\x0B\x95W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`?`$\x82\x01R\x7FtokenBalanceAfter - tokenBalance`D\x82\x01R\x7FBefore != strategyBalanceBefore\0`d\x82\x01R`\x84\x01b\0\x08\xBAV[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x83\x0EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x834\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x86\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x83mW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x83\x82W=`\0\x80>=`\0\xFD[PP`\x1BT`@Qc&1\xF2\xB1`\xE1\x1B\x81R`\x01\x87\x10\x15`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92PcLc\xE5b\x91P`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x83\xCEW`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x83\xE3W=`\0\x80>=`\0\xFD[PPPPb\0\x83\xF2\x83b\0F\x85V[`\x1BT`\x1FT`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x92cLc\xE5b\x92\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x84FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x84l\x91\x90b\0\x8D\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R\x90\x85\x11\x15`\x04\x82\x01R`$\x01`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15b\0\x84\xA5W`\0\x80\xFD[PZ\xFA\x15\x80\x15b\0\x84\xBAW=`\0\x80>=`\0\xFD[PP`\x1FT`!T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94Pc\xA9\x05\x9C\xBB\x93Pb\0\x84\xF7\x92\x90\x91\x16\x90\x86\x90`\x04\x01b\0\x8E\x10V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x85\x17W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x85=\x91\x90b\0\x8E)V[P`\x1FT`!T`@Qcp\xA0\x821`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R`\0\x92\x91\x90\x91\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x85\x90W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x85\xB6\x91\x90b\0\x8D\x95V[\x90P`\0b\0\x85\xC8a\x03\xE8\x83b\0\x8EcV[\x90P`\0a\x03\xE8`!`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c:\x98\xEF9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x86#W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x86I\x91\x90b\0\x8D\x95V[b\0\x86U\x91\x90b\0\x8EcV[b\0\x86j`\x01`\x01``\x1B\x03\x86\x16\x84b\0\x91\x1FV[b\0\x86v\x91\x90b\0\x90\x1BV[`!T`@Qc\xF3\xE78u`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x87\x16`\x04\x82\x01R\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF3\xE78u\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x86\xCEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x86\xF4\x91\x90b\0\x8D\x95V[\x90P\x81\x81\x14b\0\x87XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FunderlyingFromShares != expected`D\x82\x01Rg\x15\x98[\x1DYS\xDD]`\xC2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[`!T`@Qcz\x8B&7`\xE0\x1B\x81R`\x01`\x01``\x1B\x03\x87\x16`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cz\x8B&7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x87\xABW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x87\xD1\x91\x90b\0\x8D\x95V[\x90P\x82\x81\x14b\x004\xF9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FunderlyingFromSharesView != expe`D\x82\x01Rk\x18\xDD\x19Y\x15\x98[\x1DYS\xDD]`\xA2\x1B`d\x82\x01R`\x84\x01b\0\x08\xBAV[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15b\0\x89;W`@\x80Qsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-` \x82\x01\x81\x90Re\x19\x98Z[\x19Y`\xD2\x1B\x92\x82\x01\x92\x90\x92R`\x01``\x82\x01R`\0\x91\x90\x7Fp\xCA\x10\xBB\xD0\xDB\xFD\x90 \xA9\xF4\xB14\x02\xC1l\xB1 p^\r\x1C\n\xEA\xB1\x0F\xA3S\xAEXo\xC4\x90`\x80\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0\x88\xD6\x92\x91` \x01b\0\x8F\xCAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rb\0\x88\xF2\x91b\0\x8F\xFDV[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14b\0\x891W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0\x896V[``\x91P[PPPP[`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90UV[a\x1FM\x80b\0\x91\x87\x839\x01\x90V[a\x0E\x81\x80b\0\xB0\xD4\x839\x01\x90V[a\x0Et\x80b\0\xBFU\x839\x01\x90V[a\x0E`\x80b\0\xCD\xC9\x839\x01\x90V[a\x1A\xB4\x80b\0\xDC)\x839\x01\x90V[a\x07\x18\x80b\0\xF6\xDD\x839\x01\x90V[a\x07x\x80b\0\xFD\xF5\x839\x01\x90V[a\x17\x8E\x80b\x01\x05m\x839\x01\x90V[`\0\x80`@\x83\x85\x03\x12\x15b\0\x89\xD0W`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15b\0\x8A\x1AW\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01b\0\x89\xF3V[P\x94\x95\x94PPPPPV[` \x81R`\0b\x002\x11` \x83\x01\x84b\0\x89\xDFV[`\0` \x82\x84\x03\x12\x15b\0\x8AMW`\0\x80\xFD[P5\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x8AjW`\0\x80\xFD[PV[`\0` \x82\x84\x03\x12\x15b\0\x8A\x80W`\0\x80\xFD[\x815b\x002\x11\x81b\0\x8ATV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8A\xA3W`\0\x80\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[`\0` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x92P\x82\x86\x01\x91P\x82\x81`\x05\x1B\x87\x01\x01\x84\x88\x01`\0\x80[\x84\x81\x10\x15b\0\x8BbW\x89\x84\x03`?\x19\x01\x86R\x82Q\x80Q`\x01`\x01`\xA0\x1B\x03\x16\x85R\x88\x01Q\x88\x85\x01\x88\x90R\x80Q\x88\x86\x01\x81\x90R\x90\x89\x01\x90\x83\x90``\x87\x01\x90[\x80\x83\x10\x15b\0\x8BLW\x83Q`\x01`\x01`\xE0\x1B\x03\x19\x16\x82R\x92\x8B\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x8B\x01\x90b\0\x8B V[P\x97\x8A\x01\x97\x95PPP\x91\x87\x01\x91`\x01\x01b\0\x8A\xE2V[P\x91\x99\x98PPPPPPPPPV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8B\x85W`\0\x80\xFD[\x825\x91P` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14b\0\x8B\xA1W`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0[\x83\x81\x10\x15b\0\x8B\xC9W\x81\x81\x01Q\x83\x82\x01R` \x01b\0\x8B\xAFV[\x83\x81\x11\x15b\0\x15;WPP`\0\x91\x01RV[`\0\x81Q\x80\x84Rb\0\x8B\xF5\x81` \x86\x01` \x86\x01b\0\x8B\xACV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P\x83\x87\x01`\0[\x82\x81\x10\x15b\0\x8CbW`?\x19\x88\x86\x03\x01\x84Rb\0\x8CO\x85\x83Qb\0\x8B\xDBV[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01b\0\x8C0V[P\x92\x97\x96PPPPPPPV[\x805`\x01`\x01``\x1B\x03\x81\x16\x81\x14b\0M\xFAW`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8C\x9DW`\0\x80\xFD[\x835\x92P` \x84\x015\x91Pb\0\x8C\xB6`@\x85\x01b\0\x8CoV[\x90P\x92P\x92P\x92V[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8C\xD3W`\0\x80\xFD[b\0\x8C\xDE\x83b\0\x8CoV[\x91Pb\0\x8C\xEE` \x84\x01b\0\x8CoV[\x90P\x92P\x92\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x8D\rW`\0\x80\xFD[\x835\x92P` \x84\x015\x91P`@\x84\x015b\0\x8D(\x81b\0\x8ATV[\x80\x91PP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15b\0\x8DFW`\0\x80\xFD[\x815`\x01`\x01`\xF0\x1B\x03\x81\x16\x81\x14b\x002\x11W`\0\x80\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x82R\x83\x16` \x82\x01R```@\x82\x01\x81\x90R`\0\x90b\0\x8D\x8C\x90\x83\x01\x84b\0\x8B\xDBV[\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15b\0\x8D\xA8W`\0\x80\xFD[PQ\x91\x90PV[` \x80\x82R`\x0E\x90\x82\x01Rm\x06&\x16B\x07FW7B\x076WGW`\x94\x1B`@\x82\x01R``\x01\x90V[` \x81R`\0b\x002\x11` \x83\x01\x84b\0\x8B\xDBV[`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x81R\x91\x90\x92\x16` \x82\x01R`@\x81\x01\x91\x90\x91R``\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[`\0` \x82\x84\x03\x12\x15b\0\x8E<W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14b\x002\x11W`\0\x80\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15b\0\x8EyWb\0\x8Eyb\0\x8EMV[P\x01\x90V[` \x80\x82R`\"\x90\x82\x01R\x7Ftotal shares not updated correct`@\x82\x01Raly`\xF0\x1B``\x82\x01R`\x80\x01\x90V[`\x80\x81R`\0b\0\x8E\xEB`\x80\x83\x01`\n\x81Ri*2\xB9\xBA\x10*7\xB5\xB2\xB7`\xB1\x1B` \x82\x01R`@\x01\x90V[\x82\x81\x03` \x84\x01Rb\0\x8F\x0F\x81`\x04\x81Rc\x15\x11T\xD5`\xE2\x1B` \x82\x01R`@\x01\x90V[`@\x84\x01\x95\x90\x95RPP`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16``\x90\x91\x01R\x90V[`\0` \x82\x84\x03\x12\x15b\0\x8FAW`\0\x80\xFD[\x81Qb\x002\x11\x81b\0\x8ATV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x8FbW`\0\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[`\0\x82\x82\x10\x15b\0\x8F\x88Wb\0\x8F\x88b\0\x8EMV[P\x03\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x8F\xA2W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x8F\xC4WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x81R\x81Q`\0\x90b\0\x8F\xEF\x81`\x04\x85\x01` \x87\x01b\0\x8B\xACV[\x91\x90\x91\x01`\x04\x01\x93\x92PPPV[`\0\x82Qb\0\x90\x11\x81\x84` \x87\x01b\0\x8B\xACV[\x91\x90\x91\x01\x92\x91PPV[`\0\x82b\0\x909WcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0`\0\x19\x82\x14\x15b\0\x90UWb\0\x90Ub\0\x8EMV[P`\x01\x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`@\x81R`\0b\0\x90\x87`@\x83\x01\x85b\0\x89\xDFV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[\x94\x15\x15\x85R\x92\x15\x15` \x85\x01R\x90\x15\x15`@\x84\x01R\x15\x15``\x83\x01R`\x01`\x01`\xA0\x1B\x03\x16`\x80\x82\x01R`\xA0\x01\x90V[` \x80\x82R`1\x90\x82\x01R\x7FtotalSharesAfter - totalSharesBe`@\x82\x01Rpfore != newShares`x\x1B``\x82\x01R`\x80\x01\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15b\0\x91<Wb\0\x91<b\0\x8EMV[P\x02\x90V[` \x80\x82R`%\x90\x82\x01R\x7Fshares did not decrease appropri`@\x82\x01Rdately`\xD8\x1B``\x82\x01R`\x80\x01\x90V\xFE`\xA0`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x1FM8\x03\x80b\0\x1FM\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x01\x16V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80R\x80b\0\0Lb\0\0TV[PPb\0\x01HV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15b\0\0\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[`\0T`\xFF\x90\x81\x16\x10\x15b\0\x01\x14W`\0\x80T`\xFF\x19\x16`\xFF\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[V[`\0` \x82\x84\x03\x12\x15b\0\x01)W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01AW`\0\x80\xFD[\x93\x92PPPV[`\x80Qa\x1D\xD4b\0\x01y`\09`\0\x81\x81a\x02\x16\x01R\x81\x81a\x07\xA9\x01R\x81\x81a\x0B\xE7\x01Ra\x0C\xB2\x01Ra\x1D\xD4`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x01\x8EW`\x005`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xDEW\x80c\xABY!\xE1\x11a\0\x97W\x80c\xDFo\xAD\xC1\x11a\0qW\x80c\xDFo\xAD\xC1\x14a\x03fW\x80c\xE3\xDA\xE5\x1C\x14a\x03\x81W\x80c\xF3\xE78u\x14a\x03\x94W\x80c\xFA\xBC\x1C\xBC\x14a\x03\xA7W`\0\x80\xFD[\x80c\xABY!\xE1\x14a\x03+W\x80c\xCE|*\xC2\x14a\x03@W\x80c\xD9\xCA\xED\x12\x14a\x03SW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x02\xC8W\x80ca\xB0\x1B]\x14a\x02\xD0W\x80cz\x8B&7\x14a\x02\xD9W\x80c\x88o\x11\x95\x14a\x02\xECW\x80c\x8C\x87\x10\x19\x14a\x03\x05W\x80c\x8Fjb@\x14a\x03\x18W`\0\x80\xFD[\x80c:\x98\xEF9\x11a\x01KW\x80cH\\\xC9U\x11a\x01%W\x80cH\\\xC9U\x14a\x02kW\x80cU<\xA5\xF8\x14a\x02~W\x80cY\\jg\x14a\x02\x91W\x80cZ\xC8j\xB7\x14a\x02\x99W`\0\x80\xFD[\x80c:\x98\xEF9\x14a\x028W\x80cC\xFE\x08\xB0\x14a\x02OW\x80cG\xE7\xEF$\x14a\x02XW`\0\x80\xFD[\x80c\x01\x9E')\x14a\x01\x93W\x80c\x10\xD6z/\x14a\x01\xA8W\x80c\x11\xC7\x0C\x9D\x14a\x01\xBBW\x80c\x13d9\xDD\x14a\x01\xCEW\x80c$\x95\xA5\x99\x14a\x01\xE1W\x80c9\xB7\x0E8\x14a\x02\x11W[`\0\x80\xFD[a\x01\xA6a\x01\xA16`\x04a\x19\x83V[a\x03\xBAV[\0[a\x01\xA6a\x01\xB66`\x04a\x19\xCDV[a\x04\x9DV[a\x01\xA6a\x01\xC96`\x04a\x19\xEAV[a\x05PV[a\x01\xA6a\x01\xDC6`\x04a\x1A\x0CV[a\x06\x05V[`2Ta\x01\xF4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xF4\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02A`3T\x81V[`@Q\x90\x81R` \x01a\x02\x08V[a\x02A`dT\x81V[a\x02Aa\x02f6`\x04a\x1A%V[a\x07IV[a\x01\xA6a\x02y6`\x04a\x1AQV[a\t\x8DV[a\x02Aa\x02\x8C6`\x04a\x19\xCDV[a\n[V[a\x01\xA6a\noV[a\x02\xB8a\x02\xA76`\x04a\x1A\x99V[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02\x08V[`\x01Ta\x02AV[a\x02A`eT\x81V[a\x02Aa\x02\xE76`\x04a\x1A\x0CV[a\x0B;V[`\0Ta\x01\xF4\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02Aa\x03\x136`\x04a\x1A\x0CV[a\x0B\x86V[a\x02Aa\x03&6`\x04a\x19\xCDV[a\x0B\x91V[a\x033a\x0B\x9FV[`@Qa\x02\x08\x91\x90a\x1A\xE6V[a\x02Aa\x03N6`\x04a\x19\xCDV[a\x0B\xBFV[a\x01\xA6a\x03a6`\x04a\x1B\x19V[a\x0CTV[`dT`eT`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02\x08V[a\x02Aa\x03\x8F6`\x04a\x1A\x0CV[a\x0E:V[a\x02Aa\x03\xA26`\x04a\x1A\x0CV[a\x0EsV[a\x01\xA6a\x03\xB56`\x04a\x1A\x0CV[a\x0E~V[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x03\xDAWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\x03\xF4WP0;\x15\x80\x15a\x03\xF4WP`\0T`\xFF\x16`\x01\x14[a\x04\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1BZV[`@Q\x80\x91\x03\x90\xFD[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x04<W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x04F\x85\x85a\x0F\xDAV[a\x04P\x83\x83a\x10\xE7V[\x80\x15a\x04\x96W`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xF0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x14\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05DW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[a\x05M\x81a\x12:V[PV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xA3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xC7\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xF7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[a\x06\x01\x82\x82a\x0F\xDAV[PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06RW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06v\x91\x90a\x1C\x0FV[a\x06\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1C1V[`\x01T\x81\x81\x16\x14a\x07\x0BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T`\0\x91\x82\x91\x81\x16\x14\x15a\x07\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x10V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x08\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x10V[a\x08 \x84\x84a\x13?V[`3T`\0a\x081a\x03\xE8\x83a\x1C\x8FV[\x90P`\0a\x03\xE8a\x08@a\x14!V[a\x08J\x91\x90a\x1C\x8FV[\x90P`\0a\x08X\x87\x83a\x1C\xA7V[\x90P\x80a\x08e\x84\x89a\x1C\xBEV[a\x08o\x91\x90a\x1C\xDDV[\x95P\x85a\x08\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x04\x10V[a\x08\xDF\x86\x85a\x1C\x8FV[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\tiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[a\t\x82\x82a\x03\xE8`3Ta\t}\x91\x90a\x1C\x8FV[a\x14\x93V[PPPPP\x92\x91PPV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\t\xADWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\t\xC7WP0;\x15\x80\x15a\t\xC7WP`\0T`\xFF\x16`\x01\x14[a\t\xE3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1BZV[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\n\x06W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\n\x10\x83\x83a\x10\xE7V[\x80\x15a\nVW`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\0a\nia\x02\xE7\x83a\x0B\xBFV[\x92\x91PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xE0\x91\x90a\x1C\x0FV[a\n\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1C1V[`\0\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\0\x80a\x03\xE8`3Ta\x0BN\x91\x90a\x1C\x8FV[\x90P`\0a\x03\xE8a\x0B]a\x14!V[a\x0Bg\x91\x90a\x1C\x8FV[\x90P\x81a\x0Bt\x85\x83a\x1C\xBEV[a\x0B~\x91\x90a\x1C\xDDV[\x94\x93PPPPV[`\0a\ni\x82a\x0E:V[`\0a\nia\x03\xA2\x83a\x0B\xBFV[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x1DR`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R`\0\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\ni\x91\x90a\x1C\xFFV[`\x01\x80T`\x02\x90\x81\x16\x14\x15a\x0C\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x10V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\r\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x10V[a\r*\x84\x84\x84a\x14\xDFV[`3T\x80\x83\x11\x15a\r\xB9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\0a\r\xC7a\x03\xE8\x83a\x1C\x8FV[\x90P`\0a\x03\xE8a\r\xD6a\x14!V[a\r\xE0\x91\x90a\x1C\x8FV[\x90P`\0\x82a\r\xEF\x87\x84a\x1C\xBEV[a\r\xF9\x91\x90a\x1C\xDDV[\x90Pa\x0E\x05\x86\x85a\x1C\xA7V[`3Ua\x0E%a\x0E\x15\x82\x84a\x1C\xA7V[a\x03\xE8`3Ta\t}\x91\x90a\x1C\x8FV[a\x0E0\x88\x88\x83a\x15bV[PPPPPPPPV[`\0\x80a\x03\xE8`3Ta\x0EM\x91\x90a\x1C\x8FV[\x90P`\0a\x03\xE8a\x0E\\a\x14!V[a\x0Ef\x91\x90a\x1C\x8FV[\x90P\x80a\x0Bt\x83\x86a\x1C\xBEV[`\0a\ni\x82a\x0B;V[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xD1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xF5\x91\x90a\x1B\xA8V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x0F%W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x90a\x1B\xC5V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\x0F\xA3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x07>V[`dT`@\x80Q\x91\x82R` \x82\x01\x84\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x91\x01`@Q\x80\x91\x03\x90\xA1`eT`@\x80Q\x91\x82R` \x82\x01\x83\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1\x80\x82\x11\x15a\x10\xDCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`K`$\x82\x01R\x7FStrategyBaseTVLLimits._setTVLLim`D\x82\x01R\x7Fits: maxPerDeposit exceeds maxTo`d\x82\x01RjtalDeposits`\xA8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`d\x91\x90\x91U`eUV[`\0Ta\x01\0\x90\x04`\xFF\x16a\x11RW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x11x\x81`\0a\x15vV[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xEDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x11\x91\x90a\x1D\x18V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\0T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\0\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`dT\x81\x11\x15a\x13\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`eTa\x13\xB4a\x14!V[\x11\x15a\x14\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[a\x06\x01\x82\x82a\x16bV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14jW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\x8E\x91\x90a\x1C\xFFV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x14\xC7\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x1C\xBEV[a\x14\xD1\x91\x90a\x1C\xDDV[`@Q\x90\x81R` \x01a\x12.V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\nVW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x10V[a\nV`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x16\xDEV[`\0Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x15\x9DWP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x16\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x10V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x06\x01\x82a\x12:V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x06\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\nV\x92\x86\x92\x91`\0\x91a\x17n\x91\x85\x16\x90\x84\x90a\x17\xEBV[\x80Q\x90\x91P\x15a\nVW\x80\x80` \x01\x90Q\x81\x01\x90a\x17\x8C\x91\x90a\x1C\x0FV[a\nVW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[``a\x17\xFA\x84\x84`\0\x85a\x18\x04V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x18eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x04\x10V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x18\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x04\x10V[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x18\xD8\x91\x90a\x1D5V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x19\x15W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x19\x1AV[``\x91P[P\x91P\x91Pa\x19*\x82\x82\x86a\x195V[\x97\x96PPPPPPPV[``\x83\x15a\x19DWP\x81a\x17\xFDV[\x82Q\x15a\x19TW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x10\x91\x90a\x1A\xE6V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05MW`\0\x80\xFD[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x19\x99W`\0\x80\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x19\xB2\x81a\x19nV[\x91P``\x85\x015a\x19\xC2\x81a\x19nV[\x93\x96\x92\x95P\x90\x93PPV[`\0` \x82\x84\x03\x12\x15a\x19\xDFW`\0\x80\xFD[\x815a\x17\xFD\x81a\x19nV[`\0\x80`@\x83\x85\x03\x12\x15a\x19\xFDW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x1A\x1EW`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x1A8W`\0\x80\xFD[\x825a\x1AC\x81a\x19nV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x1AdW`\0\x80\xFD[\x825a\x1Ao\x81a\x19nV[\x91P` \x83\x015a\x1A\x7F\x81a\x19nV[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x05MW`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x1A\xABW`\0\x80\xFD[\x815a\x17\xFD\x81a\x1A\x8AV[`\0[\x83\x81\x10\x15a\x1A\xD1W\x81\x81\x01Q\x83\x82\x01R` \x01a\x1A\xB9V[\x83\x81\x11\x15a\x1A\xE0W`\0\x84\x84\x01R[PPPPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x1B\x05\x81`@\x85\x01` \x87\x01a\x1A\xB6V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1B.W`\0\x80\xFD[\x835a\x1B9\x81a\x19nV[\x92P` \x84\x015a\x1BI\x81a\x19nV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[` \x80\x82R`.\x90\x82\x01R\x7FInitializable: contract is alrea`@\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x1B\xBAW`\0\x80\xFD[\x81Qa\x17\xFD\x81a\x19nV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x1C!W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x17\xFDW`\0\x80\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\x1C\xA2Wa\x1C\xA2a\x1CyV[P\x01\x90V[`\0\x82\x82\x10\x15a\x1C\xB9Wa\x1C\xB9a\x1CyV[P\x03\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15a\x1C\xD8Wa\x1C\xD8a\x1CyV[P\x02\x90V[`\0\x82a\x1C\xFAWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0` \x82\x84\x03\x12\x15a\x1D\x11W`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x1D*W`\0\x80\xFD[\x81Qa\x17\xFD\x81a\x1A\x8AV[`\0\x82Qa\x1DG\x81\x84` \x87\x01a\x1A\xB6V[\x91\x90\x91\x01\x92\x91PPV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 \xAE\x19\x1Ahk CPb\xF1@'\xAD\xBC\xD9;\xCE\x8B\xA8\xDA\xB6\x89m\x1D\x89;Tx\xC9\xD9\x19\x7FdsolcC\0\x08\x0C\x003`\x80`@R`@Qb\0\x0E\x818\x03\x80b\0\x0E\x81\x839\x81\x01`@\x81\x90Rb\0\0&\x91b\0\x04\x90V[\x82\x81b\0\x006\x82\x82`\0b\0\0MV[Pb\0\0D\x90P\x82b\0\0\x8AV[PPPb\0\x05\xC3V[b\0\0X\x83b\0\0\xE5V[`\0\x82Q\x11\x80b\0\0fWP\x80[\x15b\0\0\x85Wb\0\0\x83\x83\x83b\0\x01'` \x1Bb\0\x02`\x17` \x1CV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fb\0\0\xB5b\0\x01VV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1b\0\0\xE2\x81b\0\x01\x8FV[PV[b\0\0\xF0\x81b\0\x02DV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``b\0\x01O\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01b\0\x0EZ`'\x919b\0\x02\xF8V[\x93\x92PPPV[`\0b\0\x01\x80`\0\x80Q` b\0\x0E:\x839\x81Q\x91R`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16b\0\x01\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80b\0\x02#`\0\x80Q` b\0\x0E:\x839\x81Q\x91R`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[b\0\x02Z\x81b\0\x03\xE1` \x1Bb\0\x02\x8C\x17` \x1CV[b\0\x02\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01b\0\x01\xF1V[\x80b\0\x02#\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC`\0\x1Bb\0\x03\xDE` \x1Bb\0\x02\x08\x17` \x1CV[```\x01`\x01`\xA0\x1B\x03\x84\x16;b\0\x03bW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01b\0\x01\xF1V[`\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qb\0\x03\x7F\x91\x90b\0\x05pV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14b\0\x03\xBCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>b\0\x03\xC1V[``\x91P[P\x90\x92P\x90Pb\0\x03\xD4\x82\x82\x86b\0\x03\xF0V[\x96\x95PPPPPPV[\x90V[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[``\x83\x15b\0\x04\x01WP\x81b\0\x01OV[\x82Q\x15b\0\x04\x12W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01b\0\x01\xF1\x91\x90b\0\x05\x8EV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x04FW`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15b\0\x04~W\x81\x81\x01Q\x83\x82\x01R` \x01b\0\x04dV[\x83\x81\x11\x15b\0\0\x83WPP`\0\x91\x01RV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x04\xA6W`\0\x80\xFD[b\0\x04\xB1\x84b\0\x04.V[\x92Pb\0\x04\xC1` \x85\x01b\0\x04.V[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x04\xDFW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12b\0\x04\xF4W`\0\x80\xFD[\x81Q\x81\x81\x11\x15b\0\x05\tWb\0\x05\tb\0\x04KV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15b\0\x054Wb\0\x054b\0\x04KV[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15b\0\x05NW`\0\x80\xFD[b\0\x05a\x83` \x83\x01` \x88\x01b\0\x04aV[\x80\x95PPPPPP\x92P\x92P\x92V[`\0\x82Qb\0\x05\x84\x81\x84` \x87\x01b\0\x04aV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Rb\0\x05\xAF\x81`@\x85\x01` \x87\x01b\0\x04aV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[a\x08g\x80b\0\x05\xD3`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0NW`\x005`\xE0\x1C\x80c6Y\xCF\xE6\x14a\0eW\x80cO\x1E\xF2\x86\x14a\0\x85W\x80c\\`\xDA\x1B\x14a\0\x98W\x80c\x8F(9p\x14a\0\xC9W\x80c\xF8Q\xA4@\x14a\0\xE9Wa\0]V[6a\0]Wa\0[a\0\xFEV[\0[a\0[a\0\xFEV[4\x80\x15a\0qW`\0\x80\xFD[Pa\0[a\0\x806`\x04a\x06\xF1V[a\x01\x18V[a\0[a\0\x936`\x04a\x07\x0CV[a\x01_V[4\x80\x15a\0\xA4W`\0\x80\xFD[Pa\0\xADa\x01\xD0V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xD5W`\0\x80\xFD[Pa\0[a\0\xE46`\x04a\x06\xF1V[a\x02\x0BV[4\x80\x15a\0\xF5W`\0\x80\xFD[Pa\0\xADa\x025V[a\x01\x06a\x02\x9BV[a\x01\x16a\x01\x11a\x03:V[a\x03DV[V[a\x01 a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01WWa\x01T\x81`@Q\x80` \x01`@R\x80`\0\x81RP`\0a\x03\x9BV[PV[a\x01Ta\0\xFEV[a\x01ga\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01\xC8Wa\x01\xC3\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RP`\x01\x92Pa\x03\x9B\x91PPV[PPPV[a\x01\xC3a\0\xFEV[`\0a\x01\xDAa\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\0Wa\x01\xFBa\x03:V[\x90P\x90V[a\x02\x08a\0\xFEV[\x90V[a\x02\x13a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01WWa\x01T\x81a\x03\xC6V[`\0a\x02?a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\0Wa\x01\xFBa\x03hV[``a\x02\x85\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x08\x0B`'\x919a\x04\x1AV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[a\x02\xA3a\x03hV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x01\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01Ra\x19]`\xF2\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xFBa\x04\xF7V[6`\0\x807`\0\x806`\0\x84Z\xF4=`\0\x80>\x80\x80\x15a\x03cW=`\0\xF3[=`\0\xFD[`\0\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[a\x03\xA4\x83a\x05\x1FV[`\0\x82Q\x11\x80a\x03\xB1WP\x80[\x15a\x01\xC3Wa\x03\xC0\x83\x83a\x02`V[PPPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03\xEFa\x03hV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x01T\x81a\x05_V[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x04\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01a\x031V[`\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x04\x9D\x91\x90a\x07\xBBV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x04\xD8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\xDDV[``\x91P[P\x91P\x91Pa\x04\xED\x82\x82\x86a\x06\x08V[\x96\x95PPPPPPV[`\0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x03\x8CV[a\x05(\x81a\x06AV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x05\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x031V[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[``\x83\x15a\x06\x17WP\x81a\x02\x85V[\x82Q\x15a\x06'W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x031\x91\x90a\x07\xD7V[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x06\xAEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x031V[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x05\xE7V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\xECW`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x07\x03W`\0\x80\xFD[a\x02\x85\x82a\x06\xD5V[`\0\x80`\0`@\x84\x86\x03\x12\x15a\x07!W`\0\x80\xFD[a\x07*\x84a\x06\xD5V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x07GW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x07[W`\0\x80\xFD[\x815\x81\x81\x11\x15a\x07jW`\0\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x07|W`\0\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x07\xAAW\x81\x81\x01Q\x83\x82\x01R` \x01a\x07\x92V[\x83\x81\x11\x15a\x03\xC0WPP`\0\x91\x01RV[`\0\x82Qa\x07\xCD\x81\x84` \x87\x01a\x07\x8FV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x07\xF6\x81`@\x85\x01` \x87\x01a\x07\x8FV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 ,\xE8{^H\x8E@\xB8X\xAB\xD0Z\x92\xFE\xCC\xB5\x03W\xE5\xCE\x08n<\xCB\xADvM\x9Cy\xD0\xE9\xB7dsolcC\0\x08\x0C\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x0Et8\x03\x80b\0\x0Et\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x02\xA5V[`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FERC20_SetTransferReverting_Mock\0\x81RP`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FERC20_SetTransferReverting_Mock\0\x81RP\x83\x83\x83\x83\x81`\x03\x90\x80Q\x90` \x01\x90b\0\0\xBC\x92\x91\x90b\0\x01\xFFV[P\x80Qb\0\0\xD2\x90`\x04\x90` \x84\x01\x90b\0\x01\xFFV[PPPb\0\0\xE7\x81\x83b\0\0\xF3` \x1B` \x1CV[PPPPPPb\0\x03HV[`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\x01NW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[b\0\x01\\`\0\x83\x83b\0\x01\xE9V[\x80`\x02`\0\x82\x82Tb\0\x01p\x91\x90b\0\x02\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90b\0\x01\x9F\x90\x84\x90b\0\x02\xE4V[\x90\x91UPP`@Q\x81\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90`\0\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[`\x05T`\xFF\x16\x15b\0\x01\xFAW`\0\x80\xFD[PPPV[\x82\x80Tb\0\x02\r\x90b\0\x03\x0BV[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82b\0\x021W`\0\x85Ub\0\x02|V[\x82`\x1F\x10b\0\x02LW\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ub\0\x02|V[\x82\x80\x01`\x01\x01\x85U\x82\x15b\0\x02|W\x91\x82\x01[\x82\x81\x11\x15b\0\x02|W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90b\0\x02_V[Pb\0\x02\x8A\x92\x91Pb\0\x02\x8EV[P\x90V[[\x80\x82\x11\x15b\0\x02\x8AW`\0\x81U`\x01\x01b\0\x02\x8FV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x02\xB9W`\0\x80\xFD[\x82Q` \x84\x01Q\x90\x92P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x02\xD9W`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0\x82\x19\x82\x11\x15b\0\x03\x06WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P\x01\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x03 W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x03BWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[a\x0B\x1C\x80b\0\x03X`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xF5W`\x005`\xE0\x1C\x80cp\xA0\x821\x11a\0\x97W\x80c\xA1\x90^$\x11a\0fW\x80c\xA1\x90^$\x14a\x01\xFCW\x80c\xA4W\xC2\xD7\x14a\x02\tW\x80c\xA9\x05\x9C\xBB\x14a\x02\x1CW\x80c\xDDb\xED>\x14a\x02/W`\0\x80\xFD[\x80cp\xA0\x821\x14a\x01\x97W\x80cy\xCCg\x90\x14a\x01\xC0W\x80c\x86s\xA7B\x14a\x01\xD3W\x80c\x95\xD8\x9BA\x14a\x01\xF4W`\0\x80\xFD[\x80c#\xB8r\xDD\x11a\0\xD3W\x80c#\xB8r\xDD\x14a\x01MW\x80c1<\xE5g\x14a\x01`W\x80c9P\x93Q\x14a\x01oW\x80cB\x96lh\x14a\x01\x82W`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xFAW\x80c\t^\xA7\xB3\x14a\x01\x18W\x80c\x18\x16\r\xDD\x14a\x01;W[`\0\x80\xFD[a\x01\x02a\x02BV[`@Qa\x01\x0F\x91\x90a\x08\xFFV[`@Q\x80\x91\x03\x90\xF3[a\x01+a\x01&6`\x04a\tpV[a\x02\xD4V[`@Q\x90\x15\x15\x81R` \x01a\x01\x0FV[`\x02T[`@Q\x90\x81R` \x01a\x01\x0FV[a\x01+a\x01[6`\x04a\t\x9AV[a\x02\xECV[`@Q`\x12\x81R` \x01a\x01\x0FV[a\x01+a\x01}6`\x04a\tpV[a\x03\x10V[a\x01\x95a\x01\x906`\x04a\t\xD6V[a\x032V[\0[a\x01?a\x01\xA56`\x04a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01\x95a\x01\xCE6`\x04a\tpV[a\x03?V[a\x01\x95a\x01\xE16`\x04a\n\x11V[`\x05\x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x01\x02a\x03XV[`\x05Ta\x01+\x90`\xFF\x16\x81V[a\x01+a\x02\x176`\x04a\tpV[a\x03gV[a\x01+a\x02*6`\x04a\tpV[a\x03\xE7V[a\x01?a\x02=6`\x04a\n3V[a\x03\xF5V[```\x03\x80Ta\x02Q\x90a\nfV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02}\x90a\nfV[\x80\x15a\x02\xCAW\x80`\x1F\x10a\x02\x9FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xCAV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xADW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\xE2\x81\x85\x85a\x04 V[P`\x01\x93\x92PPPV[`\x003a\x02\xFA\x85\x82\x85a\x05EV[a\x03\x05\x85\x85\x85a\x05\xBFV[P`\x01\x94\x93PPPPV[`\x003a\x02\xE2\x81\x85\x85a\x03#\x83\x83a\x03\xF5V[a\x03-\x91\x90a\n\xB7V[a\x04 V[a\x03<3\x82a\x07\x98V[PV[a\x03J\x823\x83a\x05EV[a\x03T\x82\x82a\x07\x98V[PPV[```\x04\x80Ta\x02Q\x90a\nfV[`\x003\x81a\x03u\x82\x86a\x03\xF5V[\x90P\x83\x81\x10\x15a\x03\xDAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\x05\x82\x86\x86\x84\x03a\x04 V[`\x003a\x02\xE2\x81\x85\x85a\x05\xBFV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\xE3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x05Q\x84\x84a\x03\xF5V[\x90P`\0\x19\x81\x14a\x05\xB9W\x81\x81\x10\x15a\x05\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03\xD1V[a\x05\xB9\x84\x84\x84\x84\x03a\x04 V[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x06#W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x06\x85W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[a\x06\x90\x83\x83\x83a\x08\xEFV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x07\x08W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R` \x81\x90R`@\x80\x82 \x85\x85\x03\x90U\x91\x85\x16\x81R\x90\x81 \x80T\x84\x92\x90a\x07?\x90\x84\x90a\n\xB7V[\x92PP\x81\x90UP\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x84`@Qa\x07\x8B\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3a\x05\xB9V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[a\x08\x04\x82`\0\x83a\x08\xEFV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x08xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\xD1V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x81 \x83\x83\x03\x90U`\x02\x80T\x84\x92\x90a\x08\xA7\x90\x84\x90a\n\xCFV[\x90\x91UPP`@Q\x82\x81R`\0\x90`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01a\x058V[PPPV[`\x05T`\xFF\x16\x15a\x08\xEAW`\0\x80\xFD[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\t,W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\t\x10V[\x81\x81\x11\x15a\t>W`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\tkW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\t\x83W`\0\x80\xFD[a\t\x8C\x83a\tTV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t\xAFW`\0\x80\xFD[a\t\xB8\x84a\tTV[\x92Pa\t\xC6` \x85\x01a\tTV[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\t\xE8W`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\n\x01W`\0\x80\xFD[a\n\n\x82a\tTV[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\n#W`\0\x80\xFD[\x815\x80\x15\x15\x81\x14a\n\nW`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\nFW`\0\x80\xFD[a\nO\x83a\tTV[\x91Pa\n]` \x84\x01a\tTV[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\nzW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\n\x9BWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\n\xCAWa\n\xCAa\n\xA1V[P\x01\x90V[`\0\x82\x82\x10\x15a\n\xE1Wa\n\xE1a\n\xA1V[P\x03\x90V\xFE\xA2dipfsX\"\x12 \xBEp\xB4un\xDB\xCA\x8B\xE3\x91\x81\x84\x04xJ\x027\xC2\xEAz\x0B\tf\xA2x\x15\xC6r\x997~&dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x0E`8\x03\x80b\0\x0E`\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x02\xDDV[\x83Q\x84\x90\x84\x90b\0\0M\x90`\x03\x90` \x85\x01\x90b\0\x01jV[P\x80Qb\0\0c\x90`\x04\x90` \x84\x01\x90b\0\x01jV[PPPb\0\0x\x81\x83b\0\0\x82` \x1B` \x1CV[PPPPb\0\x03\xD6V[`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\0\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x02`\0\x82\x82Tb\0\0\xF1\x91\x90b\0\x03rV[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90b\0\x01 \x90\x84\x90b\0\x03rV[\x90\x91UPP`@Q\x81\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90`\0\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[\x82\x80Tb\0\x01x\x90b\0\x03\x99V[\x90`\0R` `\0 \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82b\0\x01\x9CW`\0\x85Ub\0\x01\xE7V[\x82`\x1F\x10b\0\x01\xB7W\x80Q`\xFF\x19\x16\x83\x80\x01\x17\x85Ub\0\x01\xE7V[\x82\x80\x01`\x01\x01\x85U\x82\x15b\0\x01\xE7W\x91\x82\x01[\x82\x81\x11\x15b\0\x01\xE7W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90b\0\x01\xCAV[Pb\0\x01\xF5\x92\x91Pb\0\x01\xF9V[P\x90V[[\x80\x82\x11\x15b\0\x01\xF5W`\0\x81U`\x01\x01b\0\x01\xFAV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12b\0\x028W`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x02UWb\0\x02Ub\0\x02\x10V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15b\0\x02\x80Wb\0\x02\x80b\0\x02\x10V[\x81`@R\x83\x81R` \x92P\x86\x83\x85\x88\x01\x01\x11\x15b\0\x02\x9DW`\0\x80\xFD[`\0\x91P[\x83\x82\x10\x15b\0\x02\xC1W\x85\x82\x01\x83\x01Q\x81\x83\x01\x84\x01R\x90\x82\x01\x90b\0\x02\xA2V[\x83\x82\x11\x15b\0\x02\xD3W`\0\x83\x85\x83\x01\x01R[\x96\x95PPPPPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15b\0\x02\xF4W`\0\x80\xFD[\x84Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x03\x0CW`\0\x80\xFD[b\0\x03\x1A\x88\x83\x89\x01b\0\x02&V[\x95P` \x87\x01Q\x91P\x80\x82\x11\x15b\0\x031W`\0\x80\xFD[Pb\0\x03@\x87\x82\x88\x01b\0\x02&V[`@\x87\x01Q``\x88\x01Q\x91\x95P\x93P\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x03gW`\0\x80\xFD[\x93\x96\x92\x95P\x90\x93PPV[`\0\x82\x19\x82\x11\x15b\0\x03\x94WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P\x01\x90V[`\x01\x81\x81\x1C\x90\x82\x16\x80b\0\x03\xAEW`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15b\0\x03\xD0WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[a\nz\x80b\0\x03\xE6`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80cB\x96lh\x11a\0\x8CW\x80c\x95\xD8\x9BA\x11a\0fW\x80c\x95\xD8\x9BA\x14a\x01\xADW\x80c\xA4W\xC2\xD7\x14a\x01\xB5W\x80c\xA9\x05\x9C\xBB\x14a\x01\xC8W\x80c\xDDb\xED>\x14a\x01\xDBW`\0\x80\xFD[\x80cB\x96lh\x14a\x01\\W\x80cp\xA0\x821\x14a\x01qW\x80cy\xCCg\x90\x14a\x01\x9AW`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xD4W\x80c\t^\xA7\xB3\x14a\0\xF2W\x80c\x18\x16\r\xDD\x14a\x01\x15W\x80c#\xB8r\xDD\x14a\x01'W\x80c1<\xE5g\x14a\x01:W\x80c9P\x93Q\x14a\x01IW[`\0\x80\xFD[a\0\xDCa\x01\xEEV[`@Qa\0\xE9\x91\x90a\x08\x7FV[`@Q\x80\x91\x03\x90\xF3[a\x01\x05a\x01\x006`\x04a\x08\xF0V[a\x02\x80V[`@Q\x90\x15\x15\x81R` \x01a\0\xE9V[`\x02T[`@Q\x90\x81R` \x01a\0\xE9V[a\x01\x05a\x0156`\x04a\t\x1AV[a\x02\x98V[`@Q`\x12\x81R` \x01a\0\xE9V[a\x01\x05a\x01W6`\x04a\x08\xF0V[a\x02\xBCV[a\x01oa\x01j6`\x04a\tVV[a\x02\xDEV[\0[a\x01\x19a\x01\x7F6`\x04a\toV[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01oa\x01\xA86`\x04a\x08\xF0V[a\x02\xEBV[a\0\xDCa\x03\x04V[a\x01\x05a\x01\xC36`\x04a\x08\xF0V[a\x03\x13V[a\x01\x05a\x01\xD66`\x04a\x08\xF0V[a\x03\x93V[a\x01\x19a\x01\xE96`\x04a\t\x91V[a\x03\xA1V[```\x03\x80Ta\x01\xFD\x90a\t\xC4V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02)\x90a\t\xC4V[\x80\x15a\x02vW\x80`\x1F\x10a\x02KWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02vV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02YW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\x8E\x81\x85\x85a\x03\xCCV[P`\x01\x93\x92PPPV[`\x003a\x02\xA6\x85\x82\x85a\x04\xF1V[a\x02\xB1\x85\x85\x85a\x05kV[P`\x01\x94\x93PPPPV[`\x003a\x02\x8E\x81\x85\x85a\x02\xCF\x83\x83a\x03\xA1V[a\x02\xD9\x91\x90a\n\x15V[a\x03\xCCV[a\x02\xE83\x82a\x079V[PV[a\x02\xF6\x823\x83a\x04\xF1V[a\x03\0\x82\x82a\x079V[PPV[```\x04\x80Ta\x01\xFD\x90a\t\xC4V[`\x003\x81a\x03!\x82\x86a\x03\xA1V[\x90P\x83\x81\x10\x15a\x03\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xB1\x82\x86\x86\x84\x03a\x03\xCCV[`\x003a\x02\x8E\x81\x85\x85a\x05kV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04.W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x04\xFD\x84\x84a\x03\xA1V[\x90P`\0\x19\x81\x14a\x05eW\x81\x81\x10\x15a\x05XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03}V[a\x05e\x84\x84\x84\x84\x03a\x03\xCCV[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x05\xCFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x061W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x06\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R` \x81\x90R`@\x80\x82 \x85\x85\x03\x90U\x91\x85\x16\x81R\x90\x81 \x80T\x84\x92\x90a\x06\xE0\x90\x84\x90a\n\x15V[\x92PP\x81\x90UP\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x84`@Qa\x07,\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3a\x05eV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x08\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03}V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x81 \x83\x83\x03\x90U`\x02\x80T\x84\x92\x90a\x08<\x90\x84\x90a\n-V[\x90\x91UPP`@Q\x82\x81R`\0\x90`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90` \x01a\x04\xE4V[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x08\xACW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x08\x90V[\x81\x81\x11\x15a\x08\xBEW`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xEBW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\t\x03W`\0\x80\xFD[a\t\x0C\x83a\x08\xD4V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t/W`\0\x80\xFD[a\t8\x84a\x08\xD4V[\x92Pa\tF` \x85\x01a\x08\xD4V[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\thW`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t\x81W`\0\x80\xFD[a\t\x8A\x82a\x08\xD4V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\t\xA4W`\0\x80\xFD[a\t\xAD\x83a\x08\xD4V[\x91Pa\t\xBB` \x84\x01a\x08\xD4V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\t\xD8W`\x7F\x82\x16\x91P[` \x82\x10\x81\x14\x15a\t\xF9WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\n(Wa\n(a\t\xFFV[P\x01\x90V[`\0\x82\x82\x10\x15a\n?Wa\n?a\t\xFFV[P\x03\x90V\xFE\xA2dipfsX\"\x12 3\xD8\xDCF\x94yj!\xB3/\xD8\x96\xB1\xAC\x92F\x15\xFA\"C+\xC6\xD5l\x1A18_OgjkdsolcC\0\x08\x0C\x003`\xA0`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x1A\xB48\x03\x80b\0\x1A\xB4\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x01\x14V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80Rb\0\0Kb\0\0RV[Pb\0\x01FV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15b\0\0\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[`\0T`\xFF\x90\x81\x16\x10\x15b\0\x01\x12W`\0\x80T`\xFF\x19\x16`\xFF\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[V[`\0` \x82\x84\x03\x12\x15b\0\x01'W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01?W`\0\x80\xFD[\x93\x92PPPV[`\x80Qa\x19=b\0\x01w`\09`\0\x81\x81a\x01\x99\x01R\x81\x81a\x05p\x01R\x81\x81a\t\xF5\x01Ra\n\xC0\x01Ra\x19=`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x017W`\x005`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xB8W\x80c\xABY!\xE1\x11a\0|W\x80c\xABY!\xE1\x14a\x02\x9CW\x80c\xCE|*\xC2\x14a\x02\xB1W\x80c\xD9\xCA\xED\x12\x14a\x02\xC4W\x80c\xE3\xDA\xE5\x1C\x14a\x02\xD7W\x80c\xF3\xE78u\x14a\x02\xEAW\x80c\xFA\xBC\x1C\xBC\x14a\x02\xFDW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x02BW\x80cz\x8B&7\x14a\x02JW\x80c\x88o\x11\x95\x14a\x02]W\x80c\x8C\x87\x10\x19\x14a\x02vW\x80c\x8Fjb@\x14a\x02\x89W`\0\x80\xFD[\x80cG\xE7\xEF$\x11a\0\xFFW\x80cG\xE7\xEF$\x14a\x01\xD2W\x80cH\\\xC9U\x14a\x01\xE5W\x80cU<\xA5\xF8\x14a\x01\xF8W\x80cY\\jg\x14a\x02\x0BW\x80cZ\xC8j\xB7\x14a\x02\x13W`\0\x80\xFD[\x80c\x10\xD6z/\x14a\x01<W\x80c\x13d9\xDD\x14a\x01QW\x80c$\x95\xA5\x99\x14a\x01dW\x80c9\xB7\x0E8\x14a\x01\x94W\x80c:\x98\xEF9\x14a\x01\xBBW[`\0\x80\xFD[a\x01Oa\x01J6`\x04a\x15\xA6V[a\x03\x10V[\0[a\x01Oa\x01_6`\x04a\x15\xC3V[a\x03\xCCV[`2Ta\x01w\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01\xC4`3T\x81V[`@Q\x90\x81R` \x01a\x01\x8BV[a\x01\xC4a\x01\xE06`\x04a\x15\xDCV[a\x05\x10V[a\x01Oa\x01\xF36`\x04a\x16\x08V[a\x07TV[a\x01\xC4a\x02\x066`\x04a\x15\xA6V[a\x08iV[a\x01Oa\x08}V[a\x022a\x02!6`\x04a\x16PV[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x01\x8BV[`\x01Ta\x01\xC4V[a\x01\xC4a\x02X6`\x04a\x15\xC3V[a\tIV[`\0Ta\x01w\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\xC4a\x02\x846`\x04a\x15\xC3V[a\t\x94V[a\x01\xC4a\x02\x976`\x04a\x15\xA6V[a\t\x9FV[a\x02\xA4a\t\xADV[`@Qa\x01\x8B\x91\x90a\x16\x9DV[a\x01\xC4a\x02\xBF6`\x04a\x15\xA6V[a\t\xCDV[a\x01Oa\x02\xD26`\x04a\x16\xD0V[a\nbV[a\x01\xC4a\x02\xE56`\x04a\x15\xC3V[a\x0CHV[a\x01\xC4a\x02\xF86`\x04a\x15\xC3V[a\x0C\x81V[a\x01Oa\x03\x0B6`\x04a\x15\xC3V[a\x0C\x8CV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03cW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\x87\x91\x90a\x17\x11V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17.V[`@Q\x80\x91\x03\x90\xFD[a\x03\xC9\x81a\r\xE8V[PV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x19W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04=\x91\x90a\x17xV[a\x04YW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17\x9AV[`\x01T\x81\x81\x16\x14a\x04\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T`\0\x91\x82\x91\x81\x16\x14\x15a\x05eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x03\xB7V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x05\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x03\xB7V[a\x05\xE7\x84\x84a\x0E\xEDV[`3T`\0a\x05\xF8a\x03\xE8\x83a\x17\xF8V[\x90P`\0a\x03\xE8a\x06\x07a\x0FmV[a\x06\x11\x91\x90a\x17\xF8V[\x90P`\0a\x06\x1F\x87\x83a\x18\x10V[\x90P\x80a\x06,\x84\x89a\x18'V[a\x066\x91\x90a\x18FV[\x95P\x85a\x06\x9CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[a\x06\xA6\x86\x85a\x17\xF8V[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\x070W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[a\x07I\x82a\x03\xE8`3Ta\x07D\x91\x90a\x17\xF8V[a\x0F\xDFV[PPPPP\x92\x91PPV[`\0Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x07tWP`\0T`\x01`\xFF\x90\x91\x16\x10[\x80a\x07\x8EWP0;\x15\x80\x15a\x07\x8EWP`\0T`\xFF\x16`\x01\x14[a\x07\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`\0\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x08\x14W`\0\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x08\x1E\x83\x83a\x103V[\x80\x15a\x08dW`\0\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\0a\x08wa\x02X\x83a\t\xCDV[\x92\x91PPV[`\0T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\xCAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xEE\x91\x90a\x17xV[a\t\nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17\x9AV[`\0\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\0\x80a\x03\xE8`3Ta\t\\\x91\x90a\x17\xF8V[\x90P`\0a\x03\xE8a\tka\x0FmV[a\tu\x91\x90a\x17\xF8V[\x90P\x81a\t\x82\x85\x83a\x18'V[a\t\x8C\x91\x90a\x18FV[\x94\x93PPPPV[`\0a\x08w\x82a\x0CHV[`\0a\x08wa\x02\xF8\x83a\t\xCDV[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x18\xBB`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R`\0\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n>W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08w\x91\x90a\x18hV[`\x01\x80T`\x02\x90\x81\x16\x14\x15a\n\xB5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x03\xB7V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x0B-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x03\xB7V[a\x0B8\x84\x84\x84a\x11~V[`3T\x80\x83\x11\x15a\x0B\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\0a\x0B\xD5a\x03\xE8\x83a\x17\xF8V[\x90P`\0a\x03\xE8a\x0B\xE4a\x0FmV[a\x0B\xEE\x91\x90a\x17\xF8V[\x90P`\0\x82a\x0B\xFD\x87\x84a\x18'V[a\x0C\x07\x91\x90a\x18FV[\x90Pa\x0C\x13\x86\x85a\x18\x10V[`3Ua\x0C3a\x0C#\x82\x84a\x18\x10V[a\x03\xE8`3Ta\x07D\x91\x90a\x17\xF8V[a\x0C>\x88\x88\x83a\x12\x01V[PPPPPPPPV[`\0\x80a\x03\xE8`3Ta\x0C[\x91\x90a\x17\xF8V[\x90P`\0a\x03\xE8a\x0Cja\x0FmV[a\x0Ct\x91\x90a\x17\xF8V[\x90P\x80a\t\x82\x83\x86a\x18'V[`\0a\x08w\x82a\tIV[`\0`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\xDFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x03\x91\x90a\x17\x11V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\r3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x90a\x17.V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\r\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x05\x05V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0EvW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\0T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\0\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x0FiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[PPV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xB6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xDA\x91\x90a\x18hV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x10\x13\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x18'V[a\x10\x1D\x91\x90a\x18FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xA1PPV[`\0Ta\x01\0\x90\x04`\xFF\x16a\x10\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x10\xC4\x81`\0a\x12\x15V[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x119W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11]\x91\x90a\x18\x81V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01a\x10'V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x08dW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\xB7V[a\x08d`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x13\x01V[`\0Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x12<WP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x12\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x03\xB7V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x0Fi\x82a\r\xE8V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\x08d\x92\x86\x92\x91`\0\x91a\x13\x91\x91\x85\x16\x90\x84\x90a\x14\x0EV[\x80Q\x90\x91P\x15a\x08dW\x80\x80` \x01\x90Q\x81\x01\x90a\x13\xAF\x91\x90a\x17xV[a\x08dW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[``a\x14\x1D\x84\x84`\0\x85a\x14'V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x14\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x03\xB7V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x14\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x03\xB7V[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x14\xFB\x91\x90a\x18\x9EV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x158W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x15=V[``\x91P[P\x91P\x91Pa\x15M\x82\x82\x86a\x15XV[\x97\x96PPPPPPPV[``\x83\x15a\x15gWP\x81a\x14 V[\x82Q\x15a\x15wW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xB7\x91\x90a\x16\x9DV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xC9W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x15\xB8W`\0\x80\xFD[\x815a\x14 \x81a\x15\x91V[`\0` \x82\x84\x03\x12\x15a\x15\xD5W`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x15\xEFW`\0\x80\xFD[\x825a\x15\xFA\x81a\x15\x91V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x16\x1BW`\0\x80\xFD[\x825a\x16&\x81a\x15\x91V[\x91P` \x83\x015a\x166\x81a\x15\x91V[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x03\xC9W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x16bW`\0\x80\xFD[\x815a\x14 \x81a\x16AV[`\0[\x83\x81\x10\x15a\x16\x88W\x81\x81\x01Q\x83\x82\x01R` \x01a\x16pV[\x83\x81\x11\x15a\x16\x97W`\0\x84\x84\x01R[PPPPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x16\xBC\x81`@\x85\x01` \x87\x01a\x16mV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x16\xE5W`\0\x80\xFD[\x835a\x16\xF0\x81a\x15\x91V[\x92P` \x84\x015a\x17\0\x81a\x15\x91V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`\0` \x82\x84\x03\x12\x15a\x17#W`\0\x80\xFD[\x81Qa\x14 \x81a\x15\x91V[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x17\x8AW`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x14 W`\0\x80\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82\x19\x82\x11\x15a\x18\x0BWa\x18\x0Ba\x17\xE2V[P\x01\x90V[`\0\x82\x82\x10\x15a\x18\"Wa\x18\"a\x17\xE2V[P\x03\x90V[`\0\x81`\0\x19\x04\x83\x11\x82\x15\x15\x16\x15a\x18AWa\x18Aa\x17\xE2V[P\x02\x90V[`\0\x82a\x18cWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x04\x90V[`\0` \x82\x84\x03\x12\x15a\x18zW`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x18\x93W`\0\x80\xFD[\x81Qa\x14 \x81a\x16AV[`\0\x82Qa\x18\xB0\x81\x84` \x87\x01a\x16mV[\x91\x90\x91\x01\x92\x91PPV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 <\x18\x95\x94\xF4\xA1nR\xE7\xD9B\xA1D\xA6:;\xDF\xBA\xEAW\x8D\xC8\x10s`\xA1\xA2\xAB@a\xF6_dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\0\x1A3a\0\x1FV[a\0oV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x06\x9A\x80a\0~`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0{W`\x005`\xE0\x1C\x80c\x96#`\x9D\x11a\0NW\x80c\x96#`\x9D\x14a\x01\x11W\x80c\x99\xA8\x8E\xC4\x14a\x01$W\x80c\xF2\xFD\xE3\x8B\x14a\x01DW\x80c\xF3\xB7\xDE\xAD\x14a\x01dW`\0\x80\xFD[\x80c N\x1Cz\x14a\0\x80W\x80cqP\x18\xA6\x14a\0\xBCW\x80c~\xFF'^\x14a\0\xD3W\x80c\x8D\xA5\xCB[\x14a\0\xF3W[`\0\x80\xFD[4\x80\x15a\0\x8CW`\0\x80\xFD[Pa\0\xA0a\0\x9B6`\x04a\x04\x99V[a\x01\x84V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC8W`\0\x80\xFD[Pa\0\xD1a\x02\x15V[\0[4\x80\x15a\0\xDFW`\0\x80\xFD[Pa\0\xD1a\0\xEE6`\x04a\x04\xBDV[a\x02)V[4\x80\x15a\0\xFFW`\0\x80\xFD[P`\0T`\x01`\x01`\xA0\x1B\x03\x16a\0\xA0V[a\0\xD1a\x01\x1F6`\x04a\x05\x0CV[a\x02\x91V[4\x80\x15a\x010W`\0\x80\xFD[Pa\0\xD1a\x01?6`\x04a\x04\xBDV[a\x03\0V[4\x80\x15a\x01PW`\0\x80\xFD[Pa\0\xD1a\x01_6`\x04a\x04\x99V[a\x036V[4\x80\x15a\x01pW`\0\x80\xFD[Pa\0\xA0a\x01\x7F6`\x04a\x04\x99V[a\x03\xB4V[`\0\x80`\0\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xAA\x90c\\`\xDA\x1B`\xE0\x1B\x81R`\x04\x01\x90V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\x01\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x01\xEAV[``\x91P[P\x91P\x91P\x81a\x01\xF9W`\0\x80\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02\r\x91\x90a\x05\xE2V[\x94\x93PPPPV[a\x02\x1Da\x03\xDAV[a\x02'`\0a\x044V[V[a\x021a\x03\xDAV[`@Qc\x08\xF2\x83\x97`\xE4\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c\x8F(9p\x90`$\x01[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x02uW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\x89W=`\0\x80>=`\0\xFD[PPPPPPV[a\x02\x99a\x03\xDAV[`@Qc'\x8FyC`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cO\x1E\xF2\x86\x904\x90a\x02\xC9\x90\x86\x90\x86\x90`\x04\x01a\x05\xFFV[`\0`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x02\xE2W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xF6W=`\0\x80>=`\0\xFD[PPPPPPPPV[a\x03\x08a\x03\xDAV[`@Qc\x1B,\xE7\xF3`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c6Y\xCF\xE6\x90`$\x01a\x02[V[a\x03>a\x03\xDAV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\xA8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\xB1\x81a\x044V[PV[`\0\x80`\0\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xAA\x90c\x03\xE1F\x91`\xE6\x1B\x81R`\x04\x01\x90V[`\0T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\x9FV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xB1W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x04\xABW`\0\x80\xFD[\x815a\x04\xB6\x81a\x04\x84V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x04\xD0W`\0\x80\xFD[\x825a\x04\xDB\x81a\x04\x84V[\x91P` \x83\x015a\x04\xEB\x81a\x04\x84V[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x05!W`\0\x80\xFD[\x835a\x05,\x81a\x04\x84V[\x92P` \x84\x015a\x05<\x81a\x04\x84V[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05YW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x05mW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x05\x7FWa\x05\x7Fa\x04\xF6V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x05\xA7Wa\x05\xA7a\x04\xF6V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x05\xC0W`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\x05\xF4W`\0\x80\xFD[\x81Qa\x04\xB6\x81a\x04\x84V[`\x01\x80`\xA0\x1B\x03\x83\x16\x81R`\0` `@\x81\x84\x01R\x83Q\x80`@\x85\x01R`\0[\x81\x81\x10\x15a\x06;W\x85\x81\x01\x83\x01Q\x85\x82\x01``\x01R\x82\x01a\x06\x1FV[\x81\x81\x11\x15a\x06MW`\0``\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01``\x01\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xA0I:k+\x90\xC3\xF2D\x08*\xD5\xC7\xC1^\x1A\xCC{)}\x84\xD4\0i\xF7\xD7L\xE1i\xD6\xC6\x17dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x07x8\x03\x80a\x07x\x839\x81\x01`@\x81\x90Ra\0/\x91a\x02cV[`\0[\x82Q\x81\x10\x15a\0wWa\0e\x83\x82\x81Q\x81\x10a\0PWa\0Pa\x039V[` \x02` \x01\x01Q`\x01a\0\x88` \x1B` \x1CV[\x80a\0o\x81a\x03OV[\x91PPa\x002V[Pa\0\x81\x81a\x01ZV[PPa\x03xV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\0\xF9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FPauserRegistry._setPauser: zero `D\x82\x01Rl\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x9A\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16\x85\x15\x15\x90\x81\x17\x90\x91U\x82Q\x93\x84R\x90\x83\x01R\x7Fe\xD3\xA1\xFDL\x13\xF0\\\xBA\x16O\x80\xD0<\xE9\x0F\xB4\xB5\xE2\x19F\xBF\xC3\xAB}\xBDCL-\x0B\x91R\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FPauserRegistry._setUnpauser: zer`D\x82\x01Rn\x1B\xC8\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x8A\x1B`d\x82\x01R`\x84\x01a\0\xF0V[`\x01T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7F\x06\xB4\x16z%(\x88z\x1E\x97\xA3f\xEE\xFE\x85I\xBF\xBF\x1E\xA3\xE6\xAC\x81\xCB%d\xA94\xD2\x0E\x88\x92\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02^W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x02vW`\0\x80\xFD[\x82Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x02\x8DW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x02\xA1W`\0\x80\xFD[\x81Q` \x82\x82\x11\x15a\x02\xB5Wa\x02\xB5a\x021V[\x81`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x86\x82\x11\x17\x15a\x02\xDAWa\x02\xDAa\x021V[`@R\x92\x83R\x81\x83\x01\x93P\x84\x81\x01\x82\x01\x92\x89\x84\x11\x15a\x02\xF8W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x03\x1DWa\x03\x0E\x86a\x02GV[\x85R\x94\x82\x01\x94\x93\x82\x01\x93a\x02\xFDV[\x96Pa\x03,\x90P\x87\x82\x01a\x02GV[\x94PPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x03qWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V[a\x03\xF1\x80a\x03\x87`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cF\xFB\xF6\x8E\x14a\0QW\x80c\x85hR\x06\x14a\0\x89W\x80c\xCET\x84(\x14a\0\x9EW\x80c\xEA\xB6mz\x14a\0\xB1W[`\0\x80\xFD[a\0ta\0_6`\x04a\x03\x13V[`\0` \x81\x90R\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x9Ca\0\x976`\x04a\x035V[a\0\xDCV[\0[a\0\x9Ca\0\xAC6`\x04a\x03\x13V[a\x01\x1DV[`\x01Ta\0\xC4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x80V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01\x0FW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x06\x90a\x03qV[`@Q\x80\x91\x03\x90\xFD[a\x01\x19\x82\x82a\x01SV[PPV[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01GW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x06\x90a\x03qV[a\x01P\x81a\x02 V[PV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x01\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FPauserRegistry._setPauser: zero `D\x82\x01Rl\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\x06V[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16\x85\x15\x15\x90\x81\x17\x90\x91U\x82Q\x93\x84R\x90\x83\x01R\x7Fe\xD3\xA1\xFDL\x13\xF0\\\xBA\x16O\x80\xD0<\xE9\x0F\xB4\xB5\xE2\x19F\xBF\xC3\xAB}\xBDCL-\x0B\x91R\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x02\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FPauserRegistry._setUnpauser: zer`D\x82\x01Rn\x1B\xC8\x18Y\x19\x1C\x99\\\xDC\xC8\x1A[\x9C\x1D]`\x8A\x1B`d\x82\x01R`\x84\x01a\x01\x06V[`\x01T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7F\x06\xB4\x16z%(\x88z\x1E\x97\xA3f\xEE\xFE\x85I\xBF\xBF\x1E\xA3\xE6\xAC\x81\xCB%d\xA94\xD2\x0E\x88\x92\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\x0EW`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x03%W`\0\x80\xFD[a\x03.\x82a\x02\xF7V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x03HW`\0\x80\xFD[a\x03Q\x83a\x02\xF7V[\x91P` \x83\x015\x80\x15\x15\x81\x14a\x03fW`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V\xFE\xA2dipfsX\"\x12 @\x01\x07\xFB9\xE4\x07\x03)y\x982\xC0\xCEIGS\x97\xA5]\x18/\xD9\xF9\xC3\x8E\xE6xEAt0dsolcC\0\x08\x0C\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x17n\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x02SW`\x005`\xE0\x1C\x80c\x94\xF6I\xDD\x11a\x01FW\x80c\xC4b>\xA1\x11a\0\xC3W\x80c\xE2C\xDC<\x11a\0\x87W\x80c\xE2C\xDC<\x14a\x05\xA9W\x80c\xE2\xA8\x18\xC5\x14a\x05\xBCW\x80c\xE7\xA0P\xAA\x14a\x05\xCFW\x80c\xF2\xFD\xE3\x8B\x14a\x05\xE6W\x80c\xF6\x98\xDA%\x14a\x05\xF9W\x80c\xFA\xBC\x1C\xBC\x14a\x06\0W`\0\x80\xFD[\x80c\xC4b>\xA1\x14a\x05PW\x80c\xC6\x08\xC7\xF3\x14a\x05dW\x80c\xC6eg\x02\x14a\x05rW\x80c\xDF[5G\x14a\x05\x83W\x80c\xDF\\\xF7#\x14a\x05\x96W`\0\x80\xFD[\x80c\x9F\0\xFA$\x11a\x01\nW\x80c\x9F\0\xFA$\x14a\x04\xEFW\x80c\xA1x\x84\x84\x14a\x05\x01W\x80c\xA1\xCAx\x0B\x14a\x05!W\x80c\xB14Bq\x14a\x05/W\x80c\xB5\xD8\xB5\xB8\x14a\x05BW`\0\x80\xFD[\x80c\x94\xF6I\xDD\x14a\x04LW\x80c\x96\x7F\xC0\xD2\x14a\x04mW\x80c\x9A\x95\x19\xE0\x14a\x04\x80W\x80c\x9BM\xA0=\x14a\x04\x93W\x80c\x9B~/w\x14a\x04\xB6W`\0\x80\xFD[\x80c\\\x97Z\xBB\x11a\x01\xD4W\x80c\x88o\x11\x95\x11a\x01\x98W\x80c\x88o\x11\x95\x14a\x03\xF9W\x80c\x8B\x8A\xAC<\x14a\x04\x0CW\x80c\x8C\x80\xD4\xE5\x14a\x04!W\x80c\x8D\xA5\xCB[\x14a\x044W\x80c\x91\x04\xC3\x19\x14a\x04EW`\0\x80\xFD[\x80c\\\x97Z\xBB\x14a\x03\x9DW\x80cc\xFC\xA8\x88\x14a\x03\xA5W\x80cf<\x1D\xE4\x14a\x03\xB8W\x80cqP\x18\xA6\x14a\x03\xDBW\x80cz~\r\x92\x14a\x03\xE3W`\0\x80\xFD[\x80c6;\xF9d\x11a\x02\x1BW\x80c6;\xF9d\x14a\x02\xD7W\x80cFe\xBC\xDA\x14a\x03$W\x80cNZBc\x14a\x03OW\x80cY\\jg\x14a\x03bW\x80cZ\xC8j\xB7\x14a\x03jW`\0\x80\xFD[\x80c\x01\xF8 \xB2\x14a\x02XW\x80c\r9\x08\xF4\x14a\x02tW\x80c\x10\xD6z/\x14a\x02\x95W\x80c\x13d9\xDD\x14a\x02\xAAW\x80c2\xE8\x9A\xCE\x14a\x02\xBDW[`\0\x80\xFD[a\x02a`\xD2T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x02\x88a\x02\x826`\x04a\x10nV[P``\x90V[`@Qa\x02k\x91\x90a\x10\xD6V[a\x02\xA8a\x02\xA36`\x04a\x10nV[a\x06\x13V[\0[a\x02\xA8a\x02\xB86`\x04a\x10\xE9V[a\x06\xCCV[a\x02aa\x02\xCB6`\x04a\x11\x18V[`\0\x96\x95PPPPPPV[a\x02\xA8a\x02\xE56`\x04a\x12\x13V[`\xC9\x80T`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\xCB\x80T\x92\x85\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91U`\xCA\x80T\x92\x90\x93\x16\x91\x16\x17\x90UV[`\xCATa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x02kV[a\x02\xA8a\x03]6`\x04a\x12lV[a\x08\x0BV[a\x02\xA8a\x08yV[a\x03\x8Da\x03x6`\x04a\x12\xA5V[`\x98T`\x01`\xFF\x90\x92\x16\x91\x90\x91\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02kV[`\x98Ta\x02aV[a\x02aa\x03\xB36`\x04a\x12\xC8V[a\t@V[a\x03\x8Da\x03\xC66`\x04a\x10nV[`\xCF` R`\0\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x02\xA8a\tqV[a\x02aa\x03\xF16`\x04a\x12\xF4V[`\0\x92\x91PPV[`\x97Ta\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02aa\x04\x1A6`\x04a\x10nV[P`\xD2T\x90V[a\x02\xA8a\x04/6`\x04a\x13\"V[PPPV[`3T`\x01`\x01`\xA0\x1B\x03\x16a\x037V[`\0a\x037V[a\x04_a\x04Z6`\x04a\x10nV[a\t\x85V[`@Qa\x02k\x92\x91\x90a\x13cV[`\xCCTa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\xA8a\x04\x8E6`\x04a\x10\xE9V[`\xD2UV[a\x03\x8Da\x04\xA16`\x04a\x10nV[`\xD1` R`\0\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x02\xA8a\x04\xC46`\x04a\x12lV[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16`\0\x90\x81R`\xCF` R`@\x90 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x02\xA8a\x04\xFD6`\x04a\x12\xC8V[PPV[a\x02aa\x05\x0F6`\x04a\x10nV[`\xD0` R`\0\x90\x81R`@\x90 T\x81V[a\x02\xA8a\x04/6`\x04a\x13\xBAV[`\xCBTa\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\xA8a\x04\xFD6`\x04a\x14;V[a\x02\xA8a\x05^6`\x04a\x14}V[PPPPV[a\x02\xA8a\x05^6`\x04a\x14\xCEV[a\x02\xA8a\x05\x806`\x04a\x10nV[PV[a\x02\xA8a\x05\x916`\x04a\x15!V[a\n^V[`\xC9Ta\x037\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x037a\x05\xB76`\x04a\x12\xC8V[a\x0BOV[a\x02\xA8a\x05\xCA6`\x04a\x15\x8DV[a\x0B\x87V[a\x02aa\x05\xDD6`\x04a\x13\"V[`\0\x93\x92PPPV[a\x02\xA8a\x05\xF46`\x04a\x10nV[a\x0C1V[`\0a\x02aV[a\x02\xA8a\x06\x0E6`\x04a\x10\xE9V[a\x0C\xA7V[`\x97`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06fW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x8A\x91\x90a\x16\x10V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x06\xC3W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16-V[`@Q\x80\x91\x03\x90\xFD[a\x05\x80\x81a\x0E\x03V[`\x97T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\x14W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x078\x91\x90a\x16wV[a\x07TW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16\x94V[`\x98T\x81\x81\x16\x14a\x07\xCDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xBAV[`\x98\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R\x82\x15\x15` \x82\x01R\x7Fw\xD90\xDFI7y4s\xA9P$\xD8z\x98\xFD,\xCB\x9E\x92\xD3\xC2F;=\xAC\xD6]>jW\x86\x91\x01`@Q\x80\x91\x03\x90\xA1`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16`\0\x90\x81R`\xD1` R`@\x90 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[`\x97T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\xC1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xE5\x91\x90a\x16wV[a\t\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16\x94V[`\0\x19`\x98\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[`\xCE` R\x81`\0R`@`\0 \x81\x81T\x81\x10a\t\\W`\0\x80\xFD[\x90`\0R` `\0 \x01`\0\x91P\x91PPT\x81V[a\tya\x0E\xFAV[a\t\x83`\0a\x0FTV[V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R`\xCD` \x90\x81R`@\x80\x83 `\xCE\x83R\x92\x81\x90 \x83T\x82Q\x81\x85\x02\x81\x01\x85\x01\x90\x93R\x80\x83R``\x94\x85\x94\x90\x93\x91\x84\x91\x83\x01\x82\x82\x80\x15a\t\xFCW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T`\x01`\x01`\xA0\x1B\x03\x16\x81R`\x01\x90\x91\x01\x90` \x01\x80\x83\x11a\t\xDEW[PPPPP\x91P\x80\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\nNW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\n:W[PPPPP\x90P\x91P\x91P\x91P\x91V[`\0[\x83\x81\x10\x15a\x0BHW`\x01`\xCF`\0\x87\x87\x85\x81\x81\x10a\n\x81Wa\n\x81a\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\n\x96\x91\x90a\x10nV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01`\0 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x82\x82\x82\x81\x81\x10a\n\xD0Wa\n\xD0a\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\n\xE5\x91\x90a\x16\xF2V[`\xD1`\0\x87\x87\x85\x81\x81\x10a\n\xFBWa\n\xFBa\x16\xDCV[\x90P` \x02\x01` \x81\x01\x90a\x0B\x10\x91\x90a\x10nV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01`\0 \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90Ua\x0BA\x81a\x17\x0FV[\x90Pa\naV[PPPPPV[`\xCD` R\x81`\0R`@`\0 \x81\x81T\x81\x10a\x0BkW`\0\x80\xFD[`\0\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x91P\x82\x90PV[\x82\x81\x14a\x0B\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FStrategyManagerMock: length mism`D\x82\x01Rc\x0C.\x8Cm`\xE3\x1B`d\x82\x01R`\x84\x01a\x06\xBAV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\xCD` R`@\x90 a\x0C\x05\x90\x85\x85a\x0F\xA6V[P`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\xCE` R`@\x90 a\x0C)\x90\x83\x83a\x10\tV[PPPPPPV[a\x0C9a\x0E\xFAV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0C\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x06\xBAV[a\x05\x80\x81a\x0FTV[`\x97`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\xFAW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x1E\x91\x90a\x16\x10V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\rNW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06\xBA\x90a\x16-V[`\x98T\x19\x81\x19`\x98T\x19\x16\x14a\r\xCCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xBAV[`\x98\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x08\0V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0E\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x06\xBAV[`\x97T`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1`\x97\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`3T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x06\xBAV[`3\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90`\0\x90\xA3PPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0F\xF9W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0F\xF9W\x81T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x845\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a\x0F\xC6V[Pa\x10\x05\x92\x91Pa\x10DV[P\x90V[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0F\xF9W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0F\xF9W\x825\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x10)V[[\x80\x82\x11\x15a\x10\x05W`\0\x81U`\x01\x01a\x10EV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\x80W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x10\x80W`\0\x80\xFD[\x815a\x10\x8B\x81a\x10YV[\x93\x92PPPV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15a\x10\xCBW\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01a\x10\xA6V[P\x94\x95\x94PPPPPV[` \x81R`\0a\x10\x8B` \x83\x01\x84a\x10\x92V[`\0` \x82\x84\x03\x12\x15a\x10\xFBW`\0\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x111W`\0\x80\xFD[\x865a\x11<\x81a\x10YV[\x95P` \x87\x015a\x11L\x81a\x10YV[\x94P`@\x87\x015\x93P``\x87\x015a\x11c\x81a\x10YV[\x92P`\x80\x87\x015\x91P`\xA0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x11\x87W`\0\x80\xFD[\x81\x89\x01\x91P\x89`\x1F\x83\x01\x12a\x11\x9BW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x11\xADWa\x11\xADa\x11\x02V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x11\xD5Wa\x11\xD5a\x11\x02V[\x81`@R\x82\x81R\x8C` \x84\x87\x01\x01\x11\x15a\x11\xEEW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92\x95P\x92\x95P\x92\x95V[`\0\x80`\0``\x84\x86\x03\x12\x15a\x12(W`\0\x80\xFD[\x835a\x123\x81a\x10YV[\x92P` \x84\x015a\x12C\x81a\x10YV[\x91P`@\x84\x015a\x12S\x81a\x10YV[\x80\x91PP\x92P\x92P\x92V[\x80\x15\x15\x81\x14a\x05\x80W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x12\x7FW`\0\x80\xFD[\x825a\x12\x8A\x81a\x10YV[\x91P` \x83\x015a\x12\x9A\x81a\x12^V[\x80\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x12\xB7W`\0\x80\xFD[\x815`\xFF\x81\x16\x81\x14a\x10\x8BW`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x12\xDBW`\0\x80\xFD[\x825a\x12\xE6\x81a\x10YV[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x13\x07W`\0\x80\xFD[\x825a\x13\x12\x81a\x10YV[\x91P` \x83\x015a\x12\x9A\x81a\x10YV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x137W`\0\x80\xFD[\x835a\x13B\x81a\x10YV[\x92P` \x84\x015a\x13R\x81a\x10YV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`@\x81R`\0a\x13v`@\x83\x01\x85a\x10\x92V[\x82\x81\x03` \x84\x81\x01\x91\x90\x91R\x84Q\x80\x83R\x85\x82\x01\x92\x82\x01\x90`\0[\x81\x81\x10\x15a\x13\xADW\x84Q\x83R\x93\x83\x01\x93\x91\x83\x01\x91`\x01\x01a\x13\x91V[P\x90\x97\x96PPPPPPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x13\xCFW`\0\x80\xFD[\x835a\x13\xDA\x81a\x10YV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[`\0\x80\x83`\x1F\x84\x01\x12a\x14\x01W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x19W`\0\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x144W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x14NW`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14eW`\0\x80\xFD[a\x14q\x85\x82\x86\x01a\x13\xEFV[\x90\x96\x90\x95P\x93PPPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x14\x93W`\0\x80\xFD[\x845a\x14\x9E\x81a\x10YV[\x93P` \x85\x015a\x14\xAE\x81a\x10YV[\x92P`@\x85\x015a\x14\xBE\x81a\x10YV[\x93\x96\x92\x95P\x92\x93``\x015\x92PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x14\xE4W`\0\x80\xFD[\x845a\x14\xEF\x81a\x10YV[\x93P` \x85\x015a\x14\xFF\x81a\x10YV[\x92P`@\x85\x015\x91P``\x85\x015a\x15\x16\x81a\x10YV[\x93\x96\x92\x95P\x90\x93PPV[`\0\x80`\0\x80`@\x85\x87\x03\x12\x15a\x157W`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15OW`\0\x80\xFD[a\x15[\x88\x83\x89\x01a\x13\xEFV[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x15tW`\0\x80\xFD[Pa\x15\x81\x87\x82\x88\x01a\x13\xEFV[\x95\x98\x94\x97P\x95PPPPV[`\0\x80`\0\x80`\0``\x86\x88\x03\x12\x15a\x15\xA5W`\0\x80\xFD[\x855a\x15\xB0\x81a\x10YV[\x94P` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15\xCDW`\0\x80\xFD[a\x15\xD9\x89\x83\x8A\x01a\x13\xEFV[\x90\x96P\x94P`@\x88\x015\x91P\x80\x82\x11\x15a\x15\xF2W`\0\x80\xFD[Pa\x15\xFF\x88\x82\x89\x01a\x13\xEFV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x16\"W`\0\x80\xFD[\x81Qa\x10\x8B\x81a\x10YV[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x16\x89W`\0\x80\xFD[\x81Qa\x10\x8B\x81a\x12^V[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x17\x04W`\0\x80\xFD[\x815a\x10\x8B\x81a\x12^V[`\0`\0\x19\x82\x14\x15a\x171WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 *;\xFA(\x1AU\r\xA67\xB9\xF6\xDA\xB8\xB9\xF9\xD58<\x14`\x02\xEA\xB1\xB9\xF9\xF8\xFB\xD2\xE8\xE2\0\xDDdsolcC\0\x08\x0C\x003StrategyBase.withdraw: amountShares must be less than or equal to totalSharesStrategyBase.withdraw: Can only withdraw the strategy tokenmsg.sender is not permissioned as unpauserStrategyBaseTVLLimits: max per deposit exceededInitializable: contract is already initializedStrategyBase.deposit: newShares cannot be zeroStrategyBaseTVLLimits: max deposits exceededStrategyBaseTVLLimits._setTVLLimits: maxPerDeposit exceeds maxTotalDepositsStrategyBase.deposit: totalShares exceeds `MAX_TOTAL_SHARES`StrategyBase.deposit: Can only deposit underlyingToken\xA2dipfsX\"\x12 _\xA4\xEA\xDE\xF4Y-l{`M\xCE\xA5\xDD\xF7\x0C\xFE\x83\x96\x98\xA7\xF24y\xF8g\x82\xBC\xAF\xD5\xEA\x81dsolcC\0\x08\x0C\x003",
    );
    /**Event with signature `ExchangeRateEmitted(uint256)` and selector `0xd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8`.
    ```solidity
    event ExchangeRateEmitted(uint256 rate);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ExchangeRateEmitted {
        #[allow(missing_docs)]
        pub rate: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ExchangeRateEmitted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ExchangeRateEmitted(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    210u8, 73u8, 79u8, 52u8, 121u8, 229u8, 218u8, 73u8, 211u8, 134u8, 101u8, 124u8,
                    41u8, 44u8, 97u8, 11u8, 91u8, 1u8, 223u8, 49u8, 61u8, 7u8, 198u8, 46u8, 176u8,
                    207u8, 164u8, 153u8, 36u8, 163u8, 27u8, 232u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { rate: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.rate,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ExchangeRateEmitted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ExchangeRateEmitted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ExchangeRateEmitted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `MaxPerDepositUpdated(uint256,uint256)` and selector `0xf97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5`.
    ```solidity
    event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MaxPerDepositUpdated {
        #[allow(missing_docs)]
        pub previousValue: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MaxPerDepositUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "MaxPerDepositUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    249u8, 126u8, 212u8, 224u8, 131u8, 172u8, 172u8, 103u8, 131u8, 0u8, 37u8,
                    236u8, 188u8, 117u8, 109u8, 143u8, 232u8, 71u8, 205u8, 189u8, 202u8, 76u8,
                    238u8, 63u8, 225u8, 225u8, 40u8, 233u8, 139u8, 84u8, 236u8, 181u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousValue: data.0,
                    newValue: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.previousValue,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newValue,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for MaxPerDepositUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MaxPerDepositUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &MaxPerDepositUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `MaxTotalDepositsUpdated(uint256,uint256)` and selector `0x6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452`.
    ```solidity
    event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MaxTotalDepositsUpdated {
        #[allow(missing_docs)]
        pub previousValue: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MaxTotalDepositsUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "MaxTotalDepositsUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    106u8, 177u8, 129u8, 224u8, 68u8, 11u8, 251u8, 244u8, 186u8, 205u8, 242u8,
                    233u8, 150u8, 116u8, 115u8, 92u8, 230u8, 99u8, 128u8, 5u8, 73u8, 6u8, 136u8,
                    197u8, 249u8, 148u8, 245u8, 57u8, 147u8, 83u8, 228u8, 82u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousValue: data.0,
                    newValue: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.previousValue,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newValue,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for MaxTotalDepositsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MaxTotalDepositsUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &MaxTotalDepositsUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log(string)` and selector `0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50`.
    ```solidity
    event log(string);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    65u8, 48u8, 79u8, 172u8, 217u8, 50u8, 61u8, 117u8, 177u8, 27u8, 205u8, 214u8,
                    9u8, 203u8, 56u8, 239u8, 255u8, 253u8, 176u8, 87u8, 16u8, 247u8, 202u8, 240u8,
                    233u8, 177u8, 108u8, 109u8, 157u8, 112u8, 159u8, 80u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_address(address)` and selector `0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3`.
    ```solidity
    event log_address(address);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_address {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_address {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_address(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    122u8, 231u8, 76u8, 82u8, 116u8, 20u8, 174u8, 19u8, 95u8, 217u8, 112u8, 71u8,
                    177u8, 41u8, 33u8, 165u8, 236u8, 57u8, 17u8, 184u8, 4u8, 25u8, 120u8, 85u8,
                    214u8, 126u8, 37u8, 199u8, 183u8, 94u8, 230u8, 243u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_address {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_address> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_address) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_array(uint256[])` and selector `0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1`.
    ```solidity
    event log_array(uint256[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_array_0 {
        #[allow(missing_docs)]
        pub val:
            alloy::sol_types::private::Vec<alloy::sol_types::private::primitives::aliases::U256>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_array_0 {
            type DataTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_array(uint256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    251u8, 16u8, 40u8, 101u8, 213u8, 10u8, 221u8, 221u8, 246u8, 157u8, 169u8,
                    181u8, 170u8, 27u8, 206u8, 214u8, 108u8, 128u8, 207u8, 134u8, 154u8, 92u8,
                    141u8, 4u8, 113u8, 164u8, 103u8, 225u8, 140u8, 233u8, 202u8, 177u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { val: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Uint<256>,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.val
                ),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_array_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_array_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_array_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_array(int256[])` and selector `0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5`.
    ```solidity
    event log_array(int256[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_array_1 {
        #[allow(missing_docs)]
        pub val:
            alloy::sol_types::private::Vec<alloy::sol_types::private::primitives::aliases::I256>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_array_1 {
            type DataTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Int<256>>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_array(int256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    137u8, 10u8, 130u8, 103u8, 155u8, 71u8, 15u8, 43u8, 216u8, 40u8, 22u8, 237u8,
                    155u8, 22u8, 31u8, 151u8, 216u8, 185u8, 103u8, 243u8, 127u8, 163u8, 100u8,
                    124u8, 33u8, 213u8, 191u8, 57u8, 116u8, 158u8, 45u8, 213u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { val: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Int<256>,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.val
                ),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_array_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_array_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_array_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_array(address[])` and selector `0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2`.
    ```solidity
    event log_array(address[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_array_2 {
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_array_2 {
            type DataTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_array(address[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    64u8, 225u8, 132u8, 15u8, 87u8, 105u8, 7u8, 61u8, 97u8, 189u8, 1u8, 55u8, 45u8,
                    155u8, 117u8, 186u8, 169u8, 132u8, 45u8, 86u8, 41u8, 160u8, 201u8, 159u8,
                    241u8, 3u8, 190u8, 17u8, 120u8, 168u8, 233u8, 226u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { val: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Address,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.val
                ),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_array_2 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_array_2> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_array_2) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_bytes(bytes)` and selector `0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20`.
    ```solidity
    event log_bytes(bytes);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_bytes {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_bytes {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_bytes(bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    35u8, 182u8, 42u8, 208u8, 88u8, 77u8, 36u8, 167u8, 95u8, 11u8, 243u8, 86u8,
                    3u8, 145u8, 239u8, 86u8, 89u8, 236u8, 109u8, 177u8, 38u8, 156u8, 86u8, 225u8,
                    26u8, 162u8, 65u8, 214u8, 55u8, 241u8, 155u8, 32u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_bytes {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_bytes> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_bytes) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_bytes32(bytes32)` and selector `0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3`.
    ```solidity
    event log_bytes32(bytes32);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_bytes32 {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_bytes32 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_bytes32(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    232u8, 22u8, 153u8, 184u8, 81u8, 19u8, 238u8, 161u8, 199u8, 62u8, 16u8, 88u8,
                    139u8, 43u8, 3u8, 94u8, 85u8, 137u8, 51u8, 105u8, 99u8, 33u8, 115u8, 175u8,
                    212u8, 63u8, 235u8, 25u8, 47u8, 172u8, 100u8, 227u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_bytes32 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_bytes32> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_bytes32) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_int(int256)` and selector `0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8`.
    ```solidity
    event log_int(int256);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_int {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_int {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_int(int256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    14u8, 181u8, 213u8, 38u8, 36u8, 200u8, 210u8, 138u8, 218u8, 159u8, 197u8, 90u8,
                    140u8, 80u8, 46u8, 213u8, 170u8, 63u8, 190u8, 47u8, 182u8, 233u8, 27u8, 113u8,
                    181u8, 243u8, 118u8, 136u8, 43u8, 29u8, 47u8, 184u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_int {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_int> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_int) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_address(string,address)` and selector `0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f`.
    ```solidity
    event log_named_address(string key, address val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_address {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_address {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_address(string,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    156u8, 78u8, 133u8, 65u8, 202u8, 143u8, 13u8, 193u8, 196u8, 19u8, 249u8, 16u8,
                    143u8, 102u8, 216u8, 45u8, 60u8, 236u8, 177u8, 189u8, 219u8, 206u8, 67u8,
                    122u8, 97u8, 202u8, 163u8, 23u8, 92u8, 76u8, 201u8, 111u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_address {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_address> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_address) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_array(string,uint256[])` and selector `0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb`.
    ```solidity
    event log_named_array(string key, uint256[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_array_0 {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val:
            alloy::sol_types::private::Vec<alloy::sol_types::private::primitives::aliases::U256>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_array_0 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_array(string,uint256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    0u8, 170u8, 163u8, 156u8, 159u8, 251u8, 95u8, 86u8, 122u8, 69u8, 52u8, 56u8,
                    12u8, 115u8, 112u8, 117u8, 112u8, 46u8, 31u8, 127u8, 20u8, 16u8, 127u8, 201u8,
                    83u8, 40u8, 227u8, 181u8, 108u8, 3u8, 37u8, 251u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.val),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_array_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_array_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_array_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_array(string,int256[])` and selector `0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57`.
    ```solidity
    event log_named_array(string key, int256[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_array_1 {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val:
            alloy::sol_types::private::Vec<alloy::sol_types::private::primitives::aliases::I256>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_array_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Int<256>>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_array(string,int256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    167u8, 62u8, 218u8, 9u8, 102u8, 47u8, 70u8, 221u8, 231u8, 41u8, 190u8, 70u8,
                    17u8, 56u8, 95u8, 243u8, 79u8, 230u8, 196u8, 79u8, 187u8, 198u8, 247u8, 225u8,
                    123u8, 4u8, 43u8, 89u8, 163u8, 68u8, 91u8, 87u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Int<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.val),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_array_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_array_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_array_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_array(string,address[])` and selector `0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd`.
    ```solidity
    event log_named_array(string key, address[] val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_array_2 {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_array_2 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_array(string,address[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    59u8, 207u8, 178u8, 174u8, 46u8, 141u8, 19u8, 45u8, 209u8, 252u8, 231u8, 207u8,
                    39u8, 138u8, 154u8, 25u8, 117u8, 106u8, 159u8, 206u8, 171u8, 228u8, 112u8,
                    223u8, 59u8, 218u8, 187u8, 75u8, 197u8, 119u8, 209u8, 189u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.val),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_array_2 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_array_2> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_array_2) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_bytes(string,bytes)` and selector `0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18`.
    ```solidity
    event log_named_bytes(string key, bytes val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_bytes {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_bytes {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_bytes(string,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    210u8, 110u8, 22u8, 202u8, 212u8, 84u8, 135u8, 5u8, 228u8, 201u8, 226u8, 217u8,
                    79u8, 152u8, 238u8, 145u8, 194u8, 137u8, 8u8, 94u8, 228u8, 37u8, 89u8, 79u8,
                    213u8, 99u8, 95u8, 162u8, 150u8, 76u8, 207u8, 24u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_bytes {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_bytes> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_bytes) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_bytes32(string,bytes32)` and selector `0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99`.
    ```solidity
    event log_named_bytes32(string key, bytes32 val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_bytes32 {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_bytes32 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_bytes32(string,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    175u8, 183u8, 149u8, 201u8, 198u8, 30u8, 79u8, 231u8, 70u8, 140u8, 56u8, 111u8,
                    146u8, 93u8, 122u8, 84u8, 41u8, 236u8, 173u8, 156u8, 4u8, 149u8, 221u8, 184u8,
                    211u8, 141u8, 105u8, 6u8, 20u8, 211u8, 47u8, 153u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.val),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_bytes32 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_bytes32> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_bytes32) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_decimal_int(string,int256,uint256)` and selector `0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95`.
    ```solidity
    event log_named_decimal_int(string key, int256 val, uint256 decimals);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_decimal_int {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::primitives::aliases::I256,
        #[allow(missing_docs)]
        pub decimals: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_decimal_int {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_decimal_int(string,int256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    93u8, 166u8, 206u8, 157u8, 81u8, 21u8, 27u8, 161u8, 12u8, 9u8, 165u8, 89u8,
                    239u8, 36u8, 213u8, 32u8, 185u8, 218u8, 197u8, 197u8, 184u8, 129u8, 10u8,
                    232u8, 67u8, 78u8, 77u8, 13u8, 134u8, 65u8, 26u8, 149u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                    decimals: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.decimals,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_decimal_int {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_decimal_int> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_decimal_int) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_decimal_uint(string,uint256,uint256)` and selector `0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b`.
    ```solidity
    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_decimal_uint {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub decimals: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_decimal_uint {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_decimal_uint(string,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    235u8, 139u8, 164u8, 60u8, 237u8, 117u8, 55u8, 66u8, 25u8, 70u8, 189u8, 67u8,
                    232u8, 40u8, 184u8, 178u8, 184u8, 66u8, 137u8, 39u8, 170u8, 143u8, 128u8, 28u8,
                    19u8, 217u8, 52u8, 191u8, 17u8, 172u8, 165u8, 123u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                    decimals: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.decimals,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_decimal_uint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_decimal_uint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_decimal_uint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_int(string,int256)` and selector `0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168`.
    ```solidity
    event log_named_int(string key, int256 val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_int {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_int {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_int(string,int256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    47u8, 230u8, 50u8, 119u8, 145u8, 116u8, 55u8, 67u8, 120u8, 68u8, 42u8, 142u8,
                    151u8, 139u8, 204u8, 251u8, 220u8, 193u8, 214u8, 178u8, 176u8, 216u8, 31u8,
                    126u8, 142u8, 183u8, 118u8, 171u8, 34u8, 134u8, 241u8, 104u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_int {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_int> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_int) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_string(string,string)` and selector `0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583`.
    ```solidity
    event log_named_string(string key, string val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_string {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_string {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_string(string,string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    40u8, 15u8, 68u8, 70u8, 178u8, 138u8, 19u8, 114u8, 65u8, 125u8, 218u8, 101u8,
                    141u8, 48u8, 185u8, 91u8, 41u8, 146u8, 177u8, 42u8, 201u8, 199u8, 243u8, 120u8,
                    83u8, 95u8, 41u8, 169u8, 122u8, 207u8, 53u8, 131u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_string {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_string> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_string) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_named_uint(string,uint256)` and selector `0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8`.
    ```solidity
    event log_named_uint(string key, uint256 val);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_named_uint {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_named_uint {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_named_uint(string,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    178u8, 222u8, 47u8, 190u8, 128u8, 26u8, 13u8, 246u8, 192u8, 203u8, 221u8,
                    253u8, 68u8, 139u8, 163u8, 196u8, 29u8, 72u8, 160u8, 64u8, 202u8, 53u8, 197u8,
                    108u8, 129u8, 150u8, 239u8, 15u8, 202u8, 231u8, 33u8, 168u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    key: data.0,
                    val: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.val,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_named_uint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_named_uint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_named_uint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_string(string)` and selector `0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b`.
    ```solidity
    event log_string(string);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_string {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_string {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_string(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    11u8, 46u8, 19u8, 255u8, 32u8, 172u8, 123u8, 71u8, 65u8, 152u8, 101u8, 85u8,
                    131u8, 237u8, 247u8, 13u8, 237u8, 210u8, 193u8, 220u8, 152u8, 14u8, 50u8,
                    156u8, 79u8, 187u8, 47u8, 192u8, 116u8, 139u8, 121u8, 107u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_string {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_string> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_string) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `log_uint(uint256)` and selector `0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755`.
    ```solidity
    event log_uint(uint256);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct log_uint {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for log_uint {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "log_uint(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    44u8, 171u8, 151u8, 144u8, 81u8, 15u8, 216u8, 189u8, 251u8, 210u8, 17u8, 82u8,
                    136u8, 219u8, 51u8, 254u8, 198u8, 102u8, 145u8, 212u8, 118u8, 239u8, 197u8,
                    66u8, 124u8, 253u8, 76u8, 9u8, 105u8, 48u8, 23u8, 85u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for log_uint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&log_uint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &log_uint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `logs(bytes)` and selector `0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4`.
    ```solidity
    event logs(bytes);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct logs {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for logs {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "logs(bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    231u8, 149u8, 14u8, 222u8, 3u8, 148u8, 185u8, 242u8, 206u8, 74u8, 90u8, 27u8,
                    245u8, 167u8, 225u8, 133u8, 36u8, 17u8, 247u8, 230u8, 102u8, 27u8, 67u8, 8u8,
                    201u8, 19u8, 196u8, 191u8, 209u8, 16u8, 39u8, 228u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for logs {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&logs> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &logs) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `IS_TEST()` and selector `0xfa7626d4`.
    ```solidity
    function IS_TEST() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_TESTCall {}
    ///Container type for the return parameters of the [`IS_TEST()`](IS_TESTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_TESTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_TESTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_TESTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_TESTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_TESTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_TESTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_TESTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_TESTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_TESTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_TEST()";
            const SELECTOR: [u8; 4] = [250u8, 118u8, 38u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `excludeArtifacts()` and selector `0xb5508aa9`.
    ```solidity
    function excludeArtifacts() external view returns (string[] memory excludedArtifacts_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeArtifactsCall {}
    ///Container type for the return parameters of the [`excludeArtifacts()`](excludeArtifactsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeArtifactsReturn {
        pub excludedArtifacts_: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeArtifactsCall> for UnderlyingRustTuple<'_> {
                fn from(value: excludeArtifactsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeArtifactsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::String>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeArtifactsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: excludeArtifactsReturn) -> Self {
                    (value.excludedArtifacts_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeArtifactsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        excludedArtifacts_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for excludeArtifactsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = excludeArtifactsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "excludeArtifacts()";
            const SELECTOR: [u8; 4] = [181u8, 80u8, 138u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `excludeContracts()` and selector `0xe20c9f71`.
    ```solidity
    function excludeContracts() external view returns (address[] memory excludedContracts_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeContractsCall {}
    ///Container type for the return parameters of the [`excludeContracts()`](excludeContractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeContractsReturn {
        pub excludedContracts_: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeContractsCall> for UnderlyingRustTuple<'_> {
                fn from(value: excludeContractsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeContractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeContractsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: excludeContractsReturn) -> Self {
                    (value.excludedContracts_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeContractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        excludedContracts_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for excludeContractsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = excludeContractsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "excludeContracts()";
            const SELECTOR: [u8; 4] = [226u8, 12u8, 159u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `excludeSenders()` and selector `0x1ed7831c`.
    ```solidity
    function excludeSenders() external view returns (address[] memory excludedSenders_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeSendersCall {}
    ///Container type for the return parameters of the [`excludeSenders()`](excludeSendersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct excludeSendersReturn {
        pub excludedSenders_: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeSendersCall> for UnderlyingRustTuple<'_> {
                fn from(value: excludeSendersCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeSendersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<excludeSendersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: excludeSendersReturn) -> Self {
                    (value.excludedSenders_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for excludeSendersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        excludedSenders_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for excludeSendersCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = excludeSendersReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "excludeSenders()";
            const SELECTOR: [u8; 4] = [30u8, 215u8, 131u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `failed()` and selector `0xba414fa6`.
    ```solidity
    function failed() external returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct failedCall {}
    ///Container type for the return parameters of the [`failed()`](failedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct failedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<failedCall> for UnderlyingRustTuple<'_> {
                fn from(value: failedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for failedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<failedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: failedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for failedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for failedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = failedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "failed()";
            const SELECTOR: [u8; 4] = [186u8, 65u8, 79u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pauser()` and selector `0x9fd0506d`.
    ```solidity
    function pauser() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserCall {}
    ///Container type for the return parameters of the [`pauser()`](pauserCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauserCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauserReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauserCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauserReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pauser()";
            const SELECTOR: [u8; 4] = [159u8, 208u8, 80u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pauserRegistry()` and selector `0x886f1195`.
    ```solidity
    function pauserRegistry() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserRegistryCall {}
    ///Container type for the return parameters of the [`pauserRegistry()`](pauserRegistryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserRegistryReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserRegistryCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauserRegistryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserRegistryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserRegistryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauserRegistryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserRegistryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauserRegistryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauserRegistryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pauserRegistry()";
            const SELECTOR: [u8; 4] = [136u8, 111u8, 17u8, 149u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `proxyAdmin()` and selector `0x3e47158c`.
    ```solidity
    function proxyAdmin() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxyAdminCall {}
    ///Container type for the return parameters of the [`proxyAdmin()`](proxyAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxyAdminReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxyAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxyAdminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxyAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxyAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxyAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxyAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxyAdminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = proxyAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxyAdmin()";
            const SELECTOR: [u8; 4] = [62u8, 71u8, 21u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
    ```solidity
    function setUp() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategy()` and selector `0xa8c62e76`.
    ```solidity
    function strategy() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyCall {}
    ///Container type for the return parameters of the [`strategy()`](strategyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategy()";
            const SELECTOR: [u8; 4] = [168u8, 198u8, 46u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategyBaseTVLLimitsImplementation()` and selector `0x31363ee6`.
    ```solidity
    function strategyBaseTVLLimitsImplementation() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyBaseTVLLimitsImplementationCall {}
    ///Container type for the return parameters of the [`strategyBaseTVLLimitsImplementation()`](strategyBaseTVLLimitsImplementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyBaseTVLLimitsImplementationReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyBaseTVLLimitsImplementationCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyBaseTVLLimitsImplementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyBaseTVLLimitsImplementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyBaseTVLLimitsImplementationReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyBaseTVLLimitsImplementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyBaseTVLLimitsImplementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyBaseTVLLimitsImplementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyBaseTVLLimitsImplementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategyBaseTVLLimitsImplementation()";
            const SELECTOR: [u8; 4] = [49u8, 54u8, 62u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategyImplementation()` and selector `0xbd922b1c`.
    ```solidity
    function strategyImplementation() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyImplementationCall {}
    ///Container type for the return parameters of the [`strategyImplementation()`](strategyImplementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyImplementationReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyImplementationCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyImplementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyImplementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyImplementationReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyImplementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyImplementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyImplementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyImplementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategyImplementation()";
            const SELECTOR: [u8; 4] = [189u8, 146u8, 43u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategyManager()` and selector `0x39b70e38`.
    ```solidity
    function strategyManager() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyManagerCall {}
    ///Container type for the return parameters of the [`strategyManager()`](strategyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyManagerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyManagerCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyManagerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyManagerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyManagerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyManagerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyManagerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyManagerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyManagerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategyManager()";
            const SELECTOR: [u8; 4] = [57u8, 183u8, 14u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategyWithTVLLimits()` and selector `0xc6436262`.
    ```solidity
    function strategyWithTVLLimits() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyWithTVLLimitsCall {}
    ///Container type for the return parameters of the [`strategyWithTVLLimits()`](strategyWithTVLLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyWithTVLLimitsReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyWithTVLLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyWithTVLLimitsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyWithTVLLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyWithTVLLimitsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyWithTVLLimitsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyWithTVLLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyWithTVLLimitsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyWithTVLLimitsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategyWithTVLLimits()";
            const SELECTOR: [u8; 4] = [198u8, 67u8, 98u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `targetArtifactSelectors()` and selector `0x66d9a9a0`.
    ```solidity
    function targetArtifactSelectors() external view returns (StdInvariant.FuzzSelector[] memory targetedArtifactSelectors_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetArtifactSelectorsCall {}
    ///Container type for the return parameters of the [`targetArtifactSelectors()`](targetArtifactSelectorsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetArtifactSelectorsReturn {
        pub targetedArtifactSelectors_: alloy::sol_types::private::Vec<
            <StdInvariant::FuzzSelector as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetArtifactSelectorsCall> for UnderlyingRustTuple<'_> {
                fn from(value: targetArtifactSelectorsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetArtifactSelectorsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<StdInvariant::FuzzSelector>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <StdInvariant::FuzzSelector as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetArtifactSelectorsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: targetArtifactSelectorsReturn) -> Self {
                    (value.targetedArtifactSelectors_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetArtifactSelectorsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        targetedArtifactSelectors_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for targetArtifactSelectorsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = targetArtifactSelectorsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<StdInvariant::FuzzSelector>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "targetArtifactSelectors()";
            const SELECTOR: [u8; 4] = [102u8, 217u8, 169u8, 160u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `targetArtifacts()` and selector `0x85226c81`.
    ```solidity
    function targetArtifacts() external view returns (string[] memory targetedArtifacts_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetArtifactsCall {}
    ///Container type for the return parameters of the [`targetArtifacts()`](targetArtifactsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetArtifactsReturn {
        pub targetedArtifacts_: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetArtifactsCall> for UnderlyingRustTuple<'_> {
                fn from(value: targetArtifactsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetArtifactsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::String>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetArtifactsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: targetArtifactsReturn) -> Self {
                    (value.targetedArtifacts_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetArtifactsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        targetedArtifacts_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for targetArtifactsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = targetArtifactsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "targetArtifacts()";
            const SELECTOR: [u8; 4] = [133u8, 34u8, 108u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `targetContracts()` and selector `0x3f7286f4`.
    ```solidity
    function targetContracts() external view returns (address[] memory targetedContracts_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetContractsCall {}
    ///Container type for the return parameters of the [`targetContracts()`](targetContractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetContractsReturn {
        pub targetedContracts_: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetContractsCall> for UnderlyingRustTuple<'_> {
                fn from(value: targetContractsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetContractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetContractsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: targetContractsReturn) -> Self {
                    (value.targetedContracts_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetContractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        targetedContracts_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for targetContractsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = targetContractsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "targetContracts()";
            const SELECTOR: [u8; 4] = [63u8, 114u8, 134u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `targetSelectors()` and selector `0x916a17c6`.
    ```solidity
    function targetSelectors() external view returns (StdInvariant.FuzzSelector[] memory targetedSelectors_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetSelectorsCall {}
    ///Container type for the return parameters of the [`targetSelectors()`](targetSelectorsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetSelectorsReturn {
        pub targetedSelectors_: alloy::sol_types::private::Vec<
            <StdInvariant::FuzzSelector as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetSelectorsCall> for UnderlyingRustTuple<'_> {
                fn from(value: targetSelectorsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetSelectorsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<StdInvariant::FuzzSelector>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <StdInvariant::FuzzSelector as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetSelectorsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: targetSelectorsReturn) -> Self {
                    (value.targetedSelectors_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetSelectorsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        targetedSelectors_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for targetSelectorsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = targetSelectorsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<StdInvariant::FuzzSelector>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "targetSelectors()";
            const SELECTOR: [u8; 4] = [145u8, 106u8, 23u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `targetSenders()` and selector `0x3e5e3c23`.
    ```solidity
    function targetSenders() external view returns (address[] memory targetedSenders_);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetSendersCall {}
    ///Container type for the return parameters of the [`targetSenders()`](targetSendersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct targetSendersReturn {
        pub targetedSenders_: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetSendersCall> for UnderlyingRustTuple<'_> {
                fn from(value: targetSendersCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetSendersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<targetSendersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: targetSendersReturn) -> Self {
                    (value.targetedSenders_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for targetSendersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        targetedSenders_: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for targetSendersCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = targetSendersReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "targetSenders()";
            const SELECTOR: [u8; 4] = [62u8, 94u8, 60u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testCanWithdrawDownToSmallShares(uint256,uint32)` and selector `0x6c94bbd3`.
    ```solidity
    function testCanWithdrawDownToSmallShares(uint256 amountToDeposit, uint32 sharesToLeave) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCanWithdrawDownToSmallSharesCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub sharesToLeave: u32,
    }
    ///Container type for the return parameters of the [`testCanWithdrawDownToSmallShares(uint256,uint32)`](testCanWithdrawDownToSmallSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCanWithdrawDownToSmallSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::primitives::aliases::U256, u32);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCanWithdrawDownToSmallSharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: testCanWithdrawDownToSmallSharesCall) -> Self {
                    (value.amountToDeposit, value.sharesToLeave)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCanWithdrawDownToSmallSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                        sharesToLeave: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCanWithdrawDownToSmallSharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testCanWithdrawDownToSmallSharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCanWithdrawDownToSmallSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testCanWithdrawDownToSmallSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testCanWithdrawDownToSmallSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testCanWithdrawDownToSmallShares(uint256,uint32)";
            const SELECTOR: [u8; 4] = [108u8, 148u8, 187u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<32> as alloy_sol_types::SolType>::tokenize(
                        &self.sharesToLeave,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testCannotReceiveZeroShares()` and selector `0x246af589`.
    ```solidity
    function testCannotReceiveZeroShares() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCannotReceiveZeroSharesCall {}
    ///Container type for the return parameters of the [`testCannotReceiveZeroShares()`](testCannotReceiveZeroSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCannotReceiveZeroSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCannotReceiveZeroSharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: testCannotReceiveZeroSharesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCannotReceiveZeroSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCannotReceiveZeroSharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testCannotReceiveZeroSharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCannotReceiveZeroSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testCannotReceiveZeroSharesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testCannotReceiveZeroSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testCannotReceiveZeroShares()";
            const SELECTOR: [u8; 4] = [36u8, 106u8, 245u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testCannotReinitialize()` and selector `0x392eb3b2`.
    ```solidity
    function testCannotReinitialize() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCannotReinitializeCall {}
    ///Container type for the return parameters of the [`testCannotReinitialize()`](testCannotReinitializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testCannotReinitializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCannotReinitializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: testCannotReinitializeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCannotReinitializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testCannotReinitializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testCannotReinitializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testCannotReinitializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testCannotReinitializeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testCannotReinitializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testCannotReinitialize()";
            const SELECTOR: [u8; 4] = [57u8, 46u8, 179u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositFailForTooManyShares()` and selector `0x3b405c3e`.
    ```solidity
    function testDepositFailForTooManyShares() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailForTooManySharesCall {}
    ///Container type for the return parameters of the [`testDepositFailForTooManyShares()`](testDepositFailForTooManySharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailForTooManySharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailForTooManySharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositFailForTooManySharesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositFailForTooManySharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailForTooManySharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositFailForTooManySharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositFailForTooManySharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositFailForTooManySharesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositFailForTooManySharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDepositFailForTooManyShares()";
            const SELECTOR: [u8; 4] = [59u8, 64u8, 92u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositFailsWhenCallingFromNotStrategyManager(address)` and selector `0x472e1522`.
    ```solidity
    function testDepositFailsWhenCallingFromNotStrategyManager(address caller) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenCallingFromNotStrategyManagerCall {
        pub caller: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`testDepositFailsWhenCallingFromNotStrategyManager(address)`](testDepositFailsWhenCallingFromNotStrategyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenCallingFromNotStrategyManagerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenCallingFromNotStrategyManagerCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositFailsWhenCallingFromNotStrategyManagerCall) -> Self {
                    (value.caller,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositFailsWhenCallingFromNotStrategyManagerCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { caller: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenCallingFromNotStrategyManagerReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositFailsWhenCallingFromNotStrategyManagerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositFailsWhenCallingFromNotStrategyManagerReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositFailsWhenCallingFromNotStrategyManagerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositFailsWhenCallingFromNotStrategyManagerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testDepositFailsWhenCallingFromNotStrategyManager(address)";
            const SELECTOR: [u8; 4] = [71u8, 46u8, 21u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositFailsWhenDepositsPaused()` and selector `0xb2d0beb1`.
    ```solidity
    function testDepositFailsWhenDepositsPaused() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenDepositsPausedCall {}
    ///Container type for the return parameters of the [`testDepositFailsWhenDepositsPaused()`](testDepositFailsWhenDepositsPausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenDepositsPausedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenDepositsPausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositFailsWhenDepositsPausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositFailsWhenDepositsPausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenDepositsPausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositFailsWhenDepositsPausedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositFailsWhenDepositsPausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositFailsWhenDepositsPausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositFailsWhenDepositsPausedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDepositFailsWhenDepositsPaused()";
            const SELECTOR: [u8; 4] = [178u8, 208u8, 190u8, 177u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositFailsWhenNotUsingUnderlyingToken(address)` and selector `0x7a7c36d6`.
    ```solidity
    function testDepositFailsWhenNotUsingUnderlyingToken(address notUnderlyingToken) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenNotUsingUnderlyingTokenCall {
        pub notUnderlyingToken: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`testDepositFailsWhenNotUsingUnderlyingToken(address)`](testDepositFailsWhenNotUsingUnderlyingTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositFailsWhenNotUsingUnderlyingTokenReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenNotUsingUnderlyingTokenCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositFailsWhenNotUsingUnderlyingTokenCall) -> Self {
                    (value.notUnderlyingToken,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositFailsWhenNotUsingUnderlyingTokenCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        notUnderlyingToken: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositFailsWhenNotUsingUnderlyingTokenReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositFailsWhenNotUsingUnderlyingTokenReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositFailsWhenNotUsingUnderlyingTokenReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositFailsWhenNotUsingUnderlyingTokenCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositFailsWhenNotUsingUnderlyingTokenReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDepositFailsWhenNotUsingUnderlyingToken(address)";
            const SELECTOR: [u8; 4] = [122u8, 124u8, 54u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.notUnderlyingToken,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositMoreThanMaxPerDeposit(uint256,uint256,uint256)` and selector `0x540d5077`.
    ```solidity
    function testDepositMoreThanMaxPerDeposit(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositMoreThanMaxPerDepositCall {
        pub maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDepositMoreThanMaxPerDeposit(uint256,uint256,uint256)`](testDepositMoreThanMaxPerDepositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositMoreThanMaxPerDepositReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositMoreThanMaxPerDepositCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositMoreThanMaxPerDepositCall) -> Self {
                    (
                        value.maxPerDepositFuzzedInput,
                        value.maxTotalDepositsFuzzedInput,
                        value.amount,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositMoreThanMaxPerDepositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxPerDepositFuzzedInput: tuple.0,
                        maxTotalDepositsFuzzedInput: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositMoreThanMaxPerDepositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositMoreThanMaxPerDepositReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositMoreThanMaxPerDepositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositMoreThanMaxPerDepositCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositMoreThanMaxPerDepositReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testDepositMoreThanMaxPerDeposit(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [84u8, 13u8, 80u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxPerDepositFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositMorethanMaxDeposits()` and selector `0xf09bc876`.
    ```solidity
    function testDepositMorethanMaxDeposits() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositMorethanMaxDepositsCall {}
    ///Container type for the return parameters of the [`testDepositMorethanMaxDeposits()`](testDepositMorethanMaxDepositsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositMorethanMaxDepositsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositMorethanMaxDepositsCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositMorethanMaxDepositsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositMorethanMaxDepositsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositMorethanMaxDepositsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositMorethanMaxDepositsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositMorethanMaxDepositsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositMorethanMaxDepositsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositMorethanMaxDepositsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDepositMorethanMaxDeposits()";
            const SELECTOR: [u8; 4] = [240u8, 155u8, 200u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositTVLLimit_ThenChangeTVLLimit(uint256,uint256)` and selector `0x6f37787c`.
    ```solidity
    function testDepositTVLLimit_ThenChangeTVLLimit(uint256 maxTotalDepositsFuzzedInput, uint256 newMaxTotalDepositsFuzzedInput) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositTVLLimit_ThenChangeTVLLimitCall {
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub newMaxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDepositTVLLimit_ThenChangeTVLLimit(uint256,uint256)`](testDepositTVLLimit_ThenChangeTVLLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositTVLLimit_ThenChangeTVLLimitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositTVLLimit_ThenChangeTVLLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositTVLLimit_ThenChangeTVLLimitCall) -> Self {
                    (
                        value.maxTotalDepositsFuzzedInput,
                        value.newMaxTotalDepositsFuzzedInput,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositTVLLimit_ThenChangeTVLLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxTotalDepositsFuzzedInput: tuple.0,
                        newMaxTotalDepositsFuzzedInput: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositTVLLimit_ThenChangeTVLLimitReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositTVLLimit_ThenChangeTVLLimitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositTVLLimit_ThenChangeTVLLimitReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositTVLLimit_ThenChangeTVLLimitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositTVLLimit_ThenChangeTVLLimitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testDepositTVLLimit_ThenChangeTVLLimit(uint256,uint256)";
            const SELECTOR: [u8; 4] = [111u8, 55u8, 120u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newMaxTotalDepositsFuzzedInput,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositValidAmount(uint256)` and selector `0x31d066cc`.
    ```solidity
    function testDepositValidAmount(uint256 depositAmount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositValidAmountCall {
        pub depositAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDepositValidAmount(uint256)`](testDepositValidAmountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositValidAmountReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositValidAmountCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositValidAmountCall) -> Self {
                    (value.depositAmount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositValidAmountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        depositAmount: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositValidAmountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDepositValidAmountReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDepositValidAmountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositValidAmountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositValidAmountReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDepositValidAmount(uint256)";
            const SELECTOR: [u8; 4] = [49u8, 208u8, 102u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.depositAmount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(uint256,uint256)` and selector `0x69c5cd05`.
    ```solidity
    function testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(uint256 priorTotalShares, uint256 amountToDeposit) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall {
        pub priorTotalShares: alloy::sol_types::private::primitives::aliases::U256,
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(uint256,uint256)`](testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall,
                ) -> Self {
                    (value.priorTotalShares, value.amountToDeposit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        priorTotalShares: tuple.0,
                        amountToDeposit: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl
                ::core::convert::From<testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesReturn,
                ) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(uint256,uint256)";
            const SELECTOR: [u8; 4] = [105u8, 197u8, 205u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.priorTotalShares,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDepositWithZeroPriorBalanceAndZeroPriorShares(uint256)` and selector `0xabcdfa92`.
    ```solidity
    function testDepositWithZeroPriorBalanceAndZeroPriorShares(uint256 amountToDeposit) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositWithZeroPriorBalanceAndZeroPriorSharesCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDepositWithZeroPriorBalanceAndZeroPriorShares(uint256)`](testDepositWithZeroPriorBalanceAndZeroPriorSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDepositWithZeroPriorBalanceAndZeroPriorSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositWithZeroPriorBalanceAndZeroPriorSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositWithZeroPriorBalanceAndZeroPriorSharesCall) -> Self {
                    (value.amountToDeposit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositWithZeroPriorBalanceAndZeroPriorSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDepositWithZeroPriorBalanceAndZeroPriorSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testDepositWithZeroPriorBalanceAndZeroPriorSharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testDepositWithZeroPriorBalanceAndZeroPriorSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDepositWithZeroPriorBalanceAndZeroPriorSharesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDepositWithZeroPriorBalanceAndZeroPriorSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testDepositWithZeroPriorBalanceAndZeroPriorShares(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 205u8, 250u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDeposit_WithTVLLimits(uint256,uint256,uint256)` and selector `0x6639cad6`.
    ```solidity
    function testDeposit_WithTVLLimits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, uint256 depositAmount) external returns (bool depositReverted);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDeposit_WithTVLLimitsCall {
        pub maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub depositAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testDeposit_WithTVLLimits(uint256,uint256,uint256)`](testDeposit_WithTVLLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDeposit_WithTVLLimitsReturn {
        pub depositReverted: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDeposit_WithTVLLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDeposit_WithTVLLimitsCall) -> Self {
                    (
                        value.maxPerDepositFuzzedInput,
                        value.maxTotalDepositsFuzzedInput,
                        value.depositAmount,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDeposit_WithTVLLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxPerDepositFuzzedInput: tuple.0,
                        maxTotalDepositsFuzzedInput: tuple.1,
                        depositAmount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDeposit_WithTVLLimitsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDeposit_WithTVLLimitsReturn) -> Self {
                    (value.depositReverted,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDeposit_WithTVLLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        depositReverted: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDeposit_WithTVLLimitsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDeposit_WithTVLLimitsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDeposit_WithTVLLimits(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [102u8, 57u8, 202u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxPerDepositFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.depositAmount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testDeposit_ZeroAmount()` and selector `0x926e59ff`.
    ```solidity
    function testDeposit_ZeroAmount() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDeposit_ZeroAmountCall {}
    ///Container type for the return parameters of the [`testDeposit_ZeroAmount()`](testDeposit_ZeroAmountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testDeposit_ZeroAmountReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDeposit_ZeroAmountCall> for UnderlyingRustTuple<'_> {
                fn from(value: testDeposit_ZeroAmountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDeposit_ZeroAmountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testDeposit_ZeroAmountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testDeposit_ZeroAmountReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testDeposit_ZeroAmountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testDeposit_ZeroAmountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testDeposit_ZeroAmountReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testDeposit_ZeroAmount()";
            const SELECTOR: [u8; 4] = [146u8, 110u8, 89u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(uint256,uint256,uint96)` and selector `0xd58966ca`.
    ```solidity
    function testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(uint256 amountToDeposit, uint256 amountToTransfer, uint96 amountSharesToQuery) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub amountToTransfer: alloy::sol_types::private::primitives::aliases::U256,
        pub amountSharesToQuery: alloy::sol_types::private::primitives::aliases::U96,
    }
    ///Container type for the return parameters of the [`testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(uint256,uint256,uint96)`](testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U96,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall,
                ) -> Self {
                    (
                        value.amountToDeposit,
                        value.amountToTransfer,
                        value.amountSharesToQuery,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                        amountToTransfer: tuple.1,
                        amountSharesToQuery: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl
                ::core::convert::From<testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesReturn,
                ) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(uint256,uint256,uint96)";
            const SELECTOR: [u8; 4] = [213u8, 137u8, 102u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToTransfer,
                    ),
                    <alloy::sol_types::sol_data::Uint<96> as alloy_sol_types::SolType>::tokenize(
                        &self.amountSharesToQuery,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testIntegrityOfSharesToUnderlyingWithZeroTotalShares(uint240)` and selector `0xbf2d3151`.
    ```solidity
    function testIntegrityOfSharesToUnderlyingWithZeroTotalShares(uint240 amountSharesToQuery) external view;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall {
        pub amountSharesToQuery: alloy::sol_types::private::primitives::aliases::U240,
    }
    ///Container type for the return parameters of the [`testIntegrityOfSharesToUnderlyingWithZeroTotalShares(uint240)`](testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfSharesToUnderlyingWithZeroTotalSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<240>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U240,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall) -> Self {
                    (value.amountSharesToQuery,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountSharesToQuery: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testIntegrityOfSharesToUnderlyingWithZeroTotalSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testIntegrityOfSharesToUnderlyingWithZeroTotalSharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfSharesToUnderlyingWithZeroTotalSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<240>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testIntegrityOfSharesToUnderlyingWithZeroTotalSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testIntegrityOfSharesToUnderlyingWithZeroTotalShares(uint240)";
            const SELECTOR: [u8; 4] = [191u8, 45u8, 49u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<240> as alloy_sol_types::SolType>::tokenize(
                        &self.amountSharesToQuery,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(uint256,uint256,uint96)` and selector `0x958c9675`.
    ```solidity
    function testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(uint256 amountToDeposit, uint256 amountToTransfer, uint96 amountUnderlyingToQuery) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub amountToTransfer: alloy::sol_types::private::primitives::aliases::U256,
        pub amountUnderlyingToQuery: alloy::sol_types::private::primitives::aliases::U96,
    }
    ///Container type for the return parameters of the [`testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(uint256,uint256,uint96)`](testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U96,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall,
                ) -> Self {
                    (
                        value.amountToDeposit,
                        value.amountToTransfer,
                        value.amountUnderlyingToQuery,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                        amountToTransfer: tuple.1,
                        amountUnderlyingToQuery: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl
                ::core::convert::From<testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesReturn,
                ) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(uint256,uint256,uint96)";
            const SELECTOR: [u8; 4] = [149u8, 140u8, 150u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToTransfer,
                    ),
                    <alloy::sol_types::sol_data::Uint<96> as alloy_sol_types::SolType>::tokenize(
                        &self.amountUnderlyingToQuery,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testSetInvalidMaxPerDepositAndMaxDeposits(uint256,uint256)` and selector `0x0bef1d0f`.
    ```solidity
    function testSetInvalidMaxPerDepositAndMaxDeposits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetInvalidMaxPerDepositAndMaxDepositsCall {
        pub maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testSetInvalidMaxPerDepositAndMaxDeposits(uint256,uint256)`](testSetInvalidMaxPerDepositAndMaxDepositsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetInvalidMaxPerDepositAndMaxDepositsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetInvalidMaxPerDepositAndMaxDepositsCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testSetInvalidMaxPerDepositAndMaxDepositsCall) -> Self {
                    (
                        value.maxPerDepositFuzzedInput,
                        value.maxTotalDepositsFuzzedInput,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testSetInvalidMaxPerDepositAndMaxDepositsCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxPerDepositFuzzedInput: tuple.0,
                        maxTotalDepositsFuzzedInput: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetInvalidMaxPerDepositAndMaxDepositsReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testSetInvalidMaxPerDepositAndMaxDepositsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testSetInvalidMaxPerDepositAndMaxDepositsReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testSetInvalidMaxPerDepositAndMaxDepositsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testSetInvalidMaxPerDepositAndMaxDepositsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testSetInvalidMaxPerDepositAndMaxDeposits(uint256,uint256)";
            const SELECTOR: [u8; 4] = [11u8, 239u8, 29u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxPerDepositFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testSetTVLLimits(uint256,uint256)` and selector `0x62b9f55b`.
    ```solidity
    function testSetTVLLimits(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetTVLLimitsCall {
        pub maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testSetTVLLimits(uint256,uint256)`](testSetTVLLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetTVLLimitsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetTVLLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: testSetTVLLimitsCall) -> Self {
                    (
                        value.maxPerDepositFuzzedInput,
                        value.maxTotalDepositsFuzzedInput,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testSetTVLLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxPerDepositFuzzedInput: tuple.0,
                        maxTotalDepositsFuzzedInput: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetTVLLimitsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testSetTVLLimitsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testSetTVLLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testSetTVLLimitsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testSetTVLLimitsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testSetTVLLimits(uint256,uint256)";
            const SELECTOR: [u8; 4] = [98u8, 185u8, 245u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxPerDepositFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testSetTVLLimitsFailsWhenNotCalledByUnpauser(uint256,uint256,address)` and selector `0xadd114c5`.
    ```solidity
    function testSetTVLLimitsFailsWhenNotCalledByUnpauser(uint256 maxPerDepositFuzzedInput, uint256 maxTotalDepositsFuzzedInput, address notUnpauser) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetTVLLimitsFailsWhenNotCalledByUnpauserCall {
        pub maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        pub notUnpauser: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`testSetTVLLimitsFailsWhenNotCalledByUnpauser(uint256,uint256,address)`](testSetTVLLimitsFailsWhenNotCalledByUnpauserCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testSetTVLLimitsFailsWhenNotCalledByUnpauserReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetTVLLimitsFailsWhenNotCalledByUnpauserCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testSetTVLLimitsFailsWhenNotCalledByUnpauserCall) -> Self {
                    (
                        value.maxPerDepositFuzzedInput,
                        value.maxTotalDepositsFuzzedInput,
                        value.notUnpauser,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testSetTVLLimitsFailsWhenNotCalledByUnpauserCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxPerDepositFuzzedInput: tuple.0,
                        maxTotalDepositsFuzzedInput: tuple.1,
                        notUnpauser: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testSetTVLLimitsFailsWhenNotCalledByUnpauserReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testSetTVLLimitsFailsWhenNotCalledByUnpauserReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testSetTVLLimitsFailsWhenNotCalledByUnpauserReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testSetTVLLimitsFailsWhenNotCalledByUnpauserCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testSetTVLLimitsFailsWhenNotCalledByUnpauserReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testSetTVLLimitsFailsWhenNotCalledByUnpauser(uint256,uint256,address)";
            const SELECTOR: [u8; 4] = [173u8, 209u8, 20u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxPerDepositFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.maxTotalDepositsFuzzedInput,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.notUnpauser,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawFailsWhenSharesGreaterThanTotalShares(uint256,uint256)` and selector `0x59e9374b`.
    ```solidity
    function testWithdrawFailsWhenSharesGreaterThanTotalShares(uint256 amountToDeposit, uint256 sharesToWithdraw) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawFailsWhenSharesGreaterThanTotalSharesCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub sharesToWithdraw: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testWithdrawFailsWhenSharesGreaterThanTotalShares(uint256,uint256)`](testWithdrawFailsWhenSharesGreaterThanTotalSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawFailsWhenSharesGreaterThanTotalSharesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawFailsWhenSharesGreaterThanTotalSharesCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawFailsWhenSharesGreaterThanTotalSharesCall) -> Self {
                    (value.amountToDeposit, value.sharesToWithdraw)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawFailsWhenSharesGreaterThanTotalSharesCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                        sharesToWithdraw: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawFailsWhenSharesGreaterThanTotalSharesReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawFailsWhenSharesGreaterThanTotalSharesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawFailsWhenSharesGreaterThanTotalSharesReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawFailsWhenSharesGreaterThanTotalSharesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawFailsWhenSharesGreaterThanTotalSharesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testWithdrawFailsWhenSharesGreaterThanTotalShares(uint256,uint256)";
            const SELECTOR: [u8; 4] = [89u8, 233u8, 55u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.sharesToWithdraw,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawFailsWhenWithdrawalsPaused(uint256)` and selector `0x4652cf26`.
    ```solidity
    function testWithdrawFailsWhenWithdrawalsPaused(uint256 amountToDeposit) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawFailsWhenWithdrawalsPausedCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testWithdrawFailsWhenWithdrawalsPaused(uint256)`](testWithdrawFailsWhenWithdrawalsPausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawFailsWhenWithdrawalsPausedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawFailsWhenWithdrawalsPausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: testWithdrawFailsWhenWithdrawalsPausedCall) -> Self {
                    (value.amountToDeposit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testWithdrawFailsWhenWithdrawalsPausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawFailsWhenWithdrawalsPausedReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawFailsWhenWithdrawalsPausedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawFailsWhenWithdrawalsPausedReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawFailsWhenWithdrawalsPausedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawFailsWhenWithdrawalsPausedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testWithdrawFailsWhenWithdrawalsPaused(uint256)";
            const SELECTOR: [u8; 4] = [70u8, 82u8, 207u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawWithPriorTotalSharesAndAmountSharesEqual(uint256)` and selector `0xc4f81e3a`.
    ```solidity
    function testWithdrawWithPriorTotalSharesAndAmountSharesEqual(uint256 amountToDeposit) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testWithdrawWithPriorTotalSharesAndAmountSharesEqual(uint256)`](testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawWithPriorTotalSharesAndAmountSharesEqualReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall) -> Self {
                    (value.amountToDeposit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawWithPriorTotalSharesAndAmountSharesEqualReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawWithPriorTotalSharesAndAmountSharesEqualReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawWithPriorTotalSharesAndAmountSharesEqualReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawWithPriorTotalSharesAndAmountSharesEqualReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testWithdrawWithPriorTotalSharesAndAmountSharesEqual(uint256)";
            const SELECTOR: [u8; 4] = [196u8, 248u8, 30u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(uint96,uint96)` and selector `0xa1357777`.
    ```solidity
    function testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(uint96 amountToDeposit, uint96 sharesToWithdraw) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U96,
        pub sharesToWithdraw: alloy::sol_types::private::primitives::aliases::U96,
    }
    ///Container type for the return parameters of the [`testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(uint96,uint96)`](testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<96>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U96,
                alloy::sol_types::private::primitives::aliases::U96,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall,
                ) -> Self {
                    (value.amountToDeposit, value.sharesToWithdraw)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                        sharesToWithdraw: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl
                ::core::convert::From<testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(
                    value: testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualReturn,
                ) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<96>,
                alloy::sol_types::sol_data::Uint<96>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(uint96,uint96)";
            const SELECTOR: [u8; 4] = [161u8, 53u8, 119u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<96> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<96> as alloy_sol_types::SolType>::tokenize(
                        &self.sharesToWithdraw,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawZeroAmount(uint256)` and selector `0xe70b8835`.
    ```solidity
    function testWithdrawZeroAmount(uint256 amountToDeposit) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawZeroAmountCall {
        pub amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`testWithdrawZeroAmount(uint256)`](testWithdrawZeroAmountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawZeroAmountReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawZeroAmountCall> for UnderlyingRustTuple<'_> {
                fn from(value: testWithdrawZeroAmountCall) -> Self {
                    (value.amountToDeposit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testWithdrawZeroAmountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountToDeposit: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawZeroAmountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: testWithdrawZeroAmountReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for testWithdrawZeroAmountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawZeroAmountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawZeroAmountReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testWithdrawZeroAmount(uint256)";
            const SELECTOR: [u8; 4] = [231u8, 11u8, 136u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountToDeposit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawalFailsWhenCallingFromNotStrategyManager(address)` and selector `0x411ae37a`.
    ```solidity
    function testWithdrawalFailsWhenCallingFromNotStrategyManager(address caller) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenCallingFromNotStrategyManagerCall {
        pub caller: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`testWithdrawalFailsWhenCallingFromNotStrategyManager(address)`](testWithdrawalFailsWhenCallingFromNotStrategyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenCallingFromNotStrategyManagerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenCallingFromNotStrategyManagerCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenCallingFromNotStrategyManagerCall) -> Self {
                    (value.caller,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenCallingFromNotStrategyManagerCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { caller: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenCallingFromNotStrategyManagerReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenCallingFromNotStrategyManagerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenCallingFromNotStrategyManagerReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawalFailsWhenCallingFromNotStrategyManagerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawalFailsWhenCallingFromNotStrategyManagerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testWithdrawalFailsWhenCallingFromNotStrategyManager(address)";
            const SELECTOR: [u8; 4] = [65u8, 26u8, 227u8, 122u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawalFailsWhenNotUsingUnderlyingToken(address)` and selector `0x3c6efe85`.
    ```solidity
    function testWithdrawalFailsWhenNotUsingUnderlyingToken(address notUnderlyingToken) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenNotUsingUnderlyingTokenCall {
        pub notUnderlyingToken: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`testWithdrawalFailsWhenNotUsingUnderlyingToken(address)`](testWithdrawalFailsWhenNotUsingUnderlyingTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenNotUsingUnderlyingTokenReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenNotUsingUnderlyingTokenCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenNotUsingUnderlyingTokenCall) -> Self {
                    (value.notUnderlyingToken,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenNotUsingUnderlyingTokenCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        notUnderlyingToken: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenNotUsingUnderlyingTokenReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenNotUsingUnderlyingTokenReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenNotUsingUnderlyingTokenReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawalFailsWhenNotUsingUnderlyingTokenCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawalFailsWhenNotUsingUnderlyingTokenReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "testWithdrawalFailsWhenNotUsingUnderlyingToken(address)";
            const SELECTOR: [u8; 4] = [60u8, 110u8, 254u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.notUnderlyingToken,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `testWithdrawalFailsWhenTokenTransferFails()` and selector `0x10db5f7b`.
    ```solidity
    function testWithdrawalFailsWhenTokenTransferFails() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenTokenTransferFailsCall {}
    ///Container type for the return parameters of the [`testWithdrawalFailsWhenTokenTransferFails()`](testWithdrawalFailsWhenTokenTransferFailsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct testWithdrawalFailsWhenTokenTransferFailsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenTokenTransferFailsCall>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenTokenTransferFailsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenTokenTransferFailsCall
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<testWithdrawalFailsWhenTokenTransferFailsReturn>
                for UnderlyingRustTuple<'_>
            {
                fn from(value: testWithdrawalFailsWhenTokenTransferFailsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
                for testWithdrawalFailsWhenTokenTransferFailsReturn
            {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for testWithdrawalFailsWhenTokenTransferFailsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = testWithdrawalFailsWhenTokenTransferFailsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "testWithdrawalFailsWhenTokenTransferFails()";
            const SELECTOR: [u8; 4] = [16u8, 219u8, 95u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `underlyingToken()` and selector `0x2495a599`.
    ```solidity
    function underlyingToken() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingTokenCall {}
    ///Container type for the return parameters of the [`underlyingToken()`](underlyingTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingTokenReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingTokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingTokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingTokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingTokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingTokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingTokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for underlyingTokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = underlyingTokenReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "underlyingToken()";
            const SELECTOR: [u8; 4] = [36u8, 149u8, 165u8, 153u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `unpauser()` and selector `0xeab66d7a`.
    ```solidity
    function unpauser() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauserCall {}
    ///Container type for the return parameters of the [`unpauser()`](unpauserCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauserReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauserCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauserCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauserCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauserReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauserReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauserReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauserCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauserReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpauser()";
            const SELECTOR: [u8; 4] = [234u8, 182u8, 109u8, 122u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`StrategyBaseTVLLimitsUnitTests`](self) function calls.
    pub enum StrategyBaseTVLLimitsUnitTestsCalls {
        IS_TEST(IS_TESTCall),
        excludeArtifacts(excludeArtifactsCall),
        excludeContracts(excludeContractsCall),
        excludeSenders(excludeSendersCall),
        failed(failedCall),
        pauser(pauserCall),
        pauserRegistry(pauserRegistryCall),
        proxyAdmin(proxyAdminCall),
        setUp(setUpCall),
        strategy(strategyCall),
        strategyBaseTVLLimitsImplementation(strategyBaseTVLLimitsImplementationCall),
        strategyImplementation(strategyImplementationCall),
        strategyManager(strategyManagerCall),
        strategyWithTVLLimits(strategyWithTVLLimitsCall),
        targetArtifactSelectors(targetArtifactSelectorsCall),
        targetArtifacts(targetArtifactsCall),
        targetContracts(targetContractsCall),
        targetSelectors(targetSelectorsCall),
        targetSenders(targetSendersCall),
        testCanWithdrawDownToSmallShares(testCanWithdrawDownToSmallSharesCall),
        testCannotReceiveZeroShares(testCannotReceiveZeroSharesCall),
        testCannotReinitialize(testCannotReinitializeCall),
        testDepositFailForTooManyShares(testDepositFailForTooManySharesCall),
        testDepositFailsWhenCallingFromNotStrategyManager(
            testDepositFailsWhenCallingFromNotStrategyManagerCall,
        ),
        testDepositFailsWhenDepositsPaused(testDepositFailsWhenDepositsPausedCall),
        testDepositFailsWhenNotUsingUnderlyingToken(
            testDepositFailsWhenNotUsingUnderlyingTokenCall,
        ),
        testDepositMoreThanMaxPerDeposit(testDepositMoreThanMaxPerDepositCall),
        testDepositMorethanMaxDeposits(testDepositMorethanMaxDepositsCall),
        testDepositTVLLimit_ThenChangeTVLLimit(testDepositTVLLimit_ThenChangeTVLLimitCall),
        testDepositValidAmount(testDepositValidAmountCall),
        testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(
            testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall,
        ),
        testDepositWithZeroPriorBalanceAndZeroPriorShares(
            testDepositWithZeroPriorBalanceAndZeroPriorSharesCall,
        ),
        testDeposit_WithTVLLimits(testDeposit_WithTVLLimitsCall),
        testDeposit_ZeroAmount(testDeposit_ZeroAmountCall),
        testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(
            testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall,
        ),
        testIntegrityOfSharesToUnderlyingWithZeroTotalShares(
            testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall,
        ),
        testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(
            testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall,
        ),
        testSetInvalidMaxPerDepositAndMaxDeposits(testSetInvalidMaxPerDepositAndMaxDepositsCall),
        testSetTVLLimits(testSetTVLLimitsCall),
        testSetTVLLimitsFailsWhenNotCalledByUnpauser(
            testSetTVLLimitsFailsWhenNotCalledByUnpauserCall,
        ),
        testWithdrawFailsWhenSharesGreaterThanTotalShares(
            testWithdrawFailsWhenSharesGreaterThanTotalSharesCall,
        ),
        testWithdrawFailsWhenWithdrawalsPaused(testWithdrawFailsWhenWithdrawalsPausedCall),
        testWithdrawWithPriorTotalSharesAndAmountSharesEqual(
            testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall,
        ),
        testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(
            testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall,
        ),
        testWithdrawZeroAmount(testWithdrawZeroAmountCall),
        testWithdrawalFailsWhenCallingFromNotStrategyManager(
            testWithdrawalFailsWhenCallingFromNotStrategyManagerCall,
        ),
        testWithdrawalFailsWhenNotUsingUnderlyingToken(
            testWithdrawalFailsWhenNotUsingUnderlyingTokenCall,
        ),
        testWithdrawalFailsWhenTokenTransferFails(testWithdrawalFailsWhenTokenTransferFailsCall),
        underlyingToken(underlyingTokenCall),
        unpauser(unpauserCall),
    }
    #[automatically_derived]
    impl StrategyBaseTVLLimitsUnitTestsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [11u8, 239u8, 29u8, 15u8],
            [16u8, 219u8, 95u8, 123u8],
            [30u8, 215u8, 131u8, 28u8],
            [36u8, 106u8, 245u8, 137u8],
            [36u8, 149u8, 165u8, 153u8],
            [49u8, 54u8, 62u8, 230u8],
            [49u8, 208u8, 102u8, 204u8],
            [57u8, 46u8, 179u8, 178u8],
            [57u8, 183u8, 14u8, 56u8],
            [59u8, 64u8, 92u8, 62u8],
            [60u8, 110u8, 254u8, 133u8],
            [62u8, 71u8, 21u8, 140u8],
            [62u8, 94u8, 60u8, 35u8],
            [63u8, 114u8, 134u8, 244u8],
            [65u8, 26u8, 227u8, 122u8],
            [70u8, 82u8, 207u8, 38u8],
            [71u8, 46u8, 21u8, 34u8],
            [84u8, 13u8, 80u8, 119u8],
            [89u8, 233u8, 55u8, 75u8],
            [98u8, 185u8, 245u8, 91u8],
            [102u8, 57u8, 202u8, 214u8],
            [102u8, 217u8, 169u8, 160u8],
            [105u8, 197u8, 205u8, 5u8],
            [108u8, 148u8, 187u8, 211u8],
            [111u8, 55u8, 120u8, 124u8],
            [122u8, 124u8, 54u8, 214u8],
            [133u8, 34u8, 108u8, 129u8],
            [136u8, 111u8, 17u8, 149u8],
            [145u8, 106u8, 23u8, 198u8],
            [146u8, 110u8, 89u8, 255u8],
            [149u8, 140u8, 150u8, 117u8],
            [159u8, 208u8, 80u8, 109u8],
            [161u8, 53u8, 119u8, 119u8],
            [168u8, 198u8, 46u8, 118u8],
            [171u8, 205u8, 250u8, 146u8],
            [173u8, 209u8, 20u8, 197u8],
            [178u8, 208u8, 190u8, 177u8],
            [181u8, 80u8, 138u8, 169u8],
            [186u8, 65u8, 79u8, 166u8],
            [189u8, 146u8, 43u8, 28u8],
            [191u8, 45u8, 49u8, 81u8],
            [196u8, 248u8, 30u8, 58u8],
            [198u8, 67u8, 98u8, 98u8],
            [213u8, 137u8, 102u8, 202u8],
            [226u8, 12u8, 159u8, 113u8],
            [231u8, 11u8, 136u8, 53u8],
            [234u8, 182u8, 109u8, 122u8],
            [240u8, 155u8, 200u8, 118u8],
            [250u8, 118u8, 38u8, 212u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrategyBaseTVLLimitsUnitTestsCalls {
        const NAME: &'static str = "StrategyBaseTVLLimitsUnitTestsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 50usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_TEST(_) => <IS_TESTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::excludeArtifacts(_) => {
                    <excludeArtifactsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::excludeContracts(_) => {
                    <excludeContractsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::excludeSenders(_) => {
                    <excludeSendersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::failed(_) => <failedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pauser(_) => <pauserCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pauserRegistry(_) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxyAdmin(_) => {
                    <proxyAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::strategy(_) => <strategyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::strategyBaseTVLLimitsImplementation(_) => {
                    <strategyBaseTVLLimitsImplementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::strategyImplementation(_) => {
                    <strategyImplementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::strategyManager(_) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::strategyWithTVLLimits(_) => {
                    <strategyWithTVLLimitsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::targetArtifactSelectors(_) => {
                    <targetArtifactSelectorsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::targetArtifacts(_) => {
                    <targetArtifactsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::targetContracts(_) => {
                    <targetContractsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::targetSelectors(_) => {
                    <targetSelectorsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::targetSenders(_) => {
                    <targetSendersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testCanWithdrawDownToSmallShares(_) => {
                    <testCanWithdrawDownToSmallSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testCannotReceiveZeroShares(_) => {
                    <testCannotReceiveZeroSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testCannotReinitialize(_) => {
                    <testCannotReinitializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositFailForTooManyShares(_) => {
                    <testDepositFailForTooManySharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositFailsWhenCallingFromNotStrategyManager(_) => {
                    <testDepositFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositFailsWhenDepositsPaused(_) => {
                    <testDepositFailsWhenDepositsPausedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositFailsWhenNotUsingUnderlyingToken(_) => {
                    <testDepositFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositMoreThanMaxPerDeposit(_) => {
                    <testDepositMoreThanMaxPerDepositCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositMorethanMaxDeposits(_) => {
                    <testDepositMorethanMaxDepositsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositTVLLimit_ThenChangeTVLLimit(_) => {
                    <testDepositTVLLimit_ThenChangeTVLLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositValidAmount(_) => {
                    <testDepositValidAmountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(_) => {
                    <testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDepositWithZeroPriorBalanceAndZeroPriorShares(_) => {
                    <testDepositWithZeroPriorBalanceAndZeroPriorSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDeposit_WithTVLLimits(_) => {
                    <testDeposit_WithTVLLimitsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testDeposit_ZeroAmount(_) => {
                    <testDeposit_ZeroAmountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(_) => {
                    <testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testIntegrityOfSharesToUnderlyingWithZeroTotalShares(_) => {
                    <testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(_) => {
                    <testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testSetInvalidMaxPerDepositAndMaxDeposits(_) => {
                    <testSetInvalidMaxPerDepositAndMaxDepositsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testSetTVLLimits(_) => {
                    <testSetTVLLimitsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testSetTVLLimitsFailsWhenNotCalledByUnpauser(_) => {
                    <testSetTVLLimitsFailsWhenNotCalledByUnpauserCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawFailsWhenSharesGreaterThanTotalShares(_) => {
                    <testWithdrawFailsWhenSharesGreaterThanTotalSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawFailsWhenWithdrawalsPaused(_) => {
                    <testWithdrawFailsWhenWithdrawalsPausedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesEqual(_) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(_) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawZeroAmount(_) => {
                    <testWithdrawZeroAmountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawalFailsWhenCallingFromNotStrategyManager(_) => {
                    <testWithdrawalFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawalFailsWhenNotUsingUnderlyingToken(_) => {
                    <testWithdrawalFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::testWithdrawalFailsWhenTokenTransferFails(_) => {
                    <testWithdrawalFailsWhenTokenTransferFailsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::underlyingToken(_) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpauser(_) => <unpauserCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                StrategyBaseTVLLimitsUnitTestsCalls,
            >] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::setUp)
                    }
                    setUp
                },
                {
                    fn testSetInvalidMaxPerDepositAndMaxDeposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testSetInvalidMaxPerDepositAndMaxDepositsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testSetInvalidMaxPerDepositAndMaxDeposits,
                            )
                    }
                    testSetInvalidMaxPerDepositAndMaxDeposits
                },
                {
                    fn testWithdrawalFailsWhenTokenTransferFails(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawalFailsWhenTokenTransferFailsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawalFailsWhenTokenTransferFails,
                            )
                    }
                    testWithdrawalFailsWhenTokenTransferFails
                },
                {
                    fn excludeSenders(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <excludeSendersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::excludeSenders)
                    }
                    excludeSenders
                },
                {
                    fn testCannotReceiveZeroShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testCannotReceiveZeroSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testCannotReceiveZeroShares,
                            )
                    }
                    testCannotReceiveZeroShares
                },
                {
                    fn underlyingToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <underlyingTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::underlyingToken)
                    }
                    underlyingToken
                },
                {
                    fn strategyBaseTVLLimitsImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <strategyBaseTVLLimitsImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::strategyBaseTVLLimitsImplementation,
                            )
                    }
                    strategyBaseTVLLimitsImplementation
                },
                {
                    fn testDepositValidAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositValidAmountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testDepositValidAmount)
                    }
                    testDepositValidAmount
                },
                {
                    fn testCannotReinitialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testCannotReinitializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testCannotReinitialize)
                    }
                    testCannotReinitialize
                },
                {
                    fn strategyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <strategyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::strategyManager)
                    }
                    strategyManager
                },
                {
                    fn testDepositFailForTooManyShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositFailForTooManySharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositFailForTooManyShares,
                            )
                    }
                    testDepositFailForTooManyShares
                },
                {
                    fn testWithdrawalFailsWhenNotUsingUnderlyingToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawalFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawalFailsWhenNotUsingUnderlyingToken,
                            )
                    }
                    testWithdrawalFailsWhenNotUsingUnderlyingToken
                },
                {
                    fn proxyAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <proxyAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::proxyAdmin)
                    }
                    proxyAdmin
                },
                {
                    fn targetSenders(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <targetSendersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::targetSenders)
                    }
                    targetSenders
                },
                {
                    fn targetContracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <targetContractsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::targetContracts)
                    }
                    targetContracts
                },
                {
                    fn testWithdrawalFailsWhenCallingFromNotStrategyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawalFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawalFailsWhenCallingFromNotStrategyManager,
                            )
                    }
                    testWithdrawalFailsWhenCallingFromNotStrategyManager
                },
                {
                    fn testWithdrawFailsWhenWithdrawalsPaused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawFailsWhenWithdrawalsPausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawFailsWhenWithdrawalsPaused,
                            )
                    }
                    testWithdrawFailsWhenWithdrawalsPaused
                },
                {
                    fn testDepositFailsWhenCallingFromNotStrategyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositFailsWhenCallingFromNotStrategyManager,
                            )
                    }
                    testDepositFailsWhenCallingFromNotStrategyManager
                },
                {
                    fn testDepositMoreThanMaxPerDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositMoreThanMaxPerDepositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositMoreThanMaxPerDeposit,
                            )
                    }
                    testDepositMoreThanMaxPerDeposit
                },
                {
                    fn testWithdrawFailsWhenSharesGreaterThanTotalShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawFailsWhenSharesGreaterThanTotalSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawFailsWhenSharesGreaterThanTotalShares,
                            )
                    }
                    testWithdrawFailsWhenSharesGreaterThanTotalShares
                },
                {
                    fn testSetTVLLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testSetTVLLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testSetTVLLimits)
                    }
                    testSetTVLLimits
                },
                {
                    fn testDeposit_WithTVLLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDeposit_WithTVLLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testDeposit_WithTVLLimits)
                    }
                    testDeposit_WithTVLLimits
                },
                {
                    fn targetArtifactSelectors(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <targetArtifactSelectorsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::targetArtifactSelectors)
                    }
                    targetArtifactSelectors
                },
                {
                    fn testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares,
                            )
                    }
                    testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares
                },
                {
                    fn testCanWithdrawDownToSmallShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testCanWithdrawDownToSmallSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testCanWithdrawDownToSmallShares,
                            )
                    }
                    testCanWithdrawDownToSmallShares
                },
                {
                    fn testDepositTVLLimit_ThenChangeTVLLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositTVLLimit_ThenChangeTVLLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositTVLLimit_ThenChangeTVLLimit,
                            )
                    }
                    testDepositTVLLimit_ThenChangeTVLLimit
                },
                {
                    fn testDepositFailsWhenNotUsingUnderlyingToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositFailsWhenNotUsingUnderlyingToken,
                            )
                    }
                    testDepositFailsWhenNotUsingUnderlyingToken
                },
                {
                    fn targetArtifacts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <targetArtifactsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::targetArtifacts)
                    }
                    targetArtifacts
                },
                {
                    fn pauserRegistry(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <pauserRegistryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::pauserRegistry)
                    }
                    pauserRegistry
                },
                {
                    fn targetSelectors(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <targetSelectorsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::targetSelectors)
                    }
                    targetSelectors
                },
                {
                    fn testDeposit_ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDeposit_ZeroAmountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testDeposit_ZeroAmount)
                    }
                    testDeposit_ZeroAmount
                },
                {
                    fn testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares,
                            )
                    }
                    testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares
                },
                {
                    fn pauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <pauserCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::pauser)
                    }
                    pauser
                },
                {
                    fn testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual,
                            )
                    }
                    testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual
                },
                {
                    fn strategy(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <strategyCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::strategy)
                    }
                    strategy
                },
                {
                    fn testDepositWithZeroPriorBalanceAndZeroPriorShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositWithZeroPriorBalanceAndZeroPriorSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositWithZeroPriorBalanceAndZeroPriorShares,
                            )
                    }
                    testDepositWithZeroPriorBalanceAndZeroPriorShares
                },
                {
                    fn testSetTVLLimitsFailsWhenNotCalledByUnpauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testSetTVLLimitsFailsWhenNotCalledByUnpauserCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testSetTVLLimitsFailsWhenNotCalledByUnpauser,
                            )
                    }
                    testSetTVLLimitsFailsWhenNotCalledByUnpauser
                },
                {
                    fn testDepositFailsWhenDepositsPaused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositFailsWhenDepositsPausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositFailsWhenDepositsPaused,
                            )
                    }
                    testDepositFailsWhenDepositsPaused
                },
                {
                    fn excludeArtifacts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <excludeArtifactsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::excludeArtifacts)
                    }
                    excludeArtifacts
                },
                {
                    fn failed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <failedCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::failed)
                    }
                    failed
                },
                {
                    fn strategyImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <strategyImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::strategyImplementation)
                    }
                    strategyImplementation
                },
                {
                    fn testIntegrityOfSharesToUnderlyingWithZeroTotalShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testIntegrityOfSharesToUnderlyingWithZeroTotalShares,
                            )
                    }
                    testIntegrityOfSharesToUnderlyingWithZeroTotalShares
                },
                {
                    fn testWithdrawWithPriorTotalSharesAndAmountSharesEqual(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawWithPriorTotalSharesAndAmountSharesEqual,
                            )
                    }
                    testWithdrawWithPriorTotalSharesAndAmountSharesEqual
                },
                {
                    fn strategyWithTVLLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <strategyWithTVLLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::strategyWithTVLLimits)
                    }
                    strategyWithTVLLimits
                },
                {
                    fn testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares,
                            )
                    }
                    testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares
                },
                {
                    fn excludeContracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <excludeContractsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::excludeContracts)
                    }
                    excludeContracts
                },
                {
                    fn testWithdrawZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testWithdrawZeroAmountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsUnitTestsCalls::testWithdrawZeroAmount)
                    }
                    testWithdrawZeroAmount
                },
                {
                    fn unpauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <unpauserCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::unpauser)
                    }
                    unpauser
                },
                {
                    fn testDepositMorethanMaxDeposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <testDepositMorethanMaxDepositsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsUnitTestsCalls::testDepositMorethanMaxDeposits,
                            )
                    }
                    testDepositMorethanMaxDeposits
                },
                {
                    fn IS_TEST(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsUnitTestsCalls>
                    {
                        <IS_TESTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsUnitTestsCalls::IS_TEST)
                    }
                    IS_TEST
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_TEST(inner) => {
                    <IS_TESTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::excludeArtifacts(inner) => {
                    <excludeArtifactsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::excludeContracts(inner) => {
                    <excludeContractsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::excludeSenders(inner) => {
                    <excludeSendersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::failed(inner) => {
                    <failedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pauser(inner) => {
                    <pauserCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pauserRegistry(inner) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxyAdmin(inner) => {
                    <proxyAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::strategy(inner) => {
                    <strategyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::strategyBaseTVLLimitsImplementation(inner) => {
                    <strategyBaseTVLLimitsImplementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::strategyImplementation(inner) => {
                    <strategyImplementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::strategyManager(inner) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::strategyWithTVLLimits(inner) => {
                    <strategyWithTVLLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::targetArtifactSelectors(inner) => {
                    <targetArtifactSelectorsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::targetArtifacts(inner) => {
                    <targetArtifactsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::targetContracts(inner) => {
                    <targetContractsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::targetSelectors(inner) => {
                    <targetSelectorsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::targetSenders(inner) => {
                    <targetSendersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testCanWithdrawDownToSmallShares(inner) => {
                    <testCanWithdrawDownToSmallSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testCannotReceiveZeroShares(inner) => {
                    <testCannotReceiveZeroSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testCannotReinitialize(inner) => {
                    <testCannotReinitializeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositFailForTooManyShares(inner) => {
                    <testDepositFailForTooManySharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositFailsWhenCallingFromNotStrategyManager(inner) => {
                    <testDepositFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositFailsWhenDepositsPaused(inner) => {
                    <testDepositFailsWhenDepositsPausedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositFailsWhenNotUsingUnderlyingToken(inner) => {
                    <testDepositFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositMoreThanMaxPerDeposit(inner) => {
                    <testDepositMoreThanMaxPerDepositCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositMorethanMaxDeposits(inner) => {
                    <testDepositMorethanMaxDepositsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositTVLLimit_ThenChangeTVLLimit(inner) => {
                    <testDepositTVLLimit_ThenChangeTVLLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositValidAmount(inner) => {
                    <testDepositValidAmountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(inner) => {
                    <testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDepositWithZeroPriorBalanceAndZeroPriorShares(inner) => {
                    <testDepositWithZeroPriorBalanceAndZeroPriorSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDeposit_WithTVLLimits(inner) => {
                    <testDeposit_WithTVLLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testDeposit_ZeroAmount(inner) => {
                    <testDeposit_ZeroAmountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(inner) => {
                    <testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testIntegrityOfSharesToUnderlyingWithZeroTotalShares(inner) => {
                    <testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(inner) => {
                    <testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testSetInvalidMaxPerDepositAndMaxDeposits(inner) => {
                    <testSetInvalidMaxPerDepositAndMaxDepositsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testSetTVLLimits(inner) => {
                    <testSetTVLLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testSetTVLLimitsFailsWhenNotCalledByUnpauser(inner) => {
                    <testSetTVLLimitsFailsWhenNotCalledByUnpauserCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawFailsWhenSharesGreaterThanTotalShares(inner) => {
                    <testWithdrawFailsWhenSharesGreaterThanTotalSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawFailsWhenWithdrawalsPaused(inner) => {
                    <testWithdrawFailsWhenWithdrawalsPausedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesEqual(inner) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(inner) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawZeroAmount(inner) => {
                    <testWithdrawZeroAmountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawalFailsWhenCallingFromNotStrategyManager(inner) => {
                    <testWithdrawalFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawalFailsWhenNotUsingUnderlyingToken(inner) => {
                    <testWithdrawalFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::testWithdrawalFailsWhenTokenTransferFails(inner) => {
                    <testWithdrawalFailsWhenTokenTransferFailsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::underlyingToken(inner) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpauser(inner) => {
                    <unpauserCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_TEST(inner) => {
                    <IS_TESTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::excludeArtifacts(inner) => {
                    <excludeArtifactsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::excludeContracts(inner) => {
                    <excludeContractsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::excludeSenders(inner) => {
                    <excludeSendersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::failed(inner) => {
                    <failedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pauser(inner) => {
                    <pauserCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pauserRegistry(inner) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxyAdmin(inner) => {
                    <proxyAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::strategy(inner) => {
                    <strategyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::strategyBaseTVLLimitsImplementation(inner) => {
                    <strategyBaseTVLLimitsImplementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::strategyImplementation(inner) => {
                    <strategyImplementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::strategyManager(inner) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::strategyWithTVLLimits(inner) => {
                    <strategyWithTVLLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::targetArtifactSelectors(inner) => {
                    <targetArtifactSelectorsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::targetArtifacts(inner) => {
                    <targetArtifactsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::targetContracts(inner) => {
                    <targetContractsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::targetSelectors(inner) => {
                    <targetSelectorsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::targetSenders(inner) => {
                    <targetSendersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testCanWithdrawDownToSmallShares(inner) => {
                    <testCanWithdrawDownToSmallSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testCannotReceiveZeroShares(inner) => {
                    <testCannotReceiveZeroSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testCannotReinitialize(inner) => {
                    <testCannotReinitializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositFailForTooManyShares(inner) => {
                    <testDepositFailForTooManySharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositFailsWhenCallingFromNotStrategyManager(inner) => {
                    <testDepositFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositFailsWhenDepositsPaused(inner) => {
                    <testDepositFailsWhenDepositsPausedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositFailsWhenNotUsingUnderlyingToken(inner) => {
                    <testDepositFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositMoreThanMaxPerDeposit(inner) => {
                    <testDepositMoreThanMaxPerDepositCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositMorethanMaxDeposits(inner) => {
                    <testDepositMorethanMaxDepositsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositTVLLimit_ThenChangeTVLLimit(inner) => {
                    <testDepositTVLLimit_ThenChangeTVLLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositValidAmount(inner) => {
                    <testDepositValidAmountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(inner) => {
                    <testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDepositWithZeroPriorBalanceAndZeroPriorShares(inner) => {
                    <testDepositWithZeroPriorBalanceAndZeroPriorSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDeposit_WithTVLLimits(inner) => {
                    <testDeposit_WithTVLLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testDeposit_ZeroAmount(inner) => {
                    <testDeposit_ZeroAmountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(inner) => {
                    <testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testIntegrityOfSharesToUnderlyingWithZeroTotalShares(inner) => {
                    <testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(inner) => {
                    <testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testSetInvalidMaxPerDepositAndMaxDeposits(inner) => {
                    <testSetInvalidMaxPerDepositAndMaxDepositsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testSetTVLLimits(inner) => {
                    <testSetTVLLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testSetTVLLimitsFailsWhenNotCalledByUnpauser(inner) => {
                    <testSetTVLLimitsFailsWhenNotCalledByUnpauserCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawFailsWhenSharesGreaterThanTotalShares(inner) => {
                    <testWithdrawFailsWhenSharesGreaterThanTotalSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawFailsWhenWithdrawalsPaused(inner) => {
                    <testWithdrawFailsWhenWithdrawalsPausedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesEqual(inner) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(inner) => {
                    <testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawZeroAmount(inner) => {
                    <testWithdrawZeroAmountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawalFailsWhenCallingFromNotStrategyManager(inner) => {
                    <testWithdrawalFailsWhenCallingFromNotStrategyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawalFailsWhenNotUsingUnderlyingToken(inner) => {
                    <testWithdrawalFailsWhenNotUsingUnderlyingTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::testWithdrawalFailsWhenTokenTransferFails(inner) => {
                    <testWithdrawalFailsWhenTokenTransferFailsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::underlyingToken(inner) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpauser(inner) => {
                    <unpauserCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`StrategyBaseTVLLimitsUnitTests`](self) events.
    pub enum StrategyBaseTVLLimitsUnitTestsEvents {
        ExchangeRateEmitted(ExchangeRateEmitted),
        MaxPerDepositUpdated(MaxPerDepositUpdated),
        MaxTotalDepositsUpdated(MaxTotalDepositsUpdated),
        log(log),
        log_address(log_address),
        log_array_0(log_array_0),
        log_array_1(log_array_1),
        log_array_2(log_array_2),
        log_bytes(log_bytes),
        log_bytes32(log_bytes32),
        log_int(log_int),
        log_named_address(log_named_address),
        log_named_array_0(log_named_array_0),
        log_named_array_1(log_named_array_1),
        log_named_array_2(log_named_array_2),
        log_named_bytes(log_named_bytes),
        log_named_bytes32(log_named_bytes32),
        log_named_decimal_int(log_named_decimal_int),
        log_named_decimal_uint(log_named_decimal_uint),
        log_named_int(log_named_int),
        log_named_string(log_named_string),
        log_named_uint(log_named_uint),
        log_string(log_string),
        log_uint(log_uint),
        logs(logs),
    }
    #[automatically_derived]
    impl StrategyBaseTVLLimitsUnitTestsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                0u8, 170u8, 163u8, 156u8, 159u8, 251u8, 95u8, 86u8, 122u8, 69u8, 52u8, 56u8, 12u8,
                115u8, 112u8, 117u8, 112u8, 46u8, 31u8, 127u8, 20u8, 16u8, 127u8, 201u8, 83u8,
                40u8, 227u8, 181u8, 108u8, 3u8, 37u8, 251u8,
            ],
            [
                11u8, 46u8, 19u8, 255u8, 32u8, 172u8, 123u8, 71u8, 65u8, 152u8, 101u8, 85u8, 131u8,
                237u8, 247u8, 13u8, 237u8, 210u8, 193u8, 220u8, 152u8, 14u8, 50u8, 156u8, 79u8,
                187u8, 47u8, 192u8, 116u8, 139u8, 121u8, 107u8,
            ],
            [
                14u8, 181u8, 213u8, 38u8, 36u8, 200u8, 210u8, 138u8, 218u8, 159u8, 197u8, 90u8,
                140u8, 80u8, 46u8, 213u8, 170u8, 63u8, 190u8, 47u8, 182u8, 233u8, 27u8, 113u8,
                181u8, 243u8, 118u8, 136u8, 43u8, 29u8, 47u8, 184u8,
            ],
            [
                35u8, 182u8, 42u8, 208u8, 88u8, 77u8, 36u8, 167u8, 95u8, 11u8, 243u8, 86u8, 3u8,
                145u8, 239u8, 86u8, 89u8, 236u8, 109u8, 177u8, 38u8, 156u8, 86u8, 225u8, 26u8,
                162u8, 65u8, 214u8, 55u8, 241u8, 155u8, 32u8,
            ],
            [
                40u8, 15u8, 68u8, 70u8, 178u8, 138u8, 19u8, 114u8, 65u8, 125u8, 218u8, 101u8,
                141u8, 48u8, 185u8, 91u8, 41u8, 146u8, 177u8, 42u8, 201u8, 199u8, 243u8, 120u8,
                83u8, 95u8, 41u8, 169u8, 122u8, 207u8, 53u8, 131u8,
            ],
            [
                44u8, 171u8, 151u8, 144u8, 81u8, 15u8, 216u8, 189u8, 251u8, 210u8, 17u8, 82u8,
                136u8, 219u8, 51u8, 254u8, 198u8, 102u8, 145u8, 212u8, 118u8, 239u8, 197u8, 66u8,
                124u8, 253u8, 76u8, 9u8, 105u8, 48u8, 23u8, 85u8,
            ],
            [
                47u8, 230u8, 50u8, 119u8, 145u8, 116u8, 55u8, 67u8, 120u8, 68u8, 42u8, 142u8,
                151u8, 139u8, 204u8, 251u8, 220u8, 193u8, 214u8, 178u8, 176u8, 216u8, 31u8, 126u8,
                142u8, 183u8, 118u8, 171u8, 34u8, 134u8, 241u8, 104u8,
            ],
            [
                59u8, 207u8, 178u8, 174u8, 46u8, 141u8, 19u8, 45u8, 209u8, 252u8, 231u8, 207u8,
                39u8, 138u8, 154u8, 25u8, 117u8, 106u8, 159u8, 206u8, 171u8, 228u8, 112u8, 223u8,
                59u8, 218u8, 187u8, 75u8, 197u8, 119u8, 209u8, 189u8,
            ],
            [
                64u8, 225u8, 132u8, 15u8, 87u8, 105u8, 7u8, 61u8, 97u8, 189u8, 1u8, 55u8, 45u8,
                155u8, 117u8, 186u8, 169u8, 132u8, 45u8, 86u8, 41u8, 160u8, 201u8, 159u8, 241u8,
                3u8, 190u8, 17u8, 120u8, 168u8, 233u8, 226u8,
            ],
            [
                65u8, 48u8, 79u8, 172u8, 217u8, 50u8, 61u8, 117u8, 177u8, 27u8, 205u8, 214u8, 9u8,
                203u8, 56u8, 239u8, 255u8, 253u8, 176u8, 87u8, 16u8, 247u8, 202u8, 240u8, 233u8,
                177u8, 108u8, 109u8, 157u8, 112u8, 159u8, 80u8,
            ],
            [
                93u8, 166u8, 206u8, 157u8, 81u8, 21u8, 27u8, 161u8, 12u8, 9u8, 165u8, 89u8, 239u8,
                36u8, 213u8, 32u8, 185u8, 218u8, 197u8, 197u8, 184u8, 129u8, 10u8, 232u8, 67u8,
                78u8, 77u8, 13u8, 134u8, 65u8, 26u8, 149u8,
            ],
            [
                106u8, 177u8, 129u8, 224u8, 68u8, 11u8, 251u8, 244u8, 186u8, 205u8, 242u8, 233u8,
                150u8, 116u8, 115u8, 92u8, 230u8, 99u8, 128u8, 5u8, 73u8, 6u8, 136u8, 197u8, 249u8,
                148u8, 245u8, 57u8, 147u8, 83u8, 228u8, 82u8,
            ],
            [
                122u8, 231u8, 76u8, 82u8, 116u8, 20u8, 174u8, 19u8, 95u8, 217u8, 112u8, 71u8,
                177u8, 41u8, 33u8, 165u8, 236u8, 57u8, 17u8, 184u8, 4u8, 25u8, 120u8, 85u8, 214u8,
                126u8, 37u8, 199u8, 183u8, 94u8, 230u8, 243u8,
            ],
            [
                137u8, 10u8, 130u8, 103u8, 155u8, 71u8, 15u8, 43u8, 216u8, 40u8, 22u8, 237u8,
                155u8, 22u8, 31u8, 151u8, 216u8, 185u8, 103u8, 243u8, 127u8, 163u8, 100u8, 124u8,
                33u8, 213u8, 191u8, 57u8, 116u8, 158u8, 45u8, 213u8,
            ],
            [
                156u8, 78u8, 133u8, 65u8, 202u8, 143u8, 13u8, 193u8, 196u8, 19u8, 249u8, 16u8,
                143u8, 102u8, 216u8, 45u8, 60u8, 236u8, 177u8, 189u8, 219u8, 206u8, 67u8, 122u8,
                97u8, 202u8, 163u8, 23u8, 92u8, 76u8, 201u8, 111u8,
            ],
            [
                167u8, 62u8, 218u8, 9u8, 102u8, 47u8, 70u8, 221u8, 231u8, 41u8, 190u8, 70u8, 17u8,
                56u8, 95u8, 243u8, 79u8, 230u8, 196u8, 79u8, 187u8, 198u8, 247u8, 225u8, 123u8,
                4u8, 43u8, 89u8, 163u8, 68u8, 91u8, 87u8,
            ],
            [
                175u8, 183u8, 149u8, 201u8, 198u8, 30u8, 79u8, 231u8, 70u8, 140u8, 56u8, 111u8,
                146u8, 93u8, 122u8, 84u8, 41u8, 236u8, 173u8, 156u8, 4u8, 149u8, 221u8, 184u8,
                211u8, 141u8, 105u8, 6u8, 20u8, 211u8, 47u8, 153u8,
            ],
            [
                178u8, 222u8, 47u8, 190u8, 128u8, 26u8, 13u8, 246u8, 192u8, 203u8, 221u8, 253u8,
                68u8, 139u8, 163u8, 196u8, 29u8, 72u8, 160u8, 64u8, 202u8, 53u8, 197u8, 108u8,
                129u8, 150u8, 239u8, 15u8, 202u8, 231u8, 33u8, 168u8,
            ],
            [
                210u8, 73u8, 79u8, 52u8, 121u8, 229u8, 218u8, 73u8, 211u8, 134u8, 101u8, 124u8,
                41u8, 44u8, 97u8, 11u8, 91u8, 1u8, 223u8, 49u8, 61u8, 7u8, 198u8, 46u8, 176u8,
                207u8, 164u8, 153u8, 36u8, 163u8, 27u8, 232u8,
            ],
            [
                210u8, 110u8, 22u8, 202u8, 212u8, 84u8, 135u8, 5u8, 228u8, 201u8, 226u8, 217u8,
                79u8, 152u8, 238u8, 145u8, 194u8, 137u8, 8u8, 94u8, 228u8, 37u8, 89u8, 79u8, 213u8,
                99u8, 95u8, 162u8, 150u8, 76u8, 207u8, 24u8,
            ],
            [
                231u8, 149u8, 14u8, 222u8, 3u8, 148u8, 185u8, 242u8, 206u8, 74u8, 90u8, 27u8,
                245u8, 167u8, 225u8, 133u8, 36u8, 17u8, 247u8, 230u8, 102u8, 27u8, 67u8, 8u8,
                201u8, 19u8, 196u8, 191u8, 209u8, 16u8, 39u8, 228u8,
            ],
            [
                232u8, 22u8, 153u8, 184u8, 81u8, 19u8, 238u8, 161u8, 199u8, 62u8, 16u8, 88u8,
                139u8, 43u8, 3u8, 94u8, 85u8, 137u8, 51u8, 105u8, 99u8, 33u8, 115u8, 175u8, 212u8,
                63u8, 235u8, 25u8, 47u8, 172u8, 100u8, 227u8,
            ],
            [
                235u8, 139u8, 164u8, 60u8, 237u8, 117u8, 55u8, 66u8, 25u8, 70u8, 189u8, 67u8,
                232u8, 40u8, 184u8, 178u8, 184u8, 66u8, 137u8, 39u8, 170u8, 143u8, 128u8, 28u8,
                19u8, 217u8, 52u8, 191u8, 17u8, 172u8, 165u8, 123u8,
            ],
            [
                249u8, 126u8, 212u8, 224u8, 131u8, 172u8, 172u8, 103u8, 131u8, 0u8, 37u8, 236u8,
                188u8, 117u8, 109u8, 143u8, 232u8, 71u8, 205u8, 189u8, 202u8, 76u8, 238u8, 63u8,
                225u8, 225u8, 40u8, 233u8, 139u8, 84u8, 236u8, 181u8,
            ],
            [
                251u8, 16u8, 40u8, 101u8, 213u8, 10u8, 221u8, 221u8, 246u8, 157u8, 169u8, 181u8,
                170u8, 27u8, 206u8, 214u8, 108u8, 128u8, 207u8, 134u8, 154u8, 92u8, 141u8, 4u8,
                113u8, 164u8, 103u8, 225u8, 140u8, 233u8, 202u8, 177u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for StrategyBaseTVLLimitsUnitTestsEvents {
        const NAME: &'static str = "StrategyBaseTVLLimitsUnitTestsEvents";
        const COUNT: usize = 25usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ExchangeRateEmitted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ExchangeRateEmitted as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::ExchangeRateEmitted)
                }
                Some(<MaxPerDepositUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <MaxPerDepositUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::MaxPerDepositUpdated)
                }
                Some(<MaxTotalDepositsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <MaxTotalDepositsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::MaxTotalDepositsUpdated)
                }
                Some(<log as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::log)
                }
                Some(<log_address as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_address as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_address)
                }
                Some(<log_array_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_array_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_array_0)
                }
                Some(<log_array_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_array_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_array_1)
                }
                Some(<log_array_2 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_array_2 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_array_2)
                }
                Some(<log_bytes as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_bytes as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::log_bytes)
                }
                Some(<log_bytes32 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_bytes32 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_bytes32)
                }
                Some(<log_int as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_int as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::log_int)
                }
                Some(<log_named_address as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_address as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_address)
                }
                Some(<log_named_array_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_array_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_array_0)
                }
                Some(<log_named_array_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_array_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_array_1)
                }
                Some(<log_named_array_2 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_array_2 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_array_2)
                }
                Some(<log_named_bytes as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_bytes as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_bytes)
                }
                Some(<log_named_bytes32 as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_bytes32 as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_bytes32)
                }
                Some(<log_named_decimal_int as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_decimal_int as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_decimal_int)
                }
                Some(<log_named_decimal_uint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_decimal_uint as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_decimal_uint)
                }
                Some(<log_named_int as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_int as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_int)
                }
                Some(<log_named_string as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_string as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_string)
                }
                Some(<log_named_uint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_named_uint as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_named_uint)
                }
                Some(<log_string as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_string as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::log_string)
                }
                Some(<log_uint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <log_uint as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::log_uint)
                }
                Some(<logs as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <logs as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::logs)
                }
                _ => alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                    name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                    log: alloy_sol_types::private::Box::new(
                        alloy_sol_types::private::LogData::new_unchecked(
                            topics.to_vec(),
                            data.to_vec().into(),
                        ),
                    ),
                }),
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for StrategyBaseTVLLimitsUnitTestsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ExchangeRateEmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MaxPerDepositUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MaxTotalDepositsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::log_address(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_array_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_array_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_array_2(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_bytes(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::log_bytes32(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_int(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::log_named_address(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_array_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_array_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_array_2(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_bytes(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_bytes32(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_decimal_int(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_decimal_uint(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_int(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_string(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_named_uint(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_string(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::log_uint(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::logs(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ExchangeRateEmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MaxPerDepositUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MaxTotalDepositsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::log_address(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_array_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_array_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_array_2(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_bytes(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_bytes32(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_int(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::log_named_address(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_array_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_array_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_array_2(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_bytes(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_bytes32(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_decimal_int(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_decimal_uint(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_int(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_string(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_named_uint(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_string(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::log_uint(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::logs(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StrategyBaseTVLLimitsUnitTests`](self) contract instance.

    See the [wrapper's documentation](`StrategyBaseTVLLimitsUnitTestsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StrategyBaseTVLLimitsUnitTestsInstance<T, P, N> {
        StrategyBaseTVLLimitsUnitTestsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StrategyBaseTVLLimitsUnitTestsInstance<T, P, N>>,
    > {
        StrategyBaseTVLLimitsUnitTestsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        StrategyBaseTVLLimitsUnitTestsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`StrategyBaseTVLLimitsUnitTests`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`StrategyBaseTVLLimitsUnitTests`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StrategyBaseTVLLimitsUnitTestsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StrategyBaseTVLLimitsUnitTestsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StrategyBaseTVLLimitsUnitTestsInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsUnitTestsInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`StrategyBaseTVLLimitsUnitTests`](self) contract instance.

        See the [wrapper's documentation](`StrategyBaseTVLLimitsUnitTestsInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<StrategyBaseTVLLimitsUnitTestsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StrategyBaseTVLLimitsUnitTestsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StrategyBaseTVLLimitsUnitTestsInstance<T, P, N> {
            StrategyBaseTVLLimitsUnitTestsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsUnitTestsInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_TEST`] function.
        pub fn IS_TEST(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_TESTCall, N> {
            self.call_builder(&IS_TESTCall {})
        }
        ///Creates a new call builder for the [`excludeArtifacts`] function.
        pub fn excludeArtifacts(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, excludeArtifactsCall, N> {
            self.call_builder(&excludeArtifactsCall {})
        }
        ///Creates a new call builder for the [`excludeContracts`] function.
        pub fn excludeContracts(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, excludeContractsCall, N> {
            self.call_builder(&excludeContractsCall {})
        }
        ///Creates a new call builder for the [`excludeSenders`] function.
        pub fn excludeSenders(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, excludeSendersCall, N> {
            self.call_builder(&excludeSendersCall {})
        }
        ///Creates a new call builder for the [`failed`] function.
        pub fn failed(&self) -> alloy_contract::SolCallBuilder<T, &P, failedCall, N> {
            self.call_builder(&failedCall {})
        }
        ///Creates a new call builder for the [`pauser`] function.
        pub fn pauser(&self) -> alloy_contract::SolCallBuilder<T, &P, pauserCall, N> {
            self.call_builder(&pauserCall {})
        }
        ///Creates a new call builder for the [`pauserRegistry`] function.
        pub fn pauserRegistry(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pauserRegistryCall, N> {
            self.call_builder(&pauserRegistryCall {})
        }
        ///Creates a new call builder for the [`proxyAdmin`] function.
        pub fn proxyAdmin(&self) -> alloy_contract::SolCallBuilder<T, &P, proxyAdminCall, N> {
            self.call_builder(&proxyAdminCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
        ///Creates a new call builder for the [`strategy`] function.
        pub fn strategy(&self) -> alloy_contract::SolCallBuilder<T, &P, strategyCall, N> {
            self.call_builder(&strategyCall {})
        }
        ///Creates a new call builder for the [`strategyBaseTVLLimitsImplementation`] function.
        pub fn strategyBaseTVLLimitsImplementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, strategyBaseTVLLimitsImplementationCall, N>
        {
            self.call_builder(&strategyBaseTVLLimitsImplementationCall {})
        }
        ///Creates a new call builder for the [`strategyImplementation`] function.
        pub fn strategyImplementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, strategyImplementationCall, N> {
            self.call_builder(&strategyImplementationCall {})
        }
        ///Creates a new call builder for the [`strategyManager`] function.
        pub fn strategyManager(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, strategyManagerCall, N> {
            self.call_builder(&strategyManagerCall {})
        }
        ///Creates a new call builder for the [`strategyWithTVLLimits`] function.
        pub fn strategyWithTVLLimits(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, strategyWithTVLLimitsCall, N> {
            self.call_builder(&strategyWithTVLLimitsCall {})
        }
        ///Creates a new call builder for the [`targetArtifactSelectors`] function.
        pub fn targetArtifactSelectors(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, targetArtifactSelectorsCall, N> {
            self.call_builder(&targetArtifactSelectorsCall {})
        }
        ///Creates a new call builder for the [`targetArtifacts`] function.
        pub fn targetArtifacts(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, targetArtifactsCall, N> {
            self.call_builder(&targetArtifactsCall {})
        }
        ///Creates a new call builder for the [`targetContracts`] function.
        pub fn targetContracts(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, targetContractsCall, N> {
            self.call_builder(&targetContractsCall {})
        }
        ///Creates a new call builder for the [`targetSelectors`] function.
        pub fn targetSelectors(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, targetSelectorsCall, N> {
            self.call_builder(&targetSelectorsCall {})
        }
        ///Creates a new call builder for the [`targetSenders`] function.
        pub fn targetSenders(&self) -> alloy_contract::SolCallBuilder<T, &P, targetSendersCall, N> {
            self.call_builder(&targetSendersCall {})
        }
        ///Creates a new call builder for the [`testCanWithdrawDownToSmallShares`] function.
        pub fn testCanWithdrawDownToSmallShares(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
            sharesToLeave: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, testCanWithdrawDownToSmallSharesCall, N>
        {
            self.call_builder(&testCanWithdrawDownToSmallSharesCall {
                amountToDeposit,
                sharesToLeave,
            })
        }
        ///Creates a new call builder for the [`testCannotReceiveZeroShares`] function.
        pub fn testCannotReceiveZeroShares(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testCannotReceiveZeroSharesCall, N> {
            self.call_builder(&testCannotReceiveZeroSharesCall {})
        }
        ///Creates a new call builder for the [`testCannotReinitialize`] function.
        pub fn testCannotReinitialize(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testCannotReinitializeCall, N> {
            self.call_builder(&testCannotReinitializeCall {})
        }
        ///Creates a new call builder for the [`testDepositFailForTooManyShares`] function.
        pub fn testDepositFailForTooManyShares(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositFailForTooManySharesCall, N> {
            self.call_builder(&testDepositFailForTooManySharesCall {})
        }
        ///Creates a new call builder for the [`testDepositFailsWhenCallingFromNotStrategyManager`] function.
        pub fn testDepositFailsWhenCallingFromNotStrategyManager(
            &self,
            caller: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testDepositFailsWhenCallingFromNotStrategyManagerCall,
            N,
        > {
            self.call_builder(&testDepositFailsWhenCallingFromNotStrategyManagerCall { caller })
        }
        ///Creates a new call builder for the [`testDepositFailsWhenDepositsPaused`] function.
        pub fn testDepositFailsWhenDepositsPaused(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositFailsWhenDepositsPausedCall, N>
        {
            self.call_builder(&testDepositFailsWhenDepositsPausedCall {})
        }
        ///Creates a new call builder for the [`testDepositFailsWhenNotUsingUnderlyingToken`] function.
        pub fn testDepositFailsWhenNotUsingUnderlyingToken(
            &self,
            notUnderlyingToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositFailsWhenNotUsingUnderlyingTokenCall, N>
        {
            self.call_builder(&testDepositFailsWhenNotUsingUnderlyingTokenCall {
                notUnderlyingToken,
            })
        }
        ///Creates a new call builder for the [`testDepositMoreThanMaxPerDeposit`] function.
        pub fn testDepositMoreThanMaxPerDeposit(
            &self,
            maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositMoreThanMaxPerDepositCall, N>
        {
            self.call_builder(&testDepositMoreThanMaxPerDepositCall {
                maxPerDepositFuzzedInput,
                maxTotalDepositsFuzzedInput,
                amount,
            })
        }
        ///Creates a new call builder for the [`testDepositMorethanMaxDeposits`] function.
        pub fn testDepositMorethanMaxDeposits(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositMorethanMaxDepositsCall, N> {
            self.call_builder(&testDepositMorethanMaxDepositsCall {})
        }
        ///Creates a new call builder for the [`testDepositTVLLimit_ThenChangeTVLLimit`] function.
        pub fn testDepositTVLLimit_ThenChangeTVLLimit(
            &self,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            newMaxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositTVLLimit_ThenChangeTVLLimitCall, N>
        {
            self.call_builder(&testDepositTVLLimit_ThenChangeTVLLimitCall {
                maxTotalDepositsFuzzedInput,
                newMaxTotalDepositsFuzzedInput,
            })
        }
        ///Creates a new call builder for the [`testDepositValidAmount`] function.
        pub fn testDepositValidAmount(
            &self,
            depositAmount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDepositValidAmountCall, N> {
            self.call_builder(&testDepositValidAmountCall { depositAmount })
        }
        ///Creates a new call builder for the [`testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares`] function.
        pub fn testDepositWithNonzeroPriorBalanceAndNonzeroPriorShares(
            &self,
            priorTotalShares: alloy::sol_types::private::primitives::aliases::U256,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall,
            N,
        > {
            self.call_builder(
                &testDepositWithNonzeroPriorBalanceAndNonzeroPriorSharesCall {
                    priorTotalShares,
                    amountToDeposit,
                },
            )
        }
        ///Creates a new call builder for the [`testDepositWithZeroPriorBalanceAndZeroPriorShares`] function.
        pub fn testDepositWithZeroPriorBalanceAndZeroPriorShares(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testDepositWithZeroPriorBalanceAndZeroPriorSharesCall,
            N,
        > {
            self.call_builder(&testDepositWithZeroPriorBalanceAndZeroPriorSharesCall {
                amountToDeposit,
            })
        }
        ///Creates a new call builder for the [`testDeposit_WithTVLLimits`] function.
        pub fn testDeposit_WithTVLLimits(
            &self,
            maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            depositAmount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDeposit_WithTVLLimitsCall, N> {
            self.call_builder(&testDeposit_WithTVLLimitsCall {
                maxPerDepositFuzzedInput,
                maxTotalDepositsFuzzedInput,
                depositAmount,
            })
        }
        ///Creates a new call builder for the [`testDeposit_ZeroAmount`] function.
        pub fn testDeposit_ZeroAmount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testDeposit_ZeroAmountCall, N> {
            self.call_builder(&testDeposit_ZeroAmountCall {})
        }
        ///Creates a new call builder for the [`testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares`] function.
        pub fn testIntegrityOfSharesToUnderlyingWithNonzeroTotalShares(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
            amountToTransfer: alloy::sol_types::private::primitives::aliases::U256,
            amountSharesToQuery: alloy::sol_types::private::primitives::aliases::U96,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall,
            N,
        > {
            self.call_builder(
                &testIntegrityOfSharesToUnderlyingWithNonzeroTotalSharesCall {
                    amountToDeposit,
                    amountToTransfer,
                    amountSharesToQuery,
                },
            )
        }
        ///Creates a new call builder for the [`testIntegrityOfSharesToUnderlyingWithZeroTotalShares`] function.
        pub fn testIntegrityOfSharesToUnderlyingWithZeroTotalShares(
            &self,
            amountSharesToQuery: alloy::sol_types::private::primitives::aliases::U240,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall,
            N,
        > {
            self.call_builder(&testIntegrityOfSharesToUnderlyingWithZeroTotalSharesCall {
                amountSharesToQuery,
            })
        }
        ///Creates a new call builder for the [`testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares`] function.
        pub fn testIntegrityOfUnderlyingToSharesWithNonzeroTotalShares(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
            amountToTransfer: alloy::sol_types::private::primitives::aliases::U256,
            amountUnderlyingToQuery: alloy::sol_types::private::primitives::aliases::U96,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall,
            N,
        > {
            self.call_builder(
                &testIntegrityOfUnderlyingToSharesWithNonzeroTotalSharesCall {
                    amountToDeposit,
                    amountToTransfer,
                    amountUnderlyingToQuery,
                },
            )
        }
        ///Creates a new call builder for the [`testSetInvalidMaxPerDepositAndMaxDeposits`] function.
        pub fn testSetInvalidMaxPerDepositAndMaxDeposits(
            &self,
            maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testSetInvalidMaxPerDepositAndMaxDepositsCall, N>
        {
            self.call_builder(&testSetInvalidMaxPerDepositAndMaxDepositsCall {
                maxPerDepositFuzzedInput,
                maxTotalDepositsFuzzedInput,
            })
        }
        ///Creates a new call builder for the [`testSetTVLLimits`] function.
        pub fn testSetTVLLimits(
            &self,
            maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testSetTVLLimitsCall, N> {
            self.call_builder(&testSetTVLLimitsCall {
                maxPerDepositFuzzedInput,
                maxTotalDepositsFuzzedInput,
            })
        }
        ///Creates a new call builder for the [`testSetTVLLimitsFailsWhenNotCalledByUnpauser`] function.
        pub fn testSetTVLLimitsFailsWhenNotCalledByUnpauser(
            &self,
            maxPerDepositFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            maxTotalDepositsFuzzedInput: alloy::sol_types::private::primitives::aliases::U256,
            notUnpauser: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testSetTVLLimitsFailsWhenNotCalledByUnpauserCall,
            N,
        > {
            self.call_builder(&testSetTVLLimitsFailsWhenNotCalledByUnpauserCall {
                maxPerDepositFuzzedInput,
                maxTotalDepositsFuzzedInput,
                notUnpauser,
            })
        }
        ///Creates a new call builder for the [`testWithdrawFailsWhenSharesGreaterThanTotalShares`] function.
        pub fn testWithdrawFailsWhenSharesGreaterThanTotalShares(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
            sharesToWithdraw: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testWithdrawFailsWhenSharesGreaterThanTotalSharesCall,
            N,
        > {
            self.call_builder(&testWithdrawFailsWhenSharesGreaterThanTotalSharesCall {
                amountToDeposit,
                sharesToWithdraw,
            })
        }
        ///Creates a new call builder for the [`testWithdrawFailsWhenWithdrawalsPaused`] function.
        pub fn testWithdrawFailsWhenWithdrawalsPaused(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testWithdrawFailsWhenWithdrawalsPausedCall, N>
        {
            self.call_builder(&testWithdrawFailsWhenWithdrawalsPausedCall { amountToDeposit })
        }
        ///Creates a new call builder for the [`testWithdrawWithPriorTotalSharesAndAmountSharesEqual`] function.
        pub fn testWithdrawWithPriorTotalSharesAndAmountSharesEqual(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall,
            N,
        > {
            self.call_builder(&testWithdrawWithPriorTotalSharesAndAmountSharesEqualCall {
                amountToDeposit,
            })
        }
        ///Creates a new call builder for the [`testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual`] function.
        pub fn testWithdrawWithPriorTotalSharesAndAmountSharesNotEqual(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U96,
            sharesToWithdraw: alloy::sol_types::private::primitives::aliases::U96,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall,
            N,
        > {
            self.call_builder(
                &testWithdrawWithPriorTotalSharesAndAmountSharesNotEqualCall {
                    amountToDeposit,
                    sharesToWithdraw,
                },
            )
        }
        ///Creates a new call builder for the [`testWithdrawZeroAmount`] function.
        pub fn testWithdrawZeroAmount(
            &self,
            amountToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, testWithdrawZeroAmountCall, N> {
            self.call_builder(&testWithdrawZeroAmountCall { amountToDeposit })
        }
        ///Creates a new call builder for the [`testWithdrawalFailsWhenCallingFromNotStrategyManager`] function.
        pub fn testWithdrawalFailsWhenCallingFromNotStrategyManager(
            &self,
            caller: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testWithdrawalFailsWhenCallingFromNotStrategyManagerCall,
            N,
        > {
            self.call_builder(&testWithdrawalFailsWhenCallingFromNotStrategyManagerCall { caller })
        }
        ///Creates a new call builder for the [`testWithdrawalFailsWhenNotUsingUnderlyingToken`] function.
        pub fn testWithdrawalFailsWhenNotUsingUnderlyingToken(
            &self,
            notUnderlyingToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            testWithdrawalFailsWhenNotUsingUnderlyingTokenCall,
            N,
        > {
            self.call_builder(&testWithdrawalFailsWhenNotUsingUnderlyingTokenCall {
                notUnderlyingToken,
            })
        }
        ///Creates a new call builder for the [`testWithdrawalFailsWhenTokenTransferFails`] function.
        pub fn testWithdrawalFailsWhenTokenTransferFails(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, testWithdrawalFailsWhenTokenTransferFailsCall, N>
        {
            self.call_builder(&testWithdrawalFailsWhenTokenTransferFailsCall {})
        }
        ///Creates a new call builder for the [`underlyingToken`] function.
        pub fn underlyingToken(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, underlyingTokenCall, N> {
            self.call_builder(&underlyingTokenCall {})
        }
        ///Creates a new call builder for the [`unpauser`] function.
        pub fn unpauser(&self) -> alloy_contract::SolCallBuilder<T, &P, unpauserCall, N> {
            self.call_builder(&unpauserCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsUnitTestsInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ExchangeRateEmitted`] event.
        pub fn ExchangeRateEmitted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ExchangeRateEmitted, N> {
            self.event_filter::<ExchangeRateEmitted>()
        }
        ///Creates a new event filter for the [`MaxPerDepositUpdated`] event.
        pub fn MaxPerDepositUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, MaxPerDepositUpdated, N> {
            self.event_filter::<MaxPerDepositUpdated>()
        }
        ///Creates a new event filter for the [`MaxTotalDepositsUpdated`] event.
        pub fn MaxTotalDepositsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, MaxTotalDepositsUpdated, N> {
            self.event_filter::<MaxTotalDepositsUpdated>()
        }
        ///Creates a new event filter for the [`log`] event.
        pub fn log_filter(&self) -> alloy_contract::Event<T, &P, log, N> {
            self.event_filter::<log>()
        }
        ///Creates a new event filter for the [`log_address`] event.
        pub fn log_address_filter(&self) -> alloy_contract::Event<T, &P, log_address, N> {
            self.event_filter::<log_address>()
        }
        ///Creates a new event filter for the [`log_array_0`] event.
        pub fn log_array_0_filter(&self) -> alloy_contract::Event<T, &P, log_array_0, N> {
            self.event_filter::<log_array_0>()
        }
        ///Creates a new event filter for the [`log_array_1`] event.
        pub fn log_array_1_filter(&self) -> alloy_contract::Event<T, &P, log_array_1, N> {
            self.event_filter::<log_array_1>()
        }
        ///Creates a new event filter for the [`log_array_2`] event.
        pub fn log_array_2_filter(&self) -> alloy_contract::Event<T, &P, log_array_2, N> {
            self.event_filter::<log_array_2>()
        }
        ///Creates a new event filter for the [`log_bytes`] event.
        pub fn log_bytes_filter(&self) -> alloy_contract::Event<T, &P, log_bytes, N> {
            self.event_filter::<log_bytes>()
        }
        ///Creates a new event filter for the [`log_bytes32`] event.
        pub fn log_bytes32_filter(&self) -> alloy_contract::Event<T, &P, log_bytes32, N> {
            self.event_filter::<log_bytes32>()
        }
        ///Creates a new event filter for the [`log_int`] event.
        pub fn log_int_filter(&self) -> alloy_contract::Event<T, &P, log_int, N> {
            self.event_filter::<log_int>()
        }
        ///Creates a new event filter for the [`log_named_address`] event.
        pub fn log_named_address_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_address, N> {
            self.event_filter::<log_named_address>()
        }
        ///Creates a new event filter for the [`log_named_array_0`] event.
        pub fn log_named_array_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_array_0, N> {
            self.event_filter::<log_named_array_0>()
        }
        ///Creates a new event filter for the [`log_named_array_1`] event.
        pub fn log_named_array_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_array_1, N> {
            self.event_filter::<log_named_array_1>()
        }
        ///Creates a new event filter for the [`log_named_array_2`] event.
        pub fn log_named_array_2_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_array_2, N> {
            self.event_filter::<log_named_array_2>()
        }
        ///Creates a new event filter for the [`log_named_bytes`] event.
        pub fn log_named_bytes_filter(&self) -> alloy_contract::Event<T, &P, log_named_bytes, N> {
            self.event_filter::<log_named_bytes>()
        }
        ///Creates a new event filter for the [`log_named_bytes32`] event.
        pub fn log_named_bytes32_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_bytes32, N> {
            self.event_filter::<log_named_bytes32>()
        }
        ///Creates a new event filter for the [`log_named_decimal_int`] event.
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_decimal_int, N> {
            self.event_filter::<log_named_decimal_int>()
        }
        ///Creates a new event filter for the [`log_named_decimal_uint`] event.
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, log_named_decimal_uint, N> {
            self.event_filter::<log_named_decimal_uint>()
        }
        ///Creates a new event filter for the [`log_named_int`] event.
        pub fn log_named_int_filter(&self) -> alloy_contract::Event<T, &P, log_named_int, N> {
            self.event_filter::<log_named_int>()
        }
        ///Creates a new event filter for the [`log_named_string`] event.
        pub fn log_named_string_filter(&self) -> alloy_contract::Event<T, &P, log_named_string, N> {
            self.event_filter::<log_named_string>()
        }
        ///Creates a new event filter for the [`log_named_uint`] event.
        pub fn log_named_uint_filter(&self) -> alloy_contract::Event<T, &P, log_named_uint, N> {
            self.event_filter::<log_named_uint>()
        }
        ///Creates a new event filter for the [`log_string`] event.
        pub fn log_string_filter(&self) -> alloy_contract::Event<T, &P, log_string, N> {
            self.event_filter::<log_string>()
        }
        ///Creates a new event filter for the [`log_uint`] event.
        pub fn log_uint_filter(&self) -> alloy_contract::Event<T, &P, log_uint, N> {
            self.event_filter::<log_uint>()
        }
        ///Creates a new event filter for the [`logs`] event.
        pub fn logs_filter(&self) -> alloy_contract::Event<T, &P, logs, N> {
            self.event_filter::<logs>()
        }
    }
}
