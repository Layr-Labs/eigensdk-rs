/**

Generated by the following Solidity interface...
```solidity
interface StrategyDeployer {
    constructor(address _beneficiary, address _baseStrategyImplementation);

    function createManyStrategies(uint256 numStrategies) external returns (address[] memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_beneficiary",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_baseStrategyImplementation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createManyStrategies",
    "inputs": [
      {
        "name": "numStrategies",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "contract IStrategy[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod StrategyDeployer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c0604052348015600f57600080fd5b5060405161204c38038061204c833981016040819052602c91605d565b6001600160a01b039182166080521660a052608b565b80516001600160a01b0381168114605857600080fd5b919050565b60008060408385031215606f57600080fd5b6076836042565b91506082602084016042565b90509250929050565b60805160a051611f9e6100ae600039600060af0152600060f10152611f9e6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c220ed5214610030575b600080fd5b61004361003e36600461026a565b610059565b6040516100509190610283565b60405180910390f35b606060008267ffffffffffffffff811115610076576100766102cf565b60405190808252806020026020018201604052801561009f578160200160208202803683370190505b50905060005b83811015610249577f0000000000000000000000000000000000000000000000000000000000000000600163019e272960e01b600019806fffffffffffffffffffffffffffffffff80167f000000000000000000000000000000000000000000000000000000000000000060405161011c90610250565b60808082526004908201526315195cdd60e21b60a082015260c060208201819052600390820152621514d560ea1b60e082015260408101929092526001600160a01b0316606082015261010001604051809103906000f080158015610185573d6000803e3d6000fd5b50604051602481019390935260448301919091526001600160a01b031660648201526001608482015260a40160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516101ee9061025d565b6101fa939291906102e5565b604051809103906000f080158015610216573d6000803e3d6000fd5b508282815181106102295761022961034e565b6001600160a01b03909216602092830291909101909101526001016100a5565b5092915050565b610e018061036583390190565b610e038061116683390190565b60006020828403121561027c57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b818110156102c45783516001600160a01b031683526020938401939092019160010161029d565b509095945050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038481168252831660208201526060604082018190528251908201819052600090815b8181101561032c576020818601810151608086840101520161030f565b506000608082850101526080601f19601f830116840101915050949350505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b50604051610e01380380610e0183398101604081905261002f916101e7565b8383600361003d8382610302565b50600461004a8282610302565b50505061005d818361006660201b60201c565b505050506103e7565b6001600160a01b0382166100c05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546100d291906103c0565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261015557600080fd5b81516001600160401b0381111561016e5761016e61012e565b604051601f8201601f19908116603f011681016001600160401b038111828210171561019c5761019c61012e565b6040528181528382016020018510156101b457600080fd5b60005b828110156101d3576020818601810151838301820152016101b7565b506000918101602001919091529392505050565b600080600080608085870312156101fd57600080fd5b84516001600160401b0381111561021357600080fd5b61021f87828801610144565b602087015190955090506001600160401b0381111561023d57600080fd5b61024987828801610144565b60408701516060880151919550935090506001600160a01b038116811461026f57600080fd5b939692955090935050565b600181811c9082168061028e57607f821691505b6020821081036102ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561012957806000526020600020601f840160051c810160208510156102db5750805b601f840160051c820191505b818110156102fb57600081556001016102e7565b5050505050565b81516001600160401b0381111561031b5761031b61012e565b61032f81610329845461027a565b846102b4565b6020601f821160018114610363576000831561034b5750848201515b600019600385901b1c1916600184901b1784556102fb565b600084815260208120601f198516915b828110156103935787850151825560209485019460019092019101610373565b50848210156103b15786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b808201808211156103e157634e487b7160e01b600052601160045260246000fd5b92915050565b610a0b806103f66000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101ee565b6040516100e9919061083b565b60405180910390f35b6101056101003660046108a5565b610280565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046108cf565b61029a565b604051601281526020016100e9565b6101056101573660046108a5565b6102be565b61016f61016a36600461090c565b6102e0565b005b61011961017f366004610925565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046108a5565b6102ed565b6100dc610306565b6101056101c33660046108a5565b610315565b6101056101d63660046108a5565b610395565b6101196101e9366004610947565b6103a3565b6060600380546101fd9061097a565b80601f01602080910402602001604051908101604052809291908181526020018280546102299061097a565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b5050505050905090565b60003361028e8185856103ce565b60019150505b92915050565b6000336102a88582856104f3565b6102b385858561056d565b506001949350505050565b60003361028e8185856102d183836103a3565b6102db91906109b4565b6103ce565b6102ea3382610711565b50565b6102f88233836104f3565b6103028282610711565b5050565b6060600480546101fd9061097a565b6000338161032382866103a3565b9050838110156103885760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102b382868684036103ce565b60003361028e81858561056d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037f565b6001600160a01b0382166104915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161037f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006104ff84846103a3565b90506000198114610567578181101561055a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161037f565b61056784848484036103ce565b50505050565b6001600160a01b0383166105d15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037f565b6001600160a01b0382166106335760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037f565b6001600160a01b038316600090815260208190526040902054818110156106ab5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610567565b6001600160a01b0382166107715760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161037f565b6001600160a01b038216600090815260208190526040902054818110156107e55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161037f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016104e6565b602081526000825180602084015260005b81811015610869576020818601810151604086840101520161084c565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146108a057600080fd5b919050565b600080604083850312156108b857600080fd5b6108c183610889565b946020939093013593505050565b6000806000606084860312156108e457600080fd5b6108ed84610889565b92506108fb60208501610889565b929592945050506040919091013590565b60006020828403121561091e57600080fd5b5035919050565b60006020828403121561093757600080fd5b61094082610889565b9392505050565b6000806040838503121561095a57600080fd5b61096383610889565b915061097160208401610889565b90509250929050565b600181811c9082168061098e57607f821691505b6020821081036109ae57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029457634e487b7160e01b600052601160045260246000fdfea26469706673582212205edaff4c3c17c7004114f0e11e31115d422b64e6b1f61b89a3f917d4f0f6c80464736f6c634300081b00336080604052604051610e03380380610e03833981016040819052610022916103f4565b828161003082826000610044565b5061003c905082610070565b505050610519565b61004d836100de565b60008251118061005a5750805b1561006b57610069838361011e565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6100b0600080516020610dbc833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16100db8161014a565b50565b6100e7816101e6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606101438383604051806060016040528060278152602001610ddc6027913961027a565b9392505050565b6001600160a01b0381166101b45760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80600080516020610dbc8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b6102535760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101ab565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101c5565b6060600080856001600160a01b03168560405161029791906104ca565b600060405180830381855af49150503d80600081146102d2576040519150601f19603f3d011682016040523d82523d6000602084013e6102d7565b606091505b5090925090506102e9868383876102f3565b9695505050505050565b6060831561036257825160000361035b576001600160a01b0385163b61035b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ab565b508161036c565b61036c8383610374565b949350505050565b8151156103845781518083602001fd5b8060405162461bcd60e51b81526004016101ab91906104e6565b80516001600160a01b03811681146103b557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103eb5781810151838201526020016103d3565b50506000910152565b60008060006060848603121561040957600080fd5b6104128461039e565b92506104206020850161039e565b60408501519092506001600160401b0381111561043c57600080fd5b8401601f8101861361044d57600080fd5b80516001600160401b03811115610466576104666103ba565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610494576104946103ba565b6040528181528282016020018810156104ac57600080fd5b6104bd8260208301602086016103d0565b8093505050509250925092565b600082516104dc8184602087016103d0565b9190910192915050565b60208152600082518060208401526105058160408501602087016103d0565b601f01601f19169190910160400192915050565b610894806105286000396000f3fe60806040523661001357610011610017565b005b6100115b61001f610169565b6001600160a01b0316330361015f5760606001600160e01b0319600035166364d3180d60e11b810161005a5761005361019c565b9150610157565b63587086bd60e11b6001600160e01b031982160161007a576100536101f3565b63070d7c6960e41b6001600160e01b031982160161009a57610053610239565b621eb96f60e61b6001600160e01b03198216016100b95761005361026a565b63a39f25e560e01b6001600160e01b03198216016100d9576100536102aa565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b815160208301f35b6101676102be565b565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60606101a66102ce565b60006101b53660048184610683565b8101906101c291906106c9565b90506101df816040518060200160405280600081525060006102d9565b505060408051602081019091526000815290565b60606000806102053660048184610683565b81019061021291906106fa565b91509150610222828260016102d9565b604051806020016040528060008152509250505090565b60606102436102ce565b60006102523660048184610683565b81019061025f91906106c9565b90506101df81610305565b60606102746102ce565b600061027e610169565b604080516001600160a01b03831660208201529192500160405160208183030381529060405291505090565b60606102b46102ce565b600061027e61035c565b6101676102c961035c565b61036b565b341561016757600080fd5b6102e28361038f565b6000825111806102ef5750805b15610300576102fe83836103cf565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61032e610169565b604080516001600160a01b03928316815291841660208301520160405180910390a1610359816103fb565b50565b60006103666104a4565b905090565b3660008037600080366000845af43d6000803e80801561038a573d6000f35b3d6000fd5b610398816104cc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606103f4838360405180606001604052806027815260200161083860279139610560565b9392505050565b6001600160a01b0381166104605760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840161014e565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61018d565b6001600160a01b0381163b6105395760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161014e565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610483565b6060600080856001600160a01b03168560405161057d91906107e8565b600060405180830381855af49150503d80600081146105b8576040519150601f19603f3d011682016040523d82523d6000602084013e6105bd565b606091505b50915091506105ce868383876105d8565b9695505050505050565b60608315610647578251600003610640576001600160a01b0385163b6106405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014e565b5081610651565b6106518383610659565b949350505050565b8151156106695781518083602001fd5b8060405162461bcd60e51b815260040161014e9190610804565b6000808585111561069357600080fd5b838611156106a057600080fd5b5050820193919092039150565b80356001600160a01b03811681146106c457600080fd5b919050565b6000602082840312156106db57600080fd5b6103f4826106ad565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561070d57600080fd5b610716836106ad565b9150602083013567ffffffffffffffff81111561073257600080fd5b8301601f8101851361074357600080fd5b803567ffffffffffffffff81111561075d5761075d6106e4565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561078c5761078c6106e4565b6040528181528282016020018710156107a457600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156107df5781810151838201526020016107c7565b50506000910152565b600082516107fa8184602087016107c4565b9190910192915050565b60208152600082518060208401526108238160408501602087016107c4565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122009432e431499b11461a47d85ff31ecab6f6eeb324634bc6b96313a64160dec0d64736f6c634300081b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220069b3ff20f3c5ed8b651d712f0d474abc9b4d8d866e0d211e3591ff079ca6c8a64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15`\x0FW`\0\x80\xFD[P`@Qa L8\x03\x80a L\x839\x81\x01`@\x81\x90R`,\x91`]V[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x80R\x16`\xA0R`\x8BV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`XW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15`oW`\0\x80\xFD[`v\x83`BV[\x91P`\x82` \x84\x01`BV[\x90P\x92P\x92\x90PV[`\x80Q`\xA0Qa\x1F\x9Ea\0\xAE`\09`\0`\xAF\x01R`\0`\xF1\x01Ra\x1F\x9E`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80c\xC2 \xEDR\x14a\x000W[`\0\x80\xFD[a\0Ca\0>6`\x04a\x02jV[a\0YV[`@Qa\0P\x91\x90a\x02\x83V[`@Q\x80\x91\x03\x90\xF3[```\0\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0vWa\0va\x02\xCFV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x9FW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[\x83\x81\x10\x15a\x02IW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01c\x01\x9E')`\xE0\x1B`\0\x19\x80o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@Qa\x01\x1C\x90a\x02PV[`\x80\x80\x82R`\x04\x90\x82\x01Rc\x15\x19\\\xDD`\xE2\x1B`\xA0\x82\x01R`\xC0` \x82\x01\x81\x90R`\x03\x90\x82\x01Rb\x15\x14\xD5`\xEA\x1B`\xE0\x82\x01R`@\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16``\x82\x01Ra\x01\0\x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x01\x85W=`\0\x80>=`\0\xFD[P`@Q`$\x81\x01\x93\x90\x93R`D\x83\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x16`d\x82\x01R`\x01`\x84\x82\x01R`\xA4\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qa\x01\xEE\x90a\x02]V[a\x01\xFA\x93\x92\x91\x90a\x02\xE5V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x02\x16W=`\0\x80>=`\0\xFD[P\x82\x82\x81Q\x81\x10a\x02)Wa\x02)a\x03NV[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\0\xA5V[P\x92\x91PPV[a\x0E\x01\x80a\x03e\x839\x01\x90V[a\x0E\x03\x80a\x11f\x839\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02|W`\0\x80\xFD[P5\x91\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R`\0\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x02\xC4W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x02\x9DV[P\x90\x95\x94PPPPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x82R\x83\x16` \x82\x01R```@\x82\x01\x81\x90R\x82Q\x90\x82\x01\x81\x90R`\0\x90\x81[\x81\x81\x10\x15a\x03,W` \x81\x86\x01\x81\x01Q`\x80\x86\x84\x01\x01R\x01a\x03\x0FV[P`\0`\x80\x82\x85\x01\x01R`\x80`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x94\x93PPPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x0E\x018\x03\x80a\x0E\x01\x839\x81\x01`@\x81\x90Ra\0/\x91a\x01\xE7V[\x83\x83`\x03a\0=\x83\x82a\x03\x02V[P`\x04a\0J\x82\x82a\x03\x02V[PPPa\0]\x81\x83a\0f` \x1B` \x1CV[PPPPa\x03\xE7V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\0\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x02`\0\x82\x82Ta\0\xD2\x91\x90a\x03\xC0V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x80T\x86\x01\x90UQ\x84\x81R\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01`@Q\x80\x91\x03\x90\xA3PPV[PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12a\x01UW`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x01nWa\x01na\x01.V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x01\x9CWa\x01\x9Ca\x01.V[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x01\xB4W`\0\x80\xFD[`\0[\x82\x81\x10\x15a\x01\xD3W` \x81\x86\x01\x81\x01Q\x83\x83\x01\x82\x01R\x01a\x01\xB7V[P`\0\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x01\xFDW`\0\x80\xFD[\x84Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02\x13W`\0\x80\xFD[a\x02\x1F\x87\x82\x88\x01a\x01DV[` \x87\x01Q\x90\x95P\x90P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02=W`\0\x80\xFD[a\x02I\x87\x82\x88\x01a\x01DV[`@\x87\x01Q``\x88\x01Q\x91\x95P\x93P\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02oW`\0\x80\xFD[\x93\x96\x92\x95P\x90\x93PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x02\x8EW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x02\xAEWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x01)W\x80`\0R` `\0 `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x02\xDBWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x02\xFBW`\0\x81U`\x01\x01a\x02\xE7V[PPPPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03\x1BWa\x03\x1Ba\x01.V[a\x03/\x81a\x03)\x84Ta\x02zV[\x84a\x02\xB4V[` `\x1F\x82\x11`\x01\x81\x14a\x03cW`\0\x83\x15a\x03KWP\x84\x82\x01Q[`\0\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x02\xFBV[`\0\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x03\x93W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x03sV[P\x84\x82\x10\x15a\x03\xB1W\x86\x84\x01Q`\0\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x80\x82\x01\x80\x82\x11\x15a\x03\xE1WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x92\x91PPV[a\n\x0B\x80a\x03\xF6`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80cB\x96lh\x11a\0\x8CW\x80c\x95\xD8\x9BA\x11a\0fW\x80c\x95\xD8\x9BA\x14a\x01\xADW\x80c\xA4W\xC2\xD7\x14a\x01\xB5W\x80c\xA9\x05\x9C\xBB\x14a\x01\xC8W\x80c\xDDb\xED>\x14a\x01\xDBW`\0\x80\xFD[\x80cB\x96lh\x14a\x01\\W\x80cp\xA0\x821\x14a\x01qW\x80cy\xCCg\x90\x14a\x01\x9AW`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xD4W\x80c\t^\xA7\xB3\x14a\0\xF2W\x80c\x18\x16\r\xDD\x14a\x01\x15W\x80c#\xB8r\xDD\x14a\x01'W\x80c1<\xE5g\x14a\x01:W\x80c9P\x93Q\x14a\x01IW[`\0\x80\xFD[a\0\xDCa\x01\xEEV[`@Qa\0\xE9\x91\x90a\x08;V[`@Q\x80\x91\x03\x90\xF3[a\x01\x05a\x01\x006`\x04a\x08\xA5V[a\x02\x80V[`@Q\x90\x15\x15\x81R` \x01a\0\xE9V[`\x02T[`@Q\x90\x81R` \x01a\0\xE9V[a\x01\x05a\x0156`\x04a\x08\xCFV[a\x02\x9AV[`@Q`\x12\x81R` \x01a\0\xE9V[a\x01\x05a\x01W6`\x04a\x08\xA5V[a\x02\xBEV[a\x01oa\x01j6`\x04a\t\x0CV[a\x02\xE0V[\0[a\x01\x19a\x01\x7F6`\x04a\t%V[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01oa\x01\xA86`\x04a\x08\xA5V[a\x02\xEDV[a\0\xDCa\x03\x06V[a\x01\x05a\x01\xC36`\x04a\x08\xA5V[a\x03\x15V[a\x01\x05a\x01\xD66`\x04a\x08\xA5V[a\x03\x95V[a\x01\x19a\x01\xE96`\x04a\tGV[a\x03\xA3V[```\x03\x80Ta\x01\xFD\x90a\tzV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02)\x90a\tzV[\x80\x15a\x02vW\x80`\x1F\x10a\x02KWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02vV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02YW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\x8E\x81\x85\x85a\x03\xCEV[`\x01\x91PP[\x92\x91PPV[`\x003a\x02\xA8\x85\x82\x85a\x04\xF3V[a\x02\xB3\x85\x85\x85a\x05mV[P`\x01\x94\x93PPPPV[`\x003a\x02\x8E\x81\x85\x85a\x02\xD1\x83\x83a\x03\xA3V[a\x02\xDB\x91\x90a\t\xB4V[a\x03\xCEV[a\x02\xEA3\x82a\x07\x11V[PV[a\x02\xF8\x823\x83a\x04\xF3V[a\x03\x02\x82\x82a\x07\x11V[PPV[```\x04\x80Ta\x01\xFD\x90a\tzV[`\x003\x81a\x03#\x82\x86a\x03\xA3V[\x90P\x83\x81\x10\x15a\x03\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xB3\x82\x86\x86\x84\x03a\x03\xCEV[`\x003a\x02\x8E\x81\x85\x85a\x05mV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x040W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x04\xFF\x84\x84a\x03\xA3V[\x90P`\0\x19\x81\x14a\x05gW\x81\x81\x10\x15a\x05ZW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03\x7FV[a\x05g\x84\x84\x84\x84\x03a\x03\xCEV[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x05\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x063W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x06\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x87\x87\x03\x90U\x93\x87\x16\x80\x83R\x91\x84\x90 \x80T\x87\x01\x90U\x92Q\x85\x81R\x90\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01`@Q\x80\x91\x03\x90\xA3a\x05gV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07qW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x07\xE5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x86\x86\x03\x90U`\x02\x80T\x87\x90\x03\x90UQ\x85\x81R\x91\x92\x91\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01a\x04\xE6V[` \x81R`\0\x82Q\x80` \x84\x01R`\0[\x81\x81\x10\x15a\x08iW` \x81\x86\x01\x81\x01Q`@\x86\x84\x01\x01R\x01a\x08LV[P`\0`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xA0W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x08\xB8W`\0\x80\xFD[a\x08\xC1\x83a\x08\x89V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08\xE4W`\0\x80\xFD[a\x08\xED\x84a\x08\x89V[\x92Pa\x08\xFB` \x85\x01a\x08\x89V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`\0` \x82\x84\x03\x12\x15a\t\x1EW`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t7W`\0\x80\xFD[a\t@\x82a\x08\x89V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\tZW`\0\x80\xFD[a\tc\x83a\x08\x89V[\x91Pa\tq` \x84\x01a\x08\x89V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\t\x8EW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\t\xAEWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x02\x94WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 ^\xDA\xFFL<\x17\xC7\0A\x14\xF0\xE1\x1E1\x11]B+d\xE6\xB1\xF6\x1B\x89\xA3\xF9\x17\xD4\xF0\xF6\xC8\x04dsolcC\0\x08\x1B\x003`\x80`@R`@Qa\x0E\x038\x03\x80a\x0E\x03\x839\x81\x01`@\x81\x90Ra\0\"\x91a\x03\xF4V[\x82\x81a\x000\x82\x82`\0a\0DV[Pa\0<\x90P\x82a\0pV[PPPa\x05\x19V[a\0M\x83a\0\xDEV[`\0\x82Q\x11\x80a\0ZWP\x80[\x15a\0kWa\0i\x83\x83a\x01\x1EV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\0\xB0`\0\x80Q` a\r\xBC\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\0\xDB\x81a\x01JV[PV[a\0\xE7\x81a\x01\xE6V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``a\x01C\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\r\xDC`'\x919a\x02zV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80`\0\x80Q` a\r\xBC\x839\x81Q\x91R[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02SW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\xABV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\xC5V[```\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x02\x97\x91\x90a\x04\xCAV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x02\xD2W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x02\xD7V[``\x91P[P\x90\x92P\x90Pa\x02\xE9\x86\x83\x83\x87a\x02\xF3V[\x96\x95PPPPPPV[``\x83\x15a\x03bW\x82Q`\0\x03a\x03[W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x03[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x01\xABV[P\x81a\x03lV[a\x03l\x83\x83a\x03tV[\x94\x93PPPPV[\x81Q\x15a\x03\x84W\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\xAB\x91\x90a\x04\xE6V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xB5W`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a\x03\xEBW\x81\x81\x01Q\x83\x82\x01R` \x01a\x03\xD3V[PP`\0\x91\x01RV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x04\tW`\0\x80\xFD[a\x04\x12\x84a\x03\x9EV[\x92Pa\x04 ` \x85\x01a\x03\x9EV[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x04<W`\0\x80\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x04MW`\0\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x04fWa\x04fa\x03\xBAV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x04\x94Wa\x04\x94a\x03\xBAV[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x04\xACW`\0\x80\xFD[a\x04\xBD\x82` \x83\x01` \x86\x01a\x03\xD0V[\x80\x93PPPP\x92P\x92P\x92V[`\0\x82Qa\x04\xDC\x81\x84` \x87\x01a\x03\xD0V[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x05\x05\x81`@\x85\x01` \x87\x01a\x03\xD0V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[a\x08\x94\x80a\x05(`\09`\0\xF3\xFE`\x80`@R6a\0\x13Wa\0\x11a\0\x17V[\0[a\0\x11[a\0\x1Fa\x01iV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01_W```\x01`\x01`\xE0\x1B\x03\x19`\x005\x16cd\xD3\x18\r`\xE1\x1B\x81\x01a\0ZWa\0Sa\x01\x9CV[\x91Pa\x01WV[cXp\x86\xBD`\xE1\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0zWa\0Sa\x01\xF3V[c\x07\r|i`\xE4\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\x9AWa\0Sa\x029V[b\x1E\xB9o`\xE6\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\xB9Wa\0Sa\x02jV[c\xA3\x9F%\xE5`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\xD9Wa\0Sa\x02\xAAV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01Ra\x19]`\xF2\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[\x81Q` \x83\x01\xF3[a\x01ga\x02\xBEV[V[`\0\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[``a\x01\xA6a\x02\xCEV[`\0a\x01\xB56`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x01\xC2\x91\x90a\x06\xC9V[\x90Pa\x01\xDF\x81`@Q\x80` \x01`@R\x80`\0\x81RP`\0a\x02\xD9V[PP`@\x80Q` \x81\x01\x90\x91R`\0\x81R\x90V[```\0\x80a\x02\x056`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x02\x12\x91\x90a\x06\xFAV[\x91P\x91Pa\x02\"\x82\x82`\x01a\x02\xD9V[`@Q\x80` \x01`@R\x80`\0\x81RP\x92PPP\x90V[``a\x02Ca\x02\xCEV[`\0a\x02R6`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x02_\x91\x90a\x06\xC9V[\x90Pa\x01\xDF\x81a\x03\x05V[``a\x02ta\x02\xCEV[`\0a\x02~a\x01iV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16` \x82\x01R\x91\x92P\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x90V[``a\x02\xB4a\x02\xCEV[`\0a\x02~a\x03\\V[a\x01ga\x02\xC9a\x03\\V[a\x03kV[4\x15a\x01gW`\0\x80\xFD[a\x02\xE2\x83a\x03\x8FV[`\0\x82Q\x11\x80a\x02\xEFWP\x80[\x15a\x03\0Wa\x02\xFE\x83\x83a\x03\xCFV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03.a\x01iV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x03Y\x81a\x03\xFBV[PV[`\0a\x03fa\x04\xA4V[\x90P\x90V[6`\0\x807`\0\x806`\0\x84Z\xF4=`\0\x80>\x80\x80\x15a\x03\x8AW=`\0\xF3[=`\0\xFD[a\x03\x98\x81a\x04\xCCV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``a\x03\xF4\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x088`'\x919a\x05`V[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04`W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x01NV[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\x8DV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x059W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01NV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x04\x83V[```\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x05}\x91\x90a\x07\xE8V[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x05\xB8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05\xBDV[``\x91P[P\x91P\x91Pa\x05\xCE\x86\x83\x83\x87a\x05\xD8V[\x96\x95PPPPPPV[``\x83\x15a\x06GW\x82Q`\0\x03a\x06@W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x06@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x01NV[P\x81a\x06QV[a\x06Q\x83\x83a\x06YV[\x94\x93PPPPV[\x81Q\x15a\x06iW\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01N\x91\x90a\x08\x04V[`\0\x80\x85\x85\x11\x15a\x06\x93W`\0\x80\xFD[\x83\x86\x11\x15a\x06\xA0W`\0\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\xC4W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x06\xDBW`\0\x80\xFD[a\x03\xF4\x82a\x06\xADV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x07\rW`\0\x80\xFD[a\x07\x16\x83a\x06\xADV[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x072W`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x07CW`\0\x80\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07]Wa\x07]a\x06\xE4V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\x8CWa\x07\x8Ca\x06\xE4V[`@R\x81\x81R\x82\x82\x01` \x01\x87\x10\x15a\x07\xA4W`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92\x90PV[`\0[\x83\x81\x10\x15a\x07\xDFW\x81\x81\x01Q\x83\x82\x01R` \x01a\x07\xC7V[PP`\0\x91\x01RV[`\0\x82Qa\x07\xFA\x81\x84` \x87\x01a\x07\xC4V[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x08#\x81`@\x85\x01` \x87\x01a\x07\xC4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 \tC.C\x14\x99\xB1\x14a\xA4}\x85\xFF1\xEC\xABon\xEB2F4\xBCk\x961:d\x16\r\xEC\rdsolcC\0\x08\x1B\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed\xA2dipfsX\"\x12 \x06\x9B?\xF2\x0F<^\xD8\xB6Q\xD7\x12\xF0\xD4t\xAB\xC9\xB4\xD8\xD8f\xE0\xD2\x11\xE3Y\x1F\xF0y\xCAl\x8AdsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c220ed5214610030575b600080fd5b61004361003e36600461026a565b610059565b6040516100509190610283565b60405180910390f35b606060008267ffffffffffffffff811115610076576100766102cf565b60405190808252806020026020018201604052801561009f578160200160208202803683370190505b50905060005b83811015610249577f0000000000000000000000000000000000000000000000000000000000000000600163019e272960e01b600019806fffffffffffffffffffffffffffffffff80167f000000000000000000000000000000000000000000000000000000000000000060405161011c90610250565b60808082526004908201526315195cdd60e21b60a082015260c060208201819052600390820152621514d560ea1b60e082015260408101929092526001600160a01b0316606082015261010001604051809103906000f080158015610185573d6000803e3d6000fd5b50604051602481019390935260448301919091526001600160a01b031660648201526001608482015260a40160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516101ee9061025d565b6101fa939291906102e5565b604051809103906000f080158015610216573d6000803e3d6000fd5b508282815181106102295761022961034e565b6001600160a01b03909216602092830291909101909101526001016100a5565b5092915050565b610e018061036583390190565b610e038061116683390190565b60006020828403121561027c57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b818110156102c45783516001600160a01b031683526020938401939092019160010161029d565b509095945050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038481168252831660208201526060604082018190528251908201819052600090815b8181101561032c576020818601810151608086840101520161030f565b506000608082850101526080601f19601f830116840101915050949350505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b50604051610e01380380610e0183398101604081905261002f916101e7565b8383600361003d8382610302565b50600461004a8282610302565b50505061005d818361006660201b60201c565b505050506103e7565b6001600160a01b0382166100c05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546100d291906103c0565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261015557600080fd5b81516001600160401b0381111561016e5761016e61012e565b604051601f8201601f19908116603f011681016001600160401b038111828210171561019c5761019c61012e565b6040528181528382016020018510156101b457600080fd5b60005b828110156101d3576020818601810151838301820152016101b7565b506000918101602001919091529392505050565b600080600080608085870312156101fd57600080fd5b84516001600160401b0381111561021357600080fd5b61021f87828801610144565b602087015190955090506001600160401b0381111561023d57600080fd5b61024987828801610144565b60408701516060880151919550935090506001600160a01b038116811461026f57600080fd5b939692955090935050565b600181811c9082168061028e57607f821691505b6020821081036102ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561012957806000526020600020601f840160051c810160208510156102db5750805b601f840160051c820191505b818110156102fb57600081556001016102e7565b5050505050565b81516001600160401b0381111561031b5761031b61012e565b61032f81610329845461027a565b846102b4565b6020601f821160018114610363576000831561034b5750848201515b600019600385901b1c1916600184901b1784556102fb565b600084815260208120601f198516915b828110156103935787850151825560209485019460019092019101610373565b50848210156103b15786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b808201808211156103e157634e487b7160e01b600052601160045260246000fd5b92915050565b610a0b806103f66000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101ee565b6040516100e9919061083b565b60405180910390f35b6101056101003660046108a5565b610280565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046108cf565b61029a565b604051601281526020016100e9565b6101056101573660046108a5565b6102be565b61016f61016a36600461090c565b6102e0565b005b61011961017f366004610925565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046108a5565b6102ed565b6100dc610306565b6101056101c33660046108a5565b610315565b6101056101d63660046108a5565b610395565b6101196101e9366004610947565b6103a3565b6060600380546101fd9061097a565b80601f01602080910402602001604051908101604052809291908181526020018280546102299061097a565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b5050505050905090565b60003361028e8185856103ce565b60019150505b92915050565b6000336102a88582856104f3565b6102b385858561056d565b506001949350505050565b60003361028e8185856102d183836103a3565b6102db91906109b4565b6103ce565b6102ea3382610711565b50565b6102f88233836104f3565b6103028282610711565b5050565b6060600480546101fd9061097a565b6000338161032382866103a3565b9050838110156103885760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102b382868684036103ce565b60003361028e81858561056d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037f565b6001600160a01b0382166104915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161037f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006104ff84846103a3565b90506000198114610567578181101561055a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161037f565b61056784848484036103ce565b50505050565b6001600160a01b0383166105d15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037f565b6001600160a01b0382166106335760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037f565b6001600160a01b038316600090815260208190526040902054818110156106ab5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610567565b6001600160a01b0382166107715760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161037f565b6001600160a01b038216600090815260208190526040902054818110156107e55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161037f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016104e6565b602081526000825180602084015260005b81811015610869576020818601810151604086840101520161084c565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146108a057600080fd5b919050565b600080604083850312156108b857600080fd5b6108c183610889565b946020939093013593505050565b6000806000606084860312156108e457600080fd5b6108ed84610889565b92506108fb60208501610889565b929592945050506040919091013590565b60006020828403121561091e57600080fd5b5035919050565b60006020828403121561093757600080fd5b61094082610889565b9392505050565b6000806040838503121561095a57600080fd5b61096383610889565b915061097160208401610889565b90509250929050565b600181811c9082168061098e57607f821691505b6020821081036109ae57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029457634e487b7160e01b600052601160045260246000fdfea26469706673582212205edaff4c3c17c7004114f0e11e31115d422b64e6b1f61b89a3f917d4f0f6c80464736f6c634300081b00336080604052604051610e03380380610e03833981016040819052610022916103f4565b828161003082826000610044565b5061003c905082610070565b505050610519565b61004d836100de565b60008251118061005a5750805b1561006b57610069838361011e565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6100b0600080516020610dbc833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16100db8161014a565b50565b6100e7816101e6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606101438383604051806060016040528060278152602001610ddc6027913961027a565b9392505050565b6001600160a01b0381166101b45760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80600080516020610dbc8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b6102535760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101ab565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101c5565b6060600080856001600160a01b03168560405161029791906104ca565b600060405180830381855af49150503d80600081146102d2576040519150601f19603f3d011682016040523d82523d6000602084013e6102d7565b606091505b5090925090506102e9868383876102f3565b9695505050505050565b6060831561036257825160000361035b576001600160a01b0385163b61035b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ab565b508161036c565b61036c8383610374565b949350505050565b8151156103845781518083602001fd5b8060405162461bcd60e51b81526004016101ab91906104e6565b80516001600160a01b03811681146103b557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103eb5781810151838201526020016103d3565b50506000910152565b60008060006060848603121561040957600080fd5b6104128461039e565b92506104206020850161039e565b60408501519092506001600160401b0381111561043c57600080fd5b8401601f8101861361044d57600080fd5b80516001600160401b03811115610466576104666103ba565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610494576104946103ba565b6040528181528282016020018810156104ac57600080fd5b6104bd8260208301602086016103d0565b8093505050509250925092565b600082516104dc8184602087016103d0565b9190910192915050565b60208152600082518060208401526105058160408501602087016103d0565b601f01601f19169190910160400192915050565b610894806105286000396000f3fe60806040523661001357610011610017565b005b6100115b61001f610169565b6001600160a01b0316330361015f5760606001600160e01b0319600035166364d3180d60e11b810161005a5761005361019c565b9150610157565b63587086bd60e11b6001600160e01b031982160161007a576100536101f3565b63070d7c6960e41b6001600160e01b031982160161009a57610053610239565b621eb96f60e61b6001600160e01b03198216016100b95761005361026a565b63a39f25e560e01b6001600160e01b03198216016100d9576100536102aa565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b815160208301f35b6101676102be565b565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60606101a66102ce565b60006101b53660048184610683565b8101906101c291906106c9565b90506101df816040518060200160405280600081525060006102d9565b505060408051602081019091526000815290565b60606000806102053660048184610683565b81019061021291906106fa565b91509150610222828260016102d9565b604051806020016040528060008152509250505090565b60606102436102ce565b60006102523660048184610683565b81019061025f91906106c9565b90506101df81610305565b60606102746102ce565b600061027e610169565b604080516001600160a01b03831660208201529192500160405160208183030381529060405291505090565b60606102b46102ce565b600061027e61035c565b6101676102c961035c565b61036b565b341561016757600080fd5b6102e28361038f565b6000825111806102ef5750805b15610300576102fe83836103cf565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61032e610169565b604080516001600160a01b03928316815291841660208301520160405180910390a1610359816103fb565b50565b60006103666104a4565b905090565b3660008037600080366000845af43d6000803e80801561038a573d6000f35b3d6000fd5b610398816104cc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606103f4838360405180606001604052806027815260200161083860279139610560565b9392505050565b6001600160a01b0381166104605760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840161014e565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61018d565b6001600160a01b0381163b6105395760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161014e565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610483565b6060600080856001600160a01b03168560405161057d91906107e8565b600060405180830381855af49150503d80600081146105b8576040519150601f19603f3d011682016040523d82523d6000602084013e6105bd565b606091505b50915091506105ce868383876105d8565b9695505050505050565b60608315610647578251600003610640576001600160a01b0385163b6106405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014e565b5081610651565b6106518383610659565b949350505050565b8151156106695781518083602001fd5b8060405162461bcd60e51b815260040161014e9190610804565b6000808585111561069357600080fd5b838611156106a057600080fd5b5050820193919092039150565b80356001600160a01b03811681146106c457600080fd5b919050565b6000602082840312156106db57600080fd5b6103f4826106ad565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561070d57600080fd5b610716836106ad565b9150602083013567ffffffffffffffff81111561073257600080fd5b8301601f8101851361074357600080fd5b803567ffffffffffffffff81111561075d5761075d6106e4565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561078c5761078c6106e4565b6040528181528282016020018710156107a457600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156107df5781810151838201526020016107c7565b50506000910152565b600082516107fa8184602087016107c4565b9190910192915050565b60208152600082518060208401526108238160408501602087016107c4565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122009432e431499b11461a47d85ff31ecab6f6eeb324634bc6b96313a64160dec0d64736f6c634300081b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220069b3ff20f3c5ed8b651d712f0d474abc9b4d8d866e0d211e3591ff079ca6c8a64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80c\xC2 \xEDR\x14a\x000W[`\0\x80\xFD[a\0Ca\0>6`\x04a\x02jV[a\0YV[`@Qa\0P\x91\x90a\x02\x83V[`@Q\x80\x91\x03\x90\xF3[```\0\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0vWa\0va\x02\xCFV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x9FW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[\x83\x81\x10\x15a\x02IW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01c\x01\x9E')`\xE0\x1B`\0\x19\x80o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@Qa\x01\x1C\x90a\x02PV[`\x80\x80\x82R`\x04\x90\x82\x01Rc\x15\x19\\\xDD`\xE2\x1B`\xA0\x82\x01R`\xC0` \x82\x01\x81\x90R`\x03\x90\x82\x01Rb\x15\x14\xD5`\xEA\x1B`\xE0\x82\x01R`@\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16``\x82\x01Ra\x01\0\x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x01\x85W=`\0\x80>=`\0\xFD[P`@Q`$\x81\x01\x93\x90\x93R`D\x83\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x16`d\x82\x01R`\x01`\x84\x82\x01R`\xA4\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qa\x01\xEE\x90a\x02]V[a\x01\xFA\x93\x92\x91\x90a\x02\xE5V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x02\x16W=`\0\x80>=`\0\xFD[P\x82\x82\x81Q\x81\x10a\x02)Wa\x02)a\x03NV[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\0\xA5V[P\x92\x91PPV[a\x0E\x01\x80a\x03e\x839\x01\x90V[a\x0E\x03\x80a\x11f\x839\x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02|W`\0\x80\xFD[P5\x91\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R`\0\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x02\xC4W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x02\x9DV[P\x90\x95\x94PPPPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x82R\x83\x16` \x82\x01R```@\x82\x01\x81\x90R\x82Q\x90\x82\x01\x81\x90R`\0\x90\x81[\x81\x81\x10\x15a\x03,W` \x81\x86\x01\x81\x01Q`\x80\x86\x84\x01\x01R\x01a\x03\x0FV[P`\0`\x80\x82\x85\x01\x01R`\x80`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x94\x93PPPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x0E\x018\x03\x80a\x0E\x01\x839\x81\x01`@\x81\x90Ra\0/\x91a\x01\xE7V[\x83\x83`\x03a\0=\x83\x82a\x03\x02V[P`\x04a\0J\x82\x82a\x03\x02V[PPPa\0]\x81\x83a\0f` \x1B` \x1CV[PPPPa\x03\xE7V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\0\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC20: mint to the zero address\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x02`\0\x82\x82Ta\0\xD2\x91\x90a\x03\xC0V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x80T\x86\x01\x90UQ\x84\x81R\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01`@Q\x80\x91\x03\x90\xA3PPV[PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12a\x01UW`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x01nWa\x01na\x01.V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x01\x9CWa\x01\x9Ca\x01.V[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x01\xB4W`\0\x80\xFD[`\0[\x82\x81\x10\x15a\x01\xD3W` \x81\x86\x01\x81\x01Q\x83\x83\x01\x82\x01R\x01a\x01\xB7V[P`\0\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x01\xFDW`\0\x80\xFD[\x84Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02\x13W`\0\x80\xFD[a\x02\x1F\x87\x82\x88\x01a\x01DV[` \x87\x01Q\x90\x95P\x90P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02=W`\0\x80\xFD[a\x02I\x87\x82\x88\x01a\x01DV[`@\x87\x01Q``\x88\x01Q\x91\x95P\x93P\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02oW`\0\x80\xFD[\x93\x96\x92\x95P\x90\x93PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x02\x8EW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x02\xAEWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x01)W\x80`\0R` `\0 `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x02\xDBWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x02\xFBW`\0\x81U`\x01\x01a\x02\xE7V[PPPPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03\x1BWa\x03\x1Ba\x01.V[a\x03/\x81a\x03)\x84Ta\x02zV[\x84a\x02\xB4V[` `\x1F\x82\x11`\x01\x81\x14a\x03cW`\0\x83\x15a\x03KWP\x84\x82\x01Q[`\0\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x02\xFBV[`\0\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x03\x93W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x03sV[P\x84\x82\x10\x15a\x03\xB1W\x86\x84\x01Q`\0\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x80\x82\x01\x80\x82\x11\x15a\x03\xE1WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x92\x91PPV[a\n\x0B\x80a\x03\xF6`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80cB\x96lh\x11a\0\x8CW\x80c\x95\xD8\x9BA\x11a\0fW\x80c\x95\xD8\x9BA\x14a\x01\xADW\x80c\xA4W\xC2\xD7\x14a\x01\xB5W\x80c\xA9\x05\x9C\xBB\x14a\x01\xC8W\x80c\xDDb\xED>\x14a\x01\xDBW`\0\x80\xFD[\x80cB\x96lh\x14a\x01\\W\x80cp\xA0\x821\x14a\x01qW\x80cy\xCCg\x90\x14a\x01\x9AW`\0\x80\xFD[\x80c\x06\xFD\xDE\x03\x14a\0\xD4W\x80c\t^\xA7\xB3\x14a\0\xF2W\x80c\x18\x16\r\xDD\x14a\x01\x15W\x80c#\xB8r\xDD\x14a\x01'W\x80c1<\xE5g\x14a\x01:W\x80c9P\x93Q\x14a\x01IW[`\0\x80\xFD[a\0\xDCa\x01\xEEV[`@Qa\0\xE9\x91\x90a\x08;V[`@Q\x80\x91\x03\x90\xF3[a\x01\x05a\x01\x006`\x04a\x08\xA5V[a\x02\x80V[`@Q\x90\x15\x15\x81R` \x01a\0\xE9V[`\x02T[`@Q\x90\x81R` \x01a\0\xE9V[a\x01\x05a\x0156`\x04a\x08\xCFV[a\x02\x9AV[`@Q`\x12\x81R` \x01a\0\xE9V[a\x01\x05a\x01W6`\x04a\x08\xA5V[a\x02\xBEV[a\x01oa\x01j6`\x04a\t\x0CV[a\x02\xE0V[\0[a\x01\x19a\x01\x7F6`\x04a\t%V[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01oa\x01\xA86`\x04a\x08\xA5V[a\x02\xEDV[a\0\xDCa\x03\x06V[a\x01\x05a\x01\xC36`\x04a\x08\xA5V[a\x03\x15V[a\x01\x05a\x01\xD66`\x04a\x08\xA5V[a\x03\x95V[a\x01\x19a\x01\xE96`\x04a\tGV[a\x03\xA3V[```\x03\x80Ta\x01\xFD\x90a\tzV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02)\x90a\tzV[\x80\x15a\x02vW\x80`\x1F\x10a\x02KWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02vV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02YW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x003a\x02\x8E\x81\x85\x85a\x03\xCEV[`\x01\x91PP[\x92\x91PPV[`\x003a\x02\xA8\x85\x82\x85a\x04\xF3V[a\x02\xB3\x85\x85\x85a\x05mV[P`\x01\x94\x93PPPPV[`\x003a\x02\x8E\x81\x85\x85a\x02\xD1\x83\x83a\x03\xA3V[a\x02\xDB\x91\x90a\t\xB4V[a\x03\xCEV[a\x02\xEA3\x82a\x07\x11V[PV[a\x02\xF8\x823\x83a\x04\xF3V[a\x03\x02\x82\x82a\x07\x11V[PPV[```\x04\x80Ta\x01\xFD\x90a\tzV[`\x003\x81a\x03#\x82\x86a\x03\xA3V[\x90P\x83\x81\x10\x15a\x03\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: decreased allowance below`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xB3\x82\x86\x86\x84\x03a\x03\xCEV[`\x003a\x02\x8E\x81\x85\x85a\x05mV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T\x90V[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x040W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC20: approve from the zero add`D\x82\x01Rcress`\xE0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x04\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: approve to the zero addre`D\x82\x01Rass`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[`\0a\x04\xFF\x84\x84a\x03\xA3V[\x90P`\0\x19\x81\x14a\x05gW\x81\x81\x10\x15a\x05ZW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC20: insufficient allowance\0\0\0`D\x82\x01R`d\x01a\x03\x7FV[a\x05g\x84\x84\x84\x84\x03a\x03\xCEV[PPPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16a\x05\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC20: transfer from the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x063W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC20: transfer to the zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x06\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC20: transfer amount exceeds b`D\x82\x01Realance`\xD0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x87\x87\x03\x90U\x93\x87\x16\x80\x83R\x91\x84\x90 \x80T\x87\x01\x90U\x92Q\x85\x81R\x90\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01`@Q\x80\x91\x03\x90\xA3a\x05gV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07qW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC20: burn from the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x81\x81\x10\x15a\x07\xE5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC20: burn amount exceeds balan`D\x82\x01Race`\xF0\x1B`d\x82\x01R`\x84\x01a\x03\x7FV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x81\x81R` \x81\x81R`@\x80\x83 \x86\x86\x03\x90U`\x02\x80T\x87\x90\x03\x90UQ\x85\x81R\x91\x92\x91\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x01a\x04\xE6V[` \x81R`\0\x82Q\x80` \x84\x01R`\0[\x81\x81\x10\x15a\x08iW` \x81\x86\x01\x81\x01Q`@\x86\x84\x01\x01R\x01a\x08LV[P`\0`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xA0W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x08\xB8W`\0\x80\xFD[a\x08\xC1\x83a\x08\x89V[\x94` \x93\x90\x93\x015\x93PPPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08\xE4W`\0\x80\xFD[a\x08\xED\x84a\x08\x89V[\x92Pa\x08\xFB` \x85\x01a\x08\x89V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`\0` \x82\x84\x03\x12\x15a\t\x1EW`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\t7W`\0\x80\xFD[a\t@\x82a\x08\x89V[\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\tZW`\0\x80\xFD[a\tc\x83a\x08\x89V[\x91Pa\tq` \x84\x01a\x08\x89V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\t\x8EW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\t\xAEWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x02\x94WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 ^\xDA\xFFL<\x17\xC7\0A\x14\xF0\xE1\x1E1\x11]B+d\xE6\xB1\xF6\x1B\x89\xA3\xF9\x17\xD4\xF0\xF6\xC8\x04dsolcC\0\x08\x1B\x003`\x80`@R`@Qa\x0E\x038\x03\x80a\x0E\x03\x839\x81\x01`@\x81\x90Ra\0\"\x91a\x03\xF4V[\x82\x81a\x000\x82\x82`\0a\0DV[Pa\0<\x90P\x82a\0pV[PPPa\x05\x19V[a\0M\x83a\0\xDEV[`\0\x82Q\x11\x80a\0ZWP\x80[\x15a\0kWa\0i\x83\x83a\x01\x1EV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\0\xB0`\0\x80Q` a\r\xBC\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\0\xDB\x81a\x01JV[PV[a\0\xE7\x81a\x01\xE6V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``a\x01C\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\r\xDC`'\x919a\x02zV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80`\0\x80Q` a\r\xBC\x839\x81Q\x91R[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02SW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\xABV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\xC5V[```\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x02\x97\x91\x90a\x04\xCAV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x02\xD2W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x02\xD7V[``\x91P[P\x90\x92P\x90Pa\x02\xE9\x86\x83\x83\x87a\x02\xF3V[\x96\x95PPPPPPV[``\x83\x15a\x03bW\x82Q`\0\x03a\x03[W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x03[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x01\xABV[P\x81a\x03lV[a\x03l\x83\x83a\x03tV[\x94\x93PPPPV[\x81Q\x15a\x03\x84W\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\xAB\x91\x90a\x04\xE6V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xB5W`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a\x03\xEBW\x81\x81\x01Q\x83\x82\x01R` \x01a\x03\xD3V[PP`\0\x91\x01RV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x04\tW`\0\x80\xFD[a\x04\x12\x84a\x03\x9EV[\x92Pa\x04 ` \x85\x01a\x03\x9EV[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x04<W`\0\x80\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x04MW`\0\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x04fWa\x04fa\x03\xBAV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x04\x94Wa\x04\x94a\x03\xBAV[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x04\xACW`\0\x80\xFD[a\x04\xBD\x82` \x83\x01` \x86\x01a\x03\xD0V[\x80\x93PPPP\x92P\x92P\x92V[`\0\x82Qa\x04\xDC\x81\x84` \x87\x01a\x03\xD0V[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x05\x05\x81`@\x85\x01` \x87\x01a\x03\xD0V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[a\x08\x94\x80a\x05(`\09`\0\xF3\xFE`\x80`@R6a\0\x13Wa\0\x11a\0\x17V[\0[a\0\x11[a\0\x1Fa\x01iV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01_W```\x01`\x01`\xE0\x1B\x03\x19`\x005\x16cd\xD3\x18\r`\xE1\x1B\x81\x01a\0ZWa\0Sa\x01\x9CV[\x91Pa\x01WV[cXp\x86\xBD`\xE1\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0zWa\0Sa\x01\xF3V[c\x07\r|i`\xE4\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\x9AWa\0Sa\x029V[b\x1E\xB9o`\xE6\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\xB9Wa\0Sa\x02jV[c\xA3\x9F%\xE5`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\0\xD9Wa\0Sa\x02\xAAV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01Ra\x19]`\xF2\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[\x81Q` \x83\x01\xF3[a\x01ga\x02\xBEV[V[`\0\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[``a\x01\xA6a\x02\xCEV[`\0a\x01\xB56`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x01\xC2\x91\x90a\x06\xC9V[\x90Pa\x01\xDF\x81`@Q\x80` \x01`@R\x80`\0\x81RP`\0a\x02\xD9V[PP`@\x80Q` \x81\x01\x90\x91R`\0\x81R\x90V[```\0\x80a\x02\x056`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x02\x12\x91\x90a\x06\xFAV[\x91P\x91Pa\x02\"\x82\x82`\x01a\x02\xD9V[`@Q\x80` \x01`@R\x80`\0\x81RP\x92PPP\x90V[``a\x02Ca\x02\xCEV[`\0a\x02R6`\x04\x81\x84a\x06\x83V[\x81\x01\x90a\x02_\x91\x90a\x06\xC9V[\x90Pa\x01\xDF\x81a\x03\x05V[``a\x02ta\x02\xCEV[`\0a\x02~a\x01iV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16` \x82\x01R\x91\x92P\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x90V[``a\x02\xB4a\x02\xCEV[`\0a\x02~a\x03\\V[a\x01ga\x02\xC9a\x03\\V[a\x03kV[4\x15a\x01gW`\0\x80\xFD[a\x02\xE2\x83a\x03\x8FV[`\0\x82Q\x11\x80a\x02\xEFWP\x80[\x15a\x03\0Wa\x02\xFE\x83\x83a\x03\xCFV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03.a\x01iV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x03Y\x81a\x03\xFBV[PV[`\0a\x03fa\x04\xA4V[\x90P\x90V[6`\0\x807`\0\x806`\0\x84Z\xF4=`\0\x80>\x80\x80\x15a\x03\x8AW=`\0\xF3[=`\0\xFD[a\x03\x98\x81a\x04\xCCV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2PV[``a\x03\xF4\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x088`'\x919a\x05`V[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04`W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01a\x01NV[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\0\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\x8DV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x059W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01NV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x04\x83V[```\0\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x05}\x91\x90a\x07\xE8V[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x05\xB8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05\xBDV[``\x91P[P\x91P\x91Pa\x05\xCE\x86\x83\x83\x87a\x05\xD8V[\x96\x95PPPPPPV[``\x83\x15a\x06GW\x82Q`\0\x03a\x06@W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x06@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x01NV[P\x81a\x06QV[a\x06Q\x83\x83a\x06YV[\x94\x93PPPPV[\x81Q\x15a\x06iW\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01N\x91\x90a\x08\x04V[`\0\x80\x85\x85\x11\x15a\x06\x93W`\0\x80\xFD[\x83\x86\x11\x15a\x06\xA0W`\0\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\xC4W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x06\xDBW`\0\x80\xFD[a\x03\xF4\x82a\x06\xADV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x07\rW`\0\x80\xFD[a\x07\x16\x83a\x06\xADV[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x072W`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x07CW`\0\x80\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07]Wa\x07]a\x06\xE4V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\x8CWa\x07\x8Ca\x06\xE4V[`@R\x81\x81R\x82\x82\x01` \x01\x87\x10\x15a\x07\xA4W`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92\x90PV[`\0[\x83\x81\x10\x15a\x07\xDFW\x81\x81\x01Q\x83\x82\x01R` \x01a\x07\xC7V[PP`\0\x91\x01RV[`\0\x82Qa\x07\xFA\x81\x84` \x87\x01a\x07\xC4V[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x08#\x81`@\x85\x01` \x87\x01a\x07\xC4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 \tC.C\x14\x99\xB1\x14a\xA4}\x85\xFF1\xEC\xABon\xEB2F4\xBCk\x961:d\x16\r\xEC\rdsolcC\0\x08\x1B\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed\xA2dipfsX\"\x12 \x06\x9B?\xF2\x0F<^\xD8\xB6Q\xD7\x12\xF0\xD4t\xAB\xC9\xB4\xD8\xD8f\xE0\xD2\x11\xE3Y\x1F\xF0y\xCAl\x8AdsolcC\0\x08\x1B\x003",
    );
    /**Constructor`.
```solidity
constructor(address _beneficiary, address _baseStrategyImplementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _beneficiary: alloy::sol_types::private::Address,
        pub _baseStrategyImplementation: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._beneficiary, value._baseStrategyImplementation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _beneficiary: tuple.0,
                        _baseStrategyImplementation: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._beneficiary,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._baseStrategyImplementation,
                    ),
                )
            }
        }
    };
    /**Function with signature `createManyStrategies(uint256)` and selector `0xc220ed52`.
```solidity
function createManyStrategies(uint256 numStrategies) external returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createManyStrategiesCall {
        pub numStrategies: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`createManyStrategies(uint256)`](createManyStrategiesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createManyStrategiesReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createManyStrategiesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createManyStrategiesCall) -> Self {
                    (value.numStrategies,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createManyStrategiesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { numStrategies: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createManyStrategiesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createManyStrategiesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createManyStrategiesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createManyStrategiesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createManyStrategiesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createManyStrategies(uint256)";
            const SELECTOR: [u8; 4] = [194u8, 32u8, 237u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.numStrategies),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`StrategyDeployer`](self) function calls.
    pub enum StrategyDeployerCalls {
        createManyStrategies(createManyStrategiesCall),
    }
    #[automatically_derived]
    impl StrategyDeployerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[194u8, 32u8, 237u8, 82u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrategyDeployerCalls {
        const NAME: &'static str = "StrategyDeployerCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createManyStrategies(_) => {
                    <createManyStrategiesCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StrategyDeployerCalls>] = &[
                {
                    fn createManyStrategies(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyDeployerCalls> {
                        <createManyStrategiesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrategyDeployerCalls::createManyStrategies)
                    }
                    createManyStrategies
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createManyStrategies(inner) => {
                    <createManyStrategiesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createManyStrategies(inner) => {
                    <createManyStrategiesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StrategyDeployer`](self) contract instance.

See the [wrapper's documentation](`StrategyDeployerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StrategyDeployerInstance<T, P, N> {
        StrategyDeployerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _beneficiary: alloy::sol_types::private::Address,
        _baseStrategyImplementation: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StrategyDeployerInstance<T, P, N>>,
    > {
        StrategyDeployerInstance::<
            T,
            P,
            N,
        >::deploy(provider, _beneficiary, _baseStrategyImplementation)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _beneficiary: alloy::sol_types::private::Address,
        _baseStrategyImplementation: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        StrategyDeployerInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _beneficiary, _baseStrategyImplementation)
    }
    /**A [`StrategyDeployer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`StrategyDeployer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StrategyDeployerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StrategyDeployerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StrategyDeployerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrategyDeployerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`StrategyDeployer`](self) contract instance.

See the [wrapper's documentation](`StrategyDeployerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _beneficiary: alloy::sol_types::private::Address,
            _baseStrategyImplementation: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<StrategyDeployerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _beneficiary,
                _baseStrategyImplementation,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _beneficiary: alloy::sol_types::private::Address,
            _baseStrategyImplementation: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _beneficiary,
                            _baseStrategyImplementation,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StrategyDeployerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StrategyDeployerInstance<T, P, N> {
            StrategyDeployerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrategyDeployerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createManyStrategies`] function.
        pub fn createManyStrategies(
            &self,
            numStrategies: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, createManyStrategiesCall, N> {
            self.call_builder(
                &createManyStrategiesCall {
                    numStrategies,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrategyDeployerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
