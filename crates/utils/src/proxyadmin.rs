/**

Generated by the following Solidity interface...
```solidity
interface ProxyAdmin {
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function changeProxyAdmin(address proxy, address newAdmin) external;
    function getProxyAdmin(address proxy) external view returns (address);
    function getProxyImplementation(address proxy) external view returns (address);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function upgrade(address proxy, address implementation) external;
    function upgradeAndCall(address proxy, address implementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "changeProxyAdmin",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract TransparentUpgradeableProxy"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getProxyAdmin",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract TransparentUpgradeableProxy"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getProxyImplementation",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract TransparentUpgradeableProxy"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgrade",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract TransparentUpgradeableProxy"
      },
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeAndCall",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract TransparentUpgradeableProxy"
      },
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ProxyAdmin {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5061002c61002161003160201b60201c565b61003860201b60201c565b6100f9565b5f33905090565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610c43806101065f395ff3fe60806040526004361061007a575f3560e01c80639623609d1161004d5780639623609d1461012257806399a88ec41461013e578063f2fde38b14610166578063f3b7dead1461018e5761007a565b8063204e1c7a1461007e578063715018a6146100ba5780637eff275e146100d05780638da5cb5b146100f8575b5f5ffd5b348015610089575f5ffd5b506100a4600480360381019061009f91906106bf565b6101ca565b6040516100b1919061070a565b60405180910390f35b3480156100c5575f5ffd5b506100ce610258565b005b3480156100db575f5ffd5b506100f660048036038101906100f1919061074d565b61026b565b005b348015610103575f5ffd5b5061010c6102dd565b604051610119919061070a565b60405180910390f35b61013c600480360381019061013791906108c7565b610304565b005b348015610149575f5ffd5b50610164600480360381019061015f919061074d565b61037b565b005b348015610171575f5ffd5b5061018c60048036038101906101879190610933565b6103ed565b005b348015610199575f5ffd5b506101b460048036038101906101af91906106bf565b61046f565b6040516101c1919061070a565b60405180910390f35b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff166040516101f0906109b2565b5f60405180830381855afa9150503d805f8114610228576040519150601f19603f3d011682016040523d82523d5f602084013e61022d565b606091505b50915091508161023b575f5ffd5b8080602001905181019061024f91906109f0565b92505050919050565b6102606104fd565b6102695f61057b565b565b6102736104fd565b8173ffffffffffffffffffffffffffffffffffffffff16638f283970826040518263ffffffff1660e01b81526004016102ac919061070a565b5f604051808303815f87803b1580156102c3575f5ffd5b505af11580156102d5573d5f5f3e3d5ffd5b505050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61030c6104fd565b8273ffffffffffffffffffffffffffffffffffffffff16634f1ef2863484846040518463ffffffff1660e01b8152600401610348929190610a7b565b5f604051808303818588803b15801561035f575f5ffd5b505af1158015610371573d5f5f3e3d5ffd5b5050505050505050565b6103836104fd565b8173ffffffffffffffffffffffffffffffffffffffff16633659cfe6826040518263ffffffff1660e01b81526004016103bc919061070a565b5f604051808303815f87803b1580156103d3575f5ffd5b505af11580156103e5573d5f5f3e3d5ffd5b505050505050565b6103f56104fd565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610b29565b60405180910390fd5b61046c8161057b565b50565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1660405161049590610b91565b5f60405180830381855afa9150503d805f81146104cd576040519150601f19603f3d011682016040523d82523d5f602084013e6104d2565b606091505b5091509150816104e0575f5ffd5b808060200190518101906104f491906109f0565b92505050919050565b61050561063c565b73ffffffffffffffffffffffffffffffffffffffff166105236102dd565b73ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610bef565b60405180910390fd5b565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61067d82610654565b9050919050565b5f61068e82610673565b9050919050565b61069e81610684565b81146106a8575f5ffd5b50565b5f813590506106b981610695565b92915050565b5f602082840312156106d4576106d361064c565b5b5f6106e1848285016106ab565b91505092915050565b5f6106f482610654565b9050919050565b610704816106ea565b82525050565b5f60208201905061071d5f8301846106fb565b92915050565b61072c816106ea565b8114610736575f5ffd5b50565b5f8135905061074781610723565b92915050565b5f5f604083850312156107635761076261064c565b5b5f610770858286016106ab565b925050602061078185828601610739565b9150509250929050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107d982610793565b810181811067ffffffffffffffff821117156107f8576107f76107a3565b5b80604052505050565b5f61080a610643565b905061081682826107d0565b919050565b5f67ffffffffffffffff821115610835576108346107a3565b5b61083e82610793565b9050602081019050919050565b828183375f83830152505050565b5f61086b6108668461081b565b610801565b9050828152602081018484840111156108875761088661078f565b5b61089284828561084b565b509392505050565b5f82601f8301126108ae576108ad61078b565b5b81356108be848260208601610859565b91505092915050565b5f5f5f606084860312156108de576108dd61064c565b5b5f6108eb868287016106ab565b93505060206108fc86828701610739565b925050604084013567ffffffffffffffff81111561091d5761091c610650565b5b6109298682870161089a565b9150509250925092565b5f602082840312156109485761094761064c565b5b5f61095584828501610739565b91505092915050565b5f81905092915050565b7f5c60da1b000000000000000000000000000000000000000000000000000000005f82015250565b5f61099c60048361095e565b91506109a782610968565b600482019050919050565b5f6109bc82610990565b9150819050919050565b6109cf81610673565b81146109d9575f5ffd5b50565b5f815190506109ea816109c6565b92915050565b5f60208284031215610a0557610a0461064c565b5b5f610a12848285016109dc565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610a4d82610a1b565b610a578185610a25565b9350610a67818560208601610a35565b610a7081610793565b840191505092915050565b5f604082019050610a8e5f8301856106fb565b8181036020830152610aa08184610a43565b90509392505050565b5f82825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610b13602683610aa9565b9150610b1e82610ab9565b604082019050919050565b5f6020820190508181035f830152610b4081610b07565b9050919050565b7ff851a440000000000000000000000000000000000000000000000000000000005f82015250565b5f610b7b60048361095e565b9150610b8682610b47565b600482019050919050565b5f610b9b82610b6f565b9150819050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f610bd9602083610aa9565b9150610be482610ba5565b602082019050919050565b5f6020820190508181035f830152610c0681610bcd565b905091905056fea2646970667358221220d6689e85e89394d27733ac4fb9429344a18f26b81a9b1f0a489a69dad72afb9764736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[Pa\0,a\0!a\x001` \x1B` \x1CV[a\08` \x1B` \x1CV[a\0\xF9V[_3\x90P\x90V[___\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81__a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[a\x0CC\x80a\x01\x06_9_\xF3\xFE`\x80`@R`\x046\x10a\0zW_5`\xE0\x1C\x80c\x96#`\x9D\x11a\0MW\x80c\x96#`\x9D\x14a\x01\"W\x80c\x99\xA8\x8E\xC4\x14a\x01>W\x80c\xF2\xFD\xE3\x8B\x14a\x01fW\x80c\xF3\xB7\xDE\xAD\x14a\x01\x8EWa\0zV[\x80c N\x1Cz\x14a\0~W\x80cqP\x18\xA6\x14a\0\xBAW\x80c~\xFF'^\x14a\0\xD0W\x80c\x8D\xA5\xCB[\x14a\0\xF8W[__\xFD[4\x80\x15a\0\x89W__\xFD[Pa\0\xA4`\x04\x806\x03\x81\x01\x90a\0\x9F\x91\x90a\x06\xBFV[a\x01\xCAV[`@Qa\0\xB1\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC5W__\xFD[Pa\0\xCEa\x02XV[\0[4\x80\x15a\0\xDBW__\xFD[Pa\0\xF6`\x04\x806\x03\x81\x01\x90a\0\xF1\x91\x90a\x07MV[a\x02kV[\0[4\x80\x15a\x01\x03W__\xFD[Pa\x01\x0Ca\x02\xDDV[`@Qa\x01\x19\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[a\x01<`\x04\x806\x03\x81\x01\x90a\x017\x91\x90a\x08\xC7V[a\x03\x04V[\0[4\x80\x15a\x01IW__\xFD[Pa\x01d`\x04\x806\x03\x81\x01\x90a\x01_\x91\x90a\x07MV[a\x03{V[\0[4\x80\x15a\x01qW__\xFD[Pa\x01\x8C`\x04\x806\x03\x81\x01\x90a\x01\x87\x91\x90a\t3V[a\x03\xEDV[\0[4\x80\x15a\x01\x99W__\xFD[Pa\x01\xB4`\x04\x806\x03\x81\x01\x90a\x01\xAF\x91\x90a\x06\xBFV[a\x04oV[`@Qa\x01\xC1\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@Qa\x01\xF0\x90a\t\xB2V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x02(W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02-V[``\x91P[P\x91P\x91P\x81a\x02;W__\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02O\x91\x90a\t\xF0V[\x92PPP\x91\x90PV[a\x02`a\x04\xFDV[a\x02i_a\x05{V[V[a\x02sa\x04\xFDV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8F(9p\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xAC\x91\x90a\x07\nV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xC3W__\xFD[PZ\xF1\x15\x80\x15a\x02\xD5W=__>=_\xFD[PPPPPPV[___\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a\x03\x0Ca\x04\xFDV[\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cO\x1E\xF2\x864\x84\x84`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03H\x92\x91\x90a\n{V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x03_W__\xFD[PZ\xF1\x15\x80\x15a\x03qW=__>=_\xFD[PPPPPPPPV[a\x03\x83a\x04\xFDV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c6Y\xCF\xE6\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xBC\x91\x90a\x07\nV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD3W__\xFD[PZ\xF1\x15\x80\x15a\x03\xE5W=__>=_\xFD[PPPPPPV[a\x03\xF5a\x04\xFDV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x04cW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04Z\x90a\x0B)V[`@Q\x80\x91\x03\x90\xFD[a\x04l\x81a\x05{V[PV[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@Qa\x04\x95\x90a\x0B\x91V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x04\xCDW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xD2V[``\x91P[P\x91P\x91P\x81a\x04\xE0W__\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x04\xF4\x91\x90a\t\xF0V[\x92PPP\x91\x90PV[a\x05\x05a\x06<V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x05#a\x02\xDDV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05yW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05p\x90a\x0B\xEFV[`@Q\x80\x91\x03\x90\xFD[V[___\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81__a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x06}\x82a\x06TV[\x90P\x91\x90PV[_a\x06\x8E\x82a\x06sV[\x90P\x91\x90PV[a\x06\x9E\x81a\x06\x84V[\x81\x14a\x06\xA8W__\xFD[PV[_\x815\x90Pa\x06\xB9\x81a\x06\x95V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x06\xD4Wa\x06\xD3a\x06LV[[_a\x06\xE1\x84\x82\x85\x01a\x06\xABV[\x91PP\x92\x91PPV[_a\x06\xF4\x82a\x06TV[\x90P\x91\x90PV[a\x07\x04\x81a\x06\xEAV[\x82RPPV[_` \x82\x01\x90Pa\x07\x1D_\x83\x01\x84a\x06\xFBV[\x92\x91PPV[a\x07,\x81a\x06\xEAV[\x81\x14a\x076W__\xFD[PV[_\x815\x90Pa\x07G\x81a\x07#V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x07cWa\x07ba\x06LV[[_a\x07p\x85\x82\x86\x01a\x06\xABV[\x92PP` a\x07\x81\x85\x82\x86\x01a\x079V[\x91PP\x92P\x92\x90PV[__\xFD[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x07\xD9\x82a\x07\x93V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\xF8Wa\x07\xF7a\x07\xA3V[[\x80`@RPPPV[_a\x08\na\x06CV[\x90Pa\x08\x16\x82\x82a\x07\xD0V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x085Wa\x084a\x07\xA3V[[a\x08>\x82a\x07\x93V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x08ka\x08f\x84a\x08\x1BV[a\x08\x01V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x08\x87Wa\x08\x86a\x07\x8FV[[a\x08\x92\x84\x82\x85a\x08KV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x08\xAEWa\x08\xADa\x07\x8BV[[\x815a\x08\xBE\x84\x82` \x86\x01a\x08YV[\x91PP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x08\xDEWa\x08\xDDa\x06LV[[_a\x08\xEB\x86\x82\x87\x01a\x06\xABV[\x93PP` a\x08\xFC\x86\x82\x87\x01a\x079V[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\x1DWa\t\x1Ca\x06PV[[a\t)\x86\x82\x87\x01a\x08\x9AV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\tHWa\tGa\x06LV[[_a\tU\x84\x82\x85\x01a\x079V[\x91PP\x92\x91PPV[_\x81\x90P\x92\x91PPV[\x7F\\`\xDA\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\t\x9C`\x04\x83a\t^V[\x91Pa\t\xA7\x82a\thV[`\x04\x82\x01\x90P\x91\x90PV[_a\t\xBC\x82a\t\x90V[\x91P\x81\x90P\x91\x90PV[a\t\xCF\x81a\x06sV[\x81\x14a\t\xD9W__\xFD[PV[_\x81Q\x90Pa\t\xEA\x81a\t\xC6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\x05Wa\n\x04a\x06LV[[_a\n\x12\x84\x82\x85\x01a\t\xDCV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\nM\x82a\n\x1BV[a\nW\x81\x85a\n%V[\x93Pa\ng\x81\x85` \x86\x01a\n5V[a\np\x81a\x07\x93V[\x84\x01\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\n\x8E_\x83\x01\x85a\x06\xFBV[\x81\x81\x03` \x83\x01Ra\n\xA0\x81\x84a\nCV[\x90P\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FOwnable: new owner is the zero a_\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B\x13`&\x83a\n\xA9V[\x91Pa\x0B\x1E\x82a\n\xB9V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B@\x81a\x0B\x07V[\x90P\x91\x90PV[\x7F\xF8Q\xA4@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x0B{`\x04\x83a\t^V[\x91Pa\x0B\x86\x82a\x0BGV[`\x04\x82\x01\x90P\x91\x90PV[_a\x0B\x9B\x82a\x0BoV[\x91P\x81\x90P\x91\x90PV[\x7FOwnable: caller is not the owner_\x82\x01RPV[_a\x0B\xD9` \x83a\n\xA9V[\x91Pa\x0B\xE4\x82a\x0B\xA5V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0C\x06\x81a\x0B\xCDV[\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 \xD6h\x9E\x85\xE8\x93\x94\xD2w3\xACO\xB9B\x93D\xA1\x8F&\xB8\x1A\x9B\x1F\nH\x9Ai\xDA\xD7*\xFB\x97dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061007a575f3560e01c80639623609d1161004d5780639623609d1461012257806399a88ec41461013e578063f2fde38b14610166578063f3b7dead1461018e5761007a565b8063204e1c7a1461007e578063715018a6146100ba5780637eff275e146100d05780638da5cb5b146100f8575b5f5ffd5b348015610089575f5ffd5b506100a4600480360381019061009f91906106bf565b6101ca565b6040516100b1919061070a565b60405180910390f35b3480156100c5575f5ffd5b506100ce610258565b005b3480156100db575f5ffd5b506100f660048036038101906100f1919061074d565b61026b565b005b348015610103575f5ffd5b5061010c6102dd565b604051610119919061070a565b60405180910390f35b61013c600480360381019061013791906108c7565b610304565b005b348015610149575f5ffd5b50610164600480360381019061015f919061074d565b61037b565b005b348015610171575f5ffd5b5061018c60048036038101906101879190610933565b6103ed565b005b348015610199575f5ffd5b506101b460048036038101906101af91906106bf565b61046f565b6040516101c1919061070a565b60405180910390f35b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff166040516101f0906109b2565b5f60405180830381855afa9150503d805f8114610228576040519150601f19603f3d011682016040523d82523d5f602084013e61022d565b606091505b50915091508161023b575f5ffd5b8080602001905181019061024f91906109f0565b92505050919050565b6102606104fd565b6102695f61057b565b565b6102736104fd565b8173ffffffffffffffffffffffffffffffffffffffff16638f283970826040518263ffffffff1660e01b81526004016102ac919061070a565b5f604051808303815f87803b1580156102c3575f5ffd5b505af11580156102d5573d5f5f3e3d5ffd5b505050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61030c6104fd565b8273ffffffffffffffffffffffffffffffffffffffff16634f1ef2863484846040518463ffffffff1660e01b8152600401610348929190610a7b565b5f604051808303818588803b15801561035f575f5ffd5b505af1158015610371573d5f5f3e3d5ffd5b5050505050505050565b6103836104fd565b8173ffffffffffffffffffffffffffffffffffffffff16633659cfe6826040518263ffffffff1660e01b81526004016103bc919061070a565b5f604051808303815f87803b1580156103d3575f5ffd5b505af11580156103e5573d5f5f3e3d5ffd5b505050505050565b6103f56104fd565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610b29565b60405180910390fd5b61046c8161057b565b50565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1660405161049590610b91565b5f60405180830381855afa9150503d805f81146104cd576040519150601f19603f3d011682016040523d82523d5f602084013e6104d2565b606091505b5091509150816104e0575f5ffd5b808060200190518101906104f491906109f0565b92505050919050565b61050561063c565b73ffffffffffffffffffffffffffffffffffffffff166105236102dd565b73ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610bef565b60405180910390fd5b565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61067d82610654565b9050919050565b5f61068e82610673565b9050919050565b61069e81610684565b81146106a8575f5ffd5b50565b5f813590506106b981610695565b92915050565b5f602082840312156106d4576106d361064c565b5b5f6106e1848285016106ab565b91505092915050565b5f6106f482610654565b9050919050565b610704816106ea565b82525050565b5f60208201905061071d5f8301846106fb565b92915050565b61072c816106ea565b8114610736575f5ffd5b50565b5f8135905061074781610723565b92915050565b5f5f604083850312156107635761076261064c565b5b5f610770858286016106ab565b925050602061078185828601610739565b9150509250929050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107d982610793565b810181811067ffffffffffffffff821117156107f8576107f76107a3565b5b80604052505050565b5f61080a610643565b905061081682826107d0565b919050565b5f67ffffffffffffffff821115610835576108346107a3565b5b61083e82610793565b9050602081019050919050565b828183375f83830152505050565b5f61086b6108668461081b565b610801565b9050828152602081018484840111156108875761088661078f565b5b61089284828561084b565b509392505050565b5f82601f8301126108ae576108ad61078b565b5b81356108be848260208601610859565b91505092915050565b5f5f5f606084860312156108de576108dd61064c565b5b5f6108eb868287016106ab565b93505060206108fc86828701610739565b925050604084013567ffffffffffffffff81111561091d5761091c610650565b5b6109298682870161089a565b9150509250925092565b5f602082840312156109485761094761064c565b5b5f61095584828501610739565b91505092915050565b5f81905092915050565b7f5c60da1b000000000000000000000000000000000000000000000000000000005f82015250565b5f61099c60048361095e565b91506109a782610968565b600482019050919050565b5f6109bc82610990565b9150819050919050565b6109cf81610673565b81146109d9575f5ffd5b50565b5f815190506109ea816109c6565b92915050565b5f60208284031215610a0557610a0461064c565b5b5f610a12848285016109dc565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610a4d82610a1b565b610a578185610a25565b9350610a67818560208601610a35565b610a7081610793565b840191505092915050565b5f604082019050610a8e5f8301856106fb565b8181036020830152610aa08184610a43565b90509392505050565b5f82825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610b13602683610aa9565b9150610b1e82610ab9565b604082019050919050565b5f6020820190508181035f830152610b4081610b07565b9050919050565b7ff851a440000000000000000000000000000000000000000000000000000000005f82015250565b5f610b7b60048361095e565b9150610b8682610b47565b600482019050919050565b5f610b9b82610b6f565b9150819050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f610bd9602083610aa9565b9150610be482610ba5565b602082019050919050565b5f6020820190508181035f830152610c0681610bcd565b905091905056fea2646970667358221220d6689e85e89394d27733ac4fb9429344a18f26b81a9b1f0a489a69dad72afb9764736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0zW_5`\xE0\x1C\x80c\x96#`\x9D\x11a\0MW\x80c\x96#`\x9D\x14a\x01\"W\x80c\x99\xA8\x8E\xC4\x14a\x01>W\x80c\xF2\xFD\xE3\x8B\x14a\x01fW\x80c\xF3\xB7\xDE\xAD\x14a\x01\x8EWa\0zV[\x80c N\x1Cz\x14a\0~W\x80cqP\x18\xA6\x14a\0\xBAW\x80c~\xFF'^\x14a\0\xD0W\x80c\x8D\xA5\xCB[\x14a\0\xF8W[__\xFD[4\x80\x15a\0\x89W__\xFD[Pa\0\xA4`\x04\x806\x03\x81\x01\x90a\0\x9F\x91\x90a\x06\xBFV[a\x01\xCAV[`@Qa\0\xB1\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC5W__\xFD[Pa\0\xCEa\x02XV[\0[4\x80\x15a\0\xDBW__\xFD[Pa\0\xF6`\x04\x806\x03\x81\x01\x90a\0\xF1\x91\x90a\x07MV[a\x02kV[\0[4\x80\x15a\x01\x03W__\xFD[Pa\x01\x0Ca\x02\xDDV[`@Qa\x01\x19\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[a\x01<`\x04\x806\x03\x81\x01\x90a\x017\x91\x90a\x08\xC7V[a\x03\x04V[\0[4\x80\x15a\x01IW__\xFD[Pa\x01d`\x04\x806\x03\x81\x01\x90a\x01_\x91\x90a\x07MV[a\x03{V[\0[4\x80\x15a\x01qW__\xFD[Pa\x01\x8C`\x04\x806\x03\x81\x01\x90a\x01\x87\x91\x90a\t3V[a\x03\xEDV[\0[4\x80\x15a\x01\x99W__\xFD[Pa\x01\xB4`\x04\x806\x03\x81\x01\x90a\x01\xAF\x91\x90a\x06\xBFV[a\x04oV[`@Qa\x01\xC1\x91\x90a\x07\nV[`@Q\x80\x91\x03\x90\xF3[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@Qa\x01\xF0\x90a\t\xB2V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x02(W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02-V[``\x91P[P\x91P\x91P\x81a\x02;W__\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02O\x91\x90a\t\xF0V[\x92PPP\x91\x90PV[a\x02`a\x04\xFDV[a\x02i_a\x05{V[V[a\x02sa\x04\xFDV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8F(9p\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xAC\x91\x90a\x07\nV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xC3W__\xFD[PZ\xF1\x15\x80\x15a\x02\xD5W=__>=_\xFD[PPPPPPV[___\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a\x03\x0Ca\x04\xFDV[\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cO\x1E\xF2\x864\x84\x84`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03H\x92\x91\x90a\n{V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x03_W__\xFD[PZ\xF1\x15\x80\x15a\x03qW=__>=_\xFD[PPPPPPPPV[a\x03\x83a\x04\xFDV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c6Y\xCF\xE6\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xBC\x91\x90a\x07\nV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD3W__\xFD[PZ\xF1\x15\x80\x15a\x03\xE5W=__>=_\xFD[PPPPPPV[a\x03\xF5a\x04\xFDV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x04cW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04Z\x90a\x0B)V[`@Q\x80\x91\x03\x90\xFD[a\x04l\x81a\x05{V[PV[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@Qa\x04\x95\x90a\x0B\x91V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x04\xCDW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xD2V[``\x91P[P\x91P\x91P\x81a\x04\xE0W__\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x04\xF4\x91\x90a\t\xF0V[\x92PPP\x91\x90PV[a\x05\x05a\x06<V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x05#a\x02\xDDV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05yW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05p\x90a\x0B\xEFV[`@Q\x80\x91\x03\x90\xFD[V[___\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81__a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x06}\x82a\x06TV[\x90P\x91\x90PV[_a\x06\x8E\x82a\x06sV[\x90P\x91\x90PV[a\x06\x9E\x81a\x06\x84V[\x81\x14a\x06\xA8W__\xFD[PV[_\x815\x90Pa\x06\xB9\x81a\x06\x95V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x06\xD4Wa\x06\xD3a\x06LV[[_a\x06\xE1\x84\x82\x85\x01a\x06\xABV[\x91PP\x92\x91PPV[_a\x06\xF4\x82a\x06TV[\x90P\x91\x90PV[a\x07\x04\x81a\x06\xEAV[\x82RPPV[_` \x82\x01\x90Pa\x07\x1D_\x83\x01\x84a\x06\xFBV[\x92\x91PPV[a\x07,\x81a\x06\xEAV[\x81\x14a\x076W__\xFD[PV[_\x815\x90Pa\x07G\x81a\x07#V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x07cWa\x07ba\x06LV[[_a\x07p\x85\x82\x86\x01a\x06\xABV[\x92PP` a\x07\x81\x85\x82\x86\x01a\x079V[\x91PP\x92P\x92\x90PV[__\xFD[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x07\xD9\x82a\x07\x93V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\xF8Wa\x07\xF7a\x07\xA3V[[\x80`@RPPPV[_a\x08\na\x06CV[\x90Pa\x08\x16\x82\x82a\x07\xD0V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x085Wa\x084a\x07\xA3V[[a\x08>\x82a\x07\x93V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x08ka\x08f\x84a\x08\x1BV[a\x08\x01V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x08\x87Wa\x08\x86a\x07\x8FV[[a\x08\x92\x84\x82\x85a\x08KV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x08\xAEWa\x08\xADa\x07\x8BV[[\x815a\x08\xBE\x84\x82` \x86\x01a\x08YV[\x91PP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x08\xDEWa\x08\xDDa\x06LV[[_a\x08\xEB\x86\x82\x87\x01a\x06\xABV[\x93PP` a\x08\xFC\x86\x82\x87\x01a\x079V[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\x1DWa\t\x1Ca\x06PV[[a\t)\x86\x82\x87\x01a\x08\x9AV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\tHWa\tGa\x06LV[[_a\tU\x84\x82\x85\x01a\x079V[\x91PP\x92\x91PPV[_\x81\x90P\x92\x91PPV[\x7F\\`\xDA\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\t\x9C`\x04\x83a\t^V[\x91Pa\t\xA7\x82a\thV[`\x04\x82\x01\x90P\x91\x90PV[_a\t\xBC\x82a\t\x90V[\x91P\x81\x90P\x91\x90PV[a\t\xCF\x81a\x06sV[\x81\x14a\t\xD9W__\xFD[PV[_\x81Q\x90Pa\t\xEA\x81a\t\xC6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\x05Wa\n\x04a\x06LV[[_a\n\x12\x84\x82\x85\x01a\t\xDCV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\nM\x82a\n\x1BV[a\nW\x81\x85a\n%V[\x93Pa\ng\x81\x85` \x86\x01a\n5V[a\np\x81a\x07\x93V[\x84\x01\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\n\x8E_\x83\x01\x85a\x06\xFBV[\x81\x81\x03` \x83\x01Ra\n\xA0\x81\x84a\nCV[\x90P\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FOwnable: new owner is the zero a_\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\x0B\x13`&\x83a\n\xA9V[\x91Pa\x0B\x1E\x82a\n\xB9V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B@\x81a\x0B\x07V[\x90P\x91\x90PV[\x7F\xF8Q\xA4@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x0B{`\x04\x83a\t^V[\x91Pa\x0B\x86\x82a\x0BGV[`\x04\x82\x01\x90P\x91\x90PV[_a\x0B\x9B\x82a\x0BoV[\x91P\x81\x90P\x91\x90PV[\x7FOwnable: caller is not the owner_\x82\x01RPV[_a\x0B\xD9` \x83a\n\xA9V[\x91Pa\x0B\xE4\x82a\x0B\xA5V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0C\x06\x81a\x0B\xCDV[\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 \xD6h\x9E\x85\xE8\x93\x94\xD2w3\xACO\xB9B\x93D\xA1\x8F&\xB8\x1A\x9B\x1F\nH\x9Ai\xDA\xD7*\xFB\x97dsolcC\0\x08\x1B\x003",
    );
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `changeProxyAdmin(address,address)` and selector `0x7eff275e`.
```solidity
function changeProxyAdmin(address proxy, address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeProxyAdminCall {
        pub proxy: alloy::sol_types::private::Address,
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`changeProxyAdmin(address,address)`](changeProxyAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeProxyAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeProxyAdminCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: changeProxyAdminCall) -> Self {
                    (value.proxy, value.newAdmin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for changeProxyAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proxy: tuple.0,
                        newAdmin: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeProxyAdminReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: changeProxyAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for changeProxyAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeProxyAdminCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeProxyAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeProxyAdmin(address,address)";
            const SELECTOR: [u8; 4] = [126u8, 255u8, 39u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proxy,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getProxyAdmin(address)` and selector `0xf3b7dead`.
```solidity
function getProxyAdmin(address proxy) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProxyAdminCall {
        pub proxy: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getProxyAdmin(address)`](getProxyAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProxyAdminReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProxyAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getProxyAdminCall) -> Self {
                    (value.proxy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProxyAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proxy: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProxyAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getProxyAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProxyAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getProxyAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getProxyAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getProxyAdmin(address)";
            const SELECTOR: [u8; 4] = [243u8, 183u8, 222u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proxy,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getProxyImplementation(address)` and selector `0x204e1c7a`.
```solidity
function getProxyImplementation(address proxy) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProxyImplementationCall {
        pub proxy: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getProxyImplementation(address)`](getProxyImplementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProxyImplementationReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProxyImplementationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getProxyImplementationCall) -> Self {
                    (value.proxy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getProxyImplementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proxy: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProxyImplementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getProxyImplementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getProxyImplementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getProxyImplementationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getProxyImplementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getProxyImplementation(address)";
            const SELECTOR: [u8; 4] = [32u8, 78u8, 28u8, 122u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proxy,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgrade(address,address)` and selector `0x99a88ec4`.
```solidity
function upgrade(address proxy, address implementation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeCall {
        pub proxy: alloy::sol_types::private::Address,
        pub implementation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`upgrade(address,address)`](upgradeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeCall> for UnderlyingRustTuple<'_> {
                fn from(value: upgradeCall) -> Self {
                    (value.proxy, value.implementation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for upgradeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proxy: tuple.0,
                        implementation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: upgradeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for upgradeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgrade(address,address)";
            const SELECTOR: [u8; 4] = [153u8, 168u8, 142u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proxy,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgradeAndCall(address,address,bytes)` and selector `0x9623609d`.
```solidity
function upgradeAndCall(address proxy, address implementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeAndCallCall {
        pub proxy: alloy::sol_types::private::Address,
        pub implementation: alloy::sol_types::private::Address,
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeAndCall(address,address,bytes)`](upgradeAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeAndCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: upgradeAndCallCall) -> Self {
                    (value.proxy, value.implementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for upgradeAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proxy: tuple.0,
                        implementation: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeAndCall(address,address,bytes)";
            const SELECTOR: [u8; 4] = [150u8, 35u8, 96u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proxy,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ProxyAdmin`](self) function calls.
    pub enum ProxyAdminCalls {
        changeProxyAdmin(changeProxyAdminCall),
        getProxyAdmin(getProxyAdminCall),
        getProxyImplementation(getProxyImplementationCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        transferOwnership(transferOwnershipCall),
        upgrade(upgradeCall),
        upgradeAndCall(upgradeAndCallCall),
    }
    #[automatically_derived]
    impl ProxyAdminCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [32u8, 78u8, 28u8, 122u8],
            [113u8, 80u8, 24u8, 166u8],
            [126u8, 255u8, 39u8, 94u8],
            [141u8, 165u8, 203u8, 91u8],
            [150u8, 35u8, 96u8, 157u8],
            [153u8, 168u8, 142u8, 196u8],
            [242u8, 253u8, 227u8, 139u8],
            [243u8, 183u8, 222u8, 173u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ProxyAdminCalls {
        const NAME: &'static str = "ProxyAdminCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::changeProxyAdmin(_) => {
                    <changeProxyAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getProxyAdmin(_) => {
                    <getProxyAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getProxyImplementation(_) => {
                    <getProxyImplementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgrade(_) => <upgradeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::upgradeAndCall(_) => {
                    <upgradeAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ProxyAdminCalls>] = &[
                {
                    fn getProxyImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <getProxyImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::getProxyImplementation)
                    }
                    getProxyImplementation
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn changeProxyAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <changeProxyAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::changeProxyAdmin)
                    }
                    changeProxyAdmin
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::owner)
                    }
                    owner
                },
                {
                    fn upgradeAndCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <upgradeAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::upgradeAndCall)
                    }
                    upgradeAndCall
                },
                {
                    fn upgrade(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <upgradeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::upgrade)
                    }
                    upgrade
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn getProxyAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ProxyAdminCalls> {
                        <getProxyAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ProxyAdminCalls::getProxyAdmin)
                    }
                    getProxyAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::changeProxyAdmin(inner) => {
                    <changeProxyAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getProxyAdmin(inner) => {
                    <getProxyAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getProxyImplementation(inner) => {
                    <getProxyImplementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgrade(inner) => {
                    <upgradeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::upgradeAndCall(inner) => {
                    <upgradeAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::changeProxyAdmin(inner) => {
                    <changeProxyAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getProxyAdmin(inner) => {
                    <getProxyAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getProxyImplementation(inner) => {
                    <getProxyImplementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgrade(inner) => {
                    <upgradeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::upgradeAndCall(inner) => {
                    <upgradeAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ProxyAdmin`](self) events.
    pub enum ProxyAdminEvents {
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl ProxyAdminEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ProxyAdminEvents {
        const NAME: &'static str = "ProxyAdminEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ProxyAdminEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ProxyAdmin`](self) contract instance.

See the [wrapper's documentation](`ProxyAdminInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ProxyAdminInstance<T, P, N> {
        ProxyAdminInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ProxyAdminInstance<T, P, N>>,
    > {
        ProxyAdminInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ProxyAdminInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ProxyAdmin`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ProxyAdmin`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ProxyAdminInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ProxyAdminInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ProxyAdminInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ProxyAdminInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ProxyAdmin`](self) contract instance.

See the [wrapper's documentation](`ProxyAdminInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ProxyAdminInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ProxyAdminInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ProxyAdminInstance<T, P, N> {
            ProxyAdminInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ProxyAdminInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`changeProxyAdmin`] function.
        pub fn changeProxyAdmin(
            &self,
            proxy: alloy::sol_types::private::Address,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeProxyAdminCall, N> {
            self.call_builder(
                &changeProxyAdminCall {
                    proxy,
                    newAdmin,
                },
            )
        }
        ///Creates a new call builder for the [`getProxyAdmin`] function.
        pub fn getProxyAdmin(
            &self,
            proxy: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getProxyAdminCall, N> {
            self.call_builder(&getProxyAdminCall { proxy })
        }
        ///Creates a new call builder for the [`getProxyImplementation`] function.
        pub fn getProxyImplementation(
            &self,
            proxy: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getProxyImplementationCall, N> {
            self.call_builder(
                &getProxyImplementationCall {
                    proxy,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`upgrade`] function.
        pub fn upgrade(
            &self,
            proxy: alloy::sol_types::private::Address,
            implementation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeCall, N> {
            self.call_builder(
                &upgradeCall {
                    proxy,
                    implementation,
                },
            )
        }
        ///Creates a new call builder for the [`upgradeAndCall`] function.
        pub fn upgradeAndCall(
            &self,
            proxy: alloy::sol_types::private::Address,
            implementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeAndCallCall, N> {
            self.call_builder(
                &upgradeAndCallCall {
                    proxy,
                    implementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ProxyAdminInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
