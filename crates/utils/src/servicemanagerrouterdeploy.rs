/**

Generated by the following Solidity interface...
```solidity
interface ServiceManagerRouterDeploy {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ServiceManagerRouterDeploy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040526001600c5f6101000a81548160ff0219169083151502179055506001600c60026101000a81548160ff0219169083151502179055503480156043575f5ffd5b5061098f806100515f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610060565b005b61004a610186565b60405161005791906101c0565b60405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100c7575f5ffd5b505af11580156100d9573d5f5f3e3d5ffd5b505050505f6040516100ea90610199565b604051809103905ff080158015610103573d5f5f3e3d5ffd5b5090507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561016d575f5ffd5b505af115801561017f573d5f5f3e3d5ffd5b5050505050565b600c60029054906101000a900460ff1681565b610780806101da83390190565b5f8115159050919050565b6101ba816101a6565b82525050565b5f6020820190506101d35f8301846101b1565b9291505056fe6080604052348015600e575f5ffd5b506107648061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80632702747d14610043578063793e1c8e146100735780637be6aa6b14610091575b5f5ffd5b61005d60048036038101906100589190610386565b6100c1565b60405161006a919061047b565b60405180910390f35b61007b61014f565b60405161008891906104aa565b60405180910390f35b6100ab60048036038101906100a691906104c3565b610155565b6040516100b8919061047b565b60405180910390f35b60605f6333cfb7b760e01b836040516024016100dd91906104aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061014684826101d7565b91505092915050565b61dead81565b60605f63e481af9d60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506101cf83826101d7565b915050919050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516102009190610540565b5f60405180830381855afa9150503d805f8114610238576040519150601f19603f3d011682016040523d82523d5f602084013e61023d565b606091505b509150915081801561024f57505f8151115b15610271578080602001905181019061026891906106ba565b92505050610315565b5f600167ffffffffffffffff81111561028d5761028c61056a565b5b6040519080825280602002602001820160405280156102bb5781602001602082028036833780820191505090505b50905061dead815f815181106102d4576102d3610701565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508093505050505b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103558261032c565b9050919050565b6103658161034b565b811461036f575f5ffd5b50565b5f813590506103808161035c565b92915050565b5f5f6040838503121561039c5761039b610324565b5b5f6103a985828601610372565b92505060206103ba85828601610372565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6103f68161034b565b82525050565b5f61040783836103ed565b60208301905092915050565b5f602082019050919050565b5f610429826103c4565b61043381856103ce565b935061043e836103de565b805f5b8381101561046e57815161045588826103fc565b975061046083610413565b925050600181019050610441565b5085935050505092915050565b5f6020820190508181035f830152610493818461041f565b905092915050565b6104a48161034b565b82525050565b5f6020820190506104bd5f83018461049b565b92915050565b5f602082840312156104d8576104d7610324565b5b5f6104e584828501610372565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61051a826104ee565b61052481856104f8565b9350610534818560208601610502565b80840191505092915050565b5f61054b8284610510565b915081905092915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105a08261055a565b810181811067ffffffffffffffff821117156105bf576105be61056a565b5b80604052505050565b5f6105d161031b565b90506105dd8282610597565b919050565b5f67ffffffffffffffff8211156105fc576105fb61056a565b5b602082029050602081019050919050565b5f5ffd5b5f8151905061061f8161035c565b92915050565b5f610637610632846105e2565b6105c8565b9050808382526020820190506020840283018581111561065a5761065961060d565b5b835b81811015610683578061066f8882610611565b84526020840193505060208101905061065c565b5050509392505050565b5f82601f8301126106a1576106a0610556565b5b81516106b1848260208601610625565b91505092915050565b5f602082840312156106cf576106ce610324565b5b5f82015167ffffffffffffffff8111156106ec576106eb610328565b5b6106f88482850161068d565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212205e84f134a82e71d1af867a2dfdc6738bff701d6a9aa96abebd698a1b91bc44bf64736f6c634300081b0033a2646970667358221220a10b5b6e0bee4b73269f214934657a0fad27f57ba46b74b64e7fe294b48ccf8664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x01`\x0C_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\x01`\x0C`\x02a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP4\x80\x15`CW__\xFD[Pa\t\x8F\x80a\0Q_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0`V[\0[a\0Ja\x01\x86V[`@Qa\0W\x91\x90a\x01\xC0V[`@Q\x80\x91\x03\x90\xF3[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xC7W__\xFD[PZ\xF1\x15\x80\x15a\0\xD9W=__>=_\xFD[PPPP_`@Qa\0\xEA\x90a\x01\x99V[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x03W=__>=_\xFD[P\x90P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01mW__\xFD[PZ\xF1\x15\x80\x15a\x01\x7FW=__>=_\xFD[PPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[a\x07\x80\x80a\x01\xDA\x839\x01\x90V[_\x81\x15\x15\x90P\x91\x90PV[a\x01\xBA\x81a\x01\xA6V[\x82RPPV[_` \x82\x01\x90Pa\x01\xD3_\x83\x01\x84a\x01\xB1V[\x92\x91PPV\xFE`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x07d\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c'\x02t}\x14a\0CW\x80cy>\x1C\x8E\x14a\0sW\x80c{\xE6\xAAk\x14a\0\x91W[__\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x03\x86V[a\0\xC1V[`@Qa\0j\x91\x90a\x04{V[`@Q\x80\x91\x03\x90\xF3[a\0{a\x01OV[`@Qa\0\x88\x91\x90a\x04\xAAV[`@Q\x80\x91\x03\x90\xF3[a\0\xAB`\x04\x806\x03\x81\x01\x90a\0\xA6\x91\x90a\x04\xC3V[a\x01UV[`@Qa\0\xB8\x91\x90a\x04{V[`@Q\x80\x91\x03\x90\xF3[``_c3\xCF\xB7\xB7`\xE0\x1B\x83`@Q`$\x01a\0\xDD\x91\x90a\x04\xAAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP\x90Pa\x01F\x84\x82a\x01\xD7V[\x91PP\x92\x91PPV[a\xDE\xAD\x81V[``_c\xE4\x81\xAF\x9D`\xE0\x1B`@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP\x90Pa\x01\xCF\x83\x82a\x01\xD7V[\x91PP\x91\x90PV[``__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa\x02\0\x91\x90a\x05@V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x028W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02=V[``\x91P[P\x91P\x91P\x81\x80\x15a\x02OWP_\x81Q\x11[\x15a\x02qW\x80\x80` \x01\x90Q\x81\x01\x90a\x02h\x91\x90a\x06\xBAV[\x92PPPa\x03\x15V[_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x8DWa\x02\x8Ca\x05jV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\xBBW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Pa\xDE\xAD\x81_\x81Q\x81\x10a\x02\xD4Wa\x02\xD3a\x07\x01V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80\x93PPPP[\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x03U\x82a\x03,V[\x90P\x91\x90PV[a\x03e\x81a\x03KV[\x81\x14a\x03oW__\xFD[PV[_\x815\x90Pa\x03\x80\x81a\x03\\V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\x9CWa\x03\x9Ba\x03$V[[_a\x03\xA9\x85\x82\x86\x01a\x03rV[\x92PP` a\x03\xBA\x85\x82\x86\x01a\x03rV[\x91PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x03\xF6\x81a\x03KV[\x82RPPV[_a\x04\x07\x83\x83a\x03\xEDV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x04)\x82a\x03\xC4V[a\x043\x81\x85a\x03\xCEV[\x93Pa\x04>\x83a\x03\xDEV[\x80_[\x83\x81\x10\x15a\x04nW\x81Qa\x04U\x88\x82a\x03\xFCV[\x97Pa\x04`\x83a\x04\x13V[\x92PP`\x01\x81\x01\x90Pa\x04AV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x04\x93\x81\x84a\x04\x1FV[\x90P\x92\x91PPV[a\x04\xA4\x81a\x03KV[\x82RPPV[_` \x82\x01\x90Pa\x04\xBD_\x83\x01\x84a\x04\x9BV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x04\xD8Wa\x04\xD7a\x03$V[[_a\x04\xE5\x84\x82\x85\x01a\x03rV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x05\x1A\x82a\x04\xEEV[a\x05$\x81\x85a\x04\xF8V[\x93Pa\x054\x81\x85` \x86\x01a\x05\x02V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x05K\x82\x84a\x05\x10V[\x91P\x81\x90P\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05\xA0\x82a\x05ZV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05\xBFWa\x05\xBEa\x05jV[[\x80`@RPPPV[_a\x05\xD1a\x03\x1BV[\x90Pa\x05\xDD\x82\x82a\x05\x97V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xFCWa\x05\xFBa\x05jV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_\x81Q\x90Pa\x06\x1F\x81a\x03\\V[\x92\x91PPV[_a\x067a\x062\x84a\x05\xE2V[a\x05\xC8V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06ZWa\x06Ya\x06\rV[[\x83[\x81\x81\x10\x15a\x06\x83W\x80a\x06o\x88\x82a\x06\x11V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\\V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xA1Wa\x06\xA0a\x05VV[[\x81Qa\x06\xB1\x84\x82` \x86\x01a\x06%V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x06\xCFWa\x06\xCEa\x03$V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xECWa\x06\xEBa\x03(V[[a\x06\xF8\x84\x82\x85\x01a\x06\x8DV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 ^\x84\xF14\xA8.q\xD1\xAF\x86z-\xFD\xC6s\x8B\xFFp\x1Dj\x9A\xA9j\xBE\xBDi\x8A\x1B\x91\xBCD\xBFdsolcC\0\x08\x1B\x003\xA2dipfsX\"\x12 \xA1\x0B[n\x0B\xEEKs&\x9F!I4ez\x0F\xAD'\xF5{\xA4kt\xB6N\x7F\xE2\x94\xB4\x8C\xCF\x86dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610060565b005b61004a610186565b60405161005791906101c0565b60405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100c7575f5ffd5b505af11580156100d9573d5f5f3e3d5ffd5b505050505f6040516100ea90610199565b604051809103905ff080158015610103573d5f5f3e3d5ffd5b5090507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561016d575f5ffd5b505af115801561017f573d5f5f3e3d5ffd5b5050505050565b600c60029054906101000a900460ff1681565b610780806101da83390190565b5f8115159050919050565b6101ba816101a6565b82525050565b5f6020820190506101d35f8301846101b1565b9291505056fe6080604052348015600e575f5ffd5b506107648061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80632702747d14610043578063793e1c8e146100735780637be6aa6b14610091575b5f5ffd5b61005d60048036038101906100589190610386565b6100c1565b60405161006a919061047b565b60405180910390f35b61007b61014f565b60405161008891906104aa565b60405180910390f35b6100ab60048036038101906100a691906104c3565b610155565b6040516100b8919061047b565b60405180910390f35b60605f6333cfb7b760e01b836040516024016100dd91906104aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061014684826101d7565b91505092915050565b61dead81565b60605f63e481af9d60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506101cf83826101d7565b915050919050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516102009190610540565b5f60405180830381855afa9150503d805f8114610238576040519150601f19603f3d011682016040523d82523d5f602084013e61023d565b606091505b509150915081801561024f57505f8151115b15610271578080602001905181019061026891906106ba565b92505050610315565b5f600167ffffffffffffffff81111561028d5761028c61056a565b5b6040519080825280602002602001820160405280156102bb5781602001602082028036833780820191505090505b50905061dead815f815181106102d4576102d3610701565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508093505050505b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103558261032c565b9050919050565b6103658161034b565b811461036f575f5ffd5b50565b5f813590506103808161035c565b92915050565b5f5f6040838503121561039c5761039b610324565b5b5f6103a985828601610372565b92505060206103ba85828601610372565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6103f68161034b565b82525050565b5f61040783836103ed565b60208301905092915050565b5f602082019050919050565b5f610429826103c4565b61043381856103ce565b935061043e836103de565b805f5b8381101561046e57815161045588826103fc565b975061046083610413565b925050600181019050610441565b5085935050505092915050565b5f6020820190508181035f830152610493818461041f565b905092915050565b6104a48161034b565b82525050565b5f6020820190506104bd5f83018461049b565b92915050565b5f602082840312156104d8576104d7610324565b5b5f6104e584828501610372565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61051a826104ee565b61052481856104f8565b9350610534818560208601610502565b80840191505092915050565b5f61054b8284610510565b915081905092915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105a08261055a565b810181811067ffffffffffffffff821117156105bf576105be61056a565b5b80604052505050565b5f6105d161031b565b90506105dd8282610597565b919050565b5f67ffffffffffffffff8211156105fc576105fb61056a565b5b602082029050602081019050919050565b5f5ffd5b5f8151905061061f8161035c565b92915050565b5f610637610632846105e2565b6105c8565b9050808382526020820190506020840283018581111561065a5761065961060d565b5b835b81811015610683578061066f8882610611565b84526020840193505060208101905061065c565b5050509392505050565b5f82601f8301126106a1576106a0610556565b5b81516106b1848260208601610625565b91505092915050565b5f602082840312156106cf576106ce610324565b5b5f82015167ffffffffffffffff8111156106ec576106eb610328565b5b6106f88482850161068d565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212205e84f134a82e71d1af867a2dfdc6738bff701d6a9aa96abebd698a1b91bc44bf64736f6c634300081b0033a2646970667358221220a10b5b6e0bee4b73269f214934657a0fad27f57ba46b74b64e7fe294b48ccf8664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0`V[\0[a\0Ja\x01\x86V[`@Qa\0W\x91\x90a\x01\xC0V[`@Q\x80\x91\x03\x90\xF3[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xC7W__\xFD[PZ\xF1\x15\x80\x15a\0\xD9W=__>=_\xFD[PPPP_`@Qa\0\xEA\x90a\x01\x99V[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x03W=__>=_\xFD[P\x90P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01mW__\xFD[PZ\xF1\x15\x80\x15a\x01\x7FW=__>=_\xFD[PPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[a\x07\x80\x80a\x01\xDA\x839\x01\x90V[_\x81\x15\x15\x90P\x91\x90PV[a\x01\xBA\x81a\x01\xA6V[\x82RPPV[_` \x82\x01\x90Pa\x01\xD3_\x83\x01\x84a\x01\xB1V[\x92\x91PPV\xFE`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x07d\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c'\x02t}\x14a\0CW\x80cy>\x1C\x8E\x14a\0sW\x80c{\xE6\xAAk\x14a\0\x91W[__\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x03\x86V[a\0\xC1V[`@Qa\0j\x91\x90a\x04{V[`@Q\x80\x91\x03\x90\xF3[a\0{a\x01OV[`@Qa\0\x88\x91\x90a\x04\xAAV[`@Q\x80\x91\x03\x90\xF3[a\0\xAB`\x04\x806\x03\x81\x01\x90a\0\xA6\x91\x90a\x04\xC3V[a\x01UV[`@Qa\0\xB8\x91\x90a\x04{V[`@Q\x80\x91\x03\x90\xF3[``_c3\xCF\xB7\xB7`\xE0\x1B\x83`@Q`$\x01a\0\xDD\x91\x90a\x04\xAAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP\x90Pa\x01F\x84\x82a\x01\xD7V[\x91PP\x92\x91PPV[a\xDE\xAD\x81V[``_c\xE4\x81\xAF\x9D`\xE0\x1B`@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP\x90Pa\x01\xCF\x83\x82a\x01\xD7V[\x91PP\x91\x90PV[``__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa\x02\0\x91\x90a\x05@V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x028W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02=V[``\x91P[P\x91P\x91P\x81\x80\x15a\x02OWP_\x81Q\x11[\x15a\x02qW\x80\x80` \x01\x90Q\x81\x01\x90a\x02h\x91\x90a\x06\xBAV[\x92PPPa\x03\x15V[_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x8DWa\x02\x8Ca\x05jV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\xBBW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Pa\xDE\xAD\x81_\x81Q\x81\x10a\x02\xD4Wa\x02\xD3a\x07\x01V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80\x93PPPP[\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x03U\x82a\x03,V[\x90P\x91\x90PV[a\x03e\x81a\x03KV[\x81\x14a\x03oW__\xFD[PV[_\x815\x90Pa\x03\x80\x81a\x03\\V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\x9CWa\x03\x9Ba\x03$V[[_a\x03\xA9\x85\x82\x86\x01a\x03rV[\x92PP` a\x03\xBA\x85\x82\x86\x01a\x03rV[\x91PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x03\xF6\x81a\x03KV[\x82RPPV[_a\x04\x07\x83\x83a\x03\xEDV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x04)\x82a\x03\xC4V[a\x043\x81\x85a\x03\xCEV[\x93Pa\x04>\x83a\x03\xDEV[\x80_[\x83\x81\x10\x15a\x04nW\x81Qa\x04U\x88\x82a\x03\xFCV[\x97Pa\x04`\x83a\x04\x13V[\x92PP`\x01\x81\x01\x90Pa\x04AV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x04\x93\x81\x84a\x04\x1FV[\x90P\x92\x91PPV[a\x04\xA4\x81a\x03KV[\x82RPPV[_` \x82\x01\x90Pa\x04\xBD_\x83\x01\x84a\x04\x9BV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x04\xD8Wa\x04\xD7a\x03$V[[_a\x04\xE5\x84\x82\x85\x01a\x03rV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x05\x1A\x82a\x04\xEEV[a\x05$\x81\x85a\x04\xF8V[\x93Pa\x054\x81\x85` \x86\x01a\x05\x02V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x05K\x82\x84a\x05\x10V[\x91P\x81\x90P\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05\xA0\x82a\x05ZV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05\xBFWa\x05\xBEa\x05jV[[\x80`@RPPPV[_a\x05\xD1a\x03\x1BV[\x90Pa\x05\xDD\x82\x82a\x05\x97V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xFCWa\x05\xFBa\x05jV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_\x81Q\x90Pa\x06\x1F\x81a\x03\\V[\x92\x91PPV[_a\x067a\x062\x84a\x05\xE2V[a\x05\xC8V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06ZWa\x06Ya\x06\rV[[\x83[\x81\x81\x10\x15a\x06\x83W\x80a\x06o\x88\x82a\x06\x11V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\\V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xA1Wa\x06\xA0a\x05VV[[\x81Qa\x06\xB1\x84\x82` \x86\x01a\x06%V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x06\xCFWa\x06\xCEa\x03$V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xECWa\x06\xEBa\x03(V[[a\x06\xF8\x84\x82\x85\x01a\x06\x8DV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 ^\x84\xF14\xA8.q\xD1\xAF\x86z-\xFD\xC6s\x8B\xFFp\x1Dj\x9A\xA9j\xBE\xBDi\x8A\x1B\x91\xBCD\xBFdsolcC\0\x08\x1B\x003\xA2dipfsX\"\x12 \xA1\x0B[n\x0B\xEEKs&\x9F!I4ez\x0F\xAD'\xF5{\xA4kt\xB6N\x7F\xE2\x94\xB4\x8C\xCF\x86dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ServiceManagerRouterDeploy`](self) function calls.
    pub enum ServiceManagerRouterDeployCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl ServiceManagerRouterDeployCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ServiceManagerRouterDeployCalls {
        const NAME: &'static str = "ServiceManagerRouterDeployCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ServiceManagerRouterDeployCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ServiceManagerRouterDeployCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ServiceManagerRouterDeployCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ServiceManagerRouterDeployCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ServiceManagerRouterDeployCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ServiceManagerRouterDeploy`](self) contract instance.

See the [wrapper's documentation](`ServiceManagerRouterDeployInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ServiceManagerRouterDeployInstance<T, P, N> {
        ServiceManagerRouterDeployInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ServiceManagerRouterDeployInstance<T, P, N>>,
    > {
        ServiceManagerRouterDeployInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ServiceManagerRouterDeployInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ServiceManagerRouterDeploy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ServiceManagerRouterDeploy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ServiceManagerRouterDeployInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ServiceManagerRouterDeployInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ServiceManagerRouterDeployInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ServiceManagerRouterDeployInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ServiceManagerRouterDeploy`](self) contract instance.

See the [wrapper's documentation](`ServiceManagerRouterDeployInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ServiceManagerRouterDeployInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ServiceManagerRouterDeployInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> ServiceManagerRouterDeployInstance<T, P, N> {
            ServiceManagerRouterDeployInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ServiceManagerRouterDeployInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ServiceManagerRouterDeployInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
