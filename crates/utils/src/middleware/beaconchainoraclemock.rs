/**

Generated by the following Solidity interface...
```solidity
interface BeaconChainOracleMock {
    function addOracleSigners(address[] memory _oracleSigners) external;
    function beaconStateRootAtBlockNumber(uint64 blockNumber) external view returns (bytes32);
    function hasVoted(uint64 blockNumber, address oracleSigner) external view returns (bool);
    function isOracleSigner(address _oracleSigner) external view returns (bool);
    function latestConfirmedOracleBlockNumber() external view returns (uint64);
    function removeOracleSigners(address[] memory _oracleSigners) external;
    function setBlockRoot(uint64 timestamp, bytes32 blockRoot) external;
    function setThreshold(uint256 _threshold) external;
    function stateRootVotes(uint64 blockNumber, bytes32 stateRoot) external view returns (uint256);
    function threshold() external view returns (uint256);
    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);
    function totalOracleSigners() external view returns (uint256);
    function voteForBeaconChainStateRoot(uint64 blockNumber, bytes32 stateRoot) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addOracleSigners",
    "inputs": [
      {
        "name": "_oracleSigners",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "beaconStateRootAtBlockNumber",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasVoted",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "oracleSigner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isOracleSigner",
    "inputs": [
      {
        "name": "_oracleSigner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "latestConfirmedOracleBlockNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeOracleSigners",
    "inputs": [
      {
        "name": "_oracleSigners",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBlockRoot",
    "inputs": [
      {
        "name": "timestamp",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "blockRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setThreshold",
    "inputs": [
      {
        "name": "_threshold",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "stateRootVotes",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "stateRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "threshold",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "timestampToBlockRoot",
    "inputs": [
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalOracleSigners",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "voteForBeaconChainStateRoot",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "stateRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod BeaconChainOracleMock {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506103d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d21af061161008c578063a22f141e11610066578063a22f141e14610190578063a3b2aa961461010c578063acd414a8146101a2578063c61ff600146101cd57600080fd5b80637d21af061461011f578063864b8a6914610174578063960bfe041461018257600080fd5b80630690526a146100d45780632dae03e1146100fd578063309044571461010c57806342cde4e81461011f578063643599f2146101265780637a00098914610150575b600080fd5b6100ea6100e23660046101f8565b600092915050565b6040519081526020015b60405180910390f35b604051600081526020016100f4565b61011d61011a36600461024f565b50565b005b60006100ea565b6100ea610134366004610314565b67ffffffffffffffff1660009081526020819052604090205490565b61016461015e36600461032d565b50600090565b60405190151581526020016100f4565b6100ea61015e36600461034f565b61011d61011a366004610314565b61011d61019e3660046101f8565b5050565b61011d6101b03660046101f8565b67ffffffffffffffff909116600090815260208190526040902055565b6101646100e236600461036a565b803567ffffffffffffffff811681146101f357600080fd5b919050565b6000806040838503121561020b57600080fd5b610214836101db565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146101f357600080fd5b6000602080838503121561026257600080fd5b823567ffffffffffffffff8082111561027a57600080fd5b818501915085601f83011261028e57600080fd5b8135818111156102a0576102a0610222565b8060051b604051601f19603f830116810181811085821117156102c5576102c5610222565b6040529182528482019250838101850191888311156102e357600080fd5b938501935b82851015610308576102f985610238565b845293850193928501926102e8565b98975050505050505050565b60006020828403121561032657600080fd5b5035919050565b60006020828403121561033f57600080fd5b61034882610238565b9392505050565b60006020828403121561036157600080fd5b610348826101db565b6000806040838503121561037d57600080fd5b610386836101db565b915061039460208401610238565b9050925092905056fea264697066735822122046b9dfa2d4e8edb0a114da8fb6267f474030f3ac66d61afb827411399d27f63464736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x03\xD3\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80c}!\xAF\x06\x11a\0\x8CW\x80c\xA2/\x14\x1E\x11a\0fW\x80c\xA2/\x14\x1E\x14a\x01\x90W\x80c\xA3\xB2\xAA\x96\x14a\x01\x0CW\x80c\xAC\xD4\x14\xA8\x14a\x01\xA2W\x80c\xC6\x1F\xF6\0\x14a\x01\xCDW`\0\x80\xFD[\x80c}!\xAF\x06\x14a\x01\x1FW\x80c\x86K\x8Ai\x14a\x01tW\x80c\x96\x0B\xFE\x04\x14a\x01\x82W`\0\x80\xFD[\x80c\x06\x90Rj\x14a\0\xD4W\x80c-\xAE\x03\xE1\x14a\0\xFDW\x80c0\x90DW\x14a\x01\x0CW\x80cB\xCD\xE4\xE8\x14a\x01\x1FW\x80cd5\x99\xF2\x14a\x01&W\x80cz\0\t\x89\x14a\x01PW[`\0\x80\xFD[a\0\xEAa\0\xE26`\x04a\x01\xF8V[`\0\x92\x91PPV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`@Q`\0\x81R` \x01a\0\xF4V[a\x01\x1Da\x01\x1A6`\x04a\x02OV[PV[\0[`\0a\0\xEAV[a\0\xEAa\x0146`\x04a\x03\x14V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01da\x01^6`\x04a\x03-V[P`\0\x90V[`@Q\x90\x15\x15\x81R` \x01a\0\xF4V[a\0\xEAa\x01^6`\x04a\x03OV[a\x01\x1Da\x01\x1A6`\x04a\x03\x14V[a\x01\x1Da\x01\x9E6`\x04a\x01\xF8V[PPV[a\x01\x1Da\x01\xB06`\x04a\x01\xF8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\0\x90\x81R` \x81\x90R`@\x90 UV[a\x01da\0\xE26`\x04a\x03jV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\xF3W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x02\x0BW`\0\x80\xFD[a\x02\x14\x83a\x01\xDBV[\x94` \x93\x90\x93\x015\x93PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\xF3W`\0\x80\xFD[`\0` \x80\x83\x85\x03\x12\x15a\x02bW`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x02zW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x02\x8EW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x02\xA0Wa\x02\xA0a\x02\"V[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x85\x82\x11\x17\x15a\x02\xC5Wa\x02\xC5a\x02\"V[`@R\x91\x82R\x84\x82\x01\x92P\x83\x81\x01\x85\x01\x91\x88\x83\x11\x15a\x02\xE3W`\0\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\x03\x08Wa\x02\xF9\x85a\x028V[\x84R\x93\x85\x01\x93\x92\x85\x01\x92a\x02\xE8V[\x98\x97PPPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x03&W`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x03?W`\0\x80\xFD[a\x03H\x82a\x028V[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x03aW`\0\x80\xFD[a\x03H\x82a\x01\xDBV[`\0\x80`@\x83\x85\x03\x12\x15a\x03}W`\0\x80\xFD[a\x03\x86\x83a\x01\xDBV[\x91Pa\x03\x94` \x84\x01a\x028V[\x90P\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 F\xB9\xDF\xA2\xD4\xE8\xED\xB0\xA1\x14\xDA\x8F\xB6&\x7FG@0\xF3\xACf\xD6\x1A\xFB\x82t\x119\x9D'\xF64dsolcC\0\x08\x0C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d21af061161008c578063a22f141e11610066578063a22f141e14610190578063a3b2aa961461010c578063acd414a8146101a2578063c61ff600146101cd57600080fd5b80637d21af061461011f578063864b8a6914610174578063960bfe041461018257600080fd5b80630690526a146100d45780632dae03e1146100fd578063309044571461010c57806342cde4e81461011f578063643599f2146101265780637a00098914610150575b600080fd5b6100ea6100e23660046101f8565b600092915050565b6040519081526020015b60405180910390f35b604051600081526020016100f4565b61011d61011a36600461024f565b50565b005b60006100ea565b6100ea610134366004610314565b67ffffffffffffffff1660009081526020819052604090205490565b61016461015e36600461032d565b50600090565b60405190151581526020016100f4565b6100ea61015e36600461034f565b61011d61011a366004610314565b61011d61019e3660046101f8565b5050565b61011d6101b03660046101f8565b67ffffffffffffffff909116600090815260208190526040902055565b6101646100e236600461036a565b803567ffffffffffffffff811681146101f357600080fd5b919050565b6000806040838503121561020b57600080fd5b610214836101db565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146101f357600080fd5b6000602080838503121561026257600080fd5b823567ffffffffffffffff8082111561027a57600080fd5b818501915085601f83011261028e57600080fd5b8135818111156102a0576102a0610222565b8060051b604051601f19603f830116810181811085821117156102c5576102c5610222565b6040529182528482019250838101850191888311156102e357600080fd5b938501935b82851015610308576102f985610238565b845293850193928501926102e8565b98975050505050505050565b60006020828403121561032657600080fd5b5035919050565b60006020828403121561033f57600080fd5b61034882610238565b9392505050565b60006020828403121561036157600080fd5b610348826101db565b6000806040838503121561037d57600080fd5b610386836101db565b915061039460208401610238565b9050925092905056fea264697066735822122046b9dfa2d4e8edb0a114da8fb6267f474030f3ac66d61afb827411399d27f63464736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xCFW`\x005`\xE0\x1C\x80c}!\xAF\x06\x11a\0\x8CW\x80c\xA2/\x14\x1E\x11a\0fW\x80c\xA2/\x14\x1E\x14a\x01\x90W\x80c\xA3\xB2\xAA\x96\x14a\x01\x0CW\x80c\xAC\xD4\x14\xA8\x14a\x01\xA2W\x80c\xC6\x1F\xF6\0\x14a\x01\xCDW`\0\x80\xFD[\x80c}!\xAF\x06\x14a\x01\x1FW\x80c\x86K\x8Ai\x14a\x01tW\x80c\x96\x0B\xFE\x04\x14a\x01\x82W`\0\x80\xFD[\x80c\x06\x90Rj\x14a\0\xD4W\x80c-\xAE\x03\xE1\x14a\0\xFDW\x80c0\x90DW\x14a\x01\x0CW\x80cB\xCD\xE4\xE8\x14a\x01\x1FW\x80cd5\x99\xF2\x14a\x01&W\x80cz\0\t\x89\x14a\x01PW[`\0\x80\xFD[a\0\xEAa\0\xE26`\x04a\x01\xF8V[`\0\x92\x91PPV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`@Q`\0\x81R` \x01a\0\xF4V[a\x01\x1Da\x01\x1A6`\x04a\x02OV[PV[\0[`\0a\0\xEAV[a\0\xEAa\x0146`\x04a\x03\x14V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x90V[a\x01da\x01^6`\x04a\x03-V[P`\0\x90V[`@Q\x90\x15\x15\x81R` \x01a\0\xF4V[a\0\xEAa\x01^6`\x04a\x03OV[a\x01\x1Da\x01\x1A6`\x04a\x03\x14V[a\x01\x1Da\x01\x9E6`\x04a\x01\xF8V[PPV[a\x01\x1Da\x01\xB06`\x04a\x01\xF8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\0\x90\x81R` \x81\x90R`@\x90 UV[a\x01da\0\xE26`\x04a\x03jV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\xF3W`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x02\x0BW`\0\x80\xFD[a\x02\x14\x83a\x01\xDBV[\x94` \x93\x90\x93\x015\x93PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\xF3W`\0\x80\xFD[`\0` \x80\x83\x85\x03\x12\x15a\x02bW`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x02zW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x02\x8EW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x02\xA0Wa\x02\xA0a\x02\"V[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x85\x82\x11\x17\x15a\x02\xC5Wa\x02\xC5a\x02\"V[`@R\x91\x82R\x84\x82\x01\x92P\x83\x81\x01\x85\x01\x91\x88\x83\x11\x15a\x02\xE3W`\0\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\x03\x08Wa\x02\xF9\x85a\x028V[\x84R\x93\x85\x01\x93\x92\x85\x01\x92a\x02\xE8V[\x98\x97PPPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x03&W`\0\x80\xFD[P5\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x03?W`\0\x80\xFD[a\x03H\x82a\x028V[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x03aW`\0\x80\xFD[a\x03H\x82a\x01\xDBV[`\0\x80`@\x83\x85\x03\x12\x15a\x03}W`\0\x80\xFD[a\x03\x86\x83a\x01\xDBV[\x91Pa\x03\x94` \x84\x01a\x028V[\x90P\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 F\xB9\xDF\xA2\xD4\xE8\xED\xB0\xA1\x14\xDA\x8F\xB6&\x7FG@0\xF3\xACf\xD6\x1A\xFB\x82t\x119\x9D'\xF64dsolcC\0\x08\x0C\x003",
    );
    /**Function with signature `addOracleSigners(address[])` and selector `0x30904457`.
    ```solidity
    function addOracleSigners(address[] memory _oracleSigners) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addOracleSignersCall {
        pub _oracleSigners: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    ///Container type for the return parameters of the [`addOracleSigners(address[])`](addOracleSignersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addOracleSignersReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addOracleSignersCall> for UnderlyingRustTuple<'_> {
                fn from(value: addOracleSignersCall) -> Self {
                    (value._oracleSigners,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addOracleSignersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _oracleSigners: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addOracleSignersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addOracleSignersReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addOracleSignersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addOracleSignersCall {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addOracleSignersReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addOracleSigners(address[])";
            const SELECTOR: [u8; 4] = [48u8, 144u8, 68u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Address,
                > as alloy_sol_types::SolType>::tokenize(
                    &self._oracleSigners,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `beaconStateRootAtBlockNumber(uint64)` and selector `0x864b8a69`.
    ```solidity
    function beaconStateRootAtBlockNumber(uint64 blockNumber) external view returns (bytes32);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct beaconStateRootAtBlockNumberCall {
        pub blockNumber: u64,
    }
    ///Container type for the return parameters of the [`beaconStateRootAtBlockNumber(uint64)`](beaconStateRootAtBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct beaconStateRootAtBlockNumberReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beaconStateRootAtBlockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: beaconStateRootAtBlockNumberCall) -> Self {
                    (value.blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beaconStateRootAtBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beaconStateRootAtBlockNumberReturn> for UnderlyingRustTuple<'_> {
                fn from(value: beaconStateRootAtBlockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beaconStateRootAtBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for beaconStateRootAtBlockNumberCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = beaconStateRootAtBlockNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "beaconStateRootAtBlockNumber(uint64)";
            const SELECTOR: [u8; 4] = [134u8, 75u8, 138u8, 105u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<64> as alloy_sol_types::SolType>::tokenize(
                        &self.blockNumber,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `hasVoted(uint64,address)` and selector `0xc61ff600`.
    ```solidity
    function hasVoted(uint64 blockNumber, address oracleSigner) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasVotedCall {
        pub blockNumber: u64,
        pub oracleSigner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasVoted(uint64,address)`](hasVotedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasVotedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, alloy::sol_types::private::Address);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasVotedCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasVotedCall) -> Self {
                    (value.blockNumber, value.oracleSigner)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasVotedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        oracleSigner: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasVotedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasVotedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasVotedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasVotedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasVotedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasVoted(uint64,address)";
            const SELECTOR: [u8; 4] = [198u8, 31u8, 246u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<64> as alloy_sol_types::SolType>::tokenize(
                        &self.blockNumber,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.oracleSigner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isOracleSigner(address)` and selector `0x7a000989`.
    ```solidity
    function isOracleSigner(address _oracleSigner) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isOracleSignerCall {
        pub _oracleSigner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isOracleSigner(address)`](isOracleSignerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isOracleSignerReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isOracleSignerCall> for UnderlyingRustTuple<'_> {
                fn from(value: isOracleSignerCall) -> Self {
                    (value._oracleSigner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isOracleSignerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _oracleSigner: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isOracleSignerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isOracleSignerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isOracleSignerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isOracleSignerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isOracleSignerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isOracleSigner(address)";
            const SELECTOR: [u8; 4] = [122u8, 0u8, 9u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._oracleSigner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `latestConfirmedOracleBlockNumber()` and selector `0x2dae03e1`.
    ```solidity
    function latestConfirmedOracleBlockNumber() external view returns (uint64);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct latestConfirmedOracleBlockNumberCall {}
    ///Container type for the return parameters of the [`latestConfirmedOracleBlockNumber()`](latestConfirmedOracleBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct latestConfirmedOracleBlockNumberReturn {
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<latestConfirmedOracleBlockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: latestConfirmedOracleBlockNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for latestConfirmedOracleBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<latestConfirmedOracleBlockNumberReturn> for UnderlyingRustTuple<'_> {
                fn from(value: latestConfirmedOracleBlockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for latestConfirmedOracleBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for latestConfirmedOracleBlockNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = latestConfirmedOracleBlockNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "latestConfirmedOracleBlockNumber()";
            const SELECTOR: [u8; 4] = [45u8, 174u8, 3u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `removeOracleSigners(address[])` and selector `0xa3b2aa96`.
    ```solidity
    function removeOracleSigners(address[] memory _oracleSigners) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeOracleSignersCall {
        pub _oracleSigners: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    ///Container type for the return parameters of the [`removeOracleSigners(address[])`](removeOracleSignersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeOracleSignersReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeOracleSignersCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeOracleSignersCall) -> Self {
                    (value._oracleSigners,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeOracleSignersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _oracleSigners: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeOracleSignersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeOracleSignersReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeOracleSignersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeOracleSignersCall {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeOracleSignersReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeOracleSigners(address[])";
            const SELECTOR: [u8; 4] = [163u8, 178u8, 170u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Address,
                > as alloy_sol_types::SolType>::tokenize(
                    &self._oracleSigners,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setBlockRoot(uint64,bytes32)` and selector `0xacd414a8`.
    ```solidity
    function setBlockRoot(uint64 timestamp, bytes32 blockRoot) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockRootCall {
        pub timestamp: u64,
        pub blockRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setBlockRoot(uint64,bytes32)`](setBlockRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockRootReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, alloy::sol_types::private::FixedBytes<32>);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockRootCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBlockRootCall) -> Self {
                    (value.timestamp, value.blockRoot)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBlockRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        timestamp: tuple.0,
                        blockRoot: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockRootReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setBlockRootReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBlockRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBlockRootCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBlockRootReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBlockRoot(uint64,bytes32)";
            const SELECTOR: [u8; 4] = [172u8, 212u8, 20u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockRoot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setThreshold(uint256)` and selector `0x960bfe04`.
    ```solidity
    function setThreshold(uint256 _threshold) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setThresholdCall {
        pub _threshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setThreshold(uint256)`](setThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setThresholdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setThresholdCall> for UnderlyingRustTuple<'_> {
                fn from(value: setThresholdCall) -> Self {
                    (value._threshold,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _threshold: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setThresholdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setThresholdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setThresholdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setThresholdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setThreshold(uint256)";
            const SELECTOR: [u8; 4] = [150u8, 11u8, 254u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._threshold,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `stateRootVotes(uint64,bytes32)` and selector `0x0690526a`.
    ```solidity
    function stateRootVotes(uint64 blockNumber, bytes32 stateRoot) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stateRootVotesCall {
        pub blockNumber: u64,
        pub stateRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`stateRootVotes(uint64,bytes32)`](stateRootVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stateRootVotesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, alloy::sol_types::private::FixedBytes<32>);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stateRootVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: stateRootVotesCall) -> Self {
                    (value.blockNumber, value.stateRoot)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stateRootVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        stateRoot: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stateRootVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: stateRootVotesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stateRootVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stateRootVotesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = stateRootVotesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stateRootVotes(uint64,bytes32)";
            const SELECTOR: [u8; 4] = [6u8, 144u8, 82u8, 106u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.stateRoot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `threshold()` and selector `0x42cde4e8`.
    ```solidity
    function threshold() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct thresholdCall {}
    ///Container type for the return parameters of the [`threshold()`](thresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct thresholdReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<thresholdCall> for UnderlyingRustTuple<'_> {
                fn from(value: thresholdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for thresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<thresholdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: thresholdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for thresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for thresholdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = thresholdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "threshold()";
            const SELECTOR: [u8; 4] = [66u8, 205u8, 228u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `timestampToBlockRoot(uint256)` and selector `0x643599f2`.
    ```solidity
    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timestampToBlockRootCall {
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`timestampToBlockRoot(uint256)`](timestampToBlockRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timestampToBlockRootReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timestampToBlockRootCall> for UnderlyingRustTuple<'_> {
                fn from(value: timestampToBlockRootCall) -> Self {
                    (value.timestamp,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timestampToBlockRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { timestamp: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timestampToBlockRootReturn> for UnderlyingRustTuple<'_> {
                fn from(value: timestampToBlockRootReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timestampToBlockRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for timestampToBlockRootCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = timestampToBlockRootReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "timestampToBlockRoot(uint256)";
            const SELECTOR: [u8; 4] = [100u8, 53u8, 153u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.timestamp,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `totalOracleSigners()` and selector `0x7d21af06`.
    ```solidity
    function totalOracleSigners() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalOracleSignersCall {}
    ///Container type for the return parameters of the [`totalOracleSigners()`](totalOracleSignersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalOracleSignersReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalOracleSignersCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalOracleSignersCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalOracleSignersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalOracleSignersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalOracleSignersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalOracleSignersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalOracleSignersCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalOracleSignersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalOracleSigners()";
            const SELECTOR: [u8; 4] = [125u8, 33u8, 175u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `voteForBeaconChainStateRoot(uint64,bytes32)` and selector `0xa22f141e`.
    ```solidity
    function voteForBeaconChainStateRoot(uint64 blockNumber, bytes32 stateRoot) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteForBeaconChainStateRootCall {
        pub blockNumber: u64,
        pub stateRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`voteForBeaconChainStateRoot(uint64,bytes32)`](voteForBeaconChainStateRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteForBeaconChainStateRootReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, alloy::sol_types::private::FixedBytes<32>);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteForBeaconChainStateRootCall> for UnderlyingRustTuple<'_> {
                fn from(value: voteForBeaconChainStateRootCall) -> Self {
                    (value.blockNumber, value.stateRoot)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteForBeaconChainStateRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        stateRoot: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteForBeaconChainStateRootReturn> for UnderlyingRustTuple<'_> {
                fn from(value: voteForBeaconChainStateRootReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteForBeaconChainStateRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for voteForBeaconChainStateRootCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = voteForBeaconChainStateRootReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "voteForBeaconChainStateRoot(uint64,bytes32)";
            const SELECTOR: [u8; 4] = [162u8, 47u8, 20u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.stateRoot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`BeaconChainOracleMock`](self) function calls.
    pub enum BeaconChainOracleMockCalls {
        addOracleSigners(addOracleSignersCall),
        beaconStateRootAtBlockNumber(beaconStateRootAtBlockNumberCall),
        hasVoted(hasVotedCall),
        isOracleSigner(isOracleSignerCall),
        latestConfirmedOracleBlockNumber(latestConfirmedOracleBlockNumberCall),
        removeOracleSigners(removeOracleSignersCall),
        setBlockRoot(setBlockRootCall),
        setThreshold(setThresholdCall),
        stateRootVotes(stateRootVotesCall),
        threshold(thresholdCall),
        timestampToBlockRoot(timestampToBlockRootCall),
        totalOracleSigners(totalOracleSignersCall),
        voteForBeaconChainStateRoot(voteForBeaconChainStateRootCall),
    }
    #[automatically_derived]
    impl BeaconChainOracleMockCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 144u8, 82u8, 106u8],
            [45u8, 174u8, 3u8, 225u8],
            [48u8, 144u8, 68u8, 87u8],
            [66u8, 205u8, 228u8, 232u8],
            [100u8, 53u8, 153u8, 242u8],
            [122u8, 0u8, 9u8, 137u8],
            [125u8, 33u8, 175u8, 6u8],
            [134u8, 75u8, 138u8, 105u8],
            [150u8, 11u8, 254u8, 4u8],
            [162u8, 47u8, 20u8, 30u8],
            [163u8, 178u8, 170u8, 150u8],
            [172u8, 212u8, 20u8, 168u8],
            [198u8, 31u8, 246u8, 0u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BeaconChainOracleMockCalls {
        const NAME: &'static str = "BeaconChainOracleMockCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addOracleSigners(_) => {
                    <addOracleSignersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::beaconStateRootAtBlockNumber(_) => {
                    <beaconStateRootAtBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasVoted(_) => <hasVotedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isOracleSigner(_) => {
                    <isOracleSignerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::latestConfirmedOracleBlockNumber(_) => {
                    <latestConfirmedOracleBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeOracleSigners(_) => {
                    <removeOracleSignersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBlockRoot(_) => <setBlockRootCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setThreshold(_) => <setThresholdCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::stateRootVotes(_) => {
                    <stateRootVotesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::threshold(_) => <thresholdCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::timestampToBlockRoot(_) => {
                    <timestampToBlockRootCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::totalOracleSigners(_) => {
                    <totalOracleSignersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::voteForBeaconChainStateRoot(_) => {
                    <voteForBeaconChainStateRootCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<BeaconChainOracleMockCalls>] = &[
                {
                    fn stateRootVotes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <stateRootVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::stateRootVotes)
                    }
                    stateRootVotes
                },
                {
                    fn latestConfirmedOracleBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <latestConfirmedOracleBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                BeaconChainOracleMockCalls::latestConfirmedOracleBlockNumber,
                            )
                    }
                    latestConfirmedOracleBlockNumber
                },
                {
                    fn addOracleSigners(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <addOracleSignersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::addOracleSigners)
                    }
                    addOracleSigners
                },
                {
                    fn threshold(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <thresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BeaconChainOracleMockCalls::threshold)
                    }
                    threshold
                },
                {
                    fn timestampToBlockRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <timestampToBlockRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::timestampToBlockRoot)
                    }
                    timestampToBlockRoot
                },
                {
                    fn isOracleSigner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <isOracleSignerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::isOracleSigner)
                    }
                    isOracleSigner
                },
                {
                    fn totalOracleSigners(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <totalOracleSignersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::totalOracleSigners)
                    }
                    totalOracleSigners
                },
                {
                    fn beaconStateRootAtBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <beaconStateRootAtBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                BeaconChainOracleMockCalls::beaconStateRootAtBlockNumber,
                            )
                    }
                    beaconStateRootAtBlockNumber
                },
                {
                    fn setThreshold(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <setThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::setThreshold)
                    }
                    setThreshold
                },
                {
                    fn voteForBeaconChainStateRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <voteForBeaconChainStateRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconChainOracleMockCalls::voteForBeaconChainStateRoot)
                    }
                    voteForBeaconChainStateRoot
                },
                {
                    fn removeOracleSigners(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <removeOracleSignersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::removeOracleSigners)
                    }
                    removeOracleSigners
                },
                {
                    fn setBlockRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <setBlockRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BeaconChainOracleMockCalls::setBlockRoot)
                    }
                    setBlockRoot
                },
                {
                    fn hasVoted(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconChainOracleMockCalls> {
                        <hasVotedCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BeaconChainOracleMockCalls::hasVoted)
                    }
                    hasVoted
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addOracleSigners(inner) => {
                    <addOracleSignersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::beaconStateRootAtBlockNumber(inner) => {
                    <beaconStateRootAtBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasVoted(inner) => {
                    <hasVotedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isOracleSigner(inner) => {
                    <isOracleSignerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::latestConfirmedOracleBlockNumber(inner) => {
                    <latestConfirmedOracleBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeOracleSigners(inner) => {
                    <removeOracleSignersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBlockRoot(inner) => {
                    <setBlockRootCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setThreshold(inner) => {
                    <setThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::stateRootVotes(inner) => {
                    <stateRootVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::threshold(inner) => {
                    <thresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::timestampToBlockRoot(inner) => {
                    <timestampToBlockRootCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::totalOracleSigners(inner) => {
                    <totalOracleSignersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::voteForBeaconChainStateRoot(inner) => {
                    <voteForBeaconChainStateRootCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addOracleSigners(inner) => {
                    <addOracleSignersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::beaconStateRootAtBlockNumber(inner) => {
                    <beaconStateRootAtBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasVoted(inner) => {
                    <hasVotedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isOracleSigner(inner) => {
                    <isOracleSignerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::latestConfirmedOracleBlockNumber(inner) => {
                    <latestConfirmedOracleBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeOracleSigners(inner) => {
                    <removeOracleSignersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBlockRoot(inner) => {
                    <setBlockRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setThreshold(inner) => {
                    <setThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::stateRootVotes(inner) => {
                    <stateRootVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::threshold(inner) => {
                    <thresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::timestampToBlockRoot(inner) => {
                    <timestampToBlockRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::totalOracleSigners(inner) => {
                    <totalOracleSignersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::voteForBeaconChainStateRoot(inner) => {
                    <voteForBeaconChainStateRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BeaconChainOracleMock`](self) contract instance.

    See the [wrapper's documentation](`BeaconChainOracleMockInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BeaconChainOracleMockInstance<T, P, N> {
        BeaconChainOracleMockInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BeaconChainOracleMockInstance<T, P, N>>,
    > {
        BeaconChainOracleMockInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BeaconChainOracleMockInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`BeaconChainOracleMock`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`BeaconChainOracleMock`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BeaconChainOracleMockInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BeaconChainOracleMockInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BeaconChainOracleMockInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BeaconChainOracleMockInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`BeaconChainOracleMock`](self) contract instance.

        See the [wrapper's documentation](`BeaconChainOracleMockInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<BeaconChainOracleMockInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BeaconChainOracleMockInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BeaconChainOracleMockInstance<T, P, N> {
            BeaconChainOracleMockInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BeaconChainOracleMockInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addOracleSigners`] function.
        pub fn addOracleSigners(
            &self,
            _oracleSigners: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, addOracleSignersCall, N> {
            self.call_builder(&addOracleSignersCall { _oracleSigners })
        }
        ///Creates a new call builder for the [`beaconStateRootAtBlockNumber`] function.
        pub fn beaconStateRootAtBlockNumber(
            &self,
            blockNumber: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, beaconStateRootAtBlockNumberCall, N> {
            self.call_builder(&beaconStateRootAtBlockNumberCall { blockNumber })
        }
        ///Creates a new call builder for the [`hasVoted`] function.
        pub fn hasVoted(
            &self,
            blockNumber: u64,
            oracleSigner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasVotedCall, N> {
            self.call_builder(&hasVotedCall {
                blockNumber,
                oracleSigner,
            })
        }
        ///Creates a new call builder for the [`isOracleSigner`] function.
        pub fn isOracleSigner(
            &self,
            _oracleSigner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isOracleSignerCall, N> {
            self.call_builder(&isOracleSignerCall { _oracleSigner })
        }
        ///Creates a new call builder for the [`latestConfirmedOracleBlockNumber`] function.
        pub fn latestConfirmedOracleBlockNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, latestConfirmedOracleBlockNumberCall, N>
        {
            self.call_builder(&latestConfirmedOracleBlockNumberCall {})
        }
        ///Creates a new call builder for the [`removeOracleSigners`] function.
        pub fn removeOracleSigners(
            &self,
            _oracleSigners: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeOracleSignersCall, N> {
            self.call_builder(&removeOracleSignersCall { _oracleSigners })
        }
        ///Creates a new call builder for the [`setBlockRoot`] function.
        pub fn setBlockRoot(
            &self,
            timestamp: u64,
            blockRoot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBlockRootCall, N> {
            self.call_builder(&setBlockRootCall {
                timestamp,
                blockRoot,
            })
        }
        ///Creates a new call builder for the [`setThreshold`] function.
        pub fn setThreshold(
            &self,
            _threshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setThresholdCall, N> {
            self.call_builder(&setThresholdCall { _threshold })
        }
        ///Creates a new call builder for the [`stateRootVotes`] function.
        pub fn stateRootVotes(
            &self,
            blockNumber: u64,
            stateRoot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, stateRootVotesCall, N> {
            self.call_builder(&stateRootVotesCall {
                blockNumber,
                stateRoot,
            })
        }
        ///Creates a new call builder for the [`threshold`] function.
        pub fn threshold(&self) -> alloy_contract::SolCallBuilder<T, &P, thresholdCall, N> {
            self.call_builder(&thresholdCall {})
        }
        ///Creates a new call builder for the [`timestampToBlockRoot`] function.
        pub fn timestampToBlockRoot(
            &self,
            timestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, timestampToBlockRootCall, N> {
            self.call_builder(&timestampToBlockRootCall { timestamp })
        }
        ///Creates a new call builder for the [`totalOracleSigners`] function.
        pub fn totalOracleSigners(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalOracleSignersCall, N> {
            self.call_builder(&totalOracleSignersCall {})
        }
        ///Creates a new call builder for the [`voteForBeaconChainStateRoot`] function.
        pub fn voteForBeaconChainStateRoot(
            &self,
            blockNumber: u64,
            stateRoot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, voteForBeaconChainStateRootCall, N> {
            self.call_builder(&voteForBeaconChainStateRootCall {
                blockNumber,
                stateRoot,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BeaconChainOracleMockInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
