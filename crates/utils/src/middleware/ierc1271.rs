/**

Generated by the following Solidity interface...
```solidity
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
interface SignatureCheckerLib {
    error InvalidSignature();
========
interface IERC1271 {
    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
}
```

...which was generated by the following JSON ABI:
```json
[
  {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    "type": "error",
    "name": "InvalidSignature",
    "inputs": []
========
    "type": "function",
    "name": "isValidSignature",
    "inputs": [
      {
        "name": "hash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "magicValue",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "view"
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
pub mod SignatureCheckerLib {
========
pub mod IERC1271 {
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207e73e2ba8b12d7535650024e6496f35dc38ca54381ba942cb95488feb3d6135864736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x17W`9\x90\x81`\x1C\x8290\x81PP\xF3[_\x80\xFD\xFE_\x80\xFD\xFE\xA2dipfsX\"\x12 ~s\xE2\xBA\x8B\x12\xD7SVP\x02Nd\x96\xF3]\xC3\x8C\xA5C\x81\xBA\x94,\xB9T\x88\xFE\xB3\xD6\x13XdsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x5f80fdfea26469706673582212207e73e2ba8b12d7535650024e6496f35dc38ca54381ba942cb95488feb3d6135864736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"_\x80\xFD\xFE\xA2dipfsX\"\x12 ~s\xE2\xBA\x8B\x12\xD7SVP\x02Nd\x96\xF3]\xC3\x8C\xA5C\x81\xBA\x94,\xB9T\x88\xFE\xB3\xD6\x13XdsolcC\0\x08\x1B\x003",
    );
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    /**Custom error with signature `InvalidSignature()` and selector `0x8baa579f`.
    ```solidity
    error InvalidSignature();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidSignature {}
========
    /**Function with signature `isValidSignature(bytes32,bytes)` and selector `0x1626ba7e`.
    ```solidity
    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isValidSignatureCall {
        pub hash: alloy::sol_types::private::FixedBytes<32>,
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isValidSignature(bytes32,bytes)`](isValidSignatureCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isValidSignatureReturn {
        pub magicValue: alloy::sol_types::private::FixedBytes<4>,
    }
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidSignature()";
            const SELECTOR: [u8; 4] = [139u8, 170u8, 87u8, 159u8];
========
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isValidSignatureCall> for UnderlyingRustTuple<'_> {
                fn from(value: isValidSignatureCall) -> Self {
                    (value.hash, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isValidSignatureCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        hash: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isValidSignatureReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isValidSignatureReturn) -> Self {
                    (value.magicValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isValidSignatureReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        magicValue: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isValidSignatureCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isValidSignatureReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isValidSignature(bytes32,bytes)";
            const SELECTOR: [u8; 4] = [22u8, 38u8, 186u8, 126u8];
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
                ()
            }
        }
    };
    ///Container for all the [`SignatureCheckerLib`](self) custom errors.
    pub enum SignatureCheckerLibErrors {
        InvalidSignature(InvalidSignature),
    }
    #[automatically_derived]
    impl SignatureCheckerLibErrors {
========
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.hash),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`IERC1271`](self) function calls.
    pub enum IERC1271Calls {
        isValidSignature(isValidSignatureCall),
    }
    #[automatically_derived]
    impl IERC1271Calls {
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[139u8, 170u8, 87u8, 159u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SignatureCheckerLibErrors {
        const NAME: &'static str = "SignatureCheckerLibErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
========
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[22u8, 38u8, 186u8, 126u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for IERC1271Calls {
        const NAME: &'static str = "IERC1271Calls";
        const MIN_DATA_LENGTH: usize = 96usize;
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
                Self::InvalidSignature(_) => {
                    <InvalidSignature as alloy_sol_types::SolError>::SELECTOR
========
                Self::isValidSignature(_) => {
                    <isValidSignatureCall as alloy_sol_types::SolCall>::SELECTOR
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<SignatureCheckerLibErrors>] = &[{
                fn InvalidSignature(
                    data: &[u8],
                    validate: bool,
                ) -> alloy_sol_types::Result<SignatureCheckerLibErrors> {
                    <InvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                        .map(SignatureCheckerLibErrors::InvalidSignature)
                }
                InvalidSignature
            }];
========
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<IERC1271Calls>] =
                &[{
                    fn isValidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<IERC1271Calls> {
                        <isValidSignatureCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(IERC1271Calls::isValidSignature)
                    }
                    isValidSignature
                }];
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
                Self::InvalidSignature(inner) => {
                    <InvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(inner)
========
                Self::isValidSignature(inner) => {
                    <isValidSignatureCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
                Self::InvalidSignature(inner) => {
                    <InvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
========
                Self::isValidSignature(inner) => {
                    <isValidSignatureCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    /**Creates a new wrapper around an on-chain [`SignatureCheckerLib`](self) contract instance.

    See the [wrapper's documentation](`SignatureCheckerLibInstance`) for more details.*/
========
    /**Creates a new wrapper around an on-chain [`IERC1271`](self) contract instance.

    See the [wrapper's documentation](`IERC1271Instance`) for more details.*/
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    ) -> SignatureCheckerLibInstance<T, P, N> {
        SignatureCheckerLibInstance::<T, P, N>::new(address, provider)
========
    ) -> IERC1271Instance<T, P, N> {
        IERC1271Instance::<T, P, N>::new(address, provider)
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<SignatureCheckerLibInstance<T, P, N>>>
    {
        SignatureCheckerLibInstance::<T, P, N>::deploy(provider)
========
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<IERC1271Instance<T, P, N>>>
    {
        IERC1271Instance::<T, P, N>::deploy(provider)
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        SignatureCheckerLibInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SignatureCheckerLib`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`SignatureCheckerLib`](self) contract located at a given `address`, using a given
========
        IERC1271Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`IERC1271`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`IERC1271`](self) contract located at a given `address`, using a given
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    pub struct SignatureCheckerLibInstance<T, P, N = alloy_contract::private::Ethereum> {
========
    pub struct IERC1271Instance<T, P, N = alloy_contract::private::Ethereum> {
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    impl<T, P, N> ::core::fmt::Debug for SignatureCheckerLibInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SignatureCheckerLibInstance")
========
    impl<T, P, N> ::core::fmt::Debug for IERC1271Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("IERC1271Instance")
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        > SignatureCheckerLibInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`SignatureCheckerLib`](self) contract instance.

        See the [wrapper's documentation](`SignatureCheckerLibInstance`) for more details.*/
========
        > IERC1271Instance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`IERC1271`](self) contract instance.

        See the [wrapper's documentation](`IERC1271Instance`) for more details.*/
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SignatureCheckerLibInstance<T, P, N>> {
========
        pub async fn deploy(provider: P) -> alloy_contract::Result<IERC1271Instance<T, P, N>> {
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
    impl<T, P: ::core::clone::Clone, N> SignatureCheckerLibInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SignatureCheckerLibInstance<T, P, N> {
            SignatureCheckerLibInstance {
========
    impl<T, P: ::core::clone::Clone, N> IERC1271Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> IERC1271Instance<T, P, N> {
            IERC1271Instance {
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        > SignatureCheckerLibInstance<T, P, N>
========
        > IERC1271Instance<T, P, N>
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
========
        ///Creates a new call builder for the [`isValidSignature`] function.
        pub fn isValidSignature(
            &self,
            hash: alloy::sol_types::private::FixedBytes<32>,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isValidSignatureCall, N> {
            self.call_builder(&isValidSignatureCall { hash, signature })
        }
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
<<<<<<<< HEAD:crates/utils/src/signaturecheckerlib.rs
        > SignatureCheckerLibInstance<T, P, N>
========
        > IERC1271Instance<T, P, N>
>>>>>>>> dev:crates/utils/src/middleware/ierc1271.rs
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
