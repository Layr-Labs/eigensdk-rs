/**

Generated by the following Solidity interface...
```solidity
interface BitmapUtilsWrapper {
    function bitmapToBytesArray(uint256 bitmap) external pure returns (bytes memory bytesArray);
    function countNumOnes(uint256 n) external pure returns (uint16);
    function isArrayStrictlyAscendingOrdered(bytes memory bytesArray) external pure returns (bool);
    function isEmpty(uint256 bitmap) external pure returns (bool);
    function isSet(uint256 bitmap, uint8 numberToCheckForInclusion) external pure returns (bool);
    function isSubsetOf(uint256 a, uint256 b) external pure returns (bool);
    function minus(uint256 a, uint256 b) external pure returns (uint256);
    function noBitsInCommon(uint256 a, uint256 b) external pure returns (bool);
    function orderedBytesArrayToBitmap(bytes memory orderedBytesArray) external pure returns (uint256);
    function plus(uint256 a, uint256 b) external pure returns (uint256);
    function setBit(uint256 bitmap, uint8 bit) external pure returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "bitmapToBytesArray",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "bytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "countNumOnes",
    "inputs": [
      {
        "name": "n",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isArrayStrictlyAscendingOrdered",
    "inputs": [
      {
        "name": "bytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isEmpty",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isSet",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "numberToCheckForInclusion",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isSubsetOf",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "minus",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "noBitsInCommon",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "orderedBytesArrayToBitmap",
    "inputs": [
      {
        "name": "orderedBytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "plus",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "setBit",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "bit",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod BitmapUtilsWrapper {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506107d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636c73bd87116100715780636c73bd871461013057806376370f1f14610143578063a8e3eabb14610169578063dd5471851461017c578063f4f3bdc11461019c578063f90cfeef146101af57600080fd5b80631ff4adba146100ae57806320e88403146100d65780634ee29090146100f757806362e2ef331461010a57806366098d4f1461011d575b600080fd5b6100c16100bc3660046105d0565b6101c2565b60405190151581526020015b60405180910390f35b6100e96100e4366004610606565b6101da565b6040519081526020016100cd565b6100e96101053660046105d0565b61021b565b6100c1610118366004610678565b61022b565b6100e961012b366004610678565b610236565b6100c161013e366004610606565b610240565b61015661015136600461069a565b61024c565b60405161ffff90911681526020016100cd565b6100c1610177366004610678565b610257565b61018f61018a36600461069a565b610263565b6040516100cd91906106b3565b6100e96101aa366004610678565b61026e565b6100c16101bd36600461069a565b610279565b6000600160ff831684901c8116145b90505b92915050565b60006101d183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061028292505050565b6000600160ff83161b83176101d1565b6000818316156101d1565b60008183176101d1565b60006101d18383610414565b60006101d4826104d8565b600081831683146101d1565b60606101d482610503565b6000811983166101d1565b600081156101d4565b6000610100825111156103105760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a4015b60405180910390fd5b815161031e57506000919050565b6000808360008151811061033457610334610708565b0160200151600160f89190911c81901b92505b845181101561040b5784818151811061036257610362610708565b0160200151600160f89190911c1b91508282116103f75760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a401610307565b9181179161040481610734565b9050610347565b50909392505050565b6000610100821115610428575060006101d4565b81610435575060016101d4565b60008383600081811061044a5761044a610708565b909101356001600160f81b0319169150600190505b838110156104cd5760f882901c85858381811061047e5761047e610708565b9050013560f81c60f81b60f81c60ff161161049e576000925050506101d4565b8484828181106104b0576104b0610708565b9050013560f81c60f81b9150806104c690610734565b905061045f565b506001949350505050565b6000805b82156101d4576104ed60018461074f565b90921691806104fb81610766565b9150506104dc565b6060600080610511846104d8565b61ffff1667ffffffffffffffff81111561052d5761052d610788565b6040519080825280601f01601f191660200182016040528015610557576020820181803683370190505b5090506000805b82518210801561056f575061010081105b156105c6576001811b9350858416156105b6578060f81b83838151811061059857610598610708565b60200101906001600160f81b031916908160001a9053508160010191505b6105bf81610734565b905061055e565b5090949350505050565b600080604083850312156105e357600080fd5b82359150602083013560ff811681146105fb57600080fd5b809150509250929050565b6000806020838503121561061957600080fd5b823567ffffffffffffffff8082111561063157600080fd5b818501915085601f83011261064557600080fd5b81358181111561065457600080fd5b86602082850101111561066657600080fd5b60209290920196919550909350505050565b6000806040838503121561068b57600080fd5b50508035926020909101359150565b6000602082840312156106ac57600080fd5b5035919050565b600060208083528351808285015260005b818110156106e0578581018301518582016040015282016106c4565b818111156106f2576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107485761074861071e565b5060010190565b6000828210156107615761076161071e565b500390565b600061ffff8083168181141561077e5761077e61071e565b6001019392505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a42977e548d0080e94bbae1e1c9d5355b5c5d16041675977464912ecb7fe12bd64736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x07\xD4\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xA9W`\x005`\xE0\x1C\x80cls\xBD\x87\x11a\0qW\x80cls\xBD\x87\x14a\x010W\x80cv7\x0F\x1F\x14a\x01CW\x80c\xA8\xE3\xEA\xBB\x14a\x01iW\x80c\xDDTq\x85\x14a\x01|W\x80c\xF4\xF3\xBD\xC1\x14a\x01\x9CW\x80c\xF9\x0C\xFE\xEF\x14a\x01\xAFW`\0\x80\xFD[\x80c\x1F\xF4\xAD\xBA\x14a\0\xAEW\x80c \xE8\x84\x03\x14a\0\xD6W\x80cN\xE2\x90\x90\x14a\0\xF7W\x80cb\xE2\xEF3\x14a\x01\nW\x80cf\t\x8DO\x14a\x01\x1DW[`\0\x80\xFD[a\0\xC1a\0\xBC6`\x04a\x05\xD0V[a\x01\xC2V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE9a\0\xE46`\x04a\x06\x06V[a\x01\xDAV[`@Q\x90\x81R` \x01a\0\xCDV[a\0\xE9a\x01\x056`\x04a\x05\xD0V[a\x02\x1BV[a\0\xC1a\x01\x186`\x04a\x06xV[a\x02+V[a\0\xE9a\x01+6`\x04a\x06xV[a\x026V[a\0\xC1a\x01>6`\x04a\x06\x06V[a\x02@V[a\x01Va\x01Q6`\x04a\x06\x9AV[a\x02LV[`@Qa\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xCDV[a\0\xC1a\x01w6`\x04a\x06xV[a\x02WV[a\x01\x8Fa\x01\x8A6`\x04a\x06\x9AV[a\x02cV[`@Qa\0\xCD\x91\x90a\x06\xB3V[a\0\xE9a\x01\xAA6`\x04a\x06xV[a\x02nV[a\0\xC1a\x01\xBD6`\x04a\x06\x9AV[a\x02yV[`\0`\x01`\xFF\x83\x16\x84\x90\x1C\x81\x16\x14[\x90P[\x92\x91PPV[`\0a\x01\xD1\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPa\x02\x82\x92PPPV[`\0`\x01`\xFF\x83\x16\x1B\x83\x17a\x01\xD1V[`\0\x81\x83\x16\x15a\x01\xD1V[`\0\x81\x83\x17a\x01\xD1V[`\0a\x01\xD1\x83\x83a\x04\x14V[`\0a\x01\xD4\x82a\x04\xD8V[`\0\x81\x83\x16\x83\x14a\x01\xD1V[``a\x01\xD4\x82a\x05\x03V[`\0\x81\x19\x83\x16a\x01\xD1V[`\0\x81\x15a\x01\xD4V[`\0a\x01\0\x82Q\x11\x15a\x03\x10W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`D`$\x82\x01\x81\x90R\x7FBitmapUtils.orderedBytesArrayToB\x90\x82\x01R\x7Fitmap: orderedBytesArray is too `d\x82\x01Rclong`\xE0\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[\x81Qa\x03\x1EWP`\0\x91\x90PV[`\0\x80\x83`\0\x81Q\x81\x10a\x034Wa\x034a\x07\x08V[\x01` \x01Q`\x01`\xF8\x91\x90\x91\x1C\x81\x90\x1B\x92P[\x84Q\x81\x10\x15a\x04\x0BW\x84\x81\x81Q\x81\x10a\x03bWa\x03ba\x07\x08V[\x01` \x01Q`\x01`\xF8\x91\x90\x91\x1C\x1B\x91P\x82\x82\x11a\x03\xF7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FBitmapUtils.orderedBytesArrayToB`D\x82\x01R\x7Fitmap: orderedBytesArray is not `d\x82\x01Rf\x1B\xDC\x99\x19\\\x99Y`\xCA\x1B`\x84\x82\x01R`\xA4\x01a\x03\x07V[\x91\x81\x17\x91a\x04\x04\x81a\x074V[\x90Pa\x03GV[P\x90\x93\x92PPPV[`\0a\x01\0\x82\x11\x15a\x04(WP`\0a\x01\xD4V[\x81a\x045WP`\x01a\x01\xD4V[`\0\x83\x83`\0\x81\x81\x10a\x04JWa\x04Ja\x07\x08V[\x90\x91\x015`\x01`\x01`\xF8\x1B\x03\x19\x16\x91P`\x01\x90P[\x83\x81\x10\x15a\x04\xCDW`\xF8\x82\x90\x1C\x85\x85\x83\x81\x81\x10a\x04~Wa\x04~a\x07\x08V[\x90P\x015`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16\x11a\x04\x9EW`\0\x92PPPa\x01\xD4V[\x84\x84\x82\x81\x81\x10a\x04\xB0Wa\x04\xB0a\x07\x08V[\x90P\x015`\xF8\x1C`\xF8\x1B\x91P\x80a\x04\xC6\x90a\x074V[\x90Pa\x04_V[P`\x01\x94\x93PPPPV[`\0\x80[\x82\x15a\x01\xD4Wa\x04\xED`\x01\x84a\x07OV[\x90\x92\x16\x91\x80a\x04\xFB\x81a\x07fV[\x91PPa\x04\xDCV[```\0\x80a\x05\x11\x84a\x04\xD8V[a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05-Wa\x05-a\x07\x88V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x05WW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0\x80[\x82Q\x82\x10\x80\x15a\x05oWPa\x01\0\x81\x10[\x15a\x05\xC6W`\x01\x81\x1B\x93P\x85\x84\x16\x15a\x05\xB6W\x80`\xF8\x1B\x83\x83\x81Q\x81\x10a\x05\x98Wa\x05\x98a\x07\x08V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x81`\x01\x01\x91P[a\x05\xBF\x81a\x074V[\x90Pa\x05^V[P\x90\x94\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x05\xE3W`\0\x80\xFD[\x825\x91P` \x83\x015`\xFF\x81\x16\x81\x14a\x05\xFBW`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x06\x19W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x061W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x06EW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x06TW`\0\x80\xFD[\x86` \x82\x85\x01\x01\x11\x15a\x06fW`\0\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x06\x8BW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x06\xACW`\0\x80\xFD[P5\x91\x90PV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x06\xE0W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x06\xC4V[\x81\x81\x11\x15a\x06\xF2W`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x07HWa\x07Ha\x07\x1EV[P`\x01\x01\x90V[`\0\x82\x82\x10\x15a\x07aWa\x07aa\x07\x1EV[P\x03\x90V[`\0a\xFF\xFF\x80\x83\x16\x81\x81\x14\x15a\x07~Wa\x07~a\x07\x1EV[`\x01\x01\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xA4)w\xE5H\xD0\x08\x0E\x94\xBB\xAE\x1E\x1C\x9DSU\xB5\xC5\xD1`AgYwFI\x12\xEC\xB7\xFE\x12\xBDdsolcC\0\x08\x0C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636c73bd87116100715780636c73bd871461013057806376370f1f14610143578063a8e3eabb14610169578063dd5471851461017c578063f4f3bdc11461019c578063f90cfeef146101af57600080fd5b80631ff4adba146100ae57806320e88403146100d65780634ee29090146100f757806362e2ef331461010a57806366098d4f1461011d575b600080fd5b6100c16100bc3660046105d0565b6101c2565b60405190151581526020015b60405180910390f35b6100e96100e4366004610606565b6101da565b6040519081526020016100cd565b6100e96101053660046105d0565b61021b565b6100c1610118366004610678565b61022b565b6100e961012b366004610678565b610236565b6100c161013e366004610606565b610240565b61015661015136600461069a565b61024c565b60405161ffff90911681526020016100cd565b6100c1610177366004610678565b610257565b61018f61018a36600461069a565b610263565b6040516100cd91906106b3565b6100e96101aa366004610678565b61026e565b6100c16101bd36600461069a565b610279565b6000600160ff831684901c8116145b90505b92915050565b60006101d183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061028292505050565b6000600160ff83161b83176101d1565b6000818316156101d1565b60008183176101d1565b60006101d18383610414565b60006101d4826104d8565b600081831683146101d1565b60606101d482610503565b6000811983166101d1565b600081156101d4565b6000610100825111156103105760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a4015b60405180910390fd5b815161031e57506000919050565b6000808360008151811061033457610334610708565b0160200151600160f89190911c81901b92505b845181101561040b5784818151811061036257610362610708565b0160200151600160f89190911c1b91508282116103f75760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a401610307565b9181179161040481610734565b9050610347565b50909392505050565b6000610100821115610428575060006101d4565b81610435575060016101d4565b60008383600081811061044a5761044a610708565b909101356001600160f81b0319169150600190505b838110156104cd5760f882901c85858381811061047e5761047e610708565b9050013560f81c60f81b60f81c60ff161161049e576000925050506101d4565b8484828181106104b0576104b0610708565b9050013560f81c60f81b9150806104c690610734565b905061045f565b506001949350505050565b6000805b82156101d4576104ed60018461074f565b90921691806104fb81610766565b9150506104dc565b6060600080610511846104d8565b61ffff1667ffffffffffffffff81111561052d5761052d610788565b6040519080825280601f01601f191660200182016040528015610557576020820181803683370190505b5090506000805b82518210801561056f575061010081105b156105c6576001811b9350858416156105b6578060f81b83838151811061059857610598610708565b60200101906001600160f81b031916908160001a9053508160010191505b6105bf81610734565b905061055e565b5090949350505050565b600080604083850312156105e357600080fd5b82359150602083013560ff811681146105fb57600080fd5b809150509250929050565b6000806020838503121561061957600080fd5b823567ffffffffffffffff8082111561063157600080fd5b818501915085601f83011261064557600080fd5b81358181111561065457600080fd5b86602082850101111561066657600080fd5b60209290920196919550909350505050565b6000806040838503121561068b57600080fd5b50508035926020909101359150565b6000602082840312156106ac57600080fd5b5035919050565b600060208083528351808285015260005b818110156106e0578581018301518582016040015282016106c4565b818111156106f2576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107485761074861071e565b5060010190565b6000828210156107615761076161071e565b500390565b600061ffff8083168181141561077e5761077e61071e565b6001019392505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a42977e548d0080e94bbae1e1c9d5355b5c5d16041675977464912ecb7fe12bd64736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xA9W`\x005`\xE0\x1C\x80cls\xBD\x87\x11a\0qW\x80cls\xBD\x87\x14a\x010W\x80cv7\x0F\x1F\x14a\x01CW\x80c\xA8\xE3\xEA\xBB\x14a\x01iW\x80c\xDDTq\x85\x14a\x01|W\x80c\xF4\xF3\xBD\xC1\x14a\x01\x9CW\x80c\xF9\x0C\xFE\xEF\x14a\x01\xAFW`\0\x80\xFD[\x80c\x1F\xF4\xAD\xBA\x14a\0\xAEW\x80c \xE8\x84\x03\x14a\0\xD6W\x80cN\xE2\x90\x90\x14a\0\xF7W\x80cb\xE2\xEF3\x14a\x01\nW\x80cf\t\x8DO\x14a\x01\x1DW[`\0\x80\xFD[a\0\xC1a\0\xBC6`\x04a\x05\xD0V[a\x01\xC2V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE9a\0\xE46`\x04a\x06\x06V[a\x01\xDAV[`@Q\x90\x81R` \x01a\0\xCDV[a\0\xE9a\x01\x056`\x04a\x05\xD0V[a\x02\x1BV[a\0\xC1a\x01\x186`\x04a\x06xV[a\x02+V[a\0\xE9a\x01+6`\x04a\x06xV[a\x026V[a\0\xC1a\x01>6`\x04a\x06\x06V[a\x02@V[a\x01Va\x01Q6`\x04a\x06\x9AV[a\x02LV[`@Qa\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xCDV[a\0\xC1a\x01w6`\x04a\x06xV[a\x02WV[a\x01\x8Fa\x01\x8A6`\x04a\x06\x9AV[a\x02cV[`@Qa\0\xCD\x91\x90a\x06\xB3V[a\0\xE9a\x01\xAA6`\x04a\x06xV[a\x02nV[a\0\xC1a\x01\xBD6`\x04a\x06\x9AV[a\x02yV[`\0`\x01`\xFF\x83\x16\x84\x90\x1C\x81\x16\x14[\x90P[\x92\x91PPV[`\0a\x01\xD1\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPa\x02\x82\x92PPPV[`\0`\x01`\xFF\x83\x16\x1B\x83\x17a\x01\xD1V[`\0\x81\x83\x16\x15a\x01\xD1V[`\0\x81\x83\x17a\x01\xD1V[`\0a\x01\xD1\x83\x83a\x04\x14V[`\0a\x01\xD4\x82a\x04\xD8V[`\0\x81\x83\x16\x83\x14a\x01\xD1V[``a\x01\xD4\x82a\x05\x03V[`\0\x81\x19\x83\x16a\x01\xD1V[`\0\x81\x15a\x01\xD4V[`\0a\x01\0\x82Q\x11\x15a\x03\x10W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`D`$\x82\x01\x81\x90R\x7FBitmapUtils.orderedBytesArrayToB\x90\x82\x01R\x7Fitmap: orderedBytesArray is too `d\x82\x01Rclong`\xE0\x1B`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[\x81Qa\x03\x1EWP`\0\x91\x90PV[`\0\x80\x83`\0\x81Q\x81\x10a\x034Wa\x034a\x07\x08V[\x01` \x01Q`\x01`\xF8\x91\x90\x91\x1C\x81\x90\x1B\x92P[\x84Q\x81\x10\x15a\x04\x0BW\x84\x81\x81Q\x81\x10a\x03bWa\x03ba\x07\x08V[\x01` \x01Q`\x01`\xF8\x91\x90\x91\x1C\x1B\x91P\x82\x82\x11a\x03\xF7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FBitmapUtils.orderedBytesArrayToB`D\x82\x01R\x7Fitmap: orderedBytesArray is not `d\x82\x01Rf\x1B\xDC\x99\x19\\\x99Y`\xCA\x1B`\x84\x82\x01R`\xA4\x01a\x03\x07V[\x91\x81\x17\x91a\x04\x04\x81a\x074V[\x90Pa\x03GV[P\x90\x93\x92PPPV[`\0a\x01\0\x82\x11\x15a\x04(WP`\0a\x01\xD4V[\x81a\x045WP`\x01a\x01\xD4V[`\0\x83\x83`\0\x81\x81\x10a\x04JWa\x04Ja\x07\x08V[\x90\x91\x015`\x01`\x01`\xF8\x1B\x03\x19\x16\x91P`\x01\x90P[\x83\x81\x10\x15a\x04\xCDW`\xF8\x82\x90\x1C\x85\x85\x83\x81\x81\x10a\x04~Wa\x04~a\x07\x08V[\x90P\x015`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16\x11a\x04\x9EW`\0\x92PPPa\x01\xD4V[\x84\x84\x82\x81\x81\x10a\x04\xB0Wa\x04\xB0a\x07\x08V[\x90P\x015`\xF8\x1C`\xF8\x1B\x91P\x80a\x04\xC6\x90a\x074V[\x90Pa\x04_V[P`\x01\x94\x93PPPPV[`\0\x80[\x82\x15a\x01\xD4Wa\x04\xED`\x01\x84a\x07OV[\x90\x92\x16\x91\x80a\x04\xFB\x81a\x07fV[\x91PPa\x04\xDCV[```\0\x80a\x05\x11\x84a\x04\xD8V[a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05-Wa\x05-a\x07\x88V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x05WW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0\x80[\x82Q\x82\x10\x80\x15a\x05oWPa\x01\0\x81\x10[\x15a\x05\xC6W`\x01\x81\x1B\x93P\x85\x84\x16\x15a\x05\xB6W\x80`\xF8\x1B\x83\x83\x81Q\x81\x10a\x05\x98Wa\x05\x98a\x07\x08V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x81`\x01\x01\x91P[a\x05\xBF\x81a\x074V[\x90Pa\x05^V[P\x90\x94\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x05\xE3W`\0\x80\xFD[\x825\x91P` \x83\x015`\xFF\x81\x16\x81\x14a\x05\xFBW`\0\x80\xFD[\x80\x91PP\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x06\x19W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x061W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x06EW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x06TW`\0\x80\xFD[\x86` \x82\x85\x01\x01\x11\x15a\x06fW`\0\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x06\x8BW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x06\xACW`\0\x80\xFD[P5\x91\x90PV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x06\xE0W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x06\xC4V[\x81\x81\x11\x15a\x06\xF2W`\0`@\x83\x87\x01\x01R[P`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0`\0\x19\x82\x14\x15a\x07HWa\x07Ha\x07\x1EV[P`\x01\x01\x90V[`\0\x82\x82\x10\x15a\x07aWa\x07aa\x07\x1EV[P\x03\x90V[`\0a\xFF\xFF\x80\x83\x16\x81\x81\x14\x15a\x07~Wa\x07~a\x07\x1EV[`\x01\x01\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xA4)w\xE5H\xD0\x08\x0E\x94\xBB\xAE\x1E\x1C\x9DSU\xB5\xC5\xD1`AgYwFI\x12\xEC\xB7\xFE\x12\xBDdsolcC\0\x08\x0C\x003",
    );
    /**Function with signature `bitmapToBytesArray(uint256)` and selector `0xdd547185`.
    ```solidity
    function bitmapToBytesArray(uint256 bitmap) external pure returns (bytes memory bytesArray);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bitmapToBytesArrayCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`bitmapToBytesArray(uint256)`](bitmapToBytesArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bitmapToBytesArrayReturn {
        pub bytesArray: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bitmapToBytesArrayCall> for UnderlyingRustTuple<'_> {
                fn from(value: bitmapToBytesArrayCall) -> Self {
                    (value.bitmap,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bitmapToBytesArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bitmap: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bitmapToBytesArrayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bitmapToBytesArrayReturn) -> Self {
                    (value.bytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bitmapToBytesArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bytesArray: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bitmapToBytesArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = bitmapToBytesArrayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bitmapToBytesArray(uint256)";
            const SELECTOR: [u8; 4] = [221u8, 84u8, 113u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.bitmap,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `countNumOnes(uint256)` and selector `0x76370f1f`.
    ```solidity
    function countNumOnes(uint256 n) external pure returns (uint16);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct countNumOnesCall {
        pub n: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`countNumOnes(uint256)`](countNumOnesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct countNumOnesReturn {
        pub _0: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<countNumOnesCall> for UnderlyingRustTuple<'_> {
                fn from(value: countNumOnesCall) -> Self {
                    (value.n,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for countNumOnesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { n: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<countNumOnesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: countNumOnesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for countNumOnesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for countNumOnesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = countNumOnesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "countNumOnes(uint256)";
            const SELECTOR: [u8; 4] = [118u8, 55u8, 15u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.n,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isArrayStrictlyAscendingOrdered(bytes)` and selector `0x6c73bd87`.
    ```solidity
    function isArrayStrictlyAscendingOrdered(bytes memory bytesArray) external pure returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArrayStrictlyAscendingOrderedCall {
        pub bytesArray: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isArrayStrictlyAscendingOrdered(bytes)`](isArrayStrictlyAscendingOrderedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArrayStrictlyAscendingOrderedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArrayStrictlyAscendingOrderedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isArrayStrictlyAscendingOrderedCall) -> Self {
                    (value.bytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArrayStrictlyAscendingOrderedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bytesArray: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArrayStrictlyAscendingOrderedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isArrayStrictlyAscendingOrderedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArrayStrictlyAscendingOrderedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isArrayStrictlyAscendingOrderedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isArrayStrictlyAscendingOrderedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isArrayStrictlyAscendingOrdered(bytes)";
            const SELECTOR: [u8; 4] = [108u8, 115u8, 189u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.bytesArray,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isEmpty(uint256)` and selector `0xf90cfeef`.
    ```solidity
    function isEmpty(uint256 bitmap) external pure returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isEmptyCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isEmpty(uint256)`](isEmptyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isEmptyReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isEmptyCall> for UnderlyingRustTuple<'_> {
                fn from(value: isEmptyCall) -> Self {
                    (value.bitmap,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isEmptyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bitmap: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isEmptyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isEmptyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isEmptyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isEmptyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isEmptyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isEmpty(uint256)";
            const SELECTOR: [u8; 4] = [249u8, 12u8, 254u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.bitmap,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isSet(uint256,uint8)` and selector `0x1ff4adba`.
    ```solidity
    function isSet(uint256 bitmap, uint8 numberToCheckForInclusion) external pure returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSetCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
        pub numberToCheckForInclusion: u8,
    }
    ///Container type for the return parameters of the [`isSet(uint256,uint8)`](isSetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSetReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::primitives::aliases::U256, u8);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSetCall> for UnderlyingRustTuple<'_> {
                fn from(value: isSetCall) -> Self {
                    (value.bitmap, value.numberToCheckForInclusion)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bitmap: tuple.0,
                        numberToCheckForInclusion: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isSetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isSetCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isSetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isSet(uint256,uint8)";
            const SELECTOR: [u8; 4] = [31u8, 244u8, 173u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.bitmap,
                    ),
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.numberToCheckForInclusion,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isSubsetOf(uint256,uint256)` and selector `0xa8e3eabb`.
    ```solidity
    function isSubsetOf(uint256 a, uint256 b) external pure returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSubsetOfCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isSubsetOf(uint256,uint256)`](isSubsetOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSubsetOfReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSubsetOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: isSubsetOfCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSubsetOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        a: tuple.0,
                        b: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSubsetOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isSubsetOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSubsetOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isSubsetOfCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isSubsetOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isSubsetOf(uint256,uint256)";
            const SELECTOR: [u8; 4] = [168u8, 227u8, 234u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.a,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.b,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `minus(uint256,uint256)` and selector `0xf4f3bdc1`.
    ```solidity
    function minus(uint256 a, uint256 b) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minusCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`minus(uint256,uint256)`](minusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minusReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minusCall> for UnderlyingRustTuple<'_> {
                fn from(value: minusCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        a: tuple.0,
                        b: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minusReturn> for UnderlyingRustTuple<'_> {
                fn from(value: minusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minusCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = minusReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minus(uint256,uint256)";
            const SELECTOR: [u8; 4] = [244u8, 243u8, 189u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.a,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.b,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `noBitsInCommon(uint256,uint256)` and selector `0x62e2ef33`.
    ```solidity
    function noBitsInCommon(uint256 a, uint256 b) external pure returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noBitsInCommonCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`noBitsInCommon(uint256,uint256)`](noBitsInCommonCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noBitsInCommonReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noBitsInCommonCall> for UnderlyingRustTuple<'_> {
                fn from(value: noBitsInCommonCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noBitsInCommonCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        a: tuple.0,
                        b: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noBitsInCommonReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noBitsInCommonReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noBitsInCommonReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noBitsInCommonCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = noBitsInCommonReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "noBitsInCommon(uint256,uint256)";
            const SELECTOR: [u8; 4] = [98u8, 226u8, 239u8, 51u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.a,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.b,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `orderedBytesArrayToBitmap(bytes)` and selector `0x20e88403`.
    ```solidity
    function orderedBytesArrayToBitmap(bytes memory orderedBytesArray) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct orderedBytesArrayToBitmapCall {
        pub orderedBytesArray: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`orderedBytesArrayToBitmap(bytes)`](orderedBytesArrayToBitmapCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct orderedBytesArrayToBitmapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<orderedBytesArrayToBitmapCall> for UnderlyingRustTuple<'_> {
                fn from(value: orderedBytesArrayToBitmapCall) -> Self {
                    (value.orderedBytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for orderedBytesArrayToBitmapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        orderedBytesArray: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<orderedBytesArrayToBitmapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: orderedBytesArrayToBitmapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for orderedBytesArrayToBitmapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for orderedBytesArrayToBitmapCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = orderedBytesArrayToBitmapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "orderedBytesArrayToBitmap(bytes)";
            const SELECTOR: [u8; 4] = [32u8, 232u8, 132u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.orderedBytesArray,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `plus(uint256,uint256)` and selector `0x66098d4f`.
    ```solidity
    function plus(uint256 a, uint256 b) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct plusCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`plus(uint256,uint256)`](plusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct plusReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<plusCall> for UnderlyingRustTuple<'_> {
                fn from(value: plusCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for plusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        a: tuple.0,
                        b: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<plusReturn> for UnderlyingRustTuple<'_> {
                fn from(value: plusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for plusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for plusCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = plusReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "plus(uint256,uint256)";
            const SELECTOR: [u8; 4] = [102u8, 9u8, 141u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.a,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.b,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setBit(uint256,uint8)` and selector `0x4ee29090`.
    ```solidity
    function setBit(uint256 bitmap, uint8 bit) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBitCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
        pub bit: u8,
    }
    ///Container type for the return parameters of the [`setBit(uint256,uint8)`](setBitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBitReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::primitives::aliases::U256, u8);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBitCall) -> Self {
                    (value.bitmap, value.bit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bitmap: tuple.0,
                        bit: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setBitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBit(uint256,uint8)";
            const SELECTOR: [u8; 4] = [78u8, 226u8, 144u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.bitmap,
                    ),
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.bit,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`BitmapUtilsWrapper`](self) function calls.
    pub enum BitmapUtilsWrapperCalls {
        bitmapToBytesArray(bitmapToBytesArrayCall),
        countNumOnes(countNumOnesCall),
        isArrayStrictlyAscendingOrdered(isArrayStrictlyAscendingOrderedCall),
        isEmpty(isEmptyCall),
        isSet(isSetCall),
        isSubsetOf(isSubsetOfCall),
        minus(minusCall),
        noBitsInCommon(noBitsInCommonCall),
        orderedBytesArrayToBitmap(orderedBytesArrayToBitmapCall),
        plus(plusCall),
        setBit(setBitCall),
    }
    #[automatically_derived]
    impl BitmapUtilsWrapperCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 244u8, 173u8, 186u8],
            [32u8, 232u8, 132u8, 3u8],
            [78u8, 226u8, 144u8, 144u8],
            [98u8, 226u8, 239u8, 51u8],
            [102u8, 9u8, 141u8, 79u8],
            [108u8, 115u8, 189u8, 135u8],
            [118u8, 55u8, 15u8, 31u8],
            [168u8, 227u8, 234u8, 187u8],
            [221u8, 84u8, 113u8, 133u8],
            [244u8, 243u8, 189u8, 193u8],
            [249u8, 12u8, 254u8, 239u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BitmapUtilsWrapperCalls {
        const NAME: &'static str = "BitmapUtilsWrapperCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::bitmapToBytesArray(_) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::countNumOnes(_) => <countNumOnesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isArrayStrictlyAscendingOrdered(_) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isEmpty(_) => <isEmptyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isSet(_) => <isSetCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isSubsetOf(_) => <isSubsetOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::minus(_) => <minusCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::noBitsInCommon(_) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::orderedBytesArrayToBitmap(_) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::plus(_) => <plusCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setBit(_) => <setBitCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<BitmapUtilsWrapperCalls>] = &[
                {
                    fn isSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isSetCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::isSet)
                    }
                    isSet
                },
                {
                    fn orderedBytesArrayToBitmap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BitmapUtilsWrapperCalls::orderedBytesArrayToBitmap)
                    }
                    orderedBytesArrayToBitmap
                },
                {
                    fn setBit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <setBitCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::setBit)
                    }
                    setBit
                },
                {
                    fn noBitsInCommon(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BitmapUtilsWrapperCalls::noBitsInCommon)
                    }
                    noBitsInCommon
                },
                {
                    fn plus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <plusCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::plus)
                    }
                    plus
                },
                {
                    fn isArrayStrictlyAscendingOrdered(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                BitmapUtilsWrapperCalls::isArrayStrictlyAscendingOrdered,
                            )
                    }
                    isArrayStrictlyAscendingOrdered
                },
                {
                    fn countNumOnes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <countNumOnesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BitmapUtilsWrapperCalls::countNumOnes)
                    }
                    countNumOnes
                },
                {
                    fn isSubsetOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isSubsetOfCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::isSubsetOf)
                    }
                    isSubsetOf
                },
                {
                    fn bitmapToBytesArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(BitmapUtilsWrapperCalls::bitmapToBytesArray)
                    }
                    bitmapToBytesArray
                },
                {
                    fn minus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <minusCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::minus)
                    }
                    minus
                },
                {
                    fn isEmpty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isEmptyCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(BitmapUtilsWrapperCalls::isEmpty)
                    }
                    isEmpty
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::bitmapToBytesArray(inner) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::countNumOnes(inner) => {
                    <countNumOnesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isArrayStrictlyAscendingOrdered(inner) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isEmpty(inner) => {
                    <isEmptyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isSet(inner) => {
                    <isSetCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isSubsetOf(inner) => {
                    <isSubsetOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::minus(inner) => {
                    <minusCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::noBitsInCommon(inner) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::orderedBytesArrayToBitmap(inner) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::plus(inner) => {
                    <plusCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setBit(inner) => {
                    <setBitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::bitmapToBytesArray(inner) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::countNumOnes(inner) => {
                    <countNumOnesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isArrayStrictlyAscendingOrdered(inner) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isEmpty(inner) => {
                    <isEmptyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isSet(inner) => {
                    <isSetCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isSubsetOf(inner) => {
                    <isSubsetOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minus(inner) => {
                    <minusCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::noBitsInCommon(inner) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::orderedBytesArrayToBitmap(inner) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::plus(inner) => {
                    <plusCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setBit(inner) => {
                    <setBitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BitmapUtilsWrapper`](self) contract instance.

    See the [wrapper's documentation](`BitmapUtilsWrapperInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BitmapUtilsWrapperInstance<T, P, N> {
        BitmapUtilsWrapperInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<BitmapUtilsWrapperInstance<T, P, N>>>
    {
        BitmapUtilsWrapperInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BitmapUtilsWrapperInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`BitmapUtilsWrapper`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`BitmapUtilsWrapper`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BitmapUtilsWrapperInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BitmapUtilsWrapperInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BitmapUtilsWrapperInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BitmapUtilsWrapperInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`BitmapUtilsWrapper`](self) contract instance.

        See the [wrapper's documentation](`BitmapUtilsWrapperInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<BitmapUtilsWrapperInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BitmapUtilsWrapperInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BitmapUtilsWrapperInstance<T, P, N> {
            BitmapUtilsWrapperInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BitmapUtilsWrapperInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`bitmapToBytesArray`] function.
        pub fn bitmapToBytesArray(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, bitmapToBytesArrayCall, N> {
            self.call_builder(&bitmapToBytesArrayCall { bitmap })
        }
        ///Creates a new call builder for the [`countNumOnes`] function.
        pub fn countNumOnes(
            &self,
            n: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, countNumOnesCall, N> {
            self.call_builder(&countNumOnesCall { n })
        }
        ///Creates a new call builder for the [`isArrayStrictlyAscendingOrdered`] function.
        pub fn isArrayStrictlyAscendingOrdered(
            &self,
            bytesArray: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isArrayStrictlyAscendingOrderedCall, N> {
            self.call_builder(&isArrayStrictlyAscendingOrderedCall { bytesArray })
        }
        ///Creates a new call builder for the [`isEmpty`] function.
        pub fn isEmpty(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isEmptyCall, N> {
            self.call_builder(&isEmptyCall { bitmap })
        }
        ///Creates a new call builder for the [`isSet`] function.
        pub fn isSet(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
            numberToCheckForInclusion: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, isSetCall, N> {
            self.call_builder(&isSetCall {
                bitmap,
                numberToCheckForInclusion,
            })
        }
        ///Creates a new call builder for the [`isSubsetOf`] function.
        pub fn isSubsetOf(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isSubsetOfCall, N> {
            self.call_builder(&isSubsetOfCall { a, b })
        }
        ///Creates a new call builder for the [`minus`] function.
        pub fn minus(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, minusCall, N> {
            self.call_builder(&minusCall { a, b })
        }
        ///Creates a new call builder for the [`noBitsInCommon`] function.
        pub fn noBitsInCommon(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, noBitsInCommonCall, N> {
            self.call_builder(&noBitsInCommonCall { a, b })
        }
        ///Creates a new call builder for the [`orderedBytesArrayToBitmap`] function.
        pub fn orderedBytesArrayToBitmap(
            &self,
            orderedBytesArray: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, orderedBytesArrayToBitmapCall, N> {
            self.call_builder(&orderedBytesArrayToBitmapCall { orderedBytesArray })
        }
        ///Creates a new call builder for the [`plus`] function.
        pub fn plus(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, plusCall, N> {
            self.call_builder(&plusCall { a, b })
        }
        ///Creates a new call builder for the [`setBit`] function.
        pub fn setBit(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
            bit: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBitCall, N> {
            self.call_builder(&setBitCall { bitmap, bit })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > BitmapUtilsWrapperInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
