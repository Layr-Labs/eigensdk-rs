/**

Generated by the following Solidity interface...
```solidity
interface ContractsRegistry {
    function anvil_test(bytes32) external view returns (uint256 timestamp, uint256 block_number, int256 index);
    function contractCount() external view returns (uint256);
    function contractNames(uint256) external view returns (string memory);
    function contracts(string memory) external view returns (address);
    function get_test_values(string memory test_name, int256 index) external view returns (uint256, uint256, int256);
    function registerContract(string memory name, address _contract) external;
    function store_test(string memory test_name, int256 index, uint256 timestamp, uint256 block_number) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "anvil_test",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "block_number",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractNames",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contracts",
    "inputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "get_test_values",
    "inputs": [
      {
        "name": "test_name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "registerContract",
    "inputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "_contract",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "store_test",
    "inputs": [
      {
        "name": "test_name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "block_number",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ContractsRegistry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b5061082a8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c80637fafbbdd116100585780637fafbbdd146100ea5780638736381a146101185780638c5b83851461012f578063acd5baa21461017a575f5ffd5b80633ca6bb921461007e5780636842109e146100a75780637f3c2c28146100d5575b5f5ffd5b61009161008c36600461043f565b61018d565b60405161009e9190610456565b60405180910390f35b6100ba6100b536600461052a565b610224565b6040805193845260208401929092529082015260600161009e565b6100e86100e336600461056c565b610295565b005b6100ba6100f836600461043f565b60036020525f908152604090208054600182015460029092015490919083565b61012160025481565b60405190815260200161009e565b61016261013d3660046105c6565b80516020818301810180515f825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161009e565b6100e8610188366004610600565b610388565b60016020525f9081526040902080546101a590610650565b80601f01602080910402602001604051908101604052809291908181526020018280546101d190610650565b801561021c5780601f106101f35761010080835404028352916020019161021c565b820191905f5260205f20905b8154815290600101906020018083116101ff57829003601f168201915b505050505081565b5f5f5f5f60035f878760405160200161023e92919061069f565b60408051601f1981840301815291815281516020928301208352828201939093529082015f208251606081018452815480825260018301549382018490526002909201549301839052955093509150509250925092565b5f6001600160a01b03165f836040516102ae91906106b7565b908152604051908190036020019020546001600160a01b0316146103185760405162461bcd60e51b815260206004820152601b60248201527f636f6e747261637420616c726561647920726567697374657265640000000000604482015260640160405180910390fd5b805f8360405161032891906106b7565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b0394909416939093179092556002545f90815260019091522061036f8382610715565b5060028054905f61037f836107d0565b91905055505050565b60035f858560405160200161039e92919061069f565b6040516020818303038152906040528051906020012081526020019081526020015f205f01545f146103ce575f5ffd5b60405180606001604052808381526020018281526020018481525060035f866040516020016103fd91906106b7565b60408051601f1981840301815291815281516020928301208352828201939093529082015f208351815590830151600182015591015160029091015550505050565b5f6020828403121561044f575f5ffd5b5035919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126104ae575f5ffd5b813567ffffffffffffffff8111156104c8576104c861048b565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156104f7576104f761048b565b60405281815283820160200185101561050e575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f6040838503121561053b575f5ffd5b823567ffffffffffffffff811115610551575f5ffd5b61055d8582860161049f565b95602094909401359450505050565b5f5f6040838503121561057d575f5ffd5b823567ffffffffffffffff811115610593575f5ffd5b61059f8582860161049f565b92505060208301356001600160a01b03811681146105bb575f5ffd5b809150509250929050565b5f602082840312156105d6575f5ffd5b813567ffffffffffffffff8111156105ec575f5ffd5b6105f88482850161049f565b949350505050565b5f5f5f5f60808587031215610613575f5ffd5b843567ffffffffffffffff811115610629575f5ffd5b6106358782880161049f565b97602087013597506040870135966060013595509350505050565b600181811c9082168061066457607f821691505b60208210810361068257634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f6106aa8285610688565b9283525050602001919050565b5f6106c28284610688565b9392505050565b601f82111561071057805f5260205f20601f840160051c810160208510156106ee5750805b601f840160051c820191505b8181101561070d575f81556001016106fa565b50505b505050565b815167ffffffffffffffff81111561072f5761072f61048b565b6107438161073d8454610650565b846106c9565b6020601f821160018114610775575f831561075e5750848201515b5f19600385901b1c1916600184901b17845561070d565b5f84815260208120601f198516915b828110156107a45787850151825560209485019460019092019101610784565b50848210156107c157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f600182016107ed57634e487b7160e01b5f52601160045260245ffd5b506001019056fea2646970667358221220a0ee865c197f42c38fc02146f0b56824adfe933ddd88cd50095e2d473911505e64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x08*\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c\x7F\xAF\xBB\xDD\x11a\0XW\x80c\x7F\xAF\xBB\xDD\x14a\0\xEAW\x80c\x8768\x1A\x14a\x01\x18W\x80c\x8C[\x83\x85\x14a\x01/W\x80c\xAC\xD5\xBA\xA2\x14a\x01zW__\xFD[\x80c<\xA6\xBB\x92\x14a\0~W\x80chB\x10\x9E\x14a\0\xA7W\x80c\x7F<,(\x14a\0\xD5W[__\xFD[a\0\x91a\0\x8C6`\x04a\x04?V[a\x01\x8DV[`@Qa\0\x9E\x91\x90a\x04VV[`@Q\x80\x91\x03\x90\xF3[a\0\xBAa\0\xB56`\x04a\x05*V[a\x02$V[`@\x80Q\x93\x84R` \x84\x01\x92\x90\x92R\x90\x82\x01R``\x01a\0\x9EV[a\0\xE8a\0\xE36`\x04a\x05lV[a\x02\x95V[\0[a\0\xBAa\0\xF86`\x04a\x04?V[`\x03` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x90\x92\x01T\x90\x91\x90\x83V[a\x01!`\x02T\x81V[`@Q\x90\x81R` \x01a\0\x9EV[a\x01ba\x01=6`\x04a\x05\xC6V[\x80Q` \x81\x83\x01\x81\x01\x80Q_\x82R\x92\x82\x01\x91\x90\x93\x01 \x91RT`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9EV[a\0\xE8a\x01\x886`\x04a\x06\0V[a\x03\x88V[`\x01` R_\x90\x81R`@\x90 \x80Ta\x01\xA5\x90a\x06PV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01\xD1\x90a\x06PV[\x80\x15a\x02\x1CW\x80`\x1F\x10a\x01\xF3Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\x1CV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\xFFW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[____`\x03_\x87\x87`@Q` \x01a\x02>\x92\x91\x90a\x06\x9FV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 \x83R\x82\x82\x01\x93\x90\x93R\x90\x82\x01_ \x82Q``\x81\x01\x84R\x81T\x80\x82R`\x01\x83\x01T\x93\x82\x01\x84\x90R`\x02\x90\x92\x01T\x93\x01\x83\x90R\x95P\x93P\x91PP\x92P\x92P\x92V[_`\x01`\x01`\xA0\x1B\x03\x16_\x83`@Qa\x02\xAE\x91\x90a\x06\xB7V[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03\x18W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fcontract already registered\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80_\x83`@Qa\x03(\x91\x90a\x06\xB7V[\x90\x81R`@\x80Q` \x92\x81\x90\x03\x83\x01\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x90\x94\x16\x93\x90\x93\x17\x90\x92U`\x02T_\x90\x81R`\x01\x90\x91R a\x03o\x83\x82a\x07\x15V[P`\x02\x80T\x90_a\x03\x7F\x83a\x07\xD0V[\x91\x90PUPPPV[`\x03_\x85\x85`@Q` \x01a\x03\x9E\x92\x91\x90a\x06\x9FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81R` \x01\x90\x81R` \x01_ _\x01T_\x14a\x03\xCEW__\xFD[`@Q\x80``\x01`@R\x80\x83\x81R` \x01\x82\x81R` \x01\x84\x81RP`\x03_\x86`@Q` \x01a\x03\xFD\x91\x90a\x06\xB7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 \x83R\x82\x82\x01\x93\x90\x93R\x90\x82\x01_ \x83Q\x81U\x90\x83\x01Q`\x01\x82\x01U\x91\x01Q`\x02\x90\x91\x01UPPPPV[_` \x82\x84\x03\x12\x15a\x04OW__\xFD[P5\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x04\xAEW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xC8Wa\x04\xC8a\x04\x8BV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04\xF7Wa\x04\xF7a\x04\x8BV[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x05\x0EW__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[__`@\x83\x85\x03\x12\x15a\x05;W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05QW__\xFD[a\x05]\x85\x82\x86\x01a\x04\x9FV[\x95` \x94\x90\x94\x015\x94PPPPV[__`@\x83\x85\x03\x12\x15a\x05}W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x93W__\xFD[a\x05\x9F\x85\x82\x86\x01a\x04\x9FV[\x92PP` \x83\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\xBBW__\xFD[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x05\xD6W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xECW__\xFD[a\x05\xF8\x84\x82\x85\x01a\x04\x9FV[\x94\x93PPPPV[____`\x80\x85\x87\x03\x12\x15a\x06\x13W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06)W__\xFD[a\x065\x87\x82\x88\x01a\x04\x9FV[\x97` \x87\x015\x97P`@\x87\x015\x96``\x015\x95P\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x06dW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x06\x82WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x06\xAA\x82\x85a\x06\x88V[\x92\x83RPP` \x01\x91\x90PV[_a\x06\xC2\x82\x84a\x06\x88V[\x93\x92PPPV[`\x1F\x82\x11\x15a\x07\x10W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x06\xEEWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x07\rW_\x81U`\x01\x01a\x06\xFAV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07/Wa\x07/a\x04\x8BV[a\x07C\x81a\x07=\x84Ta\x06PV[\x84a\x06\xC9V[` `\x1F\x82\x11`\x01\x81\x14a\x07uW_\x83\x15a\x07^WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x07\rV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x07\xA4W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x07\x84V[P\x84\x82\x10\x15a\x07\xC1W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[_`\x01\x82\x01a\x07\xEDWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 \xA0\xEE\x86\\\x19\x7FB\xC3\x8F\xC0!F\xF0\xB5h$\xAD\xFE\x93=\xDD\x88\xCDP\t^-G9\x11P^dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061007a575f3560e01c80637fafbbdd116100585780637fafbbdd146100ea5780638736381a146101185780638c5b83851461012f578063acd5baa21461017a575f5ffd5b80633ca6bb921461007e5780636842109e146100a75780637f3c2c28146100d5575b5f5ffd5b61009161008c36600461043f565b61018d565b60405161009e9190610456565b60405180910390f35b6100ba6100b536600461052a565b610224565b6040805193845260208401929092529082015260600161009e565b6100e86100e336600461056c565b610295565b005b6100ba6100f836600461043f565b60036020525f908152604090208054600182015460029092015490919083565b61012160025481565b60405190815260200161009e565b61016261013d3660046105c6565b80516020818301810180515f825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161009e565b6100e8610188366004610600565b610388565b60016020525f9081526040902080546101a590610650565b80601f01602080910402602001604051908101604052809291908181526020018280546101d190610650565b801561021c5780601f106101f35761010080835404028352916020019161021c565b820191905f5260205f20905b8154815290600101906020018083116101ff57829003601f168201915b505050505081565b5f5f5f5f60035f878760405160200161023e92919061069f565b60408051601f1981840301815291815281516020928301208352828201939093529082015f208251606081018452815480825260018301549382018490526002909201549301839052955093509150509250925092565b5f6001600160a01b03165f836040516102ae91906106b7565b908152604051908190036020019020546001600160a01b0316146103185760405162461bcd60e51b815260206004820152601b60248201527f636f6e747261637420616c726561647920726567697374657265640000000000604482015260640160405180910390fd5b805f8360405161032891906106b7565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b0394909416939093179092556002545f90815260019091522061036f8382610715565b5060028054905f61037f836107d0565b91905055505050565b60035f858560405160200161039e92919061069f565b6040516020818303038152906040528051906020012081526020019081526020015f205f01545f146103ce575f5ffd5b60405180606001604052808381526020018281526020018481525060035f866040516020016103fd91906106b7565b60408051601f1981840301815291815281516020928301208352828201939093529082015f208351815590830151600182015591015160029091015550505050565b5f6020828403121561044f575f5ffd5b5035919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126104ae575f5ffd5b813567ffffffffffffffff8111156104c8576104c861048b565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156104f7576104f761048b565b60405281815283820160200185101561050e575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f6040838503121561053b575f5ffd5b823567ffffffffffffffff811115610551575f5ffd5b61055d8582860161049f565b95602094909401359450505050565b5f5f6040838503121561057d575f5ffd5b823567ffffffffffffffff811115610593575f5ffd5b61059f8582860161049f565b92505060208301356001600160a01b03811681146105bb575f5ffd5b809150509250929050565b5f602082840312156105d6575f5ffd5b813567ffffffffffffffff8111156105ec575f5ffd5b6105f88482850161049f565b949350505050565b5f5f5f5f60808587031215610613575f5ffd5b843567ffffffffffffffff811115610629575f5ffd5b6106358782880161049f565b97602087013597506040870135966060013595509350505050565b600181811c9082168061066457607f821691505b60208210810361068257634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f6106aa8285610688565b9283525050602001919050565b5f6106c28284610688565b9392505050565b601f82111561071057805f5260205f20601f840160051c810160208510156106ee5750805b601f840160051c820191505b8181101561070d575f81556001016106fa565b50505b505050565b815167ffffffffffffffff81111561072f5761072f61048b565b6107438161073d8454610650565b846106c9565b6020601f821160018114610775575f831561075e5750848201515b5f19600385901b1c1916600184901b17845561070d565b5f84815260208120601f198516915b828110156107a45787850151825560209485019460019092019101610784565b50848210156107c157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f600182016107ed57634e487b7160e01b5f52601160045260245ffd5b506001019056fea2646970667358221220a0ee865c197f42c38fc02146f0b56824adfe933ddd88cd50095e2d473911505e64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c\x7F\xAF\xBB\xDD\x11a\0XW\x80c\x7F\xAF\xBB\xDD\x14a\0\xEAW\x80c\x8768\x1A\x14a\x01\x18W\x80c\x8C[\x83\x85\x14a\x01/W\x80c\xAC\xD5\xBA\xA2\x14a\x01zW__\xFD[\x80c<\xA6\xBB\x92\x14a\0~W\x80chB\x10\x9E\x14a\0\xA7W\x80c\x7F<,(\x14a\0\xD5W[__\xFD[a\0\x91a\0\x8C6`\x04a\x04?V[a\x01\x8DV[`@Qa\0\x9E\x91\x90a\x04VV[`@Q\x80\x91\x03\x90\xF3[a\0\xBAa\0\xB56`\x04a\x05*V[a\x02$V[`@\x80Q\x93\x84R` \x84\x01\x92\x90\x92R\x90\x82\x01R``\x01a\0\x9EV[a\0\xE8a\0\xE36`\x04a\x05lV[a\x02\x95V[\0[a\0\xBAa\0\xF86`\x04a\x04?V[`\x03` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x90\x92\x01T\x90\x91\x90\x83V[a\x01!`\x02T\x81V[`@Q\x90\x81R` \x01a\0\x9EV[a\x01ba\x01=6`\x04a\x05\xC6V[\x80Q` \x81\x83\x01\x81\x01\x80Q_\x82R\x92\x82\x01\x91\x90\x93\x01 \x91RT`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9EV[a\0\xE8a\x01\x886`\x04a\x06\0V[a\x03\x88V[`\x01` R_\x90\x81R`@\x90 \x80Ta\x01\xA5\x90a\x06PV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01\xD1\x90a\x06PV[\x80\x15a\x02\x1CW\x80`\x1F\x10a\x01\xF3Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\x1CV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\xFFW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[____`\x03_\x87\x87`@Q` \x01a\x02>\x92\x91\x90a\x06\x9FV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 \x83R\x82\x82\x01\x93\x90\x93R\x90\x82\x01_ \x82Q``\x81\x01\x84R\x81T\x80\x82R`\x01\x83\x01T\x93\x82\x01\x84\x90R`\x02\x90\x92\x01T\x93\x01\x83\x90R\x95P\x93P\x91PP\x92P\x92P\x92V[_`\x01`\x01`\xA0\x1B\x03\x16_\x83`@Qa\x02\xAE\x91\x90a\x06\xB7V[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03\x18W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fcontract already registered\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[\x80_\x83`@Qa\x03(\x91\x90a\x06\xB7V[\x90\x81R`@\x80Q` \x92\x81\x90\x03\x83\x01\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x90\x94\x16\x93\x90\x93\x17\x90\x92U`\x02T_\x90\x81R`\x01\x90\x91R a\x03o\x83\x82a\x07\x15V[P`\x02\x80T\x90_a\x03\x7F\x83a\x07\xD0V[\x91\x90PUPPPV[`\x03_\x85\x85`@Q` \x01a\x03\x9E\x92\x91\x90a\x06\x9FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81R` \x01\x90\x81R` \x01_ _\x01T_\x14a\x03\xCEW__\xFD[`@Q\x80``\x01`@R\x80\x83\x81R` \x01\x82\x81R` \x01\x84\x81RP`\x03_\x86`@Q` \x01a\x03\xFD\x91\x90a\x06\xB7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 \x83R\x82\x82\x01\x93\x90\x93R\x90\x82\x01_ \x83Q\x81U\x90\x83\x01Q`\x01\x82\x01U\x91\x01Q`\x02\x90\x91\x01UPPPPV[_` \x82\x84\x03\x12\x15a\x04OW__\xFD[P5\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x04\xAEW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xC8Wa\x04\xC8a\x04\x8BV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04\xF7Wa\x04\xF7a\x04\x8BV[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x05\x0EW__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[__`@\x83\x85\x03\x12\x15a\x05;W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05QW__\xFD[a\x05]\x85\x82\x86\x01a\x04\x9FV[\x95` \x94\x90\x94\x015\x94PPPPV[__`@\x83\x85\x03\x12\x15a\x05}W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x93W__\xFD[a\x05\x9F\x85\x82\x86\x01a\x04\x9FV[\x92PP` \x83\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\xBBW__\xFD[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x05\xD6W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xECW__\xFD[a\x05\xF8\x84\x82\x85\x01a\x04\x9FV[\x94\x93PPPPV[____`\x80\x85\x87\x03\x12\x15a\x06\x13W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06)W__\xFD[a\x065\x87\x82\x88\x01a\x04\x9FV[\x97` \x87\x015\x97P`@\x87\x015\x96``\x015\x95P\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x06dW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x06\x82WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x06\xAA\x82\x85a\x06\x88V[\x92\x83RPP` \x01\x91\x90PV[_a\x06\xC2\x82\x84a\x06\x88V[\x93\x92PPPV[`\x1F\x82\x11\x15a\x07\x10W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x06\xEEWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x07\rW_\x81U`\x01\x01a\x06\xFAV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07/Wa\x07/a\x04\x8BV[a\x07C\x81a\x07=\x84Ta\x06PV[\x84a\x06\xC9V[` `\x1F\x82\x11`\x01\x81\x14a\x07uW_\x83\x15a\x07^WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x07\rV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x07\xA4W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x07\x84V[P\x84\x82\x10\x15a\x07\xC1W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[_`\x01\x82\x01a\x07\xEDWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 \xA0\xEE\x86\\\x19\x7FB\xC3\x8F\xC0!F\xF0\xB5h$\xAD\xFE\x93=\xDD\x88\xCDP\t^-G9\x11P^dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `anvil_test(bytes32)` and selector `0x7fafbbdd`.
    ```solidity
    function anvil_test(bytes32) external view returns (uint256 timestamp, uint256 block_number, int256 index);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct anvil_testCall {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`anvil_test(bytes32)`](anvil_testCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct anvil_testReturn {
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
        pub block_number: alloy::sol_types::private::primitives::aliases::U256,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<anvil_testCall> for UnderlyingRustTuple<'_> {
                fn from(value: anvil_testCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for anvil_testCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<anvil_testReturn> for UnderlyingRustTuple<'_> {
                fn from(value: anvil_testReturn) -> Self {
                    (value.timestamp, value.block_number, value.index)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for anvil_testReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        timestamp: tuple.0,
                        block_number: tuple.1,
                        index: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for anvil_testCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = anvil_testReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "anvil_test(bytes32)";
            const SELECTOR: [u8; 4] = [127u8, 175u8, 187u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contractCount()` and selector `0x8736381a`.
    ```solidity
    function contractCount() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractCountCall {}
    ///Container type for the return parameters of the [`contractCount()`](contractCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractCount()";
            const SELECTOR: [u8; 4] = [135u8, 54u8, 56u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contractNames(uint256)` and selector `0x3ca6bb92`.
    ```solidity
    function contractNames(uint256) external view returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractNamesCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`contractNames(uint256)`](contractNamesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractNamesReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractNamesCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractNamesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractNamesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractNamesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractNamesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractNamesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractNamesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractNamesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractNames(uint256)";
            const SELECTOR: [u8; 4] = [60u8, 166u8, 187u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contracts(string)` and selector `0x8c5b8385`.
    ```solidity
    function contracts(string memory) external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractsCall {
        pub _0: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`contracts(string)`](contractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractsReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractsCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contracts(string)";
            const SELECTOR: [u8; 4] = [140u8, 91u8, 131u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `get_test_values(string,int256)` and selector `0x6842109e`.
    ```solidity
    function get_test_values(string memory test_name, int256 index) external view returns (uint256, uint256, int256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_test_valuesCall {
        pub test_name: alloy::sol_types::private::String,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
    }
    ///Container type for the return parameters of the [`get_test_values(string,int256)`](get_test_valuesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_test_valuesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
        pub _2: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_test_valuesCall> for UnderlyingRustTuple<'_> {
                fn from(value: get_test_valuesCall) -> Self {
                    (value.test_name, value.index)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_test_valuesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        test_name: tuple.0,
                        index: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_test_valuesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: get_test_valuesReturn) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_test_valuesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for get_test_valuesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = get_test_valuesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get_test_values(string,int256)";
            const SELECTOR: [u8; 4] = [104u8, 66u8, 16u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.test_name,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.index,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `registerContract(string,address)` and selector `0x7f3c2c28`.
    ```solidity
    function registerContract(string memory name, address _contract) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerContractCall {
        pub name: alloy::sol_types::private::String,
        pub _contract: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`registerContract(string,address)`](registerContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerContractReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerContractCall> for UnderlyingRustTuple<'_> {
                fn from(value: registerContractCall) -> Self {
                    (value.name, value._contract)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        _contract: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerContractReturn> for UnderlyingRustTuple<'_> {
                fn from(value: registerContractReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for registerContractCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = registerContractReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "registerContract(string,address)";
            const SELECTOR: [u8; 4] = [127u8, 60u8, 44u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._contract,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `store_test(string,int256,uint256,uint256)` and selector `0xacd5baa2`.
    ```solidity
    function store_test(string memory test_name, int256 index, uint256 timestamp, uint256 block_number) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct store_testCall {
        pub test_name: alloy::sol_types::private::String,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
        pub block_number: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`store_test(string,int256,uint256,uint256)`](store_testCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct store_testReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::I256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<store_testCall> for UnderlyingRustTuple<'_> {
                fn from(value: store_testCall) -> Self {
                    (
                        value.test_name,
                        value.index,
                        value.timestamp,
                        value.block_number,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for store_testCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        test_name: tuple.0,
                        index: tuple.1,
                        timestamp: tuple.2,
                        block_number: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<store_testReturn> for UnderlyingRustTuple<'_> {
                fn from(value: store_testReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for store_testReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for store_testCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = store_testReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "store_test(string,int256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [172u8, 213u8, 186u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.test_name,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.index,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.timestamp,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.block_number,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`ContractsRegistry`](self) function calls.
    pub enum ContractsRegistryCalls {
        anvil_test(anvil_testCall),
        contractCount(contractCountCall),
        contractNames(contractNamesCall),
        contracts(contractsCall),
        get_test_values(get_test_valuesCall),
        registerContract(registerContractCall),
        store_test(store_testCall),
    }
    #[automatically_derived]
    impl ContractsRegistryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [60u8, 166u8, 187u8, 146u8],
            [104u8, 66u8, 16u8, 158u8],
            [127u8, 60u8, 44u8, 40u8],
            [127u8, 175u8, 187u8, 221u8],
            [135u8, 54u8, 56u8, 26u8],
            [140u8, 91u8, 131u8, 133u8],
            [172u8, 213u8, 186u8, 162u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ContractsRegistryCalls {
        const NAME: &'static str = "ContractsRegistryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::anvil_test(_) => <anvil_testCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contractCount(_) => <contractCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contractNames(_) => <contractNamesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contracts(_) => <contractsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::get_test_values(_) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::registerContract(_) => {
                    <registerContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::store_test(_) => <store_testCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<ContractsRegistryCalls>] = &[
                {
                    fn contractNames(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractNamesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::contractNames)
                    }
                    contractNames
                },
                {
                    fn get_test_values(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <get_test_valuesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::get_test_values)
                    }
                    get_test_values
                },
                {
                    fn registerContract(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <registerContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::registerContract)
                    }
                    registerContract
                },
                {
                    fn anvil_test(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <anvil_testCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::anvil_test)
                    }
                    anvil_test
                },
                {
                    fn contractCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::contractCount)
                    }
                    contractCount
                },
                {
                    fn contracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::contracts)
                    }
                    contracts
                },
                {
                    fn store_test(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <store_testCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::store_test)
                    }
                    store_test
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::anvil_test(inner) => {
                    <anvil_testCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contractCount(inner) => {
                    <contractCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contractNames(inner) => {
                    <contractNamesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contracts(inner) => {
                    <contractsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::get_test_values(inner) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::registerContract(inner) => {
                    <registerContractCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::store_test(inner) => {
                    <store_testCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::anvil_test(inner) => {
                    <anvil_testCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contractCount(inner) => {
                    <contractCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contractNames(inner) => {
                    <contractNamesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contracts(inner) => {
                    <contractsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::get_test_values(inner) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::registerContract(inner) => {
                    <registerContractCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::store_test(inner) => {
                    <store_testCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

    See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ContractsRegistryInstance<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<ContractsRegistryInstance<T, P, N>>>
    {
        ContractsRegistryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ContractsRegistry`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`ContractsRegistry`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ContractsRegistryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ContractsRegistryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ContractsRegistryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

        See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ContractsRegistryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ContractsRegistryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ContractsRegistryInstance<T, P, N> {
            ContractsRegistryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`anvil_test`] function.
        pub fn anvil_test(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, anvil_testCall, N> {
            self.call_builder(&anvil_testCall { _0 })
        }
        ///Creates a new call builder for the [`contractCount`] function.
        pub fn contractCount(&self) -> alloy_contract::SolCallBuilder<T, &P, contractCountCall, N> {
            self.call_builder(&contractCountCall {})
        }
        ///Creates a new call builder for the [`contractNames`] function.
        pub fn contractNames(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, contractNamesCall, N> {
            self.call_builder(&contractNamesCall { _0 })
        }
        ///Creates a new call builder for the [`contracts`] function.
        pub fn contracts(
            &self,
            _0: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, contractsCall, N> {
            self.call_builder(&contractsCall { _0 })
        }
        ///Creates a new call builder for the [`get_test_values`] function.
        pub fn get_test_values(
            &self,
            test_name: alloy::sol_types::private::String,
            index: alloy::sol_types::private::primitives::aliases::I256,
        ) -> alloy_contract::SolCallBuilder<T, &P, get_test_valuesCall, N> {
            self.call_builder(&get_test_valuesCall { test_name, index })
        }
        ///Creates a new call builder for the [`registerContract`] function.
        pub fn registerContract(
            &self,
            name: alloy::sol_types::private::String,
            _contract: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, registerContractCall, N> {
            self.call_builder(&registerContractCall { name, _contract })
        }
        ///Creates a new call builder for the [`store_test`] function.
        pub fn store_test(
            &self,
            test_name: alloy::sol_types::private::String,
            index: alloy::sol_types::private::primitives::aliases::I256,
            timestamp: alloy::sol_types::private::primitives::aliases::U256,
            block_number: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, store_testCall, N> {
            self.call_builder(&store_testCall {
                test_name,
                index,
                timestamp,
                block_number,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
