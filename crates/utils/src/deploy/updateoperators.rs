/**

Generated by the following Solidity interface...
```solidity
interface UpdateOperators {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod UpdateOperators {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c80546201000162ff00ff19909116179055600f80546001600160a01b031916735fbdb2315678afecb367f032d93f642f64180aa31790553480156047575f5ffd5b5061176e806100555f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c04062261461004d578063f8ccbf4714610055575b5f5ffd5b61004b61007c565b005b61004b610159565b600c546100689062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610092575046610539145b156100c0576040518060600160405280603b81526020016116da603b9139600d906100bd90826112a6565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610125573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261014c91908101906113d8565b600d906100bd90826112a6565b5f610162610773565b90505f61016d6109e6565b90505f600e5467ffffffffffffffff81111561018b5761018b61120e565b6040519080825280602002602001820160405280156101b4578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156101d3576101d361120e565b6040519080825280602002602001820160405280156101fc578160200160208202803683370190505b5090505f600e5467ffffffffffffffff81111561021b5761021b61120e565b604051908082528060200260200182016040528015610244578160200160208202803683370190505b5090505f5b600e548110156103b0575f6102e6600d805461026490611222565b80601f016020809104026020016040519081016040528092919081815260200182805461029090611222565b80156102db5780601f106102b2576101008083540402835291602001916102db565b820191905f5260205f20905b8154815290600101906020018083116102be57829003601f168201915b505050505083610a69565b509050808583815181106102fc576102fc61141d565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f400008483815181106103375761033761141d565b60200260200101818152505061038a825f1b60405160200161035b91815260200190565b604051602081830303815290604052805190602001205f1c670de0b6b3a7640000678ac7230489e80000610b64565b83838151811061039c5761039c61141d565b602090810291909101015250600101610249565b505f5160206116ba5f395f51905f525f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156103f8575f5ffd5b505af115801561040a573d5f5f3e3d5ffd5b505050506104195f8484610ba7565b8351610426908483610ba7565b5f5160206116ba5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561046d575f5ffd5b505af115801561047f573d5f5f3e3d5ffd5b505f925050505b600e5481101561076b57600d80545f91607891839161052a916104a890611222565b80601f01602080910402602001604051908101604052809291908181526020018280546104d490611222565b801561051f5780601f106104f65761010080835404028352916020019161051f565b820191905f5260205f20905b81548152906001019060200180831161050257829003601f168201915b505050505085610a69565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d47906024015f604051808303815f87803b158015610578575f5ffd5b505af115801561058a573d5f5f3e3d5ffd5b5050600f5460405163566add5160e11b815260806004820152601c60848201527f746573745f6d6f646966795f6f70657261746f725f64657461696c730000000060a4820152602481018890524360448201524260648201526001600160a01b03909116925063acd5baa2915060c4015f604051808303815f87803b158015610611575f5ffd5b505af1158015610623573d5f5f3e3d5ffd5b5050505088606001516001600160a01b031663f16172b060405180606001604052808a88815181106106575761065761141d565b60200260200101516001600160a01b03168152602001866001600160a01b031681526020018563ffffffff168152506040518263ffffffff1660e01b81526004016106d2919081516001600160a01b0390811682526020808401519091169082015260409182015163ffffffff169181019190915260600190565b5f604051808303815f87803b1580156106e9575f5ffd5b505af11580156106fb573d5f5f3e3d5ffd5b505050505f5160206116ba5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610746575f5ffd5b505af1158015610758573d5f5f3e3d5ffd5b5050600190950194506104869350505050565b505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f6107f26040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610cf2565b90505f610834826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250610ee4565b90505f610876836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250610ee4565b90505f6108b8846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250610ee4565b90505f6108f285604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250610ee4565b90505f610934866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250610ee4565b90505f61096b87604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250610ee4565b90505f6109908860405180606001604052806025815260200161169560259139610ee4565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a08301525f60c083015290911660e082015292915050565b604080518082019091525f80825260208201525f610a1b60405180606001604052806024815260200161171560249139610cf2565b90505f610a4a826040518060400160405280600a8152602001692e61646472657373657360b01b815250610f67565b90505f81806020019051810190610a619190611445565b949350505050565b604051636229498b60e01b81525f908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610aa690879087906004016114d2565b602060405180830381865afa158015610ac1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae591906114f9565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303815f875af1158015610b37573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5b9190611510565b91509250929050565b5f610b70848484610fe4565b9050610ba06040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b815250826111a1565b9392505050565b5f5b8251811015610cec576001600160a01b038416610c2e57828181518110610bd257610bd261141d565b60200260200101516001600160a01b03166108fc838381518110610bf857610bf861141d565b602002602001015190811502906040515f60405180830381858888f19350505050158015610c28573d5f5f3e3d5ffd5b50610ce4565b836001600160a01b031663a9059cbb848381518110610c4f57610c4f61141d565b6020026020010151848481518110610c6957610c6961141d565b60200260200101516040518363ffffffff1660e01b8152600401610ca29291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610cbe573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce2919061152b565b505b600101610ba9565b50505050565b60605f5f5160206116ba5f395f51905f525f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d3f573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d6691908101906113d8565b604051602001610d769190611561565b60408051808303601f190181529082905263348051d760e11b825246600483015291505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa158015610dd4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610dfb91908101906113d8565b604051602001610e0b919061158b565b60405160208183030381529060405290505f84604051602001610e2e91906115a7565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610e6f908690869086906020016115c7565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610e9a91906115e4565b5f60405180830381865afa158015610eb4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610edb91908101906113d8565b95945050505050565b604051631e19e65760e01b81525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e65790610f1f90869086906004016115f6565b602060405180830381865afa158015610f3a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5e9190611510565b90505b92915050565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef190610fa390869086906004016115f6565b5f60405180830381865afa158015610fbd573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f5e91908101906113d8565b5f8183111561105f5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b82841015801561106f5750818411155b1561107b575082610ba0565b5f611086848461162e565b611091906001611641565b9050600385111580156110a357508481115b156110ba576110b28585611641565b915050610ba0565b6110c660035f1961162e565b85101580156110de57506110db855f1961162e565b81115b156110f8576110ee855f1961162e565b6110b2908461162e565b8285111561114b575f61110b848761162e565b90505f6111188383611654565b9050805f0361112c57849350505050610ba0565b60016111388288611641565b611142919061162e565b93505050611199565b83851015611199575f61115e868661162e565b90505f61116b8383611654565b9050805f0361117f57859350505050610ba0565b611189818661162e565b611194906001611641565b935050505b509392505050565b6111e682826040516024016111b7929190611673565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526111ea565b5050565b6100bd8180516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061123657607f821691505b60208210810361125457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156112a157805f5260205f20601f840160051c8101602085101561127f5750805b601f840160051c820191505b8181101561129e575f815560010161128b565b50505b505050565b815167ffffffffffffffff8111156112c0576112c061120e565b6112d4816112ce8454611222565b8461125a565b6020601f821160018114611306575f83156112ef5750848201515b5f19600385901b1c1916600184901b17845561129e565b5f84815260208120601f198516915b828110156113355787850151825560209485019460019092019101611315565b508482101561135257868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f5f67ffffffffffffffff84111561137b5761137b61120e565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff821117156113aa576113aa61120e565b6040528381529050808284018510156113c1575f5ffd5b8383602083015e5f60208583010152509392505050565b5f602082840312156113e8575f5ffd5b815167ffffffffffffffff8111156113fe575f5ffd5b8201601f8101841361140e575f5ffd5b610a6184825160208401611361565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03811681146100bd575f5ffd5b5f6040828403128015611456575f5ffd5b506040805190810167ffffffffffffffff8111828210171561147a5761147a61120e565b604052825161148881611431565b8152602083015161149881611431565b60208201529392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b604081525f6114e460408301856114a4565b905063ffffffff831660208301529392505050565b5f60208284031215611509575f5ffd5b5051919050565b5f60208284031215611520575f5ffd5b8151610ba081611431565b5f6020828403121561153b575f5ffd5b81518015158114610ba0575f5ffd5b5f81518060208401855e5f93019283525090919050565b5f61156c828461154a565b6e2f7363726970742f6f75747075742f60881b8152600f019392505050565b5f611596828461154a565b602f60f81b81526001019392505050565b5f6115b2828461154a565b64173539b7b760d91b81526005019392505050565b5f610edb6115de6115d8848861154a565b8661154a565b8461154a565b602081525f610f5e60208301846114a4565b604081525f61160860408301856114a4565b8281036020840152610edb81856114a4565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610f6157610f6161161a565b80820180821115610f6157610f6161161a565b5f8261166e57634e487b7160e01b5f52601260045260245ffd5b500690565b604081525f61168560408301856114a4565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220b2a3eaf248eb9d1c152629a7bb794f85b69c12fdd729e6b74accef839791583564736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\x01\0\x01b\xFF\0\xFF\x19\x90\x91\x16\x17\x90U`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16s_\xBD\xB21Vx\xAF\xEC\xB3g\xF02\xD9?d/d\x18\n\xA3\x17\x90U4\x80\x15`GW__\xFD[Pa\x17n\x80a\0U_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0MW\x80c\xF8\xCC\xBFG\x14a\0UW[__\xFD[a\0Ka\0|V[\0[a\0Ka\x01YV[`\x0CTa\0h\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x92WPFa\x059\x14[\x15a\0\xC0W`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x16\xDA`;\x919`\r\x90a\0\xBD\x90\x82a\x12\xA6V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01%W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01L\x91\x90\x81\x01\x90a\x13\xD8V[`\r\x90a\0\xBD\x90\x82a\x12\xA6V[_a\x01ba\x07sV[\x90P_a\x01ma\t\xE6V[\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x8BWa\x01\x8Ba\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xB4W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xD3Wa\x01\xD3a\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xFCW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x1BWa\x02\x1Ba\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02DW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[`\x0ET\x81\x10\x15a\x03\xB0W_a\x02\xE6`\r\x80Ta\x02d\x90a\x12\"V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\x90\x90a\x12\"V[\x80\x15a\x02\xDBW\x80`\x1F\x10a\x02\xB2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xDBV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xBEW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\niV[P\x90P\x80\x85\x83\x81Q\x81\x10a\x02\xFCWa\x02\xFCa\x14\x1DV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x037Wa\x037a\x14\x1DV[` \x02` \x01\x01\x81\x81RPPa\x03\x8A\x82_\x1B`@Q` \x01a\x03[\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0BdV[\x83\x83\x81Q\x81\x10a\x03\x9CWa\x03\x9Ca\x14\x1DV[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x02IV[P_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xF8W__\xFD[PZ\xF1\x15\x80\x15a\x04\nW=__>=_\xFD[PPPPa\x04\x19_\x84\x84a\x0B\xA7V[\x83Qa\x04&\x90\x84\x83a\x0B\xA7V[_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04mW__\xFD[PZ\xF1\x15\x80\x15a\x04\x7FW=__>=_\xFD[P_\x92PPP[`\x0ET\x81\x10\x15a\x07kW`\r\x80T_\x91`x\x91\x83\x91a\x05*\x91a\x04\xA8\x90a\x12\"V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xD4\x90a\x12\"V[\x80\x15a\x05\x1FW\x80`\x1F\x10a\x04\xF6Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\x1FV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\x02W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x85a\niV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05xW__\xFD[PZ\xF1\x15\x80\x15a\x05\x8AW=__>=_\xFD[PP`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x1C`\x84\x82\x01R\x7Ftest_modify_operator_details\0\0\0\0`\xA4\x82\x01R`$\x81\x01\x88\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xAC\xD5\xBA\xA2\x91P`\xC4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x11W__\xFD[PZ\xF1\x15\x80\x15a\x06#W=__>=_\xFD[PPPP\x88``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xF1ar\xB0`@Q\x80``\x01`@R\x80\x8A\x88\x81Q\x81\x10a\x06WWa\x06Wa\x14\x1DV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85c\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xD2\x91\x90\x81Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x84\x01Q\x90\x91\x16\x90\x82\x01R`@\x91\x82\x01Qc\xFF\xFF\xFF\xFF\x16\x91\x81\x01\x91\x90\x91R``\x01\x90V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xE9W__\xFD[PZ\xF1\x15\x80\x15a\x06\xFBW=__>=_\xFD[PPPP_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07FW__\xFD[PZ\xF1\x15\x80\x15a\x07XW=__>=_\xFD[PP`\x01\x90\x95\x01\x94Pa\x04\x86\x93PPPPV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\x07\xF2`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\x0C\xF2V[\x90P_a\x084\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x0E\xE4V[\x90P_a\x08v\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x0E\xE4V[\x90P_a\x08\xB8\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x0E\xE4V[\x90P_a\x08\xF2\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x0E\xE4V[\x90P_a\t4\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x0E\xE4V[\x90P_a\tk\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x0E\xE4V[\x90P_a\t\x90\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x16\x95`%\x919a\x0E\xE4V[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R_`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\n\x1B`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x17\x15`$\x919a\x0C\xF2V[\x90P_a\nJ\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x0FgV[\x90P_\x81\x80` \x01\x90Q\x81\x01\x90a\na\x91\x90a\x14EV[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R_\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\n\xA6\x90\x87\x90\x87\x90`\x04\x01a\x14\xD2V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xE5\x91\x90a\x14\xF9V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0B7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B[\x91\x90a\x15\x10V[\x91P\x92P\x92\x90PV[_a\x0Bp\x84\x84\x84a\x0F\xE4V[\x90Pa\x0B\xA0`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x11\xA1V[\x93\x92PPPV[_[\x82Q\x81\x10\x15a\x0C\xECW`\x01`\x01`\xA0\x1B\x03\x84\x16a\x0C.W\x82\x81\x81Q\x81\x10a\x0B\xD2Wa\x0B\xD2a\x14\x1DV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\x0B\xF8Wa\x0B\xF8a\x14\x1DV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0C(W=__>=_\xFD[Pa\x0C\xE4V[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\x0COWa\x0COa\x14\x1DV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x0CiWa\x0Cia\x14\x1DV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xA2\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\xBEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xE2\x91\x90a\x15+V[P[`\x01\x01a\x0B\xA9V[PPPPV[``__Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r?W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\rf\x91\x90\x81\x01\x90a\x13\xD8V[`@Q` \x01a\rv\x91\x90a\x15aV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xD4W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xFB\x91\x90\x81\x01\x90a\x13\xD8V[`@Q` \x01a\x0E\x0B\x91\x90a\x15\x8BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x84`@Q` \x01a\x0E.\x91\x90a\x15\xA7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0Eo\x90\x86\x90\x86\x90\x86\x90` \x01a\x15\xC7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\x9A\x91\x90a\x15\xE4V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xB4W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\xDB\x91\x90\x81\x01\x90a\x13\xD8V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x0F\x1F\x90\x86\x90\x86\x90`\x04\x01a\x15\xF6V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F^\x91\x90a\x15\x10V[\x90P[\x92\x91PPV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x0F\xA3\x90\x86\x90\x86\x90`\x04\x01a\x15\xF6V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xBDW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0F^\x91\x90\x81\x01\x90a\x13\xD8V[_\x81\x83\x11\x15a\x10_W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x10oWP\x81\x84\x11\x15[\x15a\x10{WP\x82a\x0B\xA0V[_a\x10\x86\x84\x84a\x16.V[a\x10\x91\x90`\x01a\x16AV[\x90P`\x03\x85\x11\x15\x80\x15a\x10\xA3WP\x84\x81\x11[\x15a\x10\xBAWa\x10\xB2\x85\x85a\x16AV[\x91PPa\x0B\xA0V[a\x10\xC6`\x03_\x19a\x16.V[\x85\x10\x15\x80\x15a\x10\xDEWPa\x10\xDB\x85_\x19a\x16.V[\x81\x11[\x15a\x10\xF8Wa\x10\xEE\x85_\x19a\x16.V[a\x10\xB2\x90\x84a\x16.V[\x82\x85\x11\x15a\x11KW_a\x11\x0B\x84\x87a\x16.V[\x90P_a\x11\x18\x83\x83a\x16TV[\x90P\x80_\x03a\x11,W\x84\x93PPPPa\x0B\xA0V[`\x01a\x118\x82\x88a\x16AV[a\x11B\x91\x90a\x16.V[\x93PPPa\x11\x99V[\x83\x85\x10\x15a\x11\x99W_a\x11^\x86\x86a\x16.V[\x90P_a\x11k\x83\x83a\x16TV[\x90P\x80_\x03a\x11\x7FW\x85\x93PPPPa\x0B\xA0V[a\x11\x89\x81\x86a\x16.V[a\x11\x94\x90`\x01a\x16AV[\x93PPP[P\x93\x92PPPV[a\x11\xE6\x82\x82`@Q`$\x01a\x11\xB7\x92\x91\x90a\x16sV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x11\xEAV[PPV[a\0\xBD\x81\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x126W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x12TWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x12\xA1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x12\x7FWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x12\x9EW_\x81U`\x01\x01a\x12\x8BV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xC0Wa\x12\xC0a\x12\x0EV[a\x12\xD4\x81a\x12\xCE\x84Ta\x12\"V[\x84a\x12ZV[` `\x1F\x82\x11`\x01\x81\x14a\x13\x06W_\x83\x15a\x12\xEFWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x12\x9EV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x135W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x13\x15V[P\x84\x82\x10\x15a\x13RW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x13{Wa\x13{a\x12\x0EV[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x13\xAAWa\x13\xAAa\x12\x0EV[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x13\xC1W__\xFD[\x83\x83` \x83\x01^_` \x85\x83\x01\x01RP\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x13\xE8W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xFEW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x14\x0EW__\xFD[a\na\x84\x82Q` \x84\x01a\x13aV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBDW__\xFD[_`@\x82\x84\x03\x12\x80\x15a\x14VW__\xFD[P`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x14zWa\x14za\x12\x0EV[`@R\x82Qa\x14\x88\x81a\x141V[\x81R` \x83\x01Qa\x14\x98\x81a\x141V[` \x82\x01R\x93\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`@\x81R_a\x14\xE4`@\x83\x01\x85a\x14\xA4V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x15\tW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15 W__\xFD[\x81Qa\x0B\xA0\x81a\x141V[_` \x82\x84\x03\x12\x15a\x15;W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0B\xA0W__\xFD[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x15l\x82\x84a\x15JV[n/script/output/`\x88\x1B\x81R`\x0F\x01\x93\x92PPPV[_a\x15\x96\x82\x84a\x15JV[`/`\xF8\x1B\x81R`\x01\x01\x93\x92PPPV[_a\x15\xB2\x82\x84a\x15JV[d\x1759\xB7\xB7`\xD9\x1B\x81R`\x05\x01\x93\x92PPPV[_a\x0E\xDBa\x15\xDEa\x15\xD8\x84\x88a\x15JV[\x86a\x15JV[\x84a\x15JV[` \x81R_a\x0F^` \x83\x01\x84a\x14\xA4V[`@\x81R_a\x16\x08`@\x83\x01\x85a\x14\xA4V[\x82\x81\x03` \x84\x01Ra\x0E\xDB\x81\x85a\x14\xA4V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0FaWa\x0Faa\x16\x1AV[\x80\x82\x01\x80\x82\x11\x15a\x0FaWa\x0Faa\x16\x1AV[_\x82a\x16nWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x06\x90V[`@\x81R_a\x16\x85`@\x83\x01\x85a\x14\xA4V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 \xB2\xA3\xEA\xF2H\xEB\x9D\x1C\x15&)\xA7\xBByO\x85\xB6\x9C\x12\xFD\xD7)\xE6\xB7J\xCC\xEF\x83\x97\x91X5dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c04062261461004d578063f8ccbf4714610055575b5f5ffd5b61004b61007c565b005b61004b610159565b600c546100689062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610092575046610539145b156100c0576040518060600160405280603b81526020016116da603b9139600d906100bd90826112a6565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610125573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261014c91908101906113d8565b600d906100bd90826112a6565b5f610162610773565b90505f61016d6109e6565b90505f600e5467ffffffffffffffff81111561018b5761018b61120e565b6040519080825280602002602001820160405280156101b4578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156101d3576101d361120e565b6040519080825280602002602001820160405280156101fc578160200160208202803683370190505b5090505f600e5467ffffffffffffffff81111561021b5761021b61120e565b604051908082528060200260200182016040528015610244578160200160208202803683370190505b5090505f5b600e548110156103b0575f6102e6600d805461026490611222565b80601f016020809104026020016040519081016040528092919081815260200182805461029090611222565b80156102db5780601f106102b2576101008083540402835291602001916102db565b820191905f5260205f20905b8154815290600101906020018083116102be57829003601f168201915b505050505083610a69565b509050808583815181106102fc576102fc61141d565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f400008483815181106103375761033761141d565b60200260200101818152505061038a825f1b60405160200161035b91815260200190565b604051602081830303815290604052805190602001205f1c670de0b6b3a7640000678ac7230489e80000610b64565b83838151811061039c5761039c61141d565b602090810291909101015250600101610249565b505f5160206116ba5f395f51905f525f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156103f8575f5ffd5b505af115801561040a573d5f5f3e3d5ffd5b505050506104195f8484610ba7565b8351610426908483610ba7565b5f5160206116ba5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561046d575f5ffd5b505af115801561047f573d5f5f3e3d5ffd5b505f925050505b600e5481101561076b57600d80545f91607891839161052a916104a890611222565b80601f01602080910402602001604051908101604052809291908181526020018280546104d490611222565b801561051f5780601f106104f65761010080835404028352916020019161051f565b820191905f5260205f20905b81548152906001019060200180831161050257829003601f168201915b505050505085610a69565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d47906024015f604051808303815f87803b158015610578575f5ffd5b505af115801561058a573d5f5f3e3d5ffd5b5050600f5460405163566add5160e11b815260806004820152601c60848201527f746573745f6d6f646966795f6f70657261746f725f64657461696c730000000060a4820152602481018890524360448201524260648201526001600160a01b03909116925063acd5baa2915060c4015f604051808303815f87803b158015610611575f5ffd5b505af1158015610623573d5f5f3e3d5ffd5b5050505088606001516001600160a01b031663f16172b060405180606001604052808a88815181106106575761065761141d565b60200260200101516001600160a01b03168152602001866001600160a01b031681526020018563ffffffff168152506040518263ffffffff1660e01b81526004016106d2919081516001600160a01b0390811682526020808401519091169082015260409182015163ffffffff169181019190915260600190565b5f604051808303815f87803b1580156106e9575f5ffd5b505af11580156106fb573d5f5f3e3d5ffd5b505050505f5160206116ba5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610746575f5ffd5b505af1158015610758573d5f5f3e3d5ffd5b5050600190950194506104869350505050565b505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f6107f26040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610cf2565b90505f610834826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250610ee4565b90505f610876836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250610ee4565b90505f6108b8846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250610ee4565b90505f6108f285604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250610ee4565b90505f610934866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250610ee4565b90505f61096b87604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250610ee4565b90505f6109908860405180606001604052806025815260200161169560259139610ee4565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a08301525f60c083015290911660e082015292915050565b604080518082019091525f80825260208201525f610a1b60405180606001604052806024815260200161171560249139610cf2565b90505f610a4a826040518060400160405280600a8152602001692e61646472657373657360b01b815250610f67565b90505f81806020019051810190610a619190611445565b949350505050565b604051636229498b60e01b81525f908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610aa690879087906004016114d2565b602060405180830381865afa158015610ac1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae591906114f9565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303815f875af1158015610b37573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5b9190611510565b91509250929050565b5f610b70848484610fe4565b9050610ba06040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b815250826111a1565b9392505050565b5f5b8251811015610cec576001600160a01b038416610c2e57828181518110610bd257610bd261141d565b60200260200101516001600160a01b03166108fc838381518110610bf857610bf861141d565b602002602001015190811502906040515f60405180830381858888f19350505050158015610c28573d5f5f3e3d5ffd5b50610ce4565b836001600160a01b031663a9059cbb848381518110610c4f57610c4f61141d565b6020026020010151848481518110610c6957610c6961141d565b60200260200101516040518363ffffffff1660e01b8152600401610ca29291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610cbe573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce2919061152b565b505b600101610ba9565b50505050565b60605f5f5160206116ba5f395f51905f525f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d3f573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d6691908101906113d8565b604051602001610d769190611561565b60408051808303601f190181529082905263348051d760e11b825246600483015291505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa158015610dd4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610dfb91908101906113d8565b604051602001610e0b919061158b565b60405160208183030381529060405290505f84604051602001610e2e91906115a7565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610e6f908690869086906020016115c7565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610e9a91906115e4565b5f60405180830381865afa158015610eb4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610edb91908101906113d8565b95945050505050565b604051631e19e65760e01b81525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e65790610f1f90869086906004016115f6565b602060405180830381865afa158015610f3a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5e9190611510565b90505b92915050565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef190610fa390869086906004016115f6565b5f60405180830381865afa158015610fbd573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f5e91908101906113d8565b5f8183111561105f5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b82841015801561106f5750818411155b1561107b575082610ba0565b5f611086848461162e565b611091906001611641565b9050600385111580156110a357508481115b156110ba576110b28585611641565b915050610ba0565b6110c660035f1961162e565b85101580156110de57506110db855f1961162e565b81115b156110f8576110ee855f1961162e565b6110b2908461162e565b8285111561114b575f61110b848761162e565b90505f6111188383611654565b9050805f0361112c57849350505050610ba0565b60016111388288611641565b611142919061162e565b93505050611199565b83851015611199575f61115e868661162e565b90505f61116b8383611654565b9050805f0361117f57859350505050610ba0565b611189818661162e565b611194906001611641565b935050505b509392505050565b6111e682826040516024016111b7929190611673565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526111ea565b5050565b6100bd8180516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061123657607f821691505b60208210810361125457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156112a157805f5260205f20601f840160051c8101602085101561127f5750805b601f840160051c820191505b8181101561129e575f815560010161128b565b50505b505050565b815167ffffffffffffffff8111156112c0576112c061120e565b6112d4816112ce8454611222565b8461125a565b6020601f821160018114611306575f83156112ef5750848201515b5f19600385901b1c1916600184901b17845561129e565b5f84815260208120601f198516915b828110156113355787850151825560209485019460019092019101611315565b508482101561135257868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f5f67ffffffffffffffff84111561137b5761137b61120e565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff821117156113aa576113aa61120e565b6040528381529050808284018510156113c1575f5ffd5b8383602083015e5f60208583010152509392505050565b5f602082840312156113e8575f5ffd5b815167ffffffffffffffff8111156113fe575f5ffd5b8201601f8101841361140e575f5ffd5b610a6184825160208401611361565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03811681146100bd575f5ffd5b5f6040828403128015611456575f5ffd5b506040805190810167ffffffffffffffff8111828210171561147a5761147a61120e565b604052825161148881611431565b8152602083015161149881611431565b60208201529392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b604081525f6114e460408301856114a4565b905063ffffffff831660208301529392505050565b5f60208284031215611509575f5ffd5b5051919050565b5f60208284031215611520575f5ffd5b8151610ba081611431565b5f6020828403121561153b575f5ffd5b81518015158114610ba0575f5ffd5b5f81518060208401855e5f93019283525090919050565b5f61156c828461154a565b6e2f7363726970742f6f75747075742f60881b8152600f019392505050565b5f611596828461154a565b602f60f81b81526001019392505050565b5f6115b2828461154a565b64173539b7b760d91b81526005019392505050565b5f610edb6115de6115d8848861154a565b8661154a565b8461154a565b602081525f610f5e60208301846114a4565b604081525f61160860408301856114a4565b8281036020840152610edb81856114a4565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610f6157610f6161161a565b80820180821115610f6157610f6161161a565b5f8261166e57634e487b7160e01b5f52601260045260245ffd5b500690565b604081525f61168560408301856114a4565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220b2a3eaf248eb9d1c152629a7bb794f85b69c12fdd729e6b74accef839791583564736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0MW\x80c\xF8\xCC\xBFG\x14a\0UW[__\xFD[a\0Ka\0|V[\0[a\0Ka\x01YV[`\x0CTa\0h\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x92WPFa\x059\x14[\x15a\0\xC0W`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x16\xDA`;\x919`\r\x90a\0\xBD\x90\x82a\x12\xA6V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01%W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01L\x91\x90\x81\x01\x90a\x13\xD8V[`\r\x90a\0\xBD\x90\x82a\x12\xA6V[_a\x01ba\x07sV[\x90P_a\x01ma\t\xE6V[\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x8BWa\x01\x8Ba\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xB4W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xD3Wa\x01\xD3a\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xFCW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x1BWa\x02\x1Ba\x12\x0EV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02DW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[`\x0ET\x81\x10\x15a\x03\xB0W_a\x02\xE6`\r\x80Ta\x02d\x90a\x12\"V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\x90\x90a\x12\"V[\x80\x15a\x02\xDBW\x80`\x1F\x10a\x02\xB2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xDBV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xBEW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\niV[P\x90P\x80\x85\x83\x81Q\x81\x10a\x02\xFCWa\x02\xFCa\x14\x1DV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x037Wa\x037a\x14\x1DV[` \x02` \x01\x01\x81\x81RPPa\x03\x8A\x82_\x1B`@Q` \x01a\x03[\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0BdV[\x83\x83\x81Q\x81\x10a\x03\x9CWa\x03\x9Ca\x14\x1DV[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x02IV[P_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xF8W__\xFD[PZ\xF1\x15\x80\x15a\x04\nW=__>=_\xFD[PPPPa\x04\x19_\x84\x84a\x0B\xA7V[\x83Qa\x04&\x90\x84\x83a\x0B\xA7V[_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04mW__\xFD[PZ\xF1\x15\x80\x15a\x04\x7FW=__>=_\xFD[P_\x92PPP[`\x0ET\x81\x10\x15a\x07kW`\r\x80T_\x91`x\x91\x83\x91a\x05*\x91a\x04\xA8\x90a\x12\"V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xD4\x90a\x12\"V[\x80\x15a\x05\x1FW\x80`\x1F\x10a\x04\xF6Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\x1FV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\x02W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x85a\niV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05xW__\xFD[PZ\xF1\x15\x80\x15a\x05\x8AW=__>=_\xFD[PP`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x1C`\x84\x82\x01R\x7Ftest_modify_operator_details\0\0\0\0`\xA4\x82\x01R`$\x81\x01\x88\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xAC\xD5\xBA\xA2\x91P`\xC4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x11W__\xFD[PZ\xF1\x15\x80\x15a\x06#W=__>=_\xFD[PPPP\x88``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xF1ar\xB0`@Q\x80``\x01`@R\x80\x8A\x88\x81Q\x81\x10a\x06WWa\x06Wa\x14\x1DV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85c\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xD2\x91\x90\x81Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x84\x01Q\x90\x91\x16\x90\x82\x01R`@\x91\x82\x01Qc\xFF\xFF\xFF\xFF\x16\x91\x81\x01\x91\x90\x91R``\x01\x90V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xE9W__\xFD[PZ\xF1\x15\x80\x15a\x06\xFBW=__>=_\xFD[PPPP_Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07FW__\xFD[PZ\xF1\x15\x80\x15a\x07XW=__>=_\xFD[PP`\x01\x90\x95\x01\x94Pa\x04\x86\x93PPPPV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\x07\xF2`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\x0C\xF2V[\x90P_a\x084\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x0E\xE4V[\x90P_a\x08v\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x0E\xE4V[\x90P_a\x08\xB8\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x0E\xE4V[\x90P_a\x08\xF2\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x0E\xE4V[\x90P_a\t4\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x0E\xE4V[\x90P_a\tk\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x0E\xE4V[\x90P_a\t\x90\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x16\x95`%\x919a\x0E\xE4V[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R_`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\n\x1B`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x17\x15`$\x919a\x0C\xF2V[\x90P_a\nJ\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x0FgV[\x90P_\x81\x80` \x01\x90Q\x81\x01\x90a\na\x91\x90a\x14EV[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R_\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\n\xA6\x90\x87\x90\x87\x90`\x04\x01a\x14\xD2V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xE5\x91\x90a\x14\xF9V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0B7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B[\x91\x90a\x15\x10V[\x91P\x92P\x92\x90PV[_a\x0Bp\x84\x84\x84a\x0F\xE4V[\x90Pa\x0B\xA0`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x11\xA1V[\x93\x92PPPV[_[\x82Q\x81\x10\x15a\x0C\xECW`\x01`\x01`\xA0\x1B\x03\x84\x16a\x0C.W\x82\x81\x81Q\x81\x10a\x0B\xD2Wa\x0B\xD2a\x14\x1DV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\x0B\xF8Wa\x0B\xF8a\x14\x1DV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0C(W=__>=_\xFD[Pa\x0C\xE4V[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\x0COWa\x0COa\x14\x1DV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x0CiWa\x0Cia\x14\x1DV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xA2\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\xBEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xE2\x91\x90a\x15+V[P[`\x01\x01a\x0B\xA9V[PPPPV[``__Q` a\x16\xBA_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r?W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\rf\x91\x90\x81\x01\x90a\x13\xD8V[`@Q` \x01a\rv\x91\x90a\x15aV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xD4W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xFB\x91\x90\x81\x01\x90a\x13\xD8V[`@Q` \x01a\x0E\x0B\x91\x90a\x15\x8BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x84`@Q` \x01a\x0E.\x91\x90a\x15\xA7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0Eo\x90\x86\x90\x86\x90\x86\x90` \x01a\x15\xC7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\x9A\x91\x90a\x15\xE4V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xB4W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\xDB\x91\x90\x81\x01\x90a\x13\xD8V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x0F\x1F\x90\x86\x90\x86\x90`\x04\x01a\x15\xF6V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F^\x91\x90a\x15\x10V[\x90P[\x92\x91PPV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x0F\xA3\x90\x86\x90\x86\x90`\x04\x01a\x15\xF6V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xBDW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0F^\x91\x90\x81\x01\x90a\x13\xD8V[_\x81\x83\x11\x15a\x10_W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x10oWP\x81\x84\x11\x15[\x15a\x10{WP\x82a\x0B\xA0V[_a\x10\x86\x84\x84a\x16.V[a\x10\x91\x90`\x01a\x16AV[\x90P`\x03\x85\x11\x15\x80\x15a\x10\xA3WP\x84\x81\x11[\x15a\x10\xBAWa\x10\xB2\x85\x85a\x16AV[\x91PPa\x0B\xA0V[a\x10\xC6`\x03_\x19a\x16.V[\x85\x10\x15\x80\x15a\x10\xDEWPa\x10\xDB\x85_\x19a\x16.V[\x81\x11[\x15a\x10\xF8Wa\x10\xEE\x85_\x19a\x16.V[a\x10\xB2\x90\x84a\x16.V[\x82\x85\x11\x15a\x11KW_a\x11\x0B\x84\x87a\x16.V[\x90P_a\x11\x18\x83\x83a\x16TV[\x90P\x80_\x03a\x11,W\x84\x93PPPPa\x0B\xA0V[`\x01a\x118\x82\x88a\x16AV[a\x11B\x91\x90a\x16.V[\x93PPPa\x11\x99V[\x83\x85\x10\x15a\x11\x99W_a\x11^\x86\x86a\x16.V[\x90P_a\x11k\x83\x83a\x16TV[\x90P\x80_\x03a\x11\x7FW\x85\x93PPPPa\x0B\xA0V[a\x11\x89\x81\x86a\x16.V[a\x11\x94\x90`\x01a\x16AV[\x93PPP[P\x93\x92PPPV[a\x11\xE6\x82\x82`@Q`$\x01a\x11\xB7\x92\x91\x90a\x16sV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x11\xEAV[PPV[a\0\xBD\x81\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x126W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x12TWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x12\xA1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x12\x7FWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x12\x9EW_\x81U`\x01\x01a\x12\x8BV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xC0Wa\x12\xC0a\x12\x0EV[a\x12\xD4\x81a\x12\xCE\x84Ta\x12\"V[\x84a\x12ZV[` `\x1F\x82\x11`\x01\x81\x14a\x13\x06W_\x83\x15a\x12\xEFWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x12\x9EV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x135W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x13\x15V[P\x84\x82\x10\x15a\x13RW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x13{Wa\x13{a\x12\x0EV[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x13\xAAWa\x13\xAAa\x12\x0EV[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x13\xC1W__\xFD[\x83\x83` \x83\x01^_` \x85\x83\x01\x01RP\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x13\xE8W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xFEW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x14\x0EW__\xFD[a\na\x84\x82Q` \x84\x01a\x13aV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBDW__\xFD[_`@\x82\x84\x03\x12\x80\x15a\x14VW__\xFD[P`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x14zWa\x14za\x12\x0EV[`@R\x82Qa\x14\x88\x81a\x141V[\x81R` \x83\x01Qa\x14\x98\x81a\x141V[` \x82\x01R\x93\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`@\x81R_a\x14\xE4`@\x83\x01\x85a\x14\xA4V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x15\tW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15 W__\xFD[\x81Qa\x0B\xA0\x81a\x141V[_` \x82\x84\x03\x12\x15a\x15;W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0B\xA0W__\xFD[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x15l\x82\x84a\x15JV[n/script/output/`\x88\x1B\x81R`\x0F\x01\x93\x92PPPV[_a\x15\x96\x82\x84a\x15JV[`/`\xF8\x1B\x81R`\x01\x01\x93\x92PPPV[_a\x15\xB2\x82\x84a\x15JV[d\x1759\xB7\xB7`\xD9\x1B\x81R`\x05\x01\x93\x92PPPV[_a\x0E\xDBa\x15\xDEa\x15\xD8\x84\x88a\x15JV[\x86a\x15JV[\x84a\x15JV[` \x81R_a\x0F^` \x83\x01\x84a\x14\xA4V[`@\x81R_a\x16\x08`@\x83\x01\x85a\x14\xA4V[\x82\x81\x03` \x84\x01Ra\x0E\xDB\x81\x85a\x14\xA4V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0FaWa\x0Faa\x16\x1AV[\x80\x82\x01\x80\x82\x11\x15a\x0FaWa\x0Faa\x16\x1AV[_\x82a\x16nWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x06\x90V[`@\x81R_a\x16\x85`@\x83\x01\x85a\x14\xA4V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 \xB2\xA3\xEA\xF2H\xEB\x9D\x1C\x15&)\xA7\xBByO\x85\xB6\x9C\x12\xFD\xD7)\xE6\xB7J\xCC\xEF\x83\x97\x91X5dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
    ```solidity
    function setUp() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`UpdateOperators`](self) function calls.
    pub enum UpdateOperatorsCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl UpdateOperatorsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UpdateOperatorsCalls {
        const NAME: &'static str = "UpdateOperatorsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<UpdateOperatorsCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::setUp)
                    }
                    setUp
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UpdateOperatorsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(UpdateOperatorsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`UpdateOperators`](self) contract instance.

    See the [wrapper's documentation](`UpdateOperatorsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> UpdateOperatorsInstance<T, P, N> {
        UpdateOperatorsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<UpdateOperatorsInstance<T, P, N>>>
    {
        UpdateOperatorsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        UpdateOperatorsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`UpdateOperators`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`UpdateOperators`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct UpdateOperatorsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for UpdateOperatorsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UpdateOperatorsInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`UpdateOperators`](self) contract instance.

        See the [wrapper's documentation](`UpdateOperatorsInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<UpdateOperatorsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> UpdateOperatorsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> UpdateOperatorsInstance<T, P, N> {
            UpdateOperatorsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UpdateOperatorsInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
