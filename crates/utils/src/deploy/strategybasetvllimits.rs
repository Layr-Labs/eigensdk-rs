/**

Generated by the following Solidity interface...
```solidity
interface StrategyBaseTVLLimits {
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
    error BalanceExceedsMaxTotalDeposits();
    error CurrentlyPaused();
    error InputAddressZero();
    error InvalidNewPausedStatus();
    error MaxPerDepositExceedsMax();
    error NewSharesZero();
    error OnlyPauser();
    error OnlyStrategyManager();
    error OnlyUnderlyingToken();
    error OnlyUnpauser();
    error TotalSharesExceedsMax();
    error WithdrawalAmountExceedsTotalDeposits();

=======
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    event ExchangeRateEmitted(uint256 rate);
    event Initialized(uint8 version);
    event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);
    event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);
    event Paused(address indexed account, uint256 newPausedStatus);
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
=======
    event PauserRegistrySet(address pauserRegistry, address newPauserRegistry);
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    event StrategyTokenSet(address token, uint8 decimals);
    event Unpaused(address indexed account, uint256 newPausedStatus);

    constructor(address _strategyManager, address _pauserRegistry);

    function deposit(address token, uint256 amount) external returns (uint256 newShares);
    function explanation() external pure returns (string memory);
    function getTVLLimits() external view returns (uint256, uint256);
    function initialize(uint256 _maxPerDeposit, uint256 _maxTotalDeposits, address _underlyingToken) external;
    function initialize(address _underlyingToken) external;
    function maxPerDeposit() external view returns (uint256);
    function maxTotalDeposits() external view returns (uint256);
    function pause(uint256 newPausedStatus) external;
    function pauseAll() external;
    function paused(uint8 index) external view returns (bool);
    function paused() external view returns (uint256);
    function pauserRegistry() external view returns (address);
    function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) external;
    function shares(address user) external view returns (uint256);
    function sharesToUnderlying(uint256 amountShares) external view returns (uint256);
    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);
    function strategyManager() external view returns (address);
    function totalShares() external view returns (uint256);
    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);
    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);
    function underlyingToken() external view returns (address);
    function unpause(uint256 newPausedStatus) external;
    function userUnderlying(address user) external returns (uint256);
    function userUnderlyingView(address user) external view returns (uint256);
    function withdraw(address recipient, address token, uint256 amountShares) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_strategyManager",
        "type": "address",
        "internalType": "contract IStrategyManager"
      },
      {
        "name": "_pauserRegistry",
        "type": "address",
        "internalType": "contract IPauserRegistry"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deposit",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "contract IERC20"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "newShares",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "explanation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getTVLLimits",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_maxPerDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_maxTotalDeposits",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_underlyingToken",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_underlyingToken",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "maxPerDeposit",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxTotalDeposits",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [
      {
        "name": "newPausedStatus",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "pauseAll",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [
      {
        "name": "index",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pauserRegistry",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPauserRegistry"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setTVLLimits",
    "inputs": [
      {
        "name": "newMaxPerDeposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newMaxTotalDeposits",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shares",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sharesToUnderlying",
    "inputs": [
      {
        "name": "amountShares",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sharesToUnderlyingView",
    "inputs": [
      {
        "name": "amountShares",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "strategyManager",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IStrategyManager"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalShares",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "underlyingToShares",
    "inputs": [
      {
        "name": "amountUnderlying",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "underlyingToSharesView",
    "inputs": [
      {
        "name": "amountUnderlying",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "underlyingToken",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [
      {
        "name": "newPausedStatus",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "userUnderlying",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "userUnderlyingView",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdraw",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "token",
        "type": "address",
        "internalType": "contract IERC20"
      },
      {
        "name": "amountShares",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ExchangeRateEmitted",
    "inputs": [
      {
        "name": "rate",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MaxPerDepositUpdated",
    "inputs": [
      {
        "name": "previousValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MaxTotalDepositsUpdated",
    "inputs": [
      {
        "name": "previousValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newValue",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newPausedStatus",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "StrategyTokenSet",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": false,
        "internalType": "contract IERC20"
      },
      {
        "name": "decimals",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "StrategyTokenSet",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": false,
        "internalType": "contract IERC20"
      },
      {
        "name": "decimals",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newPausedStatus",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "BalanceExceedsMaxTotalDeposits",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CurrentlyPaused",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InputAddressZero",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidNewPausedStatus",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MaxPerDepositExceedsMax",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NewSharesZero",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyPauser",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyStrategyManager",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyUnderlyingToken",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyUnpauser",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TotalSharesExceedsMax",
    "inputs": []
  },
  {
    "type": "error",
    "name": "WithdrawalAmountExceedsTotalDeposits",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod StrategyBaseTVLLimits {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
    
=======
    ///0x60a060405234801561000f575f5ffd5b50604051611e87380380611e8783398101604081905261002e91610108565b6001600160a01b0381166080528061004461004b565b5050610135565b5f54610100900460ff16156100b65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff9081161015610106575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b5f60208284031215610118575f5ffd5b81516001600160a01b038116811461012e575f5ffd5b9392505050565b608051611d256101625f395f818161020e0152818161078f01528181610bbc0152610c840152611d255ff3fe608060405234801561000f575f5ffd5b5060043610610187575f3560e01c80635c975abb116100d9578063ab5921e111610093578063df6fadc11161006e578063df6fadc11461035d578063e3dae51c14610378578063f3e738751461038b578063fabc1cbc1461039e575f5ffd5b8063ab5921e114610322578063ce7c2ac214610337578063d9caed121461034a575f5ffd5b80635c975abb146102c057806361b01b5d146102c85780637a8b2637146102d1578063886f1195146102e45780638c871019146102fc5780638f6a62401461030f575f5ffd5b80633a98ef3911610144578063485cc9551161011f578063485cc95514610263578063553ca5f814610276578063595c6a67146102895780635ac86ab714610291575f5ffd5b80633a98ef391461023057806343fe08b01461024757806347e7ef2414610250575f5ffd5b8063019e27291461018b57806310d67a2f146101a057806311c70c9d146101b3578063136439dd146101c65780632495a599146101d957806339b70e3814610209575b5f5ffd5b61019e61019936600461193a565b6103b1565b005b61019e6101ae366004611981565b61048e565b61019e6101c136600461199c565b61053e565b61019e6101d43660046119bc565b6105f0565b6032546101ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ec7f000000000000000000000000000000000000000000000000000000000000000081565b61023960335481565b604051908152602001610200565b61023960645481565b61023961025e3660046119d3565b610731565b61019e6102713660046119fd565b610972565b610239610284366004611981565b610a3a565b61019e610a4d565b6102b061029f366004611a42565b6001805460ff9092161b9081161490565b6040519015158152602001610200565b600154610239565b61023960655481565b6102396102df3660046119bc565b610b15565b5f546101ec906201000090046001600160a01b031681565b61023961030a3660046119bc565b610b5e565b61023961031d366004611981565b610b68565b61032a610b75565b6040516102009190611a5d565b610239610345366004611981565b610b95565b61019e610358366004611a92565b610c27565b60645460655460408051928352602083019190915201610200565b6102396103863660046119bc565b610e09565b6102396103993660046119bc565b610e40565b61019e6103ac3660046119bc565b610e4a565b5f54610100900460ff16158080156103cf57505f54600160ff909116105b806103e85750303b1580156103e857505f5460ff166001145b61040d5760405162461bcd60e51b815260040161040490611ad0565b60405180910390fd5b5f805460ff19166001179055801561042e575f805461ff0019166101001790555b6104388585610fa3565b61044283836110b0565b8015610487575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104de573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105029190611b1e565b6001600160a01b0316336001600160a01b0316146105325760405162461bcd60e51b815260040161040490611b39565b61053b816111fe565b50565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b29190611b1e565b6001600160a01b0316336001600160a01b0316146105e25760405162461bcd60e51b815260040161040490611b39565b6105ec8282610fa3565b5050565b5f5460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa15801561063a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061065e9190611b83565b61067a5760405162461bcd60e51b815260040161040490611ba2565b600154818116146106f35760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608401610404565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b600180545f9182918116036107845760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610404565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fc5760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610404565b6108068484611301565b6033545f6108166103e883611bfe565b90505f6103e86108246113e3565b61082e9190611bfe565b90505f61083b8783611c11565b9050806108488489611c24565b6108529190611c3b565b9550855f036108ba5760405162461bcd60e51b815260206004820152602e60248201527f5374726174656779426173652e6465706f7369743a206e65775368617265732060448201526d63616e6e6f74206265207a65726f60901b6064820152608401610404565b6108c48685611bfe565b60338190556f4b3b4ca85a86c47a098a223fffffffff101561094e5760405162461bcd60e51b815260206004820152603c60248201527f5374726174656779426173652e6465706f7369743a20746f74616c536861726560448201527f73206578636565647320604d41585f544f54414c5f53484152455360000000006064820152608401610404565b610967826103e86033546109629190611bfe565b611452565b505050505092915050565b5f54610100900460ff161580801561099057505f54600160ff909116105b806109a95750303b1580156109a957505f5460ff166001145b6109c55760405162461bcd60e51b815260040161040490611ad0565b5f805460ff1916600117905580156109e6575f805461ff0019166101001790555b6109f083836110b0565b8015610a35575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b5f610a476102df83610b95565b92915050565b5f5460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610a97573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610abb9190611b83565b610ad75760405162461bcd60e51b815260040161040490611ba2565b5f19600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b5f5f6103e8603354610b279190611bfe565b90505f6103e8610b356113e3565b610b3f9190611bfe565b905081610b4c8583611c24565b610b569190611c3b565b949350505050565b5f610a4782610e09565b5f610a4761039983610b95565b60606040518060800160405280604d8152602001611ca3604d9139905090565b604051633d3f06c960e11b81526001600160a01b0382811660048301523060248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690637a7e0d9290604401602060405180830381865afa158015610c03573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a479190611c5a565b60018054600290811603610c795760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610404565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cf15760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610404565b610cfc84848461149e565b60335480831115610d8b5760405162461bcd60e51b815260206004820152604d60248201527f5374726174656779426173652e77697468647261773a20616d6f756e7453686160448201527f726573206d757374206265206c657373207468616e206f7220657175616c207460648201526c6f20746f74616c53686172657360981b608482015260a401610404565b5f610d986103e883611bfe565b90505f6103e8610da66113e3565b610db09190611bfe565b90505f82610dbe8784611c24565b610dc89190611c3b565b9050610dd48685611c11565b603355610df4610de48284611c11565b6103e86033546109629190611bfe565b610dff888883611521565b5050505050505050565b5f5f6103e8603354610e1b9190611bfe565b90505f6103e8610e296113e3565b610e339190611bfe565b905080610b4c8386611c24565b5f610a4782610b15565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ebe9190611b1e565b6001600160a01b0316336001600160a01b031614610eee5760405162461bcd60e51b815260040161040490611b39565b600154198119600154191614610f6c5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608401610404565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610726565b60645460408051918252602082018490527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5910160405180910390a160655460408051918252602082018390527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a1808211156110a55760405162461bcd60e51b815260206004820152604b60248201527f53747261746567794261736554564c4c696d6974732e5f73657454564c4c696d60448201527f6974733a206d61785065724465706f7369742065786365656473206d6178546f60648201526a74616c4465706f7369747360a81b608482015260a401610404565b606491909155606555565b5f54610100900460ff1661111a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610404565b603280546001600160a01b0319166001600160a01b03841617905561113f815f611535565b7f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af55750760325f9054906101000a90046001600160a01b0316836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d59190611c71565b604080516001600160a01b03909316835260ff9091166020830152015b60405180910390a15050565b6001600160a01b03811661128c5760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a401610404565b5f54604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a15f80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60645481111561136b5760405162461bcd60e51b815260206004820152602f60248201527f53747261746567794261736554564c4c696d6974733a206d617820706572206460448201526e195c1bdcda5d08195e18d959591959608a1b6064820152608401610404565b6065546113766113e3565b11156113d95760405162461bcd60e51b815260206004820152602c60248201527f53747261746567794261736554564c4c696d6974733a206d6178206465706f7360448201526b1a5d1cc8195e18d95959195960a21b6064820152608401610404565b6105ec8282611620565b6032546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015611429573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061144d9190611c5a565b905090565b7fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be88161148684670de0b6b3a7640000611c24565b6114909190611c3b565b6040519081526020016111f2565b6032546001600160a01b03838116911614610a355760405162461bcd60e51b815260206004820152603b60248201527f5374726174656779426173652e77697468647261773a2043616e206f6e6c792060448201527f77697468647261772074686520737472617465677920746f6b656e00000000006064820152608401610404565b610a356001600160a01b038316848361169c565b5f546201000090046001600160a01b031615801561155b57506001600160a01b03821615155b6115dd5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a401610404565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26105ec826111fe565b6032546001600160a01b038381169116146105ec5760405162461bcd60e51b815260206004820152603660248201527f5374726174656779426173652e6465706f7369743a2043616e206f6e6c79206460448201527532b837b9b4ba103ab73232b9363cb4b733aa37b5b2b760511b6064820152608401610404565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610a35928692915f9161172b9185169084906117a8565b805190915015610a3557808060200190518101906117499190611b83565b610a355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610404565b60606117b684845f856117c0565b90505b9392505050565b6060824710156118215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610404565b6001600160a01b0385163b6118785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b5f5f866001600160a01b031685876040516118939190611c8c565b5f6040518083038185875af1925050503d805f81146118cd576040519150601f19603f3d011682016040523d82523d5f602084013e6118d2565b606091505b50915091506118e28282866118ed565b979650505050505050565b606083156118fc5750816117b9565b82511561190c5782518084602001fd5b8160405162461bcd60e51b81526004016104049190611a5d565b6001600160a01b038116811461053b575f5ffd5b5f5f5f5f6080858703121561194d575f5ffd5b8435935060208501359250604085013561196681611926565b9150606085013561197681611926565b939692955090935050565b5f60208284031215611991575f5ffd5b81356117b981611926565b5f5f604083850312156119ad575f5ffd5b50508035926020909101359150565b5f602082840312156119cc575f5ffd5b5035919050565b5f5f604083850312156119e4575f5ffd5b82356119ef81611926565b946020939093013593505050565b5f5f60408385031215611a0e575f5ffd5b8235611a1981611926565b91506020830135611a2981611926565b809150509250929050565b60ff8116811461053b575f5ffd5b5f60208284031215611a52575f5ffd5b81356117b981611a34565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f5f5f60608486031215611aa4575f5ffd5b8335611aaf81611926565b92506020840135611abf81611926565b929592945050506040919091013590565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b5f60208284031215611b2e575f5ffd5b81516117b981611926565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b5f60208284031215611b93575f5ffd5b815180151581146117b9575f5ffd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a4757610a47611bea565b81810381811115610a4757610a47611bea565b8082028115828204841417610a4757610a47611bea565b5f82611c5557634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611c6a575f5ffd5b5051919050565b5f60208284031215611c81575f5ffd5b81516117b981611a34565b5f82518060208501845e5f92019182525091905056fe4261736520537472617465677920696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a26469706673582212201a3a53117d7cbffcbbaaf50e52ad969dae88cb4d1814fb121f536c6ef441304564736f6c634300081b0033
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
        b"`\xC04a\x01xW`\x1Fa\x13\xC48\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01|W\x80\x84\x92`@\x94\x85R\x839\x81\x01\x03\x12a\x01xW\x80Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01xW` \x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x03a\x01xW\x15a\x01iW`\x80R`\xA0R_T`\xFF\x81`\x08\x1C\x16a\x01\x14W`\xFF\x80\x82\x16\x10a\0\xDAW[`@Qa\x123\x90\x81a\x01\x91\x829`\x80Q\x81\x81\x81a\x01[\x01R\x81\x81a\t\xB4\x01R\x81\x81a\n{\x01R\x81\x81a\r&\x01Ra\r\xD0\x01R`\xA0Q\x81\x81\x81a\x02\xE5\x01R\x81\x81a\x0BB\x01R\x81\x81a\x0C\x9D\x01Ra\x0F\xE4\x01R\xF3[`\xFF\x90\x81\x19\x16\x17_U\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98` `@Q`\xFF\x81R\xA1_a\0\x88V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x90\xFD[c9\xB1\x90\xBB`\xE1\x1B_R`\x04_\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x11\xC7\x0C\x9D\x14a\r\xADWP\x80c\x13d9\xDD\x14a\x0C\xF4W\x80c$\x95\xA5\x99\x14a\x0C\xCCW\x80c9\xB7\x0E8\x14a\x0C\x88W\x80c:\x98\xEF9\x14a\x0CkW\x80cC\xFE\x08\xB0\x14a\x0CNW\x80cG\xE7\xEF$\x14a\x0B\x18W\x80cU<\xA5\xF8\x14a\tyW\x80cY\\jg\x14a\nPW\x80cZ\xC8j\xB7\x14a\n\x1DW\x80c\\\x97Z\xBB\x14a\n\0W\x80ca\xB0\x1B]\x14a\t\xE3W\x80cz\x8B&7\x14a\x02>W\x80c\x88o\x11\x95\x14a\t\x9FW\x80c\x8C\x87\x10\x19\x14a\x02dW\x80c\x8Fjb@\x14a\tyW\x80c\xA6\xAB6\xF2\x14a\x08:W\x80c\xABY!\xE1\x14a\x07\xA3W\x80c\xC4\xD6m\xE8\x14a\x05\x8DW\x80c\xCE|*\xC2\x14a\x05jW\x80c\xD9\xCA\xED\x12\x14a\x02\xA6W\x80c\xDFo\xAD\xC1\x14a\x02\x82W\x80c\xE3\xDA\xE5\x1C\x14a\x02dW\x80c\xF3\xE78u\x14a\x02>Wc\xFA\xBC\x1C\xBC\x14a\x01/W_\x80\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`@Qcu[6\xBD`\xE1\x1B\x81R`\x04\x805\x91\x90` \x90\x82\x90\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x02\0W[P`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xF1W`\x01T\x19\x81\x19\x81\x16\x03a\x01\xE2W\x80`\x01U`@Q\x90\x81R\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C` 3\x92\xA2\0[c\xC6\x1D\xCA]`\xE0\x1B_R`\x04_\xFD[cyH!\xFF`\xE0\x1B_R`\x04_\xFD[a\x02\"\x91P` =` \x11a\x02(W[a\x02\x1A\x81\x83a\x0E\x87V[\x81\x01\x90a\x0E\xA9V[_a\x01\x93V[P=a\x02\x10V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\`\x045a\x0F\x1EV[`@Q\x90\x81R\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\`\x045a\x10FV[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@`dT`eT\x82Q\x91\x82R` \x82\x01R\xF3[4a\x02:W``6`\x03\x19\x01\x12a\x02:Wa\x02\xBFa\x0EGV[`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x03a\x02:W`D5\x91`\x02\x80`\x01T\x16\x14a\x05[W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x163\x03a\x05LWa\x03\x1C\x90a\x11{V[`3T\x80\x83\x11a\x05=Wa\x03\xE8\x81\x01\x80\x82\x11a\x05)Wa\x03:a\x10\xEBV[\x91a\x03\xE8\x83\x01\x80\x93\x11a\x05)Wa\x03ha\x03`a\x03r\x93a\x03[\x88\x87a\x0E\xEDV[a\x0F\0V[\x95\x86\x92a\x0E\xE0V[\x92\x83`3Ua\x0E\xE0V[\x90a\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x03\x88\x91a\x11(V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B` \x82\x01\x90\x81R`\x01`\x01`\xA0\x1B\x03\x90\x94\x16`$\x82\x01R`D\x80\x82\x01\x93\x90\x93R\x91\x82Ra\x03\xC1`d\x83a\x0E\x87V[`@\x92\x83Q\x92a\x03\xD1\x85\x85a\x0E\x87V[` \x84R\x7FSafeERC20: low-level call failed` \x85\x01R\x82;\x15a\x04\xE5WQ_\x92\x83\x92\x90\x83\x90Z\xF1\x90=\x15a\x04\xD9W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC5W\x83Qa\x04M\x93\x90\x91a\x04?`\x1F\x82\x01`\x1F\x19\x16` \x01\x84a\x0E\x87V[\x82R=_` \x84\x01>a\x11\xA1V[\x80Q\x90\x81a\x04WW\0[` \x80a\x04h\x93\x83\x01\x01\x91\x01a\x0E\xC8V[\x15a\x04oW\0[QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x90\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\x04M\x91``\x90a\x11\xA1V[\x84QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\x0BF\x9D\xF3`\xE4\x1B_R`\x04_\xFD[cH\xDAqO`\xE0\x1B_R`\x04_\xFD[c\x84\nH\xD5`\xE0\x1B_R`\x04_\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\a\x05\x88a\x0EGV[a\x0F\xB4V[4a\x02:W` 6`\x03\x19\x01\x12a\x02:Wa\x05\xA6a\x0EGV[_T`\xFF\x81`\x08\x1C\x16\x15\x90\x81\x80\x92a\x07\x96W[\x80\x15a\x07\x7FW[a\x05\xC9\x90a\x0FQV[`\xFF\x19\x81\x16`\x01\x17_U\x81a\x07nW[P_T\x91`\xFF\x83`\x08\x1C\x16\x15a\x07\x15W`\x01\x80`\xA0\x1B\x03\x16\x80k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`2T\x16\x17`2U_`\x01U`@Q_\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2`@Qc1<\xE5g`\xE0\x1B\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02/W_\x91a\x06\xB9W[P\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07\x91`\xFF`@\x92\x83Q\x92\x83R\x16` \x82\x01R\xA1a\x06\x85W\0[a\xFF\0\x19\x16_U\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98` `@Q`\x01\x81R\xA1\0[\x90P` \x81=` \x11a\x07\rW[\x81a\x06\xD4` \x93\x83a\x0E\x87V[\x81\x01\x03\x12a\x02:WQ`\xFF\x81\x16\x81\x03a\x02:W\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07a\x06KV[=\x91Pa\x06\xC7V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x90\xFD[a\xFF\xFF\x19\x16a\x01\x01\x17_U\x82a\x05\xD9V[P0;\x15\x80\x15a\x05\xC0WP`\xFF\x81\x16`\x01\x14a\x05\xC0V[P`\x01`\xFF\x82\x16\x10a\x05\xB9V[4a\x02:W_6`\x03\x19\x01\x12a\x02:Wa\x086`@Qa\x07\xC4`\x80\x82a\x0E\x87V[`M\x81R\x7FBase Strategy implementation to ` \x82\x01R\x7Finherit from for more complex im`@\x82\x01Rlplementations`\x98\x1B``\x82\x01R`@Q\x91\x82\x91\x82a\x0E]V[\x03\x90\xF3[4a\x02:W``6`\x03\x19\x01\x12a\x02:W`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x02:W_T`\xFF\x81`\x08\x1C\x16\x15\x90\x81\x80\x92a\tlW[\x80\x15a\tUW[a\x08\x83\x90a\x0FQV[`\xFF\x19\x81\x16`\x01\x17_U\x81a\tDW[Pa\x08\xA2`$5`\x045a\x10xV[_T\x91`\xFF\x83`\x08\x1C\x16\x15a\x07\x15W\x80k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`2T\x16\x17`2U_`\x01U`@Q_\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2`@Qc1<\xE5g`\xE0\x1B\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02/W_\x91a\x06\xB9WP\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07\x91`\xFF`@\x92\x83Q\x92\x83R\x16` \x82\x01R\xA1a\x06\x85W\0[a\xFF\xFF\x19\x16a\x01\x01\x17_U\x82a\x08\x93V[P0;\x15\x80\x15a\x08zWP`\xFF\x81\x16`\x01\x14a\x08zV[P`\x01`\xFF\x82\x16\x10a\x08sV[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\a\t\x9Aa\x05\x88a\x0EGV[a\x0F\x1EV[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `eT`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `\x01T`@Q\x90\x81R\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`\x045`\xFF\x81\x16\x80\x91\x03a\x02:W`\x01` \x91\x1B\x80`\x01T\x16\x14`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R` \x81`$\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\n\xE9W[P\x15a\n\xDAW_\x19`\x01U`@Q_\x19\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2\0[c\x1Dw\xD4w`\xE2\x1B_R`\x04_\xFD[a\x0B\x0B\x91P` =` \x11a\x0B\x11W[a\x0B\x03\x81\x83a\x0E\x87V[\x81\x01\x90a\x0E\xC8V[\x81a\n\xB3V[P=a\n\xF9V[4a\x02:W`@6`\x03\x19\x01\x12a\x02:Wa\x0B1a\x0EGV[`$5\x90`\x01\x80\x80T\x16\x14a\x05[W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x163\x03a\x05LW`dT\x82\x11a\x0C?Wa\x0B\x81a\x10\xEBV[`eT\x10a\x0C0Wa\x0B\x92\x90a\x11{V[`3T\x90a\x03\xE8\x82\x01\x80\x83\x11a\x05)Wa\x0B\xAAa\x10\xEBV[\x91a\x03\xE8\x83\x01\x80\x93\x11a\x05)Wa\x03[a\x0B\xCE\x92a\x0B\xC8\x83\x86a\x0E\xE0V[\x92a\x0E\xEDV[\x90\x81\x15a\x0C!W\x81\x83\x01\x80\x93\x11a\x05)W\x82`3UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x83\x11a\x0C\x12Wa\x03\xE8\x83\x01\x80\x93\x11a\x05)W` \x92a\x02\\\x91a\x11(V[c/\x14\xE8\xA3`\xE1\x1B_R`\x04_\xFD[c\x0C9.\xD3`\xE1\x1B_R`\x04_\xFD[c\xD8k\xAEg`\xE0\x1B_R`\x04_\xFD[c\x05+\x07\xB7`\xE2\x1B_R`\x04_\xFD[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `dT`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `3T`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`2T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x81\x01\x91\x90\x91R5\x90` \x81`$\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\r\x8EW[P\x15a\n\xDAW`\x01T\x81\x81\x16\x03a\x01\xE2W\x80`\x01U`@Q\x90\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2\0[a\r\xA7\x91P` =` \x11a\x0B\x11Wa\x0B\x03\x81\x83a\x0E\x87V[\x82a\r^V[4a\x02:W`@6`\x03\x19\x01\x12a\x02:Wcu[6\xBD`\xE1\x1B\x81R` \x81`\x04\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x0E(W[P`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xF1Wa\x0E&`$5`\x045a\x10xV[\0[a\x0EA\x91P` =` \x11a\x02(Wa\x02\x1A\x81\x83a\x0E\x87V[\x81a\x0E\x08V[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02:WV[` `@\x92\x81\x83R\x80Q\x91\x82\x91\x82\x82\x86\x01R\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC5W`@RV[\x90\x81` \x91\x03\x12a\x02:WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02:W\x90V[\x90\x81` \x91\x03\x12a\x02:WQ\x80\x15\x15\x81\x03a\x02:W\x90V[\x91\x90\x82\x03\x91\x82\x11a\x05)WV[\x81\x81\x02\x92\x91\x81\x15\x91\x84\x04\x14\x17\x15a\x05)WV[\x81\x15a\x0F\nW\x04\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[`3Ta\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x0F5a\x10\xEBV[a\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x0FN\x92a\x03[\x91a\x0E\xEDV[\x90V[\x15a\x0FXWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B`d\x82\x01R`\x84\x90\xFD[`@Qc\xFE$:\x17`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R0`$\x82\x01R\x90` \x90\x82\x90`D\x90\x82\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x10\x17WP\x90V[\x90P` \x81=` \x11a\x10>W[\x81a\x102` \x93\x83a\x0E\x87V[\x81\x01\x03\x12a\x02:WQ\x90V[=\x91Pa\x10%V[`3T\x90a\x03\xE8\x82\x01\x80\x92\x11a\x05)Wa\x10^a\x10\xEBV[\x90a\x03\xE8\x82\x01\x80\x92\x11a\x05)Wa\x0FN\x92a\x03[\x91a\x0E\xEDV[\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5`@`dT\x81Q\x90\x81R\x83` \x82\x01R\xA1\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R`@`eT\x81Q\x90\x81R\x84` \x82\x01R\xA1\x81\x81\x11a\x0C?W`dU`eUV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90` \x90\x82\x90`$\x90\x82\x90`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x10\x17WP\x90V[\x90\x81g\r\xE0\xB6\xB3\xA7d\0\0\x02\x91g\r\xE0\xB6\xB3\xA7d\0\0\x83\x04\x03a\x05)Wa\x11r` \x91\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x93a\x0F\0V[`@Q\x90\x81R\xA1V[`2T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x03a\x11\x92WV[c\x03\x12\xAB\xDD`\xE6\x1B_R`\x04_\xFD[\x90\x91\x90\x15a\x11\xADWP\x90V[\x81Q\x15a\x11\xBDWP\x80Q\x90` \x01\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R\x90\x81\x90a\x11\xD9\x90`\x04\x83\x01a\x0E]V[\x03\x90\xFD\xFE\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\xA2dipfsX\"\x12 \xD7\xE6q\x94\xD6\x9A\xD0J\x8D^\xD1\xE2r\"\xC2f\x17\x02>\xBAu\x04\xC7\x1EI\xA1\xA1\xD0`\xF3N\xF5dsolcC\0\x08\x1B\x003",
=======
        b"`\xA0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x1E\x878\x03\x80a\x1E\x87\x839\x81\x01`@\x81\x90Ra\0.\x91a\x01\x08V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80R\x80a\0Da\0KV[PPa\x015V[_Ta\x01\0\x90\x04`\xFF\x16\x15a\0\xB6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FInitializable: contract is initi`D\x82\x01Rfalizing`\xC8\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[_T`\xFF\x90\x81\x16\x10\x15a\x01\x06W_\x80T`\xFF\x19\x16`\xFF\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[V[_` \x82\x84\x03\x12\x15a\x01\x18W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01.W__\xFD[\x93\x92PPPV[`\x80Qa\x1D%a\x01b_9_\x81\x81a\x02\x0E\x01R\x81\x81a\x07\x8F\x01R\x81\x81a\x0B\xBC\x01Ra\x0C\x84\x01Ra\x1D%_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x87W_5`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xD9W\x80c\xABY!\xE1\x11a\0\x93W\x80c\xDFo\xAD\xC1\x11a\0nW\x80c\xDFo\xAD\xC1\x14a\x03]W\x80c\xE3\xDA\xE5\x1C\x14a\x03xW\x80c\xF3\xE78u\x14a\x03\x8BW\x80c\xFA\xBC\x1C\xBC\x14a\x03\x9EW__\xFD[\x80c\xABY!\xE1\x14a\x03\"W\x80c\xCE|*\xC2\x14a\x037W\x80c\xD9\xCA\xED\x12\x14a\x03JW__\xFD[\x80c\\\x97Z\xBB\x14a\x02\xC0W\x80ca\xB0\x1B]\x14a\x02\xC8W\x80cz\x8B&7\x14a\x02\xD1W\x80c\x88o\x11\x95\x14a\x02\xE4W\x80c\x8C\x87\x10\x19\x14a\x02\xFCW\x80c\x8Fjb@\x14a\x03\x0FW__\xFD[\x80c:\x98\xEF9\x11a\x01DW\x80cH\\\xC9U\x11a\x01\x1FW\x80cH\\\xC9U\x14a\x02cW\x80cU<\xA5\xF8\x14a\x02vW\x80cY\\jg\x14a\x02\x89W\x80cZ\xC8j\xB7\x14a\x02\x91W__\xFD[\x80c:\x98\xEF9\x14a\x020W\x80cC\xFE\x08\xB0\x14a\x02GW\x80cG\xE7\xEF$\x14a\x02PW__\xFD[\x80c\x01\x9E')\x14a\x01\x8BW\x80c\x10\xD6z/\x14a\x01\xA0W\x80c\x11\xC7\x0C\x9D\x14a\x01\xB3W\x80c\x13d9\xDD\x14a\x01\xC6W\x80c$\x95\xA5\x99\x14a\x01\xD9W\x80c9\xB7\x0E8\x14a\x02\tW[__\xFD[a\x01\x9Ea\x01\x996`\x04a\x19:V[a\x03\xB1V[\0[a\x01\x9Ea\x01\xAE6`\x04a\x19\x81V[a\x04\x8EV[a\x01\x9Ea\x01\xC16`\x04a\x19\x9CV[a\x05>V[a\x01\x9Ea\x01\xD46`\x04a\x19\xBCV[a\x05\xF0V[`2Ta\x01\xEC\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xEC\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x029`3T\x81V[`@Q\x90\x81R` \x01a\x02\0V[a\x029`dT\x81V[a\x029a\x02^6`\x04a\x19\xD3V[a\x071V[a\x01\x9Ea\x02q6`\x04a\x19\xFDV[a\trV[a\x029a\x02\x846`\x04a\x19\x81V[a\n:V[a\x01\x9Ea\nMV[a\x02\xB0a\x02\x9F6`\x04a\x1ABV[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02\0V[`\x01Ta\x029V[a\x029`eT\x81V[a\x029a\x02\xDF6`\x04a\x19\xBCV[a\x0B\x15V[_Ta\x01\xEC\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x029a\x03\n6`\x04a\x19\xBCV[a\x0B^V[a\x029a\x03\x1D6`\x04a\x19\x81V[a\x0BhV[a\x03*a\x0BuV[`@Qa\x02\0\x91\x90a\x1A]V[a\x029a\x03E6`\x04a\x19\x81V[a\x0B\x95V[a\x01\x9Ea\x03X6`\x04a\x1A\x92V[a\x0C'V[`dT`eT`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02\0V[a\x029a\x03\x866`\x04a\x19\xBCV[a\x0E\tV[a\x029a\x03\x996`\x04a\x19\xBCV[a\x0E@V[a\x01\x9Ea\x03\xAC6`\x04a\x19\xBCV[a\x0EJV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x03\xCFWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x03\xE8WP0;\x15\x80\x15a\x03\xE8WP_T`\xFF\x16`\x01\x14[a\x04\rW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1A\xD0V[`@Q\x80\x91\x03\x90\xFD[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x04.W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x048\x85\x85a\x0F\xA3V[a\x04B\x83\x83a\x10\xB0V[\x80\x15a\x04\x87W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xDEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x02\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x052W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[a\x05;\x81a\x11\xFEV[PV[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x8EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xB2\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[a\x05\xEC\x82\x82a\x0F\xA3V[PPV[_T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06^\x91\x90a\x1B\x83V[a\x06zW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B\xA2V[`\x01T\x81\x81\x16\x14a\x06\xF3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T_\x91\x82\x91\x81\x16\x03a\x07\x84W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x04V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x07\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x04V[a\x08\x06\x84\x84a\x13\x01V[`3T_a\x08\x16a\x03\xE8\x83a\x1B\xFEV[\x90P_a\x03\xE8a\x08$a\x13\xE3V[a\x08.\x91\x90a\x1B\xFEV[\x90P_a\x08;\x87\x83a\x1C\x11V[\x90P\x80a\x08H\x84\x89a\x1C$V[a\x08R\x91\x90a\x1C;V[\x95P\x85_\x03a\x08\xBAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x04\x04V[a\x08\xC4\x86\x85a\x1B\xFEV[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\tNW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[a\tg\x82a\x03\xE8`3Ta\tb\x91\x90a\x1B\xFEV[a\x14RV[PPPPP\x92\x91PPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\t\x90WP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\t\xA9WP0;\x15\x80\x15a\t\xA9WP_T`\xFF\x16`\x01\x14[a\t\xC5W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1A\xD0V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\t\xE6W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\t\xF0\x83\x83a\x10\xB0V[\x80\x15a\n5W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[_a\nGa\x02\xDF\x83a\x0B\x95V[\x92\x91PPV[_T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x97W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xBB\x91\x90a\x1B\x83V[a\n\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B\xA2V[_\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[__a\x03\xE8`3Ta\x0B'\x91\x90a\x1B\xFEV[\x90P_a\x03\xE8a\x0B5a\x13\xE3V[a\x0B?\x91\x90a\x1B\xFEV[\x90P\x81a\x0BL\x85\x83a\x1C$V[a\x0BV\x91\x90a\x1C;V[\x94\x93PPPPV[_a\nG\x82a\x0E\tV[_a\nGa\x03\x99\x83a\x0B\x95V[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x1C\xA3`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R_\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x03W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nG\x91\x90a\x1CZV[`\x01\x80T`\x02\x90\x81\x16\x03a\x0CyW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x04V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x0C\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x04V[a\x0C\xFC\x84\x84\x84a\x14\x9EV[`3T\x80\x83\x11\x15a\r\x8BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[_a\r\x98a\x03\xE8\x83a\x1B\xFEV[\x90P_a\x03\xE8a\r\xA6a\x13\xE3V[a\r\xB0\x91\x90a\x1B\xFEV[\x90P_\x82a\r\xBE\x87\x84a\x1C$V[a\r\xC8\x91\x90a\x1C;V[\x90Pa\r\xD4\x86\x85a\x1C\x11V[`3Ua\r\xF4a\r\xE4\x82\x84a\x1C\x11V[a\x03\xE8`3Ta\tb\x91\x90a\x1B\xFEV[a\r\xFF\x88\x88\x83a\x15!V[PPPPPPPPV[__a\x03\xE8`3Ta\x0E\x1B\x91\x90a\x1B\xFEV[\x90P_a\x03\xE8a\x0E)a\x13\xE3V[a\x0E3\x91\x90a\x1B\xFEV[\x90P\x80a\x0BL\x83\x86a\x1C$V[_a\nG\x82a\x0B\x15V[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\x9AW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xBE\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x0E\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\x0FlW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x07&V[`dT`@\x80Q\x91\x82R` \x82\x01\x84\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x91\x01`@Q\x80\x91\x03\x90\xA1`eT`@\x80Q\x91\x82R` \x82\x01\x83\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1\x80\x82\x11\x15a\x10\xA5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`K`$\x82\x01R\x7FStrategyBaseTVLLimits._setTVLLim`D\x82\x01R\x7Fits: maxPerDeposit exceeds maxTo`d\x82\x01RjtalDeposits`\xA8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[`d\x91\x90\x91U`eUV[_Ta\x01\0\x90\x04`\xFF\x16a\x11\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x11?\x81_a\x155V[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xB1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xD5\x91\x90a\x1CqV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[_T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1_\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`dT\x81\x11\x15a\x13kW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`eTa\x13va\x13\xE3V[\x11\x15a\x13\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[a\x05\xEC\x82\x82a\x16 V[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14)W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14M\x91\x90a\x1CZV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x14\x86\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x1C$V[a\x14\x90\x91\x90a\x1C;V[`@Q\x90\x81R` \x01a\x11\xF2V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\n5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[a\n5`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x16\x9CV[_Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x15[WP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x15\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x05\xEC\x82a\x11\xFEV[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x05\xECW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\n5\x92\x86\x92\x91_\x91a\x17+\x91\x85\x16\x90\x84\x90a\x17\xA8V[\x80Q\x90\x91P\x15a\n5W\x80\x80` \x01\x90Q\x81\x01\x90a\x17I\x91\x90a\x1B\x83V[a\n5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[``a\x17\xB6\x84\x84_\x85a\x17\xC0V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x18!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x18xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x04\x04V[__\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x18\x93\x91\x90a\x1C\x8CV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x18\xCDW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18\xD2V[``\x91P[P\x91P\x91Pa\x18\xE2\x82\x82\x86a\x18\xEDV[\x97\x96PPPPPPPV[``\x83\x15a\x18\xFCWP\x81a\x17\xB9V[\x82Q\x15a\x19\x0CW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x91\x90a\x1A]V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05;W__\xFD[____`\x80\x85\x87\x03\x12\x15a\x19MW__\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x19f\x81a\x19&V[\x91P``\x85\x015a\x19v\x81a\x19&V[\x93\x96\x92\x95P\x90\x93PPV[_` \x82\x84\x03\x12\x15a\x19\x91W__\xFD[\x815a\x17\xB9\x81a\x19&V[__`@\x83\x85\x03\x12\x15a\x19\xADW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x19\xCCW__\xFD[P5\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x19\xE4W__\xFD[\x825a\x19\xEF\x81a\x19&V[\x94` \x93\x90\x93\x015\x93PPPV[__`@\x83\x85\x03\x12\x15a\x1A\x0EW__\xFD[\x825a\x1A\x19\x81a\x19&V[\x91P` \x83\x015a\x1A)\x81a\x19&V[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x05;W__\xFD[_` \x82\x84\x03\x12\x15a\x1ARW__\xFD[\x815a\x17\xB9\x81a\x1A4V[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x1A\xA4W__\xFD[\x835a\x1A\xAF\x81a\x19&V[\x92P` \x84\x015a\x1A\xBF\x81a\x19&V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[` \x80\x82R`.\x90\x82\x01R\x7FInitializable: contract is alrea`@\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a\x1B.W__\xFD[\x81Qa\x17\xB9\x81a\x19&V[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a\x1B\x93W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x17\xB9W__\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\nGWa\nGa\x1B\xEAV[\x81\x81\x03\x81\x81\x11\x15a\nGWa\nGa\x1B\xEAV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\nGWa\nGa\x1B\xEAV[_\x82a\x1CUWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[_` \x82\x84\x03\x12\x15a\x1CjW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1C\x81W__\xFD[\x81Qa\x17\xB9\x81a\x1A4V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 \x1A:S\x11}|\xBF\xFC\xBB\xAA\xF5\x0ER\xAD\x96\x9D\xAE\x88\xCBM\x18\x14\xFB\x12\x1FSln\xF4A0EdsolcC\0\x08\x1B\x003",
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c90816311c70c9d14610dad57508063136439dd14610cf45780632495a59914610ccc57806339b70e3814610c885780633a98ef3914610c6b57806343fe08b014610c4e57806347e7ef2414610b18578063553ca5f814610979578063595c6a6714610a505780635ac86ab714610a1d5780635c975abb14610a0057806361b01b5d146109e35780637a8b26371461023e578063886f11951461099f5780638c871019146102645780638f6a624014610979578063a6ab36f21461083a578063ab5921e1146107a3578063c4d66de81461058d578063ce7c2ac21461056a578063d9caed12146102a6578063df6fadc114610282578063e3dae51c14610264578063f3e738751461023e5763fabc1cbc1461012f575f80fd5b3461023a57602036600319011261023a5760405163755b36bd60e11b81526004803591906020908290817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561022f575f91610200575b506001600160a01b031633036101f1576001541981198116036101e257806001556040519081527f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c60203392a2005b63c61dca5d60e01b5f5260045ffd5b63794821ff60e01b5f5260045ffd5b610222915060203d602011610228575b61021a8183610e87565b810190610ea9565b5f610193565b503d610210565b6040513d5f823e3d90fd5b5f80fd5b3461023a57602036600319011261023a57602061025c600435610f1e565b604051908152f35b3461023a57602036600319011261023a57602061025c600435611046565b3461023a575f36600319011261023a57604060645460655482519182526020820152f35b3461023a57606036600319011261023a576102bf610e47565b6024356001600160a01b03811680820361023a5760443591600280600154161461055b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361054c5761031c9061117b565b60335480831161053d576103e881018082116105295761033a6110eb565b916103e88301809311610529576103686103606103729361035b8887610eed565b610f00565b958692610ee0565b9283603355610ee0565b906103e881018091116105295761038891611128565b60405163a9059cbb60e01b602082019081526001600160a01b0390941660248201526044808201939093529182526103c1606483610e87565b6040928351926103d18585610e87565b602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020850152823b156104e557515f9283929083905af1903d156104d9573d67ffffffffffffffff81116104c557835161044d93909161043f601f8201601f191660200184610e87565b82523d5f602084013e6111a1565b8051908161045757005b602080610468938301019101610ec8565b1561046f57005b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b61044d916060906111a1565b845162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b630b469df360e41b5f5260045ffd5b6348da714f60e01b5f5260045ffd5b63840a48d560e01b5f5260045ffd5b3461023a57602036600319011261023a57602061025c610588610e47565b610fb4565b3461023a57602036600319011261023a576105a6610e47565b5f5460ff8160081c161590818092610796575b801561077f575b6105c990610f51565b60ff1981166001175f558161076e575b505f549160ff8360081c16156107155760018060a01b0316806bffffffffffffffffffffffff60a01b60325416176032555f6001556040515f81525f5160206111de5f395f51905f5260203392a260405163313ce56760e01b8152602081600481855afa90811561022f575f916106b9575b507f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af5575079160ff6040928351928352166020820152a161068557005b61ff0019165f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b90506020813d60201161070d575b816106d460209383610e87565b8101031261023a575160ff8116810361023a577f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af55750761064b565b3d91506106c7565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101175f55826105d9565b50303b1580156105c0575060ff81166001146105c0565b50600160ff8216106105b9565b3461023a575f36600319011261023a576108366040516107c4608082610e87565b604d81527f4261736520537472617465677920696d706c656d656e746174696f6e20746f2060208201527f696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d60408201526c706c656d656e746174696f6e7360981b606082015260405191829182610e5d565b0390f35b3461023a57606036600319011261023a576044356001600160a01b0381169081900361023a575f5460ff8160081c16159081809261096c575b8015610955575b61088390610f51565b60ff1981166001175f5581610944575b506108a2602435600435611078565b5f549160ff8360081c161561071557806bffffffffffffffffffffffff60a01b60325416176032555f6001556040515f81525f5160206111de5f395f51905f5260203392a260405163313ce56760e01b8152602081600481855afa90811561022f575f916106b957507f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af5575079160ff6040928351928352166020820152a161068557005b61ffff1916610101175f5582610893565b50303b15801561087a575060ff811660011461087a565b50600160ff821610610873565b3461023a57602036600319011261023a57602061025c61099a610588610e47565b610f1e565b3461023a575f36600319011261023a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461023a575f36600319011261023a576020606554604051908152f35b3461023a575f36600319011261023a576020600154604051908152f35b3461023a57602036600319011261023a5760043560ff811680910361023a5760016020911b806001541614604051908152f35b3461023a575f36600319011261023a5760405163237dfb4760e11b81523360048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561022f575f91610ae9575b5015610ada575f196001556040515f1981525f5160206111de5f395f51905f5260203392a2005b631d77d47760e21b5f5260045ffd5b610b0b915060203d602011610b11575b610b038183610e87565b810190610ec8565b81610ab3565b503d610af9565b3461023a57604036600319011261023a57610b31610e47565b602435906001808054161461055b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361054c576064548211610c3f57610b816110eb565b60655410610c3057610b929061117b565b603354906103e8820180831161052957610baa6110eb565b916103e883018093116105295761035b610bce92610bc88386610ee0565b92610eed565b908115610c215781830180931161052957826033556f4b3b4ca85a86c47a098a223fffffffff8311610c12576103e883018093116105295760209261025c91611128565b632f14e8a360e11b5f5260045ffd5b630c392ed360e11b5f5260045ffd5b63d86bae6760e01b5f5260045ffd5b63052b07b760e21b5f5260045ffd5b3461023a575f36600319011261023a576020606454604051908152f35b3461023a575f36600319011261023a576020603354604051908152f35b3461023a575f36600319011261023a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461023a575f36600319011261023a576032546040516001600160a01b039091168152602090f35b3461023a57602036600319011261023a5760405163237dfb4760e11b81523360048281019190915235906020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561022f575f91610d8e575b5015610ada57600154818116036101e257806001556040519081525f5160206111de5f395f51905f5260203392a2005b610da7915060203d602011610b1157610b038183610e87565b82610d5e565b3461023a57604036600319011261023a5763755b36bd60e11b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561022f575f91610e28575b506001600160a01b031633036101f157610e26602435600435611078565b005b610e41915060203d6020116102285761021a8183610e87565b81610e08565b600435906001600160a01b038216820361023a57565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff8211176104c557604052565b9081602091031261023a57516001600160a01b038116810361023a5790565b9081602091031261023a5751801515810361023a5790565b9190820391821161052957565b8181029291811591840414171561052957565b8115610f0a570490565b634e487b7160e01b5f52601260045260245ffd5b6033546103e8810180911161052957610f356110eb565b6103e8810180911161052957610f4e9261035b91610eed565b90565b15610f5857565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60405163fe243a1760e01b81526001600160a01b03918216600482015230602482015290602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa90811561022f575f91611017575090565b90506020813d60201161103e575b8161103260209383610e87565b8101031261023a575190565b3d9150611025565b603354906103e882018092116105295761105e6110eb565b906103e8820180921161052957610f4e9261035b91610eed565b7ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb560406064548151908152836020820152a17f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e45260406065548151908152846020820152a1818111610c3f57606455606555565b6032546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa90811561022f575f91611017575090565b9081670de0b6b3a76400000291670de0b6b3a7640000830403610529576111726020917fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be893610f00565b604051908152a1565b6032546001600160a01b0390811691160361119257565b630312abdd60e61b5f5260045ffd5b909190156111ad575090565b8151156111bd5750805190602001fd5b60405162461bcd60e51b81529081906111d99060048301610e5d565b0390fdfeab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3da2646970667358221220d7e67194d69ad04a8d5ed1e27222c26617023eba7504c71e49a1a1d060f34ef564736f6c634300081b0033
=======
    ///0x608060405234801561000f575f5ffd5b5060043610610187575f3560e01c80635c975abb116100d9578063ab5921e111610093578063df6fadc11161006e578063df6fadc11461035d578063e3dae51c14610378578063f3e738751461038b578063fabc1cbc1461039e575f5ffd5b8063ab5921e114610322578063ce7c2ac214610337578063d9caed121461034a575f5ffd5b80635c975abb146102c057806361b01b5d146102c85780637a8b2637146102d1578063886f1195146102e45780638c871019146102fc5780638f6a62401461030f575f5ffd5b80633a98ef3911610144578063485cc9551161011f578063485cc95514610263578063553ca5f814610276578063595c6a67146102895780635ac86ab714610291575f5ffd5b80633a98ef391461023057806343fe08b01461024757806347e7ef2414610250575f5ffd5b8063019e27291461018b57806310d67a2f146101a057806311c70c9d146101b3578063136439dd146101c65780632495a599146101d957806339b70e3814610209575b5f5ffd5b61019e61019936600461193a565b6103b1565b005b61019e6101ae366004611981565b61048e565b61019e6101c136600461199c565b61053e565b61019e6101d43660046119bc565b6105f0565b6032546101ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ec7f000000000000000000000000000000000000000000000000000000000000000081565b61023960335481565b604051908152602001610200565b61023960645481565b61023961025e3660046119d3565b610731565b61019e6102713660046119fd565b610972565b610239610284366004611981565b610a3a565b61019e610a4d565b6102b061029f366004611a42565b6001805460ff9092161b9081161490565b6040519015158152602001610200565b600154610239565b61023960655481565b6102396102df3660046119bc565b610b15565b5f546101ec906201000090046001600160a01b031681565b61023961030a3660046119bc565b610b5e565b61023961031d366004611981565b610b68565b61032a610b75565b6040516102009190611a5d565b610239610345366004611981565b610b95565b61019e610358366004611a92565b610c27565b60645460655460408051928352602083019190915201610200565b6102396103863660046119bc565b610e09565b6102396103993660046119bc565b610e40565b61019e6103ac3660046119bc565b610e4a565b5f54610100900460ff16158080156103cf57505f54600160ff909116105b806103e85750303b1580156103e857505f5460ff166001145b61040d5760405162461bcd60e51b815260040161040490611ad0565b60405180910390fd5b5f805460ff19166001179055801561042e575f805461ff0019166101001790555b6104388585610fa3565b61044283836110b0565b8015610487575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104de573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105029190611b1e565b6001600160a01b0316336001600160a01b0316146105325760405162461bcd60e51b815260040161040490611b39565b61053b816111fe565b50565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b29190611b1e565b6001600160a01b0316336001600160a01b0316146105e25760405162461bcd60e51b815260040161040490611b39565b6105ec8282610fa3565b5050565b5f5460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa15801561063a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061065e9190611b83565b61067a5760405162461bcd60e51b815260040161040490611ba2565b600154818116146106f35760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608401610404565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b600180545f9182918116036107845760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610404565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fc5760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610404565b6108068484611301565b6033545f6108166103e883611bfe565b90505f6103e86108246113e3565b61082e9190611bfe565b90505f61083b8783611c11565b9050806108488489611c24565b6108529190611c3b565b9550855f036108ba5760405162461bcd60e51b815260206004820152602e60248201527f5374726174656779426173652e6465706f7369743a206e65775368617265732060448201526d63616e6e6f74206265207a65726f60901b6064820152608401610404565b6108c48685611bfe565b60338190556f4b3b4ca85a86c47a098a223fffffffff101561094e5760405162461bcd60e51b815260206004820152603c60248201527f5374726174656779426173652e6465706f7369743a20746f74616c536861726560448201527f73206578636565647320604d41585f544f54414c5f53484152455360000000006064820152608401610404565b610967826103e86033546109629190611bfe565b611452565b505050505092915050565b5f54610100900460ff161580801561099057505f54600160ff909116105b806109a95750303b1580156109a957505f5460ff166001145b6109c55760405162461bcd60e51b815260040161040490611ad0565b5f805460ff1916600117905580156109e6575f805461ff0019166101001790555b6109f083836110b0565b8015610a35575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b5f610a476102df83610b95565b92915050565b5f5460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610a97573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610abb9190611b83565b610ad75760405162461bcd60e51b815260040161040490611ba2565b5f19600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b5f5f6103e8603354610b279190611bfe565b90505f6103e8610b356113e3565b610b3f9190611bfe565b905081610b4c8583611c24565b610b569190611c3b565b949350505050565b5f610a4782610e09565b5f610a4761039983610b95565b60606040518060800160405280604d8152602001611ca3604d9139905090565b604051633d3f06c960e11b81526001600160a01b0382811660048301523060248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690637a7e0d9290604401602060405180830381865afa158015610c03573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a479190611c5a565b60018054600290811603610c795760405162461bcd60e51b815260206004820152601960248201527814185d5cd8589b194e881a5b99195e081a5cc81c185d5cd959603a1b6044820152606401610404565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cf15760405162461bcd60e51b815260206004820181905260248201527f5374726174656779426173652e6f6e6c7953747261746567794d616e616765726044820152606401610404565b610cfc84848461149e565b60335480831115610d8b5760405162461bcd60e51b815260206004820152604d60248201527f5374726174656779426173652e77697468647261773a20616d6f756e7453686160448201527f726573206d757374206265206c657373207468616e206f7220657175616c207460648201526c6f20746f74616c53686172657360981b608482015260a401610404565b5f610d986103e883611bfe565b90505f6103e8610da66113e3565b610db09190611bfe565b90505f82610dbe8784611c24565b610dc89190611c3b565b9050610dd48685611c11565b603355610df4610de48284611c11565b6103e86033546109629190611bfe565b610dff888883611521565b5050505050505050565b5f5f6103e8603354610e1b9190611bfe565b90505f6103e8610e296113e3565b610e339190611bfe565b905080610b4c8386611c24565b5f610a4782610b15565b5f60029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ebe9190611b1e565b6001600160a01b0316336001600160a01b031614610eee5760405162461bcd60e51b815260040161040490611b39565b600154198119600154191614610f6c5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608401610404565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610726565b60645460408051918252602082018490527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5910160405180910390a160655460408051918252602082018390527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a1808211156110a55760405162461bcd60e51b815260206004820152604b60248201527f53747261746567794261736554564c4c696d6974732e5f73657454564c4c696d60448201527f6974733a206d61785065724465706f7369742065786365656473206d6178546f60648201526a74616c4465706f7369747360a81b608482015260a401610404565b606491909155606555565b5f54610100900460ff1661111a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610404565b603280546001600160a01b0319166001600160a01b03841617905561113f815f611535565b7f1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af55750760325f9054906101000a90046001600160a01b0316836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d59190611c71565b604080516001600160a01b03909316835260ff9091166020830152015b60405180910390a15050565b6001600160a01b03811661128c5760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a401610404565b5f54604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a15f80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60645481111561136b5760405162461bcd60e51b815260206004820152602f60248201527f53747261746567794261736554564c4c696d6974733a206d617820706572206460448201526e195c1bdcda5d08195e18d959591959608a1b6064820152608401610404565b6065546113766113e3565b11156113d95760405162461bcd60e51b815260206004820152602c60248201527f53747261746567794261736554564c4c696d6974733a206d6178206465706f7360448201526b1a5d1cc8195e18d95959195960a21b6064820152608401610404565b6105ec8282611620565b6032546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015611429573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061144d9190611c5a565b905090565b7fd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be88161148684670de0b6b3a7640000611c24565b6114909190611c3b565b6040519081526020016111f2565b6032546001600160a01b03838116911614610a355760405162461bcd60e51b815260206004820152603b60248201527f5374726174656779426173652e77697468647261773a2043616e206f6e6c792060448201527f77697468647261772074686520737472617465677920746f6b656e00000000006064820152608401610404565b610a356001600160a01b038316848361169c565b5f546201000090046001600160a01b031615801561155b57506001600160a01b03821615155b6115dd5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a401610404565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26105ec826111fe565b6032546001600160a01b038381169116146105ec5760405162461bcd60e51b815260206004820152603660248201527f5374726174656779426173652e6465706f7369743a2043616e206f6e6c79206460448201527532b837b9b4ba103ab73232b9363cb4b733aa37b5b2b760511b6064820152608401610404565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610a35928692915f9161172b9185169084906117a8565b805190915015610a3557808060200190518101906117499190611b83565b610a355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610404565b60606117b684845f856117c0565b90505b9392505050565b6060824710156118215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610404565b6001600160a01b0385163b6118785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b5f5f866001600160a01b031685876040516118939190611c8c565b5f6040518083038185875af1925050503d805f81146118cd576040519150601f19603f3d011682016040523d82523d5f602084013e6118d2565b606091505b50915091506118e28282866118ed565b979650505050505050565b606083156118fc5750816117b9565b82511561190c5782518084602001fd5b8160405162461bcd60e51b81526004016104049190611a5d565b6001600160a01b038116811461053b575f5ffd5b5f5f5f5f6080858703121561194d575f5ffd5b8435935060208501359250604085013561196681611926565b9150606085013561197681611926565b939692955090935050565b5f60208284031215611991575f5ffd5b81356117b981611926565b5f5f604083850312156119ad575f5ffd5b50508035926020909101359150565b5f602082840312156119cc575f5ffd5b5035919050565b5f5f604083850312156119e4575f5ffd5b82356119ef81611926565b946020939093013593505050565b5f5f60408385031215611a0e575f5ffd5b8235611a1981611926565b91506020830135611a2981611926565b809150509250929050565b60ff8116811461053b575f5ffd5b5f60208284031215611a52575f5ffd5b81356117b981611a34565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f5f5f60608486031215611aa4575f5ffd5b8335611aaf81611926565b92506020840135611abf81611926565b929592945050506040919091013590565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b5f60208284031215611b2e575f5ffd5b81516117b981611926565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b5f60208284031215611b93575f5ffd5b815180151581146117b9575f5ffd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a4757610a47611bea565b81810381811115610a4757610a47611bea565b8082028115828204841417610a4757610a47611bea565b5f82611c5557634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611c6a575f5ffd5b5051919050565b5f60208284031215611c81575f5ffd5b81516117b981611a34565b5f82518060208501845e5f92019182525091905056fe4261736520537472617465677920696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a26469706673582212201a3a53117d7cbffcbbaaf50e52ad969dae88cb4d1814fb121f536c6ef441304564736f6c634300081b0033
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x11\xC7\x0C\x9D\x14a\r\xADWP\x80c\x13d9\xDD\x14a\x0C\xF4W\x80c$\x95\xA5\x99\x14a\x0C\xCCW\x80c9\xB7\x0E8\x14a\x0C\x88W\x80c:\x98\xEF9\x14a\x0CkW\x80cC\xFE\x08\xB0\x14a\x0CNW\x80cG\xE7\xEF$\x14a\x0B\x18W\x80cU<\xA5\xF8\x14a\tyW\x80cY\\jg\x14a\nPW\x80cZ\xC8j\xB7\x14a\n\x1DW\x80c\\\x97Z\xBB\x14a\n\0W\x80ca\xB0\x1B]\x14a\t\xE3W\x80cz\x8B&7\x14a\x02>W\x80c\x88o\x11\x95\x14a\t\x9FW\x80c\x8C\x87\x10\x19\x14a\x02dW\x80c\x8Fjb@\x14a\tyW\x80c\xA6\xAB6\xF2\x14a\x08:W\x80c\xABY!\xE1\x14a\x07\xA3W\x80c\xC4\xD6m\xE8\x14a\x05\x8DW\x80c\xCE|*\xC2\x14a\x05jW\x80c\xD9\xCA\xED\x12\x14a\x02\xA6W\x80c\xDFo\xAD\xC1\x14a\x02\x82W\x80c\xE3\xDA\xE5\x1C\x14a\x02dW\x80c\xF3\xE78u\x14a\x02>Wc\xFA\xBC\x1C\xBC\x14a\x01/W_\x80\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`@Qcu[6\xBD`\xE1\x1B\x81R`\x04\x805\x91\x90` \x90\x82\x90\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x02\0W[P`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xF1W`\x01T\x19\x81\x19\x81\x16\x03a\x01\xE2W\x80`\x01U`@Q\x90\x81R\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C` 3\x92\xA2\0[c\xC6\x1D\xCA]`\xE0\x1B_R`\x04_\xFD[cyH!\xFF`\xE0\x1B_R`\x04_\xFD[a\x02\"\x91P` =` \x11a\x02(W[a\x02\x1A\x81\x83a\x0E\x87V[\x81\x01\x90a\x0E\xA9V[_a\x01\x93V[P=a\x02\x10V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\`\x045a\x0F\x1EV[`@Q\x90\x81R\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\`\x045a\x10FV[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@`dT`eT\x82Q\x91\x82R` \x82\x01R\xF3[4a\x02:W``6`\x03\x19\x01\x12a\x02:Wa\x02\xBFa\x0EGV[`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x03a\x02:W`D5\x91`\x02\x80`\x01T\x16\x14a\x05[W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x163\x03a\x05LWa\x03\x1C\x90a\x11{V[`3T\x80\x83\x11a\x05=Wa\x03\xE8\x81\x01\x80\x82\x11a\x05)Wa\x03:a\x10\xEBV[\x91a\x03\xE8\x83\x01\x80\x93\x11a\x05)Wa\x03ha\x03`a\x03r\x93a\x03[\x88\x87a\x0E\xEDV[a\x0F\0V[\x95\x86\x92a\x0E\xE0V[\x92\x83`3Ua\x0E\xE0V[\x90a\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x03\x88\x91a\x11(V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B` \x82\x01\x90\x81R`\x01`\x01`\xA0\x1B\x03\x90\x94\x16`$\x82\x01R`D\x80\x82\x01\x93\x90\x93R\x91\x82Ra\x03\xC1`d\x83a\x0E\x87V[`@\x92\x83Q\x92a\x03\xD1\x85\x85a\x0E\x87V[` \x84R\x7FSafeERC20: low-level call failed` \x85\x01R\x82;\x15a\x04\xE5WQ_\x92\x83\x92\x90\x83\x90Z\xF1\x90=\x15a\x04\xD9W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC5W\x83Qa\x04M\x93\x90\x91a\x04?`\x1F\x82\x01`\x1F\x19\x16` \x01\x84a\x0E\x87V[\x82R=_` \x84\x01>a\x11\xA1V[\x80Q\x90\x81a\x04WW\0[` \x80a\x04h\x93\x83\x01\x01\x91\x01a\x0E\xC8V[\x15a\x04oW\0[QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x90\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\x04M\x91``\x90a\x11\xA1V[\x84QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\x0BF\x9D\xF3`\xE4\x1B_R`\x04_\xFD[cH\xDAqO`\xE0\x1B_R`\x04_\xFD[c\x84\nH\xD5`\xE0\x1B_R`\x04_\xFD[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\a\x05\x88a\x0EGV[a\x0F\xB4V[4a\x02:W` 6`\x03\x19\x01\x12a\x02:Wa\x05\xA6a\x0EGV[_T`\xFF\x81`\x08\x1C\x16\x15\x90\x81\x80\x92a\x07\x96W[\x80\x15a\x07\x7FW[a\x05\xC9\x90a\x0FQV[`\xFF\x19\x81\x16`\x01\x17_U\x81a\x07nW[P_T\x91`\xFF\x83`\x08\x1C\x16\x15a\x07\x15W`\x01\x80`\xA0\x1B\x03\x16\x80k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`2T\x16\x17`2U_`\x01U`@Q_\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2`@Qc1<\xE5g`\xE0\x1B\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02/W_\x91a\x06\xB9W[P\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07\x91`\xFF`@\x92\x83Q\x92\x83R\x16` \x82\x01R\xA1a\x06\x85W\0[a\xFF\0\x19\x16_U\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98` `@Q`\x01\x81R\xA1\0[\x90P` \x81=` \x11a\x07\rW[\x81a\x06\xD4` \x93\x83a\x0E\x87V[\x81\x01\x03\x12a\x02:WQ`\xFF\x81\x16\x81\x03a\x02:W\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07a\x06KV[=\x91Pa\x06\xC7V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x90\xFD[a\xFF\xFF\x19\x16a\x01\x01\x17_U\x82a\x05\xD9V[P0;\x15\x80\x15a\x05\xC0WP`\xFF\x81\x16`\x01\x14a\x05\xC0V[P`\x01`\xFF\x82\x16\x10a\x05\xB9V[4a\x02:W_6`\x03\x19\x01\x12a\x02:Wa\x086`@Qa\x07\xC4`\x80\x82a\x0E\x87V[`M\x81R\x7FBase Strategy implementation to ` \x82\x01R\x7Finherit from for more complex im`@\x82\x01Rlplementations`\x98\x1B``\x82\x01R`@Q\x91\x82\x91\x82a\x0E]V[\x03\x90\xF3[4a\x02:W``6`\x03\x19\x01\x12a\x02:W`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x02:W_T`\xFF\x81`\x08\x1C\x16\x15\x90\x81\x80\x92a\tlW[\x80\x15a\tUW[a\x08\x83\x90a\x0FQV[`\xFF\x19\x81\x16`\x01\x17_U\x81a\tDW[Pa\x08\xA2`$5`\x045a\x10xV[_T\x91`\xFF\x83`\x08\x1C\x16\x15a\x07\x15W\x80k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`2T\x16\x17`2U_`\x01U`@Q_\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2`@Qc1<\xE5g`\xE0\x1B\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02/W_\x91a\x06\xB9WP\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07\x91`\xFF`@\x92\x83Q\x92\x83R\x16` \x82\x01R\xA1a\x06\x85W\0[a\xFF\xFF\x19\x16a\x01\x01\x17_U\x82a\x08\x93V[P0;\x15\x80\x15a\x08zWP`\xFF\x81\x16`\x01\x14a\x08zV[P`\x01`\xFF\x82\x16\x10a\x08sV[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W` a\x02\\a\t\x9Aa\x05\x88a\x0EGV[a\x0F\x1EV[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `eT`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `\x01T`@Q\x90\x81R\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`\x045`\xFF\x81\x16\x80\x91\x03a\x02:W`\x01` \x91\x1B\x80`\x01T\x16\x14`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01R` \x81`$\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\n\xE9W[P\x15a\n\xDAW_\x19`\x01U`@Q_\x19\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2\0[c\x1Dw\xD4w`\xE2\x1B_R`\x04_\xFD[a\x0B\x0B\x91P` =` \x11a\x0B\x11W[a\x0B\x03\x81\x83a\x0E\x87V[\x81\x01\x90a\x0E\xC8V[\x81a\n\xB3V[P=a\n\xF9V[4a\x02:W`@6`\x03\x19\x01\x12a\x02:Wa\x0B1a\x0EGV[`$5\x90`\x01\x80\x80T\x16\x14a\x05[W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x163\x03a\x05LW`dT\x82\x11a\x0C?Wa\x0B\x81a\x10\xEBV[`eT\x10a\x0C0Wa\x0B\x92\x90a\x11{V[`3T\x90a\x03\xE8\x82\x01\x80\x83\x11a\x05)Wa\x0B\xAAa\x10\xEBV[\x91a\x03\xE8\x83\x01\x80\x93\x11a\x05)Wa\x03[a\x0B\xCE\x92a\x0B\xC8\x83\x86a\x0E\xE0V[\x92a\x0E\xEDV[\x90\x81\x15a\x0C!W\x81\x83\x01\x80\x93\x11a\x05)W\x82`3UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x83\x11a\x0C\x12Wa\x03\xE8\x83\x01\x80\x93\x11a\x05)W` \x92a\x02\\\x91a\x11(V[c/\x14\xE8\xA3`\xE1\x1B_R`\x04_\xFD[c\x0C9.\xD3`\xE1\x1B_R`\x04_\xFD[c\xD8k\xAEg`\xE0\x1B_R`\x04_\xFD[c\x05+\x07\xB7`\xE2\x1B_R`\x04_\xFD[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `dT`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W` `3T`@Q\x90\x81R\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x02:W_6`\x03\x19\x01\x12a\x02:W`2T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x02:W` 6`\x03\x19\x01\x12a\x02:W`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x81\x01\x91\x90\x91R5\x90` \x81`$\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\r\x8EW[P\x15a\n\xDAW`\x01T\x81\x81\x16\x03a\x01\xE2W\x80`\x01U`@Q\x90\x81R_Q` a\x11\xDE_9_Q\x90_R` 3\x92\xA2\0[a\r\xA7\x91P` =` \x11a\x0B\x11Wa\x0B\x03\x81\x83a\x0E\x87V[\x82a\r^V[4a\x02:W`@6`\x03\x19\x01\x12a\x02:Wcu[6\xBD`\xE1\x1B\x81R` \x81`\x04\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x0E(W[P`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xF1Wa\x0E&`$5`\x045a\x10xV[\0[a\x0EA\x91P` =` \x11a\x02(Wa\x02\x1A\x81\x83a\x0E\x87V[\x81a\x0E\x08V[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02:WV[` `@\x92\x81\x83R\x80Q\x91\x82\x91\x82\x82\x86\x01R\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC5W`@RV[\x90\x81` \x91\x03\x12a\x02:WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02:W\x90V[\x90\x81` \x91\x03\x12a\x02:WQ\x80\x15\x15\x81\x03a\x02:W\x90V[\x91\x90\x82\x03\x91\x82\x11a\x05)WV[\x81\x81\x02\x92\x91\x81\x15\x91\x84\x04\x14\x17\x15a\x05)WV[\x81\x15a\x0F\nW\x04\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[`3Ta\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x0F5a\x10\xEBV[a\x03\xE8\x81\x01\x80\x91\x11a\x05)Wa\x0FN\x92a\x03[\x91a\x0E\xEDV[\x90V[\x15a\x0FXWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B`d\x82\x01R`\x84\x90\xFD[`@Qc\xFE$:\x17`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R0`$\x82\x01R\x90` \x90\x82\x90`D\x90\x82\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x10\x17WP\x90V[\x90P` \x81=` \x11a\x10>W[\x81a\x102` \x93\x83a\x0E\x87V[\x81\x01\x03\x12a\x02:WQ\x90V[=\x91Pa\x10%V[`3T\x90a\x03\xE8\x82\x01\x80\x92\x11a\x05)Wa\x10^a\x10\xEBV[\x90a\x03\xE8\x82\x01\x80\x92\x11a\x05)Wa\x0FN\x92a\x03[\x91a\x0E\xEDV[\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5`@`dT\x81Q\x90\x81R\x83` \x82\x01R\xA1\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R`@`eT\x81Q\x90\x81R\x84` \x82\x01R\xA1\x81\x81\x11a\x0C?W`dU`eUV[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90` \x90\x82\x90`$\x90\x82\x90`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15a\x02/W_\x91a\x10\x17WP\x90V[\x90\x81g\r\xE0\xB6\xB3\xA7d\0\0\x02\x91g\r\xE0\xB6\xB3\xA7d\0\0\x83\x04\x03a\x05)Wa\x11r` \x91\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x93a\x0F\0V[`@Q\x90\x81R\xA1V[`2T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x03a\x11\x92WV[c\x03\x12\xAB\xDD`\xE6\x1B_R`\x04_\xFD[\x90\x91\x90\x15a\x11\xADWP\x90V[\x81Q\x15a\x11\xBDWP\x80Q\x90` \x01\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R\x90\x81\x90a\x11\xD9\x90`\x04\x83\x01a\x0E]V[\x03\x90\xFD\xFE\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\xA2dipfsX\"\x12 \xD7\xE6q\x94\xD6\x9A\xD0J\x8D^\xD1\xE2r\"\xC2f\x17\x02>\xBAu\x04\xC7\x1EI\xA1\xA1\xD0`\xF3N\xF5dsolcC\0\x08\x1B\x003",
    );
    /**Custom error with signature `BalanceExceedsMaxTotalDeposits()` and selector `0xd86bae67`.
    ```solidity
    error BalanceExceedsMaxTotalDeposits();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BalanceExceedsMaxTotalDeposits {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BalanceExceedsMaxTotalDeposits> for UnderlyingRustTuple<'_> {
            fn from(value: BalanceExceedsMaxTotalDeposits) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BalanceExceedsMaxTotalDeposits {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BalanceExceedsMaxTotalDeposits {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BalanceExceedsMaxTotalDeposits()";
            const SELECTOR: [u8; 4] = [216u8, 107u8, 174u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CurrentlyPaused()` and selector `0x840a48d5`.
    ```solidity
    error CurrentlyPaused();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CurrentlyPaused {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CurrentlyPaused> for UnderlyingRustTuple<'_> {
            fn from(value: CurrentlyPaused) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CurrentlyPaused {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CurrentlyPaused {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CurrentlyPaused()";
            const SELECTOR: [u8; 4] = [132u8, 10u8, 72u8, 213u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InputAddressZero()` and selector `0x73632176`.
    ```solidity
    error InputAddressZero();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InputAddressZero {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InputAddressZero> for UnderlyingRustTuple<'_> {
            fn from(value: InputAddressZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InputAddressZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InputAddressZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InputAddressZero()";
            const SELECTOR: [u8; 4] = [115u8, 99u8, 33u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidNewPausedStatus()` and selector `0xc61dca5d`.
    ```solidity
    error InvalidNewPausedStatus();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidNewPausedStatus {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidNewPausedStatus> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidNewPausedStatus) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidNewPausedStatus {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidNewPausedStatus {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidNewPausedStatus()";
            const SELECTOR: [u8; 4] = [198u8, 29u8, 202u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MaxPerDepositExceedsMax()` and selector `0x14ac1edc`.
    ```solidity
    error MaxPerDepositExceedsMax();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MaxPerDepositExceedsMax {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MaxPerDepositExceedsMax> for UnderlyingRustTuple<'_> {
            fn from(value: MaxPerDepositExceedsMax) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MaxPerDepositExceedsMax {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MaxPerDepositExceedsMax {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MaxPerDepositExceedsMax()";
            const SELECTOR: [u8; 4] = [20u8, 172u8, 30u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NewSharesZero()` and selector `0x18725da6`.
    ```solidity
    error NewSharesZero();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NewSharesZero {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NewSharesZero> for UnderlyingRustTuple<'_> {
            fn from(value: NewSharesZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NewSharesZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NewSharesZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NewSharesZero()";
            const SELECTOR: [u8; 4] = [24u8, 114u8, 93u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OnlyPauser()` and selector `0x75df51dc`.
    ```solidity
    error OnlyPauser();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyPauser {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyPauser> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyPauser) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyPauser {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyPauser {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyPauser()";
            const SELECTOR: [u8; 4] = [117u8, 223u8, 81u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OnlyStrategyManager()` and selector `0x48da714f`.
    ```solidity
    error OnlyStrategyManager();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyStrategyManager {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyStrategyManager> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyStrategyManager) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyStrategyManager {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyStrategyManager {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyStrategyManager()";
            const SELECTOR: [u8; 4] = [72u8, 218u8, 113u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OnlyUnderlyingToken()` and selector `0xc4aaf740`.
    ```solidity
    error OnlyUnderlyingToken();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyUnderlyingToken {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyUnderlyingToken> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyUnderlyingToken) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyUnderlyingToken {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyUnderlyingToken {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyUnderlyingToken()";
            const SELECTOR: [u8; 4] = [196u8, 170u8, 247u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OnlyUnpauser()` and selector `0x794821ff`.
    ```solidity
    error OnlyUnpauser();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyUnpauser {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyUnpauser> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyUnpauser) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyUnpauser {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyUnpauser {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyUnpauser()";
            const SELECTOR: [u8; 4] = [121u8, 72u8, 33u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TotalSharesExceedsMax()` and selector `0x5e29d146`.
    ```solidity
    error TotalSharesExceedsMax();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TotalSharesExceedsMax {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TotalSharesExceedsMax> for UnderlyingRustTuple<'_> {
            fn from(value: TotalSharesExceedsMax) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TotalSharesExceedsMax {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TotalSharesExceedsMax {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TotalSharesExceedsMax()";
            const SELECTOR: [u8; 4] = [94u8, 41u8, 209u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `WithdrawalAmountExceedsTotalDeposits()` and selector `0xb469df30`.
    ```solidity
    error WithdrawalAmountExceedsTotalDeposits();
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct WithdrawalAmountExceedsTotalDeposits {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WithdrawalAmountExceedsTotalDeposits> for UnderlyingRustTuple<'_> {
            fn from(value: WithdrawalAmountExceedsTotalDeposits) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WithdrawalAmountExceedsTotalDeposits {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for WithdrawalAmountExceedsTotalDeposits {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "WithdrawalAmountExceedsTotalDeposits()";
            const SELECTOR: [u8; 4] = [180u8, 105u8, 223u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
=======
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x87W_5`\xE0\x1C\x80c\\\x97Z\xBB\x11a\0\xD9W\x80c\xABY!\xE1\x11a\0\x93W\x80c\xDFo\xAD\xC1\x11a\0nW\x80c\xDFo\xAD\xC1\x14a\x03]W\x80c\xE3\xDA\xE5\x1C\x14a\x03xW\x80c\xF3\xE78u\x14a\x03\x8BW\x80c\xFA\xBC\x1C\xBC\x14a\x03\x9EW__\xFD[\x80c\xABY!\xE1\x14a\x03\"W\x80c\xCE|*\xC2\x14a\x037W\x80c\xD9\xCA\xED\x12\x14a\x03JW__\xFD[\x80c\\\x97Z\xBB\x14a\x02\xC0W\x80ca\xB0\x1B]\x14a\x02\xC8W\x80cz\x8B&7\x14a\x02\xD1W\x80c\x88o\x11\x95\x14a\x02\xE4W\x80c\x8C\x87\x10\x19\x14a\x02\xFCW\x80c\x8Fjb@\x14a\x03\x0FW__\xFD[\x80c:\x98\xEF9\x11a\x01DW\x80cH\\\xC9U\x11a\x01\x1FW\x80cH\\\xC9U\x14a\x02cW\x80cU<\xA5\xF8\x14a\x02vW\x80cY\\jg\x14a\x02\x89W\x80cZ\xC8j\xB7\x14a\x02\x91W__\xFD[\x80c:\x98\xEF9\x14a\x020W\x80cC\xFE\x08\xB0\x14a\x02GW\x80cG\xE7\xEF$\x14a\x02PW__\xFD[\x80c\x01\x9E')\x14a\x01\x8BW\x80c\x10\xD6z/\x14a\x01\xA0W\x80c\x11\xC7\x0C\x9D\x14a\x01\xB3W\x80c\x13d9\xDD\x14a\x01\xC6W\x80c$\x95\xA5\x99\x14a\x01\xD9W\x80c9\xB7\x0E8\x14a\x02\tW[__\xFD[a\x01\x9Ea\x01\x996`\x04a\x19:V[a\x03\xB1V[\0[a\x01\x9Ea\x01\xAE6`\x04a\x19\x81V[a\x04\x8EV[a\x01\x9Ea\x01\xC16`\x04a\x19\x9CV[a\x05>V[a\x01\x9Ea\x01\xD46`\x04a\x19\xBCV[a\x05\xF0V[`2Ta\x01\xEC\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xEC\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x029`3T\x81V[`@Q\x90\x81R` \x01a\x02\0V[a\x029`dT\x81V[a\x029a\x02^6`\x04a\x19\xD3V[a\x071V[a\x01\x9Ea\x02q6`\x04a\x19\xFDV[a\trV[a\x029a\x02\x846`\x04a\x19\x81V[a\n:V[a\x01\x9Ea\nMV[a\x02\xB0a\x02\x9F6`\x04a\x1ABV[`\x01\x80T`\xFF\x90\x92\x16\x1B\x90\x81\x16\x14\x90V[`@Q\x90\x15\x15\x81R` \x01a\x02\0V[`\x01Ta\x029V[a\x029`eT\x81V[a\x029a\x02\xDF6`\x04a\x19\xBCV[a\x0B\x15V[_Ta\x01\xEC\x90b\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x029a\x03\n6`\x04a\x19\xBCV[a\x0B^V[a\x029a\x03\x1D6`\x04a\x19\x81V[a\x0BhV[a\x03*a\x0BuV[`@Qa\x02\0\x91\x90a\x1A]V[a\x029a\x03E6`\x04a\x19\x81V[a\x0B\x95V[a\x01\x9Ea\x03X6`\x04a\x1A\x92V[a\x0C'V[`dT`eT`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02\0V[a\x029a\x03\x866`\x04a\x19\xBCV[a\x0E\tV[a\x029a\x03\x996`\x04a\x19\xBCV[a\x0E@V[a\x01\x9Ea\x03\xAC6`\x04a\x19\xBCV[a\x0EJV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x03\xCFWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x03\xE8WP0;\x15\x80\x15a\x03\xE8WP_T`\xFF\x16`\x01\x14[a\x04\rW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1A\xD0V[`@Q\x80\x91\x03\x90\xFD[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x04.W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\x048\x85\x85a\x0F\xA3V[a\x04B\x83\x83a\x10\xB0V[\x80\x15a\x04\x87W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xDEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x02\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x052W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[a\x05;\x81a\x11\xFEV[PV[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x8EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xB2\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[a\x05\xEC\x82\x82a\x0F\xA3V[PPV[_T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06^\x91\x90a\x1B\x83V[a\x06zW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B\xA2V[`\x01T\x81\x81\x16\x14a\x06\xF3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.pause: invalid attempt `D\x82\x01R\x7Fto unpause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[`\x01\x80T_\x91\x82\x91\x81\x16\x03a\x07\x84W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x04V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x07\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x04V[a\x08\x06\x84\x84a\x13\x01V[`3T_a\x08\x16a\x03\xE8\x83a\x1B\xFEV[\x90P_a\x03\xE8a\x08$a\x13\xE3V[a\x08.\x91\x90a\x1B\xFEV[\x90P_a\x08;\x87\x83a\x1C\x11V[\x90P\x80a\x08H\x84\x89a\x1C$V[a\x08R\x91\x90a\x1C;V[\x95P\x85_\x03a\x08\xBAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FStrategyBase.deposit: newShares `D\x82\x01Rmcannot be zero`\x90\x1B`d\x82\x01R`\x84\x01a\x04\x04V[a\x08\xC4\x86\x85a\x1B\xFEV[`3\x81\x90UoK;L\xA8Z\x86\xC4z\t\x8A\"?\xFF\xFF\xFF\xFF\x10\x15a\tNW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`<`$\x82\x01R\x7FStrategyBase.deposit: totalShare`D\x82\x01R\x7Fs exceeds `MAX_TOTAL_SHARES`\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[a\tg\x82a\x03\xE8`3Ta\tb\x91\x90a\x1B\xFEV[a\x14RV[PPPPP\x92\x91PPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\t\x90WP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\t\xA9WP0;\x15\x80\x15a\t\xA9WP_T`\xFF\x16`\x01\x14[a\t\xC5W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1A\xD0V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\t\xE6W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[a\t\xF0\x83\x83a\x10\xB0V[\x80\x15a\n5W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[_a\nGa\x02\xDF\x83a\x0B\x95V[\x92\x91PPV[_T`@Qc#}\xFBG`\xE1\x1B\x81R3`\x04\x82\x01Rb\x01\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90cF\xFB\xF6\x8E\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x97W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xBB\x91\x90a\x1B\x83V[a\n\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B\xA2V[_\x19`\x01\x81\x90U`@Q\x90\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2V[__a\x03\xE8`3Ta\x0B'\x91\x90a\x1B\xFEV[\x90P_a\x03\xE8a\x0B5a\x13\xE3V[a\x0B?\x91\x90a\x1B\xFEV[\x90P\x81a\x0BL\x85\x83a\x1C$V[a\x0BV\x91\x90a\x1C;V[\x94\x93PPPPV[_a\nG\x82a\x0E\tV[_a\nGa\x03\x99\x83a\x0B\x95V[```@Q\x80`\x80\x01`@R\x80`M\x81R` \x01a\x1C\xA3`M\x919\x90P\x90V[`@Qc=?\x06\xC9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R0`$\x83\x01R_\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x90cz~\r\x92\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x03W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nG\x91\x90a\x1CZV[`\x01\x80T`\x02\x90\x81\x16\x03a\x0CyW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x14\x18]\\\xD8X\x9B\x19N\x88\x1A[\x99\x19^\x08\x1A\\\xC8\x1C\x18]\\\xD9Y`:\x1B`D\x82\x01R`d\x01a\x04\x04V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x0C\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrategyBase.onlyStrategyManager`D\x82\x01R`d\x01a\x04\x04V[a\x0C\xFC\x84\x84\x84a\x14\x9EV[`3T\x80\x83\x11\x15a\r\x8BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`M`$\x82\x01R\x7FStrategyBase.withdraw: amountSha`D\x82\x01R\x7Fres must be less than or equal t`d\x82\x01Rlo totalShares`\x98\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[_a\r\x98a\x03\xE8\x83a\x1B\xFEV[\x90P_a\x03\xE8a\r\xA6a\x13\xE3V[a\r\xB0\x91\x90a\x1B\xFEV[\x90P_\x82a\r\xBE\x87\x84a\x1C$V[a\r\xC8\x91\x90a\x1C;V[\x90Pa\r\xD4\x86\x85a\x1C\x11V[`3Ua\r\xF4a\r\xE4\x82\x84a\x1C\x11V[a\x03\xE8`3Ta\tb\x91\x90a\x1B\xFEV[a\r\xFF\x88\x88\x83a\x15!V[PPPPPPPPV[__a\x03\xE8`3Ta\x0E\x1B\x91\x90a\x1B\xFEV[\x90P_a\x03\xE8a\x0E)a\x13\xE3V[a\x0E3\x91\x90a\x1B\xFEV[\x90P\x80a\x0BL\x83\x86a\x1C$V[_a\nG\x82a\x0B\x15V[_`\x02\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\xEA\xB6mz`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\x9AW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xBE\x91\x90a\x1B\x1EV[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x0E\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x90a\x1B9V[`\x01T\x19\x81\x19`\x01T\x19\x16\x14a\x0FlW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`8`$\x82\x01R\x7FPausable.unpause: invalid attemp`D\x82\x01R\x7Ft to pause functionality\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F5\x82\xD1\x82\x8E&\xBFV\xBD\x80\x15\x02\xBC\x02\x1A\xC0\xBC\x8A\xFBW\xC8&\xE4\x98kEY<\x8F\xAD8\x9C\x90` \x01a\x07&V[`dT`@\x80Q\x91\x82R` \x82\x01\x84\x90R\x7F\xF9~\xD4\xE0\x83\xAC\xACg\x83\0%\xEC\xBCum\x8F\xE8G\xCD\xBD\xCAL\xEE?\xE1\xE1(\xE9\x8BT\xEC\xB5\x91\x01`@Q\x80\x91\x03\x90\xA1`eT`@\x80Q\x91\x82R` \x82\x01\x83\x90R\x7Fj\xB1\x81\xE0D\x0B\xFB\xF4\xBA\xCD\xF2\xE9\x96ts\\\xE6c\x80\x05I\x06\x88\xC5\xF9\x94\xF59\x93S\xE4R\x91\x01`@Q\x80\x91\x03\x90\xA1\x80\x82\x11\x15a\x10\xA5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`K`$\x82\x01R\x7FStrategyBaseTVLLimits._setTVLLim`D\x82\x01R\x7Fits: maxPerDeposit exceeds maxTo`d\x82\x01RjtalDeposits`\xA8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[`d\x91\x90\x91U`eUV[_Ta\x01\0\x90\x04`\xFF\x16a\x11\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01Rjnitializing`\xA8\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`2\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90Ua\x11?\x81_a\x155V[\x7F\x1CT\x07\x07\xB0\x0E\xB5B{kwO\xC7\x99\xD7VQjT\xAE\xE1\x08\xB6K2z\xCCU\xAFUu\x07`2_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xB1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xD5\x91\x90a\x1CqV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x83R`\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xA1PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`I`$\x82\x01R\x7FPausable._setPauserRegistry: new`D\x82\x01R\x7FPauserRegistry cannot be the zer`d\x82\x01Rho address`\xB8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[_T`@\x80Q`\x01`\x01`\xA0\x1B\x03b\x01\0\0\x90\x93\x04\x83\x16\x81R\x91\x83\x16` \x83\x01R\x7Fn\x9F\xCDS\x98\x96\xFC\xA6\x0E\x8B\x0F\x01\xDDX\x023\xE4\x8Ak\x0F}\xF0\x13\xB8\x9B\xA7\xF5e\x86\x9A\xCD\xB6\x91\x01`@Q\x80\x91\x03\x90\xA1_\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16b\x01\0\0\x02b\x01\0\0`\x01`\xB0\x1B\x03\x19\x90\x92\x16\x91\x90\x91\x17\x90UV[`dT\x81\x11\x15a\x13kW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FStrategyBaseTVLLimits: max per d`D\x82\x01Rn\x19\\\x1B\xDC\xDA]\x08\x19^\x18\xD9YY\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`eTa\x13va\x13\xE3V[\x11\x15a\x13\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FStrategyBaseTVLLimits: max depos`D\x82\x01Rk\x1A]\x1C\xC8\x19^\x18\xD9YY\x19Y`\xA2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[a\x05\xEC\x82\x82a\x16 V[`2T`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x91`\x01`\x01`\xA0\x1B\x03\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14)W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14M\x91\x90a\x1CZV[\x90P\x90V[\x7F\xD2IO4y\xE5\xDAI\xD3\x86e|),a\x0B[\x01\xDF1=\x07\xC6.\xB0\xCF\xA4\x99$\xA3\x1B\xE8\x81a\x14\x86\x84g\r\xE0\xB6\xB3\xA7d\0\0a\x1C$V[a\x14\x90\x91\x90a\x1C;V[`@Q\x90\x81R` \x01a\x11\xF2V[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\n5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`;`$\x82\x01R\x7FStrategyBase.withdraw: Can only `D\x82\x01R\x7Fwithdraw the strategy token\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\x04V[a\n5`\x01`\x01`\xA0\x1B\x03\x83\x16\x84\x83a\x16\x9CV[_Tb\x01\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x15\x80\x15a\x15[WP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x15[a\x15\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FPausable._initializePauser: _ini`D\x82\x01R\x7FtializePauser() can only be call`d\x82\x01Rfed once`\xC8\x1B`\x84\x82\x01R`\xA4\x01a\x04\x04V[`\x01\x81\x90U`@Q\x81\x81R3\x90\x7F\xAB@\xA3t\xBCQ\xDE7\"\0\xA8\xBC\x98\x1A\xF8\xC9\xEC\xDC\x08\xDF\xDA\xEF\x0B\xB6\xE0\x9F\x88\xF3\xC6\x16\xEF=\x90` \x01`@Q\x80\x91\x03\x90\xA2a\x05\xEC\x82a\x11\xFEV[`2T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x91\x16\x14a\x05\xECW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`6`$\x82\x01R\x7FStrategyBase.deposit: Can only d`D\x82\x01Ru2\xB87\xB9\xB4\xBA\x10:\xB722\xB96<\xB4\xB73\xAA7\xB5\xB2\xB7`Q\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x83Q\x80\x85\x01\x90\x94R\x80\x84R\x7FSafeERC20: low-level call failed\x90\x84\x01Ra\n5\x92\x86\x92\x91_\x91a\x17+\x91\x85\x16\x90\x84\x90a\x17\xA8V[\x80Q\x90\x91P\x15a\n5W\x80\x80` \x01\x90Q\x81\x01\x90a\x17I\x91\x90a\x1B\x83V[a\n5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[``a\x17\xB6\x84\x84_\x85a\x17\xC0V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x18!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x04\x04V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x18xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x04\x04V[__\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x18\x93\x91\x90a\x1C\x8CV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x18\xCDW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18\xD2V[``\x91P[P\x91P\x91Pa\x18\xE2\x82\x82\x86a\x18\xEDV[\x97\x96PPPPPPPV[``\x83\x15a\x18\xFCWP\x81a\x17\xB9V[\x82Q\x15a\x19\x0CW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x04\x04\x91\x90a\x1A]V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05;W__\xFD[____`\x80\x85\x87\x03\x12\x15a\x19MW__\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x19f\x81a\x19&V[\x91P``\x85\x015a\x19v\x81a\x19&V[\x93\x96\x92\x95P\x90\x93PPV[_` \x82\x84\x03\x12\x15a\x19\x91W__\xFD[\x815a\x17\xB9\x81a\x19&V[__`@\x83\x85\x03\x12\x15a\x19\xADW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x19\xCCW__\xFD[P5\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x19\xE4W__\xFD[\x825a\x19\xEF\x81a\x19&V[\x94` \x93\x90\x93\x015\x93PPPV[__`@\x83\x85\x03\x12\x15a\x1A\x0EW__\xFD[\x825a\x1A\x19\x81a\x19&V[\x91P` \x83\x015a\x1A)\x81a\x19&V[\x80\x91PP\x92P\x92\x90PV[`\xFF\x81\x16\x81\x14a\x05;W__\xFD[_` \x82\x84\x03\x12\x15a\x1ARW__\xFD[\x815a\x17\xB9\x81a\x1A4V[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x1A\xA4W__\xFD[\x835a\x1A\xAF\x81a\x19&V[\x92P` \x84\x015a\x1A\xBF\x81a\x19&V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[` \x80\x82R`.\x90\x82\x01R\x7FInitializable: contract is alrea`@\x82\x01Rm\x19\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`\x92\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a\x1B.W__\xFD[\x81Qa\x17\xB9\x81a\x19&V[` \x80\x82R`*\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Ri9\x90:\xB780\xBA\xB9\xB2\xB9`\xB1\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a\x1B\x93W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x17\xB9W__\xFD[` \x80\x82R`(\x90\x82\x01R\x7Fmsg.sender is not permissioned a`@\x82\x01Rg9\x9080\xBA\xB9\xB2\xB9`\xC1\x1B``\x82\x01R`\x80\x01\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\nGWa\nGa\x1B\xEAV[\x81\x81\x03\x81\x81\x11\x15a\nGWa\nGa\x1B\xEAV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\nGWa\nGa\x1B\xEAV[_\x82a\x1CUWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[_` \x82\x84\x03\x12\x15a\x1CjW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1C\x81W__\xFD[\x81Qa\x17\xB9\x81a\x1A4V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV\xFEBase Strategy implementation to inherit from for more complex implementations\xA2dipfsX\"\x12 \x1A:S\x11}|\xBF\xFC\xBB\xAA\xF5\x0ER\xAD\x96\x9D\xAE\x88\xCBM\x18\x14\xFB\x12\x1FSln\xF4A0EdsolcC\0\x08\x1B\x003",
    );
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    /**Event with signature `ExchangeRateEmitted(uint256)` and selector `0xd2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8`.
    ```solidity
    event ExchangeRateEmitted(uint256 rate);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ExchangeRateEmitted {
        #[allow(missing_docs)]
        pub rate: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ExchangeRateEmitted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ExchangeRateEmitted(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    210u8, 73u8, 79u8, 52u8, 121u8, 229u8, 218u8, 73u8, 211u8, 134u8, 101u8, 124u8,
                    41u8, 44u8, 97u8, 11u8, 91u8, 1u8, 223u8, 49u8, 61u8, 7u8, 198u8, 46u8, 176u8,
                    207u8, 164u8, 153u8, 36u8, 163u8, 27u8, 232u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { rate: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.rate,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ExchangeRateEmitted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ExchangeRateEmitted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ExchangeRateEmitted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint8)` and selector `0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498`.
    ```solidity
    event Initialized(uint8 version);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    127u8, 38u8, 184u8, 63u8, 249u8, 110u8, 31u8, 43u8, 106u8, 104u8, 47u8, 19u8,
                    56u8, 82u8, 246u8, 121u8, 138u8, 9u8, 196u8, 101u8, 218u8, 149u8, 146u8, 20u8,
                    96u8, 206u8, 251u8, 56u8, 71u8, 64u8, 36u8, 152u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `MaxPerDepositUpdated(uint256,uint256)` and selector `0xf97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5`.
    ```solidity
    event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MaxPerDepositUpdated {
        #[allow(missing_docs)]
        pub previousValue: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MaxPerDepositUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "MaxPerDepositUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    249u8, 126u8, 212u8, 224u8, 131u8, 172u8, 172u8, 103u8, 131u8, 0u8, 37u8,
                    236u8, 188u8, 117u8, 109u8, 143u8, 232u8, 71u8, 205u8, 189u8, 202u8, 76u8,
                    238u8, 63u8, 225u8, 225u8, 40u8, 233u8, 139u8, 84u8, 236u8, 181u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousValue: data.0,
                    newValue: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.previousValue,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newValue,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for MaxPerDepositUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MaxPerDepositUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &MaxPerDepositUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `MaxTotalDepositsUpdated(uint256,uint256)` and selector `0x6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452`.
    ```solidity
    event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MaxTotalDepositsUpdated {
        #[allow(missing_docs)]
        pub previousValue: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MaxTotalDepositsUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "MaxTotalDepositsUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    106u8, 177u8, 129u8, 224u8, 68u8, 11u8, 251u8, 244u8, 186u8, 205u8, 242u8,
                    233u8, 150u8, 116u8, 115u8, 92u8, 230u8, 99u8, 128u8, 5u8, 73u8, 6u8, 136u8,
                    197u8, 249u8, 148u8, 245u8, 57u8, 147u8, 83u8, 228u8, 82u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousValue: data.0,
                    newValue: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.previousValue,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newValue,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for MaxTotalDepositsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MaxTotalDepositsUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &MaxTotalDepositsUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Paused(address,uint256)` and selector `0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d`.
    ```solidity
    event Paused(address indexed account, uint256 newPausedStatus);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Paused(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    171u8, 64u8, 163u8, 116u8, 188u8, 81u8, 222u8, 55u8, 34u8, 0u8, 168u8, 188u8,
                    152u8, 26u8, 248u8, 201u8, 236u8, 220u8, 8u8, 223u8, 218u8, 239u8, 11u8, 182u8,
                    224u8, 159u8, 136u8, 243u8, 198u8, 22u8, 239u8, 61u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    newPausedStatus: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newPausedStatus,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `StrategyTokenSet(address,uint8)` and selector `0x1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af557507`.
    ```solidity
    event StrategyTokenSet(address token, uint8 decimals);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct StrategyTokenSet {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub decimals: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for StrategyTokenSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "StrategyTokenSet(address,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    28u8, 84u8, 7u8, 7u8, 176u8, 14u8, 181u8, 66u8, 123u8, 107u8, 119u8, 79u8,
                    199u8, 153u8, 215u8, 86u8, 81u8, 106u8, 84u8, 174u8, 225u8, 8u8, 182u8, 75u8,
                    50u8, 122u8, 204u8, 85u8, 175u8, 85u8, 117u8, 7u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: data.0,
                    decimals: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.decimals,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for StrategyTokenSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&StrategyTokenSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &StrategyTokenSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `StrategyTokenSet(address,uint8)` and selector `0x1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af557507`.
    ```solidity
    event StrategyTokenSet(address token, uint8 decimals);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct StrategyTokenSet {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub decimals: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for StrategyTokenSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "StrategyTokenSet(address,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    28u8, 84u8, 7u8, 7u8, 176u8, 14u8, 181u8, 66u8, 123u8, 107u8, 119u8, 79u8,
                    199u8, 153u8, 215u8, 86u8, 81u8, 106u8, 84u8, 174u8, 225u8, 8u8, 182u8, 75u8,
                    50u8, 122u8, 204u8, 85u8, 175u8, 85u8, 117u8, 7u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: data.0,
                    decimals: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.decimals,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for StrategyTokenSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&StrategyTokenSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &StrategyTokenSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Unpaused(address,uint256)` and selector `0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c`.
    ```solidity
    event Unpaused(address indexed account, uint256 newPausedStatus);
    ```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Unpaused(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    53u8, 130u8, 209u8, 130u8, 142u8, 38u8, 191u8, 86u8, 189u8, 128u8, 21u8, 2u8,
                    188u8, 2u8, 26u8, 192u8, 188u8, 138u8, 251u8, 87u8, 200u8, 38u8, 228u8, 152u8,
                    107u8, 69u8, 89u8, 60u8, 143u8, 173u8, 56u8, 156u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    newPausedStatus: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newPausedStatus,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
    ```solidity
    constructor(address _strategyManager, address _pauserRegistry);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _strategyManager: alloy::sol_types::private::Address,
        pub _pauserRegistry: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._strategyManager, value._pauserRegistry)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _strategyManager: tuple.0,
                        _pauserRegistry: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._strategyManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._pauserRegistry,
                    ),
                )
            }
        }
    };
    /**Function with signature `deposit(address,uint256)` and selector `0x47e7ef24`.
    ```solidity
    function deposit(address token, uint256 amount) external returns (uint256 newShares);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositCall {
        pub token: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`deposit(address,uint256)`](depositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositReturn {
        pub newShares: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositCall> for UnderlyingRustTuple<'_> {
                fn from(value: depositCall) -> Self {
                    (value.token, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: depositReturn) -> Self {
                    (value.newShares,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newShares: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for depositCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = depositReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deposit(address,uint256)";
            const SELECTOR: [u8; 4] = [71u8, 231u8, 239u8, 36u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `explanation()` and selector `0xab5921e1`.
    ```solidity
    function explanation() external pure returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct explanationCall {}
    ///Container type for the return parameters of the [`explanation()`](explanationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct explanationReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<explanationCall> for UnderlyingRustTuple<'_> {
                fn from(value: explanationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for explanationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<explanationReturn> for UnderlyingRustTuple<'_> {
                fn from(value: explanationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for explanationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for explanationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = explanationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "explanation()";
            const SELECTOR: [u8; 4] = [171u8, 89u8, 33u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getTVLLimits()` and selector `0xdf6fadc1`.
    ```solidity
    function getTVLLimits() external view returns (uint256, uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTVLLimitsCall {}
    ///Container type for the return parameters of the [`getTVLLimits()`](getTVLLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTVLLimitsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTVLLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTVLLimitsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTVLLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTVLLimitsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getTVLLimitsReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTVLLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTVLLimitsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getTVLLimitsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTVLLimits()";
            const SELECTOR: [u8; 4] = [223u8, 111u8, 173u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint256,uint256,address)` and selector `0xa6ab36f2`.
    ```solidity
    function initialize(uint256 _maxPerDeposit, uint256 _maxTotalDeposits, address _underlyingToken) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initialize_0Call {
        pub _maxPerDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub _maxTotalDeposits: alloy::sol_types::private::primitives::aliases::U256,
        pub _underlyingToken: alloy::sol_types::private::Address,
    }
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
    ///Container type for the return parameters of the [`initialize(uint256,uint256,address)`](initialize_0Call) function.
=======
    ///Container type for the return parameters of the [`initialize(uint256,uint256,address,address)`](initialize_0Call) function.
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initialize_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initialize_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: initialize_0Call) -> Self {
                    (
                        value._maxPerDeposit,
                        value._maxTotalDeposits,
                        value._underlyingToken,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initialize_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _maxPerDeposit: tuple.0,
                        _maxTotalDeposits: tuple.1,
                        _underlyingToken: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initialize_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: initialize_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initialize_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initialize_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = initialize_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint256,uint256,address)";
            const SELECTOR: [u8; 4] = [166u8, 171u8, 54u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._maxPerDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._maxTotalDeposits,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._underlyingToken,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address)` and selector `0xc4d66de8`.
    ```solidity
    function initialize(address _underlyingToken) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initialize_1Call {
        pub _underlyingToken: alloy::sol_types::private::Address,
    }
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
    ///Container type for the return parameters of the [`initialize(address)`](initialize_1Call) function.
=======
    ///Container type for the return parameters of the [`initialize(address,address)`](initialize_1Call) function.
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initialize_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initialize_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: initialize_1Call) -> Self {
                    (value._underlyingToken,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initialize_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _underlyingToken: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initialize_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: initialize_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initialize_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initialize_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = initialize_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address)";
            const SELECTOR: [u8; 4] = [196u8, 214u8, 109u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._underlyingToken,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `maxPerDeposit()` and selector `0x43fe08b0`.
    ```solidity
    function maxPerDeposit() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxPerDepositCall {}
    ///Container type for the return parameters of the [`maxPerDeposit()`](maxPerDepositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxPerDepositReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxPerDepositCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxPerDepositCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxPerDepositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxPerDepositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxPerDepositReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxPerDepositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxPerDepositCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxPerDepositReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxPerDeposit()";
            const SELECTOR: [u8; 4] = [67u8, 254u8, 8u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `maxTotalDeposits()` and selector `0x61b01b5d`.
    ```solidity
    function maxTotalDeposits() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxTotalDepositsCall {}
    ///Container type for the return parameters of the [`maxTotalDeposits()`](maxTotalDepositsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxTotalDepositsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxTotalDepositsCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxTotalDepositsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxTotalDepositsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxTotalDepositsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxTotalDepositsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxTotalDepositsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxTotalDepositsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxTotalDepositsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxTotalDeposits()";
            const SELECTOR: [u8; 4] = [97u8, 176u8, 27u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pause(uint256)` and selector `0x136439dd`.
    ```solidity
    function pause(uint256 newPausedStatus) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall {
        pub newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`pause(uint256)`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    (value.newPausedStatus,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newPausedStatus: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause(uint256)";
            const SELECTOR: [u8; 4] = [19u8, 100u8, 57u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newPausedStatus,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pauseAll()` and selector `0x595c6a67`.
    ```solidity
    function pauseAll() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseAllCall {}
    ///Container type for the return parameters of the [`pauseAll()`](pauseAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseAllReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseAllCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseAllCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pauseAll()";
            const SELECTOR: [u8; 4] = [89u8, 92u8, 106u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `paused(uint8)` and selector `0x5ac86ab7`.
    ```solidity
    function paused(uint8 index) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct paused_0Call {
        pub index: u8,
    }
    ///Container type for the return parameters of the [`paused(uint8)`](paused_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct paused_0Return {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<paused_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: paused_0Call) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for paused_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<paused_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: paused_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for paused_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for paused_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = paused_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused(uint8)";
            const SELECTOR: [u8; 4] = [90u8, 200u8, 106u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.index,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `paused()` and selector `0x5c975abb`.
    ```solidity
    function paused() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct paused_1Call {}
    ///Container type for the return parameters of the [`paused()`](paused_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct paused_1Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<paused_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: paused_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for paused_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<paused_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: paused_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for paused_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for paused_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = paused_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pauserRegistry()` and selector `0x886f1195`.
    ```solidity
    function pauserRegistry() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserRegistryCall {}
    ///Container type for the return parameters of the [`pauserRegistry()`](pauserRegistryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauserRegistryReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserRegistryCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauserRegistryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserRegistryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauserRegistryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauserRegistryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauserRegistryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauserRegistryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauserRegistryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pauserRegistry()";
            const SELECTOR: [u8; 4] = [136u8, 111u8, 17u8, 149u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
=======
    /**Function with signature `setPauserRegistry(address)` and selector `0x10d67a2f`.
    ```solidity
    function setPauserRegistry(address newPauserRegistry) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setPauserRegistryCall {
        pub newPauserRegistry: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setPauserRegistry(address)`](setPauserRegistryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setPauserRegistryReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setPauserRegistryCall> for UnderlyingRustTuple<'_> {
                fn from(value: setPauserRegistryCall) -> Self {
                    (value.newPauserRegistry,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setPauserRegistryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newPauserRegistry: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setPauserRegistryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setPauserRegistryReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setPauserRegistryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setPauserRegistryCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setPauserRegistryReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setPauserRegistry(address)";
            const SELECTOR: [u8; 4] = [16u8, 214u8, 122u8, 47u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newPauserRegistry,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
    /**Function with signature `setTVLLimits(uint256,uint256)` and selector `0x11c70c9d`.
    ```solidity
    function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTVLLimitsCall {
        pub newMaxPerDeposit: alloy::sol_types::private::primitives::aliases::U256,
        pub newMaxTotalDeposits: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setTVLLimits(uint256,uint256)`](setTVLLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTVLLimitsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTVLLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTVLLimitsCall) -> Self {
                    (value.newMaxPerDeposit, value.newMaxTotalDeposits)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTVLLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newMaxPerDeposit: tuple.0,
                        newMaxTotalDeposits: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTVLLimitsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setTVLLimitsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTVLLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTVLLimitsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTVLLimitsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTVLLimits(uint256,uint256)";
            const SELECTOR: [u8; 4] = [17u8, 199u8, 12u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newMaxPerDeposit,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newMaxTotalDeposits,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `shares(address)` and selector `0xce7c2ac2`.
    ```solidity
    function shares(address user) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`shares(address)`](sharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: sharesCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sharesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sharesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = sharesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shares(address)";
            const SELECTOR: [u8; 4] = [206u8, 124u8, 42u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `sharesToUnderlying(uint256)` and selector `0xf3e73875`.
    ```solidity
    function sharesToUnderlying(uint256 amountShares) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesToUnderlyingCall {
        pub amountShares: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`sharesToUnderlying(uint256)`](sharesToUnderlyingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesToUnderlyingReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesToUnderlyingCall> for UnderlyingRustTuple<'_> {
                fn from(value: sharesToUnderlyingCall) -> Self {
                    (value.amountShares,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesToUnderlyingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountShares: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesToUnderlyingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sharesToUnderlyingReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesToUnderlyingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sharesToUnderlyingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = sharesToUnderlyingReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sharesToUnderlying(uint256)";
            const SELECTOR: [u8; 4] = [243u8, 231u8, 56u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountShares,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `sharesToUnderlyingView(uint256)` and selector `0x7a8b2637`.
    ```solidity
    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesToUnderlyingViewCall {
        pub amountShares: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`sharesToUnderlyingView(uint256)`](sharesToUnderlyingViewCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sharesToUnderlyingViewReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesToUnderlyingViewCall> for UnderlyingRustTuple<'_> {
                fn from(value: sharesToUnderlyingViewCall) -> Self {
                    (value.amountShares,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesToUnderlyingViewCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountShares: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sharesToUnderlyingViewReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sharesToUnderlyingViewReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sharesToUnderlyingViewReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sharesToUnderlyingViewCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = sharesToUnderlyingViewReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sharesToUnderlyingView(uint256)";
            const SELECTOR: [u8; 4] = [122u8, 139u8, 38u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountShares,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `strategyManager()` and selector `0x39b70e38`.
    ```solidity
    function strategyManager() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyManagerCall {}
    ///Container type for the return parameters of the [`strategyManager()`](strategyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct strategyManagerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyManagerCall> for UnderlyingRustTuple<'_> {
                fn from(value: strategyManagerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyManagerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<strategyManagerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: strategyManagerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for strategyManagerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for strategyManagerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = strategyManagerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "strategyManager()";
            const SELECTOR: [u8; 4] = [57u8, 183u8, 14u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `totalShares()` and selector `0x3a98ef39`.
    ```solidity
    function totalShares() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSharesCall {}
    ///Container type for the return parameters of the [`totalShares()`](totalSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSharesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSharesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSharesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSharesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSharesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalShares()";
            const SELECTOR: [u8; 4] = [58u8, 152u8, 239u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `underlyingToShares(uint256)` and selector `0x8c871019`.
    ```solidity
    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingToSharesCall {
        pub amountUnderlying: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`underlyingToShares(uint256)`](underlyingToSharesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingToSharesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingToSharesCall> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingToSharesCall) -> Self {
                    (value.amountUnderlying,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingToSharesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountUnderlying: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingToSharesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingToSharesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingToSharesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for underlyingToSharesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = underlyingToSharesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "underlyingToShares(uint256)";
            const SELECTOR: [u8; 4] = [140u8, 135u8, 16u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountUnderlying,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `underlyingToSharesView(uint256)` and selector `0xe3dae51c`.
    ```solidity
    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingToSharesViewCall {
        pub amountUnderlying: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`underlyingToSharesView(uint256)`](underlyingToSharesViewCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingToSharesViewReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingToSharesViewCall> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingToSharesViewCall) -> Self {
                    (value.amountUnderlying,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingToSharesViewCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountUnderlying: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingToSharesViewReturn> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingToSharesViewReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingToSharesViewReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for underlyingToSharesViewCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = underlyingToSharesViewReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "underlyingToSharesView(uint256)";
            const SELECTOR: [u8; 4] = [227u8, 218u8, 229u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountUnderlying,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `underlyingToken()` and selector `0x2495a599`.
    ```solidity
    function underlyingToken() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingTokenCall {}
    ///Container type for the return parameters of the [`underlyingToken()`](underlyingTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct underlyingTokenReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingTokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingTokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingTokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<underlyingTokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: underlyingTokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for underlyingTokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for underlyingTokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = underlyingTokenReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "underlyingToken()";
            const SELECTOR: [u8; 4] = [36u8, 149u8, 165u8, 153u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `unpause(uint256)` and selector `0xfabc1cbc`.
    ```solidity
    function unpause(uint256 newPausedStatus) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall {
        pub newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`unpause(uint256)`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    (value.newPausedStatus,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newPausedStatus: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause(uint256)";
            const SELECTOR: [u8; 4] = [250u8, 188u8, 28u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newPausedStatus,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `userUnderlying(address)` and selector `0x8f6a6240`.
    ```solidity
    function userUnderlying(address user) external returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct userUnderlyingCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`userUnderlying(address)`](userUnderlyingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct userUnderlyingReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userUnderlyingCall> for UnderlyingRustTuple<'_> {
                fn from(value: userUnderlyingCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userUnderlyingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userUnderlyingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: userUnderlyingReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userUnderlyingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for userUnderlyingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = userUnderlyingReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "userUnderlying(address)";
            const SELECTOR: [u8; 4] = [143u8, 106u8, 98u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `userUnderlyingView(address)` and selector `0x553ca5f8`.
    ```solidity
    function userUnderlyingView(address user) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct userUnderlyingViewCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`userUnderlyingView(address)`](userUnderlyingViewCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct userUnderlyingViewReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userUnderlyingViewCall> for UnderlyingRustTuple<'_> {
                fn from(value: userUnderlyingViewCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userUnderlyingViewCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userUnderlyingViewReturn> for UnderlyingRustTuple<'_> {
                fn from(value: userUnderlyingViewReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userUnderlyingViewReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for userUnderlyingViewCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = userUnderlyingViewReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "userUnderlyingView(address)";
            const SELECTOR: [u8; 4] = [85u8, 60u8, 165u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `withdraw(address,address,uint256)` and selector `0xd9caed12`.
    ```solidity
    function withdraw(address recipient, address token, uint256 amountShares) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawCall {
        pub recipient: alloy::sol_types::private::Address,
        pub token: alloy::sol_types::private::Address,
        pub amountShares: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdraw(address,address,uint256)`](withdrawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawCall) -> Self {
                    (value.recipient, value.token, value.amountShares)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        token: tuple.1,
                        amountShares: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdraw(address,address,uint256)";
            const SELECTOR: [u8; 4] = [217u8, 202u8, 237u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountShares,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`StrategyBaseTVLLimits`](self) function calls.
    pub enum StrategyBaseTVLLimitsCalls {
        deposit(depositCall),
        explanation(explanationCall),
        getTVLLimits(getTVLLimitsCall),
        initialize_0(initialize_0Call),
        initialize_1(initialize_1Call),
        maxPerDeposit(maxPerDepositCall),
        maxTotalDeposits(maxTotalDepositsCall),
        pause(pauseCall),
        pauseAll(pauseAllCall),
        paused_0(paused_0Call),
        paused_1(paused_1Call),
        pauserRegistry(pauserRegistryCall),
        setTVLLimits(setTVLLimitsCall),
        shares(sharesCall),
        sharesToUnderlying(sharesToUnderlyingCall),
        sharesToUnderlyingView(sharesToUnderlyingViewCall),
        strategyManager(strategyManagerCall),
        totalShares(totalSharesCall),
        underlyingToShares(underlyingToSharesCall),
        underlyingToSharesView(underlyingToSharesViewCall),
        underlyingToken(underlyingTokenCall),
        unpause(unpauseCall),
        userUnderlying(userUnderlyingCall),
        userUnderlyingView(userUnderlyingViewCall),
        withdraw(withdrawCall),
    }
    #[automatically_derived]
    impl StrategyBaseTVLLimitsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 199u8, 12u8, 157u8],
            [19u8, 100u8, 57u8, 221u8],
            [36u8, 149u8, 165u8, 153u8],
            [57u8, 183u8, 14u8, 56u8],
            [58u8, 152u8, 239u8, 57u8],
            [67u8, 254u8, 8u8, 176u8],
            [71u8, 231u8, 239u8, 36u8],
            [85u8, 60u8, 165u8, 248u8],
            [89u8, 92u8, 106u8, 103u8],
            [90u8, 200u8, 106u8, 183u8],
            [92u8, 151u8, 90u8, 187u8],
            [97u8, 176u8, 27u8, 93u8],
            [122u8, 139u8, 38u8, 55u8],
            [136u8, 111u8, 17u8, 149u8],
            [140u8, 135u8, 16u8, 25u8],
            [143u8, 106u8, 98u8, 64u8],
            [166u8, 171u8, 54u8, 242u8],
            [171u8, 89u8, 33u8, 225u8],
            [196u8, 214u8, 109u8, 232u8],
            [206u8, 124u8, 42u8, 194u8],
            [217u8, 202u8, 237u8, 18u8],
            [223u8, 111u8, 173u8, 193u8],
            [227u8, 218u8, 229u8, 28u8],
            [243u8, 231u8, 56u8, 117u8],
            [250u8, 188u8, 28u8, 188u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrategyBaseTVLLimitsCalls {
        const NAME: &'static str = "StrategyBaseTVLLimitsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 25usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::deposit(_) => <depositCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::explanation(_) => <explanationCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getTVLLimits(_) => <getTVLLimitsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize_0(_) => <initialize_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize_1(_) => <initialize_1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxPerDeposit(_) => <maxPerDepositCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxTotalDeposits(_) => {
                    <maxTotalDepositsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pauseAll(_) => <pauseAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused_0(_) => <paused_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused_1(_) => <paused_1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pauserRegistry(_) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTVLLimits(_) => <setTVLLimitsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::shares(_) => <sharesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::sharesToUnderlying(_) => {
                    <sharesToUnderlyingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sharesToUnderlyingView(_) => {
                    <sharesToUnderlyingViewCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::strategyManager(_) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::totalShares(_) => <totalSharesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::underlyingToShares(_) => {
                    <underlyingToSharesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::underlyingToSharesView(_) => {
                    <underlyingToSharesViewCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::underlyingToken(_) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::userUnderlying(_) => {
                    <userUnderlyingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::userUnderlyingView(_) => {
                    <userUnderlyingViewCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdraw(_) => <withdrawCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls>] = &[
                {
                    fn setTVLLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <setTVLLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::setTVLLimits)
                    }
                    setTVLLimits
                },
                {
                    fn pause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::pause)
                    }
                    pause
                },
                {
                    fn underlyingToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <underlyingTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::underlyingToken)
                    }
                    underlyingToken
                },
                {
                    fn strategyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <strategyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::strategyManager)
                    }
                    strategyManager
                },
                {
                    fn totalShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <totalSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::totalShares)
                    }
                    totalShares
                },
                {
                    fn maxPerDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <maxPerDepositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::maxPerDeposit)
                    }
                    maxPerDeposit
                },
                {
                    fn deposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <depositCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::deposit)
                    }
                    deposit
                },
                {
                    fn userUnderlyingView(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <userUnderlyingViewCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::userUnderlyingView)
                    }
                    userUnderlyingView
                },
                {
                    fn pauseAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <pauseAllCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::pauseAll)
                    }
                    pauseAll
                },
                {
                    fn paused_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <paused_0Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::paused_0)
                    }
                    paused_0
                },
                {
                    fn paused_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <paused_1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::paused_1)
                    }
                    paused_1
                },
                {
                    fn maxTotalDeposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <maxTotalDepositsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::maxTotalDeposits)
                    }
                    maxTotalDeposits
                },
                {
                    fn sharesToUnderlyingView(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <sharesToUnderlyingViewCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::sharesToUnderlyingView)
                    }
                    sharesToUnderlyingView
                },
                {
                    fn pauserRegistry(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <pauserRegistryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::pauserRegistry)
                    }
                    pauserRegistry
                },
                {
                    fn underlyingToShares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <underlyingToSharesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::underlyingToShares)
                    }
                    underlyingToShares
                },
                {
                    fn userUnderlying(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <userUnderlyingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::userUnderlying)
                    }
                    userUnderlying
                },
                {
                    fn initialize_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <initialize_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::initialize_0)
                    }
                    initialize_0
                },
                {
                    fn explanation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <explanationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::explanation)
                    }
                    explanation
                },
                {
                    fn initialize_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <initialize_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::initialize_1)
                    }
                    initialize_1
                },
                {
                    fn shares(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <sharesCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::shares)
                    }
                    shares
                },
                {
                    fn withdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <withdrawCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::withdraw)
                    }
                    withdraw
                },
                {
                    fn getTVLLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <getTVLLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::getTVLLimits)
                    }
                    getTVLLimits
                },
                {
                    fn underlyingToSharesView(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <underlyingToSharesViewCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::underlyingToSharesView)
                    }
                    underlyingToSharesView
                },
                {
                    fn sharesToUnderlying(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <sharesToUnderlyingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsCalls::sharesToUnderlying)
                    }
                    sharesToUnderlying
                },
                {
                    fn unpause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsCalls::unpause)
                    }
                    unpause
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::deposit(inner) => {
                    <depositCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::explanation(inner) => {
                    <explanationCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getTVLLimits(inner) => {
                    <getTVLLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize_0(inner) => {
                    <initialize_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize_1(inner) => {
                    <initialize_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::maxPerDeposit(inner) => {
                    <maxPerDepositCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::maxTotalDeposits(inner) => {
                    <maxTotalDepositsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pauseAll(inner) => {
                    <pauseAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused_0(inner) => {
                    <paused_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused_1(inner) => {
                    <paused_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pauserRegistry(inner) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setTVLLimits(inner) => {
                    <setTVLLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::shares(inner) => {
                    <sharesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sharesToUnderlying(inner) => {
                    <sharesToUnderlyingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sharesToUnderlyingView(inner) => {
                    <sharesToUnderlyingViewCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::strategyManager(inner) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalShares(inner) => {
                    <totalSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::underlyingToShares(inner) => {
                    <underlyingToSharesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::underlyingToSharesView(inner) => {
                    <underlyingToSharesViewCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::underlyingToken(inner) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::userUnderlying(inner) => {
                    <userUnderlyingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::userUnderlyingView(inner) => {
                    <userUnderlyingViewCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::deposit(inner) => {
                    <depositCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::explanation(inner) => {
                    <explanationCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getTVLLimits(inner) => {
                    <getTVLLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize_0(inner) => {
                    <initialize_0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize_1(inner) => {
                    <initialize_1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::maxPerDeposit(inner) => {
                    <maxPerDepositCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::maxTotalDeposits(inner) => {
                    <maxTotalDepositsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pauseAll(inner) => {
                    <pauseAllCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused_0(inner) => {
                    <paused_0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused_1(inner) => {
                    <paused_1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pauserRegistry(inner) => {
                    <pauserRegistryCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setTVLLimits(inner) => {
                    <setTVLLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::shares(inner) => {
                    <sharesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::sharesToUnderlying(inner) => {
                    <sharesToUnderlyingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::sharesToUnderlyingView(inner) => {
                    <sharesToUnderlyingViewCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::strategyManager(inner) => {
                    <strategyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalShares(inner) => {
                    <totalSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::underlyingToShares(inner) => {
                    <underlyingToSharesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::underlyingToSharesView(inner) => {
                    <underlyingToSharesViewCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::underlyingToken(inner) => {
                    <underlyingTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::userUnderlying(inner) => {
                    <userUnderlyingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::userUnderlyingView(inner) => {
                    <userUnderlyingViewCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`StrategyBaseTVLLimits`](self) custom errors.
    pub enum StrategyBaseTVLLimitsErrors {
        BalanceExceedsMaxTotalDeposits(BalanceExceedsMaxTotalDeposits),
        CurrentlyPaused(CurrentlyPaused),
        InputAddressZero(InputAddressZero),
        InvalidNewPausedStatus(InvalidNewPausedStatus),
        MaxPerDepositExceedsMax(MaxPerDepositExceedsMax),
        NewSharesZero(NewSharesZero),
        OnlyPauser(OnlyPauser),
        OnlyStrategyManager(OnlyStrategyManager),
        OnlyUnderlyingToken(OnlyUnderlyingToken),
        OnlyUnpauser(OnlyUnpauser),
        TotalSharesExceedsMax(TotalSharesExceedsMax),
        WithdrawalAmountExceedsTotalDeposits(WithdrawalAmountExceedsTotalDeposits),
    }
    #[automatically_derived]
    impl StrategyBaseTVLLimitsErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [20u8, 172u8, 30u8, 220u8],
            [24u8, 114u8, 93u8, 166u8],
            [72u8, 218u8, 113u8, 79u8],
            [94u8, 41u8, 209u8, 70u8],
            [115u8, 99u8, 33u8, 118u8],
            [117u8, 223u8, 81u8, 220u8],
            [121u8, 72u8, 33u8, 255u8],
            [132u8, 10u8, 72u8, 213u8],
            [180u8, 105u8, 223u8, 48u8],
            [196u8, 170u8, 247u8, 64u8],
            [198u8, 29u8, 202u8, 93u8],
            [216u8, 107u8, 174u8, 103u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrategyBaseTVLLimitsErrors {
        const NAME: &'static str = "StrategyBaseTVLLimitsErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 12usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BalanceExceedsMaxTotalDeposits(_) => {
                    <BalanceExceedsMaxTotalDeposits as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CurrentlyPaused(_) => {
                    <CurrentlyPaused as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InputAddressZero(_) => {
                    <InputAddressZero as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidNewPausedStatus(_) => {
                    <InvalidNewPausedStatus as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MaxPerDepositExceedsMax(_) => {
                    <MaxPerDepositExceedsMax as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NewSharesZero(_) => <NewSharesZero as alloy_sol_types::SolError>::SELECTOR,
                Self::OnlyPauser(_) => <OnlyPauser as alloy_sol_types::SolError>::SELECTOR,
                Self::OnlyStrategyManager(_) => {
                    <OnlyStrategyManager as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OnlyUnderlyingToken(_) => {
                    <OnlyUnderlyingToken as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OnlyUnpauser(_) => <OnlyUnpauser as alloy_sol_types::SolError>::SELECTOR,
                Self::TotalSharesExceedsMax(_) => {
                    <TotalSharesExceedsMax as alloy_sol_types::SolError>::SELECTOR
                }
                Self::WithdrawalAmountExceedsTotalDeposits(_) => {
                    <WithdrawalAmountExceedsTotalDeposits as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors>] = &[
                {
                    fn MaxPerDepositExceedsMax(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <MaxPerDepositExceedsMax as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::MaxPerDepositExceedsMax)
                    }
                    MaxPerDepositExceedsMax
                },
                {
                    fn NewSharesZero(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <NewSharesZero as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsErrors::NewSharesZero)
                    }
                    NewSharesZero
                },
                {
                    fn OnlyStrategyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <OnlyStrategyManager as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::OnlyStrategyManager)
                    }
                    OnlyStrategyManager
                },
                {
                    fn TotalSharesExceedsMax(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <TotalSharesExceedsMax as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::TotalSharesExceedsMax)
                    }
                    TotalSharesExceedsMax
                },
                {
                    fn InputAddressZero(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <InputAddressZero as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::InputAddressZero)
                    }
                    InputAddressZero
                },
                {
                    fn OnlyPauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <OnlyPauser as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsErrors::OnlyPauser)
                    }
                    OnlyPauser
                },
                {
                    fn OnlyUnpauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <OnlyUnpauser as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(StrategyBaseTVLLimitsErrors::OnlyUnpauser)
                    }
                    OnlyUnpauser
                },
                {
                    fn CurrentlyPaused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <CurrentlyPaused as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::CurrentlyPaused)
                    }
                    CurrentlyPaused
                },
                {
                    fn WithdrawalAmountExceedsTotalDeposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <WithdrawalAmountExceedsTotalDeposits as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsErrors::WithdrawalAmountExceedsTotalDeposits,
                            )
                    }
                    WithdrawalAmountExceedsTotalDeposits
                },
                {
                    fn OnlyUnderlyingToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <OnlyUnderlyingToken as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::OnlyUnderlyingToken)
                    }
                    OnlyUnderlyingToken
                },
                {
                    fn InvalidNewPausedStatus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <InvalidNewPausedStatus as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(StrategyBaseTVLLimitsErrors::InvalidNewPausedStatus)
                    }
                    InvalidNewPausedStatus
                },
                {
                    fn BalanceExceedsMaxTotalDeposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrategyBaseTVLLimitsErrors> {
                        <BalanceExceedsMaxTotalDeposits as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                StrategyBaseTVLLimitsErrors::BalanceExceedsMaxTotalDeposits,
                            )
                    }
                    BalanceExceedsMaxTotalDeposits
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BalanceExceedsMaxTotalDeposits(inner) => {
                    <BalanceExceedsMaxTotalDeposits as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CurrentlyPaused(inner) => {
                    <CurrentlyPaused as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InputAddressZero(inner) => {
                    <InputAddressZero as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidNewPausedStatus(inner) => {
                    <InvalidNewPausedStatus as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MaxPerDepositExceedsMax(inner) => {
                    <MaxPerDepositExceedsMax as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NewSharesZero(inner) => {
                    <NewSharesZero as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OnlyPauser(inner) => {
                    <OnlyPauser as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OnlyStrategyManager(inner) => {
                    <OnlyStrategyManager as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OnlyUnderlyingToken(inner) => {
                    <OnlyUnderlyingToken as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OnlyUnpauser(inner) => {
                    <OnlyUnpauser as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TotalSharesExceedsMax(inner) => {
                    <TotalSharesExceedsMax as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::WithdrawalAmountExceedsTotalDeposits(inner) => {
                    <WithdrawalAmountExceedsTotalDeposits as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BalanceExceedsMaxTotalDeposits(inner) => {
                    <BalanceExceedsMaxTotalDeposits as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CurrentlyPaused(inner) => {
                    <CurrentlyPaused as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InputAddressZero(inner) => {
                    <InputAddressZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidNewPausedStatus(inner) => {
                    <InvalidNewPausedStatus as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MaxPerDepositExceedsMax(inner) => {
                    <MaxPerDepositExceedsMax as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NewSharesZero(inner) => {
                    <NewSharesZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OnlyPauser(inner) => {
                    <OnlyPauser as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OnlyStrategyManager(inner) => {
                    <OnlyStrategyManager as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OnlyUnderlyingToken(inner) => {
                    <OnlyUnderlyingToken as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OnlyUnpauser(inner) => {
                    <OnlyUnpauser as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TotalSharesExceedsMax(inner) => {
                    <TotalSharesExceedsMax as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::WithdrawalAmountExceedsTotalDeposits(inner) => {
                    <WithdrawalAmountExceedsTotalDeposits as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`StrategyBaseTVLLimits`](self) events.
    pub enum StrategyBaseTVLLimitsEvents {
        ExchangeRateEmitted(ExchangeRateEmitted),
        Initialized(Initialized),
        MaxPerDepositUpdated(MaxPerDepositUpdated),
        MaxTotalDepositsUpdated(MaxTotalDepositsUpdated),
        Paused(Paused),
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
=======
        PauserRegistrySet(PauserRegistrySet),
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
        StrategyTokenSet(StrategyTokenSet),
        Unpaused(Unpaused),
    }
    #[automatically_derived]
    impl StrategyBaseTVLLimitsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                28u8, 84u8, 7u8, 7u8, 176u8, 14u8, 181u8, 66u8, 123u8, 107u8, 119u8, 79u8, 199u8,
                153u8, 215u8, 86u8, 81u8, 106u8, 84u8, 174u8, 225u8, 8u8, 182u8, 75u8, 50u8, 122u8,
                204u8, 85u8, 175u8, 85u8, 117u8, 7u8,
            ],
            [
                53u8, 130u8, 209u8, 130u8, 142u8, 38u8, 191u8, 86u8, 189u8, 128u8, 21u8, 2u8,
                188u8, 2u8, 26u8, 192u8, 188u8, 138u8, 251u8, 87u8, 200u8, 38u8, 228u8, 152u8,
                107u8, 69u8, 89u8, 60u8, 143u8, 173u8, 56u8, 156u8,
            ],
            [
                106u8, 177u8, 129u8, 224u8, 68u8, 11u8, 251u8, 244u8, 186u8, 205u8, 242u8, 233u8,
                150u8, 116u8, 115u8, 92u8, 230u8, 99u8, 128u8, 5u8, 73u8, 6u8, 136u8, 197u8, 249u8,
                148u8, 245u8, 57u8, 147u8, 83u8, 228u8, 82u8,
            ],
            [
                127u8, 38u8, 184u8, 63u8, 249u8, 110u8, 31u8, 43u8, 106u8, 104u8, 47u8, 19u8, 56u8,
                82u8, 246u8, 121u8, 138u8, 9u8, 196u8, 101u8, 218u8, 149u8, 146u8, 20u8, 96u8,
                206u8, 251u8, 56u8, 71u8, 64u8, 36u8, 152u8,
            ],
            [
                171u8, 64u8, 163u8, 116u8, 188u8, 81u8, 222u8, 55u8, 34u8, 0u8, 168u8, 188u8,
                152u8, 26u8, 248u8, 201u8, 236u8, 220u8, 8u8, 223u8, 218u8, 239u8, 11u8, 182u8,
                224u8, 159u8, 136u8, 243u8, 198u8, 22u8, 239u8, 61u8,
            ],
            [
                210u8, 73u8, 79u8, 52u8, 121u8, 229u8, 218u8, 73u8, 211u8, 134u8, 101u8, 124u8,
                41u8, 44u8, 97u8, 11u8, 91u8, 1u8, 223u8, 49u8, 61u8, 7u8, 198u8, 46u8, 176u8,
                207u8, 164u8, 153u8, 36u8, 163u8, 27u8, 232u8,
            ],
            [
                249u8, 126u8, 212u8, 224u8, 131u8, 172u8, 172u8, 103u8, 131u8, 0u8, 37u8, 236u8,
                188u8, 117u8, 109u8, 143u8, 232u8, 71u8, 205u8, 189u8, 202u8, 76u8, 238u8, 63u8,
                225u8, 225u8, 40u8, 233u8, 139u8, 84u8, 236u8, 181u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for StrategyBaseTVLLimitsEvents {
        const NAME: &'static str = "StrategyBaseTVLLimitsEvents";
<<<<<<< HEAD:crates/utils/src/strategybasetvllimits.rs
        const COUNT: usize = 7usize;
=======
        const COUNT: usize = 8usize;
>>>>>>> dev:crates/utils/src/deploy/strategybasetvllimits.rs
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ExchangeRateEmitted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ExchangeRateEmitted as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::ExchangeRateEmitted)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::Initialized)
                }
                Some(<MaxPerDepositUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <MaxPerDepositUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::MaxPerDepositUpdated)
                }
                Some(<MaxTotalDepositsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <MaxTotalDepositsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::MaxTotalDepositsUpdated)
                }
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::Paused)
                }
                Some(<StrategyTokenSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <StrategyTokenSet as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::StrategyTokenSet)
                }
                Some(<StrategyTokenSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <StrategyTokenSet as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::StrategyTokenSet)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::Unpaused)
                }
                _ => alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                    name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                    log: alloy_sol_types::private::Box::new(
                        alloy_sol_types::private::LogData::new_unchecked(
                            topics.to_vec(),
                            data.to_vec().into(),
                        ),
                    ),
                }),
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for StrategyBaseTVLLimitsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ExchangeRateEmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MaxPerDepositUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MaxTotalDepositsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Paused(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::StrategyTokenSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::StrategyTokenSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ExchangeRateEmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MaxPerDepositUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MaxTotalDepositsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Paused(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::StrategyTokenSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::StrategyTokenSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StrategyBaseTVLLimits`](self) contract instance.

    See the [wrapper's documentation](`StrategyBaseTVLLimitsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StrategyBaseTVLLimitsInstance<T, P, N> {
        StrategyBaseTVLLimitsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _strategyManager: alloy::sol_types::private::Address,
        _pauserRegistry: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StrategyBaseTVLLimitsInstance<T, P, N>>,
    > {
        StrategyBaseTVLLimitsInstance::<T, P, N>::deploy(
            provider,
            _strategyManager,
            _pauserRegistry,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _strategyManager: alloy::sol_types::private::Address,
        _pauserRegistry: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        StrategyBaseTVLLimitsInstance::<T, P, N>::deploy_builder(
            provider,
            _strategyManager,
            _pauserRegistry,
        )
    }
    /**A [`StrategyBaseTVLLimits`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`StrategyBaseTVLLimits`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StrategyBaseTVLLimitsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StrategyBaseTVLLimitsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StrategyBaseTVLLimitsInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`StrategyBaseTVLLimits`](self) contract instance.

        See the [wrapper's documentation](`StrategyBaseTVLLimitsInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _strategyManager: alloy::sol_types::private::Address,
            _pauserRegistry: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<StrategyBaseTVLLimitsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _strategyManager, _pauserRegistry);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _strategyManager: alloy::sol_types::private::Address,
            _pauserRegistry: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(&constructorCall {
                        _strategyManager,
                        _pauserRegistry,
                    })[..],
                ]
                .concat()
                .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StrategyBaseTVLLimitsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StrategyBaseTVLLimitsInstance<T, P, N> {
            StrategyBaseTVLLimitsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`deposit`] function.
        pub fn deposit(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, depositCall, N> {
            self.call_builder(&depositCall { token, amount })
        }
        ///Creates a new call builder for the [`explanation`] function.
        pub fn explanation(&self) -> alloy_contract::SolCallBuilder<T, &P, explanationCall, N> {
            self.call_builder(&explanationCall {})
        }
        ///Creates a new call builder for the [`getTVLLimits`] function.
        pub fn getTVLLimits(&self) -> alloy_contract::SolCallBuilder<T, &P, getTVLLimitsCall, N> {
            self.call_builder(&getTVLLimitsCall {})
        }
        ///Creates a new call builder for the [`initialize_0`] function.
        pub fn initialize_0(
            &self,
            _maxPerDeposit: alloy::sol_types::private::primitives::aliases::U256,
            _maxTotalDeposits: alloy::sol_types::private::primitives::aliases::U256,
            _underlyingToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initialize_0Call, N> {
            self.call_builder(&initialize_0Call {
                _maxPerDeposit,
                _maxTotalDeposits,
                _underlyingToken,
            })
        }
        ///Creates a new call builder for the [`initialize_1`] function.
        pub fn initialize_1(
            &self,
            _underlyingToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initialize_1Call, N> {
            self.call_builder(&initialize_1Call { _underlyingToken })
        }
        ///Creates a new call builder for the [`maxPerDeposit`] function.
        pub fn maxPerDeposit(&self) -> alloy_contract::SolCallBuilder<T, &P, maxPerDepositCall, N> {
            self.call_builder(&maxPerDepositCall {})
        }
        ///Creates a new call builder for the [`maxTotalDeposits`] function.
        pub fn maxTotalDeposits(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxTotalDepositsCall, N> {
            self.call_builder(&maxTotalDepositsCall {})
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(
            &self,
            newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, pauseCall, N> {
            self.call_builder(&pauseCall { newPausedStatus })
        }
        ///Creates a new call builder for the [`pauseAll`] function.
        pub fn pauseAll(&self) -> alloy_contract::SolCallBuilder<T, &P, pauseAllCall, N> {
            self.call_builder(&pauseAllCall {})
        }
        ///Creates a new call builder for the [`paused_0`] function.
        pub fn paused_0(
            &self,
            index: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, paused_0Call, N> {
            self.call_builder(&paused_0Call { index })
        }
        ///Creates a new call builder for the [`paused_1`] function.
        pub fn paused_1(&self) -> alloy_contract::SolCallBuilder<T, &P, paused_1Call, N> {
            self.call_builder(&paused_1Call {})
        }
        ///Creates a new call builder for the [`pauserRegistry`] function.
        pub fn pauserRegistry(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pauserRegistryCall, N> {
            self.call_builder(&pauserRegistryCall {})
        }
        ///Creates a new call builder for the [`setTVLLimits`] function.
        pub fn setTVLLimits(
            &self,
            newMaxPerDeposit: alloy::sol_types::private::primitives::aliases::U256,
            newMaxTotalDeposits: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTVLLimitsCall, N> {
            self.call_builder(&setTVLLimitsCall {
                newMaxPerDeposit,
                newMaxTotalDeposits,
            })
        }
        ///Creates a new call builder for the [`shares`] function.
        pub fn shares(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, sharesCall, N> {
            self.call_builder(&sharesCall { user })
        }
        ///Creates a new call builder for the [`sharesToUnderlying`] function.
        pub fn sharesToUnderlying(
            &self,
            amountShares: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, sharesToUnderlyingCall, N> {
            self.call_builder(&sharesToUnderlyingCall { amountShares })
        }
        ///Creates a new call builder for the [`sharesToUnderlyingView`] function.
        pub fn sharesToUnderlyingView(
            &self,
            amountShares: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, sharesToUnderlyingViewCall, N> {
            self.call_builder(&sharesToUnderlyingViewCall { amountShares })
        }
        ///Creates a new call builder for the [`strategyManager`] function.
        pub fn strategyManager(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, strategyManagerCall, N> {
            self.call_builder(&strategyManagerCall {})
        }
        ///Creates a new call builder for the [`totalShares`] function.
        pub fn totalShares(&self) -> alloy_contract::SolCallBuilder<T, &P, totalSharesCall, N> {
            self.call_builder(&totalSharesCall {})
        }
        ///Creates a new call builder for the [`underlyingToShares`] function.
        pub fn underlyingToShares(
            &self,
            amountUnderlying: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, underlyingToSharesCall, N> {
            self.call_builder(&underlyingToSharesCall { amountUnderlying })
        }
        ///Creates a new call builder for the [`underlyingToSharesView`] function.
        pub fn underlyingToSharesView(
            &self,
            amountUnderlying: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, underlyingToSharesViewCall, N> {
            self.call_builder(&underlyingToSharesViewCall { amountUnderlying })
        }
        ///Creates a new call builder for the [`underlyingToken`] function.
        pub fn underlyingToken(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, underlyingTokenCall, N> {
            self.call_builder(&underlyingTokenCall {})
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(
            &self,
            newPausedStatus: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, unpauseCall, N> {
            self.call_builder(&unpauseCall { newPausedStatus })
        }
        ///Creates a new call builder for the [`userUnderlying`] function.
        pub fn userUnderlying(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, userUnderlyingCall, N> {
            self.call_builder(&userUnderlyingCall { user })
        }
        ///Creates a new call builder for the [`userUnderlyingView`] function.
        pub fn userUnderlyingView(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, userUnderlyingViewCall, N> {
            self.call_builder(&userUnderlyingViewCall { user })
        }
        ///Creates a new call builder for the [`withdraw`] function.
        pub fn withdraw(
            &self,
            recipient: alloy::sol_types::private::Address,
            token: alloy::sol_types::private::Address,
            amountShares: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawCall, N> {
            self.call_builder(&withdrawCall {
                recipient,
                token,
                amountShares,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > StrategyBaseTVLLimitsInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ExchangeRateEmitted`] event.
        pub fn ExchangeRateEmitted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ExchangeRateEmitted, N> {
            self.event_filter::<ExchangeRateEmitted>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`MaxPerDepositUpdated`] event.
        pub fn MaxPerDepositUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, MaxPerDepositUpdated, N> {
            self.event_filter::<MaxPerDepositUpdated>()
        }
        ///Creates a new event filter for the [`MaxTotalDepositsUpdated`] event.
        pub fn MaxTotalDepositsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, MaxTotalDepositsUpdated, N> {
            self.event_filter::<MaxTotalDepositsUpdated>()
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<T, &P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`StrategyTokenSet`] event.
        pub fn StrategyTokenSet_filter(&self) -> alloy_contract::Event<T, &P, StrategyTokenSet, N> {
            self.event_filter::<StrategyTokenSet>()
        }
        ///Creates a new event filter for the [`StrategyTokenSet`] event.
        pub fn StrategyTokenSet_filter(&self) -> alloy_contract::Event<T, &P, StrategyTokenSet, N> {
            self.event_filter::<StrategyTokenSet>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<T, &P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
    }
}
