/**

Generated by the following Solidity interface...
```solidity
interface ContractsRegistry {
    function anvil_test(bytes32) external view returns (uint256 timestamp, uint256 block_number, int256 index);
    function contractCount() external view returns (uint256);
    function contractNames(uint256) external view returns (string memory);
    function contracts(string memory) external view returns (address);
    function get_test_values(string memory test_name, int256 index) external view returns (uint256, uint256, int256);
    function registerContract(string memory name, address _contract) external;
    function store_test(string memory test_name, int256 index, uint256 timestamp, uint256 block_number) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "anvil_test",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "block_number",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractNames",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contracts",
    "inputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "get_test_values",
    "inputs": [
      {
        "name": "test_name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "registerContract",
    "inputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "_contract",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "store_test",
    "inputs": [
      {
        "name": "test_name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "index",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "block_number",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ContractsRegistry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346015576106e3908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081633ca6bb92146104e7575080636842109e146104465780637f3c2c28146102185780637fafbbdd146101c95780638736381a146101ac5780638c5b83851461014b5763acd5baa214610069575f80fd5b346101475760803660031901126101475760043567ffffffffffffffff81116101475761009a903690600401610640565b60243560405160208101906100c2816100b4858786610696565b03601f19810183528261061e565b5190205f52600360205260405f205461014757600290604051926100e584610602565b604435845260208401906064358252604085019283526040516101276020828180820195805191829101875e81015f838201520301601f19810183528261061e565b5190205f52600360205260405f2093518455516001840155519101555f80f35b5f80fd5b346101475760203660031901126101475760043567ffffffffffffffff81116101475761017e6020913690600401610640565b8160405191805191829101835e5f90820190815281900382019020546040516001600160a01b039091168152f35b34610147575f366003190112610147576020600254604051908152f35b34610147576020366003190112610147576004355f52600360205260405f20805461021460026001840154930154604051938493846040919493926060820195825260208201520152565b0390f35b346101475760403660031901126101475760043567ffffffffffffffff811161014757610249903690600401610640565b6024356001600160a01b038116908190036101475760405182519060208401918083835e5f9082019081528190036020019020546001600160a01b0316610401576020604051809285518091835e81015f815203019020906bffffffffffffffffffffffff60a01b8254161790556002545f52600160205260405f20815167ffffffffffffffff81116103ed576102e082546105ca565b601f81116103a8575b50602092601f821160011461034957928192935f9261033e575b50508160011b915f199060031b1c19161790555b6002545f19811461032a57600101600255005b634e487b7160e01b5f52601160045260245ffd5b015190508380610303565b601f19821693835f52805f20915f5b8681106103905750836001959610610378575b505050811b019055610317565b01515f1960f88460031b161c1916905583808061036b565b91926020600181928685015181550194019201610358565b825f5260205f20601f830160051c810191602084106103e3575b601f0160051c01905b8181106103d857506102e9565b5f81556001016103cb565b90915081906103c2565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152601b60248201527f636f6e747261637420616c7265616479207265676973746572656400000000006044820152606490fd5b346101475760403660031901126101475760043567ffffffffffffffff811161014757610477903690600401610640565b604051610490816100b460208201946024359086610696565b5190205f52600360205260405f206040516104aa81610602565b6102146040835492838152600260018601549586602084015201549182910152604051938493846040919493926060820195825260208201520152565b34610147576020366003190112610147576004355f52600160205260405f20905f825492610514846105ca565b9081845260208401946001811690815f146105ad575060011461056d575b846040856105428187038261061e565b8151928391602083525180918160208501528484015e5f828201840152601f01601f19168101030190f35b5f90815260208120939250905b8082106105935750909150810160200161054282610532565b91926001816020925483858801015201910190929161057a565b60ff191686525050151560051b8201602001905061054282610532565b90600182811c921680156105f8575b60208310146105e457565b634e487b7160e01b5f52602260045260245ffd5b91607f16916105d9565b6060810190811067ffffffffffffffff8211176103ed57604052565b90601f8019910116810190811067ffffffffffffffff8211176103ed57604052565b81601f820112156101475780359067ffffffffffffffff82116103ed5760405192610675601f8401601f19166020018561061e565b8284526020838301011161014757815f926020809301838601378301015290565b60209291908391805192839101825e01908152019056fea2646970667358221220e790fad62ea39bf50b13f08f0b6e31aa702b544171c7ebcab0189edfc50ffd2164736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x06\xE3\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c<\xA6\xBB\x92\x14a\x04\xE7WP\x80chB\x10\x9E\x14a\x04FW\x80c\x7F<,(\x14a\x02\x18W\x80c\x7F\xAF\xBB\xDD\x14a\x01\xC9W\x80c\x8768\x1A\x14a\x01\xACW\x80c\x8C[\x83\x85\x14a\x01KWc\xAC\xD5\xBA\xA2\x14a\0iW_\x80\xFD[4a\x01GW`\x806`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\0\x9A\x906\x90`\x04\x01a\x06@V[`$5`@Q` \x81\x01\x90a\0\xC2\x81a\0\xB4\x85\x87\x86a\x06\x96V[\x03`\x1F\x19\x81\x01\x83R\x82a\x06\x1EV[Q\x90 _R`\x03` R`@_ Ta\x01GW`\x02\x90`@Q\x92a\0\xE5\x84a\x06\x02V[`D5\x84R` \x84\x01\x90`d5\x82R`@\x85\x01\x92\x83R`@Qa\x01'` \x82\x81\x80\x82\x01\x95\x80Q\x91\x82\x91\x01\x87^\x81\x01_\x83\x82\x01R\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x06\x1EV[Q\x90 _R`\x03` R`@_ \x93Q\x84UQ`\x01\x84\x01UQ\x91\x01U_\x80\xF3[_\x80\xFD[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x01~` \x916\x90`\x04\x01a\x06@V[\x81`@Q\x91\x80Q\x91\x82\x91\x01\x83^_\x90\x82\x01\x90\x81R\x81\x90\x03\x82\x01\x90 T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\xF3[4a\x01GW_6`\x03\x19\x01\x12a\x01GW` `\x02T`@Q\x90\x81R\xF3[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045_R`\x03` R`@_ \x80Ta\x02\x14`\x02`\x01\x84\x01T\x93\x01T`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[\x03\x90\xF3[4a\x01GW`@6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x02I\x906\x90`\x04\x01a\x06@V[`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01GW`@Q\x82Q\x90` \x84\x01\x91\x80\x83\x83^_\x90\x82\x01\x90\x81R\x81\x90\x03` \x01\x90 T`\x01`\x01`\xA0\x1B\x03\x16a\x04\x01W` `@Q\x80\x92\x85Q\x80\x91\x83^\x81\x01_\x81R\x03\x01\x90 \x90k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x82T\x16\x17\x90U`\x02T_R`\x01` R`@_ \x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xEDWa\x02\xE0\x82Ta\x05\xCAV[`\x1F\x81\x11a\x03\xA8W[P` \x92`\x1F\x82\x11`\x01\x14a\x03IW\x92\x81\x92\x93_\x92a\x03>W[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90U[`\x02T_\x19\x81\x14a\x03*W`\x01\x01`\x02U\0[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x01Q\x90P\x83\x80a\x03\x03V[`\x1F\x19\x82\x16\x93\x83_R\x80_ \x91_[\x86\x81\x10a\x03\x90WP\x83`\x01\x95\x96\x10a\x03xW[PPP\x81\x1B\x01\x90Ua\x03\x17V[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U\x83\x80\x80a\x03kV[\x91\x92` `\x01\x81\x92\x86\x85\x01Q\x81U\x01\x94\x01\x92\x01a\x03XV[\x82_R` _ `\x1F\x83\x01`\x05\x1C\x81\x01\x91` \x84\x10a\x03\xE3W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x03\xD8WPa\x02\xE9V[_\x81U`\x01\x01a\x03\xCBV[\x90\x91P\x81\x90a\x03\xC2V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fcontract already registered\0\0\0\0\0`D\x82\x01R`d\x90\xFD[4a\x01GW`@6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x04w\x906\x90`\x04\x01a\x06@V[`@Qa\x04\x90\x81a\0\xB4` \x82\x01\x94`$5\x90\x86a\x06\x96V[Q\x90 _R`\x03` R`@_ `@Qa\x04\xAA\x81a\x06\x02V[a\x02\x14`@\x83T\x92\x83\x81R`\x02`\x01\x86\x01T\x95\x86` \x84\x01R\x01T\x91\x82\x91\x01R`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045_R`\x01` R`@_ \x90_\x82T\x92a\x05\x14\x84a\x05\xCAV[\x90\x81\x84R` \x84\x01\x94`\x01\x81\x16\x90\x81_\x14a\x05\xADWP`\x01\x14a\x05mW[\x84`@\x85a\x05B\x81\x87\x03\x82a\x06\x1EV[\x81Q\x92\x83\x91` \x83RQ\x80\x91\x81` \x85\x01R\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xF3[_\x90\x81R` \x81 \x93\x92P\x90[\x80\x82\x10a\x05\x93WP\x90\x91P\x81\x01` \x01a\x05B\x82a\x052V[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x05zV[`\xFF\x19\x16\x86RPP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x05B\x82a\x052V[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x05\xF8W[` \x83\x10\x14a\x05\xE4WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x05\xD9V[``\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xEDW`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xEDW`@RV[\x81`\x1F\x82\x01\x12\x15a\x01GW\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x03\xEDW`@Q\x92a\x06u`\x1F\x84\x01`\x1F\x19\x16` \x01\x85a\x06\x1EV[\x82\x84R` \x83\x83\x01\x01\x11a\x01GW\x81_\x92` \x80\x93\x01\x83\x86\x017\x83\x01\x01R\x90V[` \x92\x91\x90\x83\x91\x80Q\x92\x83\x91\x01\x82^\x01\x90\x81R\x01\x90V\xFE\xA2dipfsX\"\x12 \xE7\x90\xFA\xD6.\xA3\x9B\xF5\x0B\x13\xF0\x8F\x0Bn1\xAAp+TAq\xC7\xEB\xCA\xB0\x18\x9E\xDF\xC5\x0F\xFD!dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c9081633ca6bb92146104e7575080636842109e146104465780637f3c2c28146102185780637fafbbdd146101c95780638736381a146101ac5780638c5b83851461014b5763acd5baa214610069575f80fd5b346101475760803660031901126101475760043567ffffffffffffffff81116101475761009a903690600401610640565b60243560405160208101906100c2816100b4858786610696565b03601f19810183528261061e565b5190205f52600360205260405f205461014757600290604051926100e584610602565b604435845260208401906064358252604085019283526040516101276020828180820195805191829101875e81015f838201520301601f19810183528261061e565b5190205f52600360205260405f2093518455516001840155519101555f80f35b5f80fd5b346101475760203660031901126101475760043567ffffffffffffffff81116101475761017e6020913690600401610640565b8160405191805191829101835e5f90820190815281900382019020546040516001600160a01b039091168152f35b34610147575f366003190112610147576020600254604051908152f35b34610147576020366003190112610147576004355f52600360205260405f20805461021460026001840154930154604051938493846040919493926060820195825260208201520152565b0390f35b346101475760403660031901126101475760043567ffffffffffffffff811161014757610249903690600401610640565b6024356001600160a01b038116908190036101475760405182519060208401918083835e5f9082019081528190036020019020546001600160a01b0316610401576020604051809285518091835e81015f815203019020906bffffffffffffffffffffffff60a01b8254161790556002545f52600160205260405f20815167ffffffffffffffff81116103ed576102e082546105ca565b601f81116103a8575b50602092601f821160011461034957928192935f9261033e575b50508160011b915f199060031b1c19161790555b6002545f19811461032a57600101600255005b634e487b7160e01b5f52601160045260245ffd5b015190508380610303565b601f19821693835f52805f20915f5b8681106103905750836001959610610378575b505050811b019055610317565b01515f1960f88460031b161c1916905583808061036b565b91926020600181928685015181550194019201610358565b825f5260205f20601f830160051c810191602084106103e3575b601f0160051c01905b8181106103d857506102e9565b5f81556001016103cb565b90915081906103c2565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152601b60248201527f636f6e747261637420616c7265616479207265676973746572656400000000006044820152606490fd5b346101475760403660031901126101475760043567ffffffffffffffff811161014757610477903690600401610640565b604051610490816100b460208201946024359086610696565b5190205f52600360205260405f206040516104aa81610602565b6102146040835492838152600260018601549586602084015201549182910152604051938493846040919493926060820195825260208201520152565b34610147576020366003190112610147576004355f52600160205260405f20905f825492610514846105ca565b9081845260208401946001811690815f146105ad575060011461056d575b846040856105428187038261061e565b8151928391602083525180918160208501528484015e5f828201840152601f01601f19168101030190f35b5f90815260208120939250905b8082106105935750909150810160200161054282610532565b91926001816020925483858801015201910190929161057a565b60ff191686525050151560051b8201602001905061054282610532565b90600182811c921680156105f8575b60208310146105e457565b634e487b7160e01b5f52602260045260245ffd5b91607f16916105d9565b6060810190811067ffffffffffffffff8211176103ed57604052565b90601f8019910116810190811067ffffffffffffffff8211176103ed57604052565b81601f820112156101475780359067ffffffffffffffff82116103ed5760405192610675601f8401601f19166020018561061e565b8284526020838301011161014757815f926020809301838601378301015290565b60209291908391805192839101825e01908152019056fea2646970667358221220e790fad62ea39bf50b13f08f0b6e31aa702b544171c7ebcab0189edfc50ffd2164736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c<\xA6\xBB\x92\x14a\x04\xE7WP\x80chB\x10\x9E\x14a\x04FW\x80c\x7F<,(\x14a\x02\x18W\x80c\x7F\xAF\xBB\xDD\x14a\x01\xC9W\x80c\x8768\x1A\x14a\x01\xACW\x80c\x8C[\x83\x85\x14a\x01KWc\xAC\xD5\xBA\xA2\x14a\0iW_\x80\xFD[4a\x01GW`\x806`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\0\x9A\x906\x90`\x04\x01a\x06@V[`$5`@Q` \x81\x01\x90a\0\xC2\x81a\0\xB4\x85\x87\x86a\x06\x96V[\x03`\x1F\x19\x81\x01\x83R\x82a\x06\x1EV[Q\x90 _R`\x03` R`@_ Ta\x01GW`\x02\x90`@Q\x92a\0\xE5\x84a\x06\x02V[`D5\x84R` \x84\x01\x90`d5\x82R`@\x85\x01\x92\x83R`@Qa\x01'` \x82\x81\x80\x82\x01\x95\x80Q\x91\x82\x91\x01\x87^\x81\x01_\x83\x82\x01R\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x06\x1EV[Q\x90 _R`\x03` R`@_ \x93Q\x84UQ`\x01\x84\x01UQ\x91\x01U_\x80\xF3[_\x80\xFD[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x01~` \x916\x90`\x04\x01a\x06@V[\x81`@Q\x91\x80Q\x91\x82\x91\x01\x83^_\x90\x82\x01\x90\x81R\x81\x90\x03\x82\x01\x90 T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\xF3[4a\x01GW_6`\x03\x19\x01\x12a\x01GW` `\x02T`@Q\x90\x81R\xF3[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045_R`\x03` R`@_ \x80Ta\x02\x14`\x02`\x01\x84\x01T\x93\x01T`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[\x03\x90\xF3[4a\x01GW`@6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x02I\x906\x90`\x04\x01a\x06@V[`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01GW`@Q\x82Q\x90` \x84\x01\x91\x80\x83\x83^_\x90\x82\x01\x90\x81R\x81\x90\x03` \x01\x90 T`\x01`\x01`\xA0\x1B\x03\x16a\x04\x01W` `@Q\x80\x92\x85Q\x80\x91\x83^\x81\x01_\x81R\x03\x01\x90 \x90k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x82T\x16\x17\x90U`\x02T_R`\x01` R`@_ \x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xEDWa\x02\xE0\x82Ta\x05\xCAV[`\x1F\x81\x11a\x03\xA8W[P` \x92`\x1F\x82\x11`\x01\x14a\x03IW\x92\x81\x92\x93_\x92a\x03>W[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90U[`\x02T_\x19\x81\x14a\x03*W`\x01\x01`\x02U\0[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x01Q\x90P\x83\x80a\x03\x03V[`\x1F\x19\x82\x16\x93\x83_R\x80_ \x91_[\x86\x81\x10a\x03\x90WP\x83`\x01\x95\x96\x10a\x03xW[PPP\x81\x1B\x01\x90Ua\x03\x17V[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U\x83\x80\x80a\x03kV[\x91\x92` `\x01\x81\x92\x86\x85\x01Q\x81U\x01\x94\x01\x92\x01a\x03XV[\x82_R` _ `\x1F\x83\x01`\x05\x1C\x81\x01\x91` \x84\x10a\x03\xE3W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x03\xD8WPa\x02\xE9V[_\x81U`\x01\x01a\x03\xCBV[\x90\x91P\x81\x90a\x03\xC2V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fcontract already registered\0\0\0\0\0`D\x82\x01R`d\x90\xFD[4a\x01GW`@6`\x03\x19\x01\x12a\x01GW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01GWa\x04w\x906\x90`\x04\x01a\x06@V[`@Qa\x04\x90\x81a\0\xB4` \x82\x01\x94`$5\x90\x86a\x06\x96V[Q\x90 _R`\x03` R`@_ `@Qa\x04\xAA\x81a\x06\x02V[a\x02\x14`@\x83T\x92\x83\x81R`\x02`\x01\x86\x01T\x95\x86` \x84\x01R\x01T\x91\x82\x91\x01R`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[4a\x01GW` 6`\x03\x19\x01\x12a\x01GW`\x045_R`\x01` R`@_ \x90_\x82T\x92a\x05\x14\x84a\x05\xCAV[\x90\x81\x84R` \x84\x01\x94`\x01\x81\x16\x90\x81_\x14a\x05\xADWP`\x01\x14a\x05mW[\x84`@\x85a\x05B\x81\x87\x03\x82a\x06\x1EV[\x81Q\x92\x83\x91` \x83RQ\x80\x91\x81` \x85\x01R\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xF3[_\x90\x81R` \x81 \x93\x92P\x90[\x80\x82\x10a\x05\x93WP\x90\x91P\x81\x01` \x01a\x05B\x82a\x052V[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x05zV[`\xFF\x19\x16\x86RPP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x05B\x82a\x052V[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x05\xF8W[` \x83\x10\x14a\x05\xE4WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x05\xD9V[``\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xEDW`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xEDW`@RV[\x81`\x1F\x82\x01\x12\x15a\x01GW\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x03\xEDW`@Q\x92a\x06u`\x1F\x84\x01`\x1F\x19\x16` \x01\x85a\x06\x1EV[\x82\x84R` \x83\x83\x01\x01\x11a\x01GW\x81_\x92` \x80\x93\x01\x83\x86\x017\x83\x01\x01R\x90V[` \x92\x91\x90\x83\x91\x80Q\x92\x83\x91\x01\x82^\x01\x90\x81R\x01\x90V\xFE\xA2dipfsX\"\x12 \xE7\x90\xFA\xD6.\xA3\x9B\xF5\x0B\x13\xF0\x8F\x0Bn1\xAAp+TAq\xC7\xEB\xCA\xB0\x18\x9E\xDF\xC5\x0F\xFD!dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `anvil_test(bytes32)` and selector `0x7fafbbdd`.
    ```solidity
    function anvil_test(bytes32) external view returns (uint256 timestamp, uint256 block_number, int256 index);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct anvil_testCall {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`anvil_test(bytes32)`](anvil_testCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct anvil_testReturn {
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
        pub block_number: alloy::sol_types::private::primitives::aliases::U256,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<anvil_testCall> for UnderlyingRustTuple<'_> {
                fn from(value: anvil_testCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for anvil_testCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<anvil_testReturn> for UnderlyingRustTuple<'_> {
                fn from(value: anvil_testReturn) -> Self {
                    (value.timestamp, value.block_number, value.index)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for anvil_testReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        timestamp: tuple.0,
                        block_number: tuple.1,
                        index: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for anvil_testCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = anvil_testReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "anvil_test(bytes32)";
            const SELECTOR: [u8; 4] = [127u8, 175u8, 187u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contractCount()` and selector `0x8736381a`.
    ```solidity
    function contractCount() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractCountCall {}
    ///Container type for the return parameters of the [`contractCount()`](contractCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractCount()";
            const SELECTOR: [u8; 4] = [135u8, 54u8, 56u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contractNames(uint256)` and selector `0x3ca6bb92`.
    ```solidity
    function contractNames(uint256) external view returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractNamesCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`contractNames(uint256)`](contractNamesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractNamesReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractNamesCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractNamesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractNamesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractNamesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractNamesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractNamesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractNamesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractNamesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractNames(uint256)";
            const SELECTOR: [u8; 4] = [60u8, 166u8, 187u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `contracts(string)` and selector `0x8c5b8385`.
    ```solidity
    function contracts(string memory) external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractsCall {
        pub _0: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`contracts(string)`](contractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractsReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractsCall> for UnderlyingRustTuple<'_> {
                fn from(value: contractsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contracts(string)";
            const SELECTOR: [u8; 4] = [140u8, 91u8, 131u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `get_test_values(string,int256)` and selector `0x6842109e`.
    ```solidity
    function get_test_values(string memory test_name, int256 index) external view returns (uint256, uint256, int256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_test_valuesCall {
        pub test_name: alloy::sol_types::private::String,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
    }
    ///Container type for the return parameters of the [`get_test_values(string,int256)`](get_test_valuesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_test_valuesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
        pub _2: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_test_valuesCall> for UnderlyingRustTuple<'_> {
                fn from(value: get_test_valuesCall) -> Self {
                    (value.test_name, value.index)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_test_valuesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        test_name: tuple.0,
                        index: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_test_valuesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: get_test_valuesReturn) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_test_valuesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for get_test_valuesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = get_test_valuesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Int<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get_test_values(string,int256)";
            const SELECTOR: [u8; 4] = [104u8, 66u8, 16u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.test_name,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.index,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `registerContract(string,address)` and selector `0x7f3c2c28`.
    ```solidity
    function registerContract(string memory name, address _contract) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerContractCall {
        pub name: alloy::sol_types::private::String,
        pub _contract: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`registerContract(string,address)`](registerContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerContractReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerContractCall> for UnderlyingRustTuple<'_> {
                fn from(value: registerContractCall) -> Self {
                    (value.name, value._contract)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        _contract: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerContractReturn> for UnderlyingRustTuple<'_> {
                fn from(value: registerContractReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for registerContractCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = registerContractReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "registerContract(string,address)";
            const SELECTOR: [u8; 4] = [127u8, 60u8, 44u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._contract,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `store_test(string,int256,uint256,uint256)` and selector `0xacd5baa2`.
    ```solidity
    function store_test(string memory test_name, int256 index, uint256 timestamp, uint256 block_number) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct store_testCall {
        pub test_name: alloy::sol_types::private::String,
        pub index: alloy::sol_types::private::primitives::aliases::I256,
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
        pub block_number: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`store_test(string,int256,uint256,uint256)`](store_testCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct store_testReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::I256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<store_testCall> for UnderlyingRustTuple<'_> {
                fn from(value: store_testCall) -> Self {
                    (
                        value.test_name,
                        value.index,
                        value.timestamp,
                        value.block_number,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for store_testCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        test_name: tuple.0,
                        index: tuple.1,
                        timestamp: tuple.2,
                        block_number: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<store_testReturn> for UnderlyingRustTuple<'_> {
                fn from(value: store_testReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for store_testReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for store_testCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = store_testReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "store_test(string,int256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [172u8, 213u8, 186u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.test_name,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.index,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.timestamp,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.block_number,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`ContractsRegistry`](self) function calls.
    pub enum ContractsRegistryCalls {
        anvil_test(anvil_testCall),
        contractCount(contractCountCall),
        contractNames(contractNamesCall),
        contracts(contractsCall),
        get_test_values(get_test_valuesCall),
        registerContract(registerContractCall),
        store_test(store_testCall),
    }
    #[automatically_derived]
    impl ContractsRegistryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [60u8, 166u8, 187u8, 146u8],
            [104u8, 66u8, 16u8, 158u8],
            [127u8, 60u8, 44u8, 40u8],
            [127u8, 175u8, 187u8, 221u8],
            [135u8, 54u8, 56u8, 26u8],
            [140u8, 91u8, 131u8, 133u8],
            [172u8, 213u8, 186u8, 162u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ContractsRegistryCalls {
        const NAME: &'static str = "ContractsRegistryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::anvil_test(_) => <anvil_testCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contractCount(_) => <contractCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contractNames(_) => <contractNamesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::contracts(_) => <contractsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::get_test_values(_) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::registerContract(_) => {
                    <registerContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::store_test(_) => <store_testCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<ContractsRegistryCalls>] = &[
                {
                    fn contractNames(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractNamesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::contractNames)
                    }
                    contractNames
                },
                {
                    fn get_test_values(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <get_test_valuesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::get_test_values)
                    }
                    get_test_values
                },
                {
                    fn registerContract(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <registerContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::registerContract)
                    }
                    registerContract
                },
                {
                    fn anvil_test(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <anvil_testCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::anvil_test)
                    }
                    anvil_test
                },
                {
                    fn contractCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::contractCount)
                    }
                    contractCount
                },
                {
                    fn contracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <contractsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::contracts)
                    }
                    contracts
                },
                {
                    fn store_test(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <store_testCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::store_test)
                    }
                    store_test
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::anvil_test(inner) => {
                    <anvil_testCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contractCount(inner) => {
                    <contractCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contractNames(inner) => {
                    <contractNamesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::contracts(inner) => {
                    <contractsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::get_test_values(inner) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::registerContract(inner) => {
                    <registerContractCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::store_test(inner) => {
                    <store_testCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::anvil_test(inner) => {
                    <anvil_testCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contractCount(inner) => {
                    <contractCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contractNames(inner) => {
                    <contractNamesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::contracts(inner) => {
                    <contractsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::get_test_values(inner) => {
                    <get_test_valuesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::registerContract(inner) => {
                    <registerContractCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::store_test(inner) => {
                    <store_testCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

    See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ContractsRegistryInstance<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<ContractsRegistryInstance<T, P, N>>>
    {
        ContractsRegistryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ContractsRegistry`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`ContractsRegistry`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ContractsRegistryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ContractsRegistryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ContractsRegistryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

        See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ContractsRegistryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ContractsRegistryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ContractsRegistryInstance<T, P, N> {
            ContractsRegistryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`anvil_test`] function.
        pub fn anvil_test(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, anvil_testCall, N> {
            self.call_builder(&anvil_testCall { _0 })
        }
        ///Creates a new call builder for the [`contractCount`] function.
        pub fn contractCount(&self) -> alloy_contract::SolCallBuilder<T, &P, contractCountCall, N> {
            self.call_builder(&contractCountCall {})
        }
        ///Creates a new call builder for the [`contractNames`] function.
        pub fn contractNames(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, contractNamesCall, N> {
            self.call_builder(&contractNamesCall { _0 })
        }
        ///Creates a new call builder for the [`contracts`] function.
        pub fn contracts(
            &self,
            _0: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, contractsCall, N> {
            self.call_builder(&contractsCall { _0 })
        }
        ///Creates a new call builder for the [`get_test_values`] function.
        pub fn get_test_values(
            &self,
            test_name: alloy::sol_types::private::String,
            index: alloy::sol_types::private::primitives::aliases::I256,
        ) -> alloy_contract::SolCallBuilder<T, &P, get_test_valuesCall, N> {
            self.call_builder(&get_test_valuesCall { test_name, index })
        }
        ///Creates a new call builder for the [`registerContract`] function.
        pub fn registerContract(
            &self,
            name: alloy::sol_types::private::String,
            _contract: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, registerContractCall, N> {
            self.call_builder(&registerContractCall { name, _contract })
        }
        ///Creates a new call builder for the [`store_test`] function.
        pub fn store_test(
            &self,
            test_name: alloy::sol_types::private::String,
            index: alloy::sol_types::private::primitives::aliases::I256,
            timestamp: alloy::sol_types::private::primitives::aliases::U256,
            block_number: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, store_testCall, N> {
            self.call_builder(&store_testCall {
                test_name,
                index,
                timestamp,
                block_number,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
