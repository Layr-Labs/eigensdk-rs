/**

Generated by the following Solidity interface...
```solidity
interface BitmapUtilsWrapper {
    function bitmapToBytesArray(uint256 bitmap) external pure returns (bytes memory bytesArray);
    function countNumOnes(uint256 n) external pure returns (uint16);
    function isArrayStrictlyAscendingOrdered(bytes memory bytesArray) external pure returns (bool);
    function isEmpty(uint256 bitmap) external pure returns (bool);
    function isSet(uint256 bitmap, uint8 numberToCheckForInclusion) external pure returns (bool);
    function isSubsetOf(uint256 a, uint256 b) external pure returns (bool);
    function minus(uint256 a, uint256 b) external pure returns (uint256);
    function noBitsInCommon(uint256 a, uint256 b) external pure returns (bool);
    function orderedBytesArrayToBitmap(bytes memory orderedBytesArray) external pure returns (uint256);
    function plus(uint256 a, uint256 b) external pure returns (uint256);
    function setBit(uint256 bitmap, uint8 bit) external pure returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "bitmapToBytesArray",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "bytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "countNumOnes",
    "inputs": [
      {
        "name": "n",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isArrayStrictlyAscendingOrdered",
    "inputs": [
      {
        "name": "bytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isEmpty",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isSet",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "numberToCheckForInclusion",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isSubsetOf",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "minus",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "noBitsInCommon",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "orderedBytesArrayToBitmap",
    "inputs": [
      {
        "name": "orderedBytesArray",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "plus",
    "inputs": [
      {
        "name": "a",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "b",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "setBit",
    "inputs": [
      {
        "name": "bitmap",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "bit",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod BitmapUtilsWrapper {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50610d048061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100a7575f3560e01c80636c73bd871161006f5780636c73bd871461019b57806376370f1f146101cb578063a8e3eabb146101fb578063dd5471851461022b578063f4f3bdc11461025b578063f90cfeef1461028b576100a7565b80631ff4adba146100ab57806320e88403146100db5780634ee290901461010b57806362e2ef331461013b57806366098d4f1461016b575b5f5ffd5b6100c560048036038101906100c091906107b9565b6102bb565b6040516100d29190610811565b60405180910390f35b6100f560048036038101906100f0919061088b565b6102ce565b60405161010291906108e5565b60405180910390f35b610125600480360381019061012091906107b9565b610323565b60405161013291906108e5565b60405180910390f35b610155600480360381019061015091906108fe565b610336565b6040516101629190610811565b60405180910390f35b610185600480360381019061018091906108fe565b610349565b60405161019291906108e5565b60405180910390f35b6101b560048036038101906101b0919061088b565b61035c565b6040516101c29190610811565b60405180910390f35b6101e560048036038101906101e0919061093c565b61036f565b6040516101f29190610983565b60405180910390f35b610215600480360381019061021091906108fe565b610380565b6040516102229190610811565b60405180910390f35b6102456004803603810190610240919061093c565b610393565b6040516102529190610a0c565b60405180910390f35b610275600480360381019061027091906108fe565b6103a5565b60405161028291906108e5565b60405180910390f35b6102a560048036038101906102a0919061093c565b6103b8565b6040516102b29190610811565b60405180910390f35b5f6102c683836103c9565b905092915050565b5f61031b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506103df565b905092915050565b5f61032e83836104f9565b905092915050565b5f610341838361050c565b905092915050565b5f610354838361051a565b905092915050565b5f6103678383610526565b905092915050565b5f610379826105f0565b9050919050565b5f61038b838361062b565b905092915050565b606061039e82610639565b9050919050565b5f6103b08383610730565b905092915050565b5f6103c28261073d565b9050919050565b5f60018260ff1684901c16600114905092915050565b5f61010082511115610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610ad2565b60405180910390fd5b5f825103610436575f90506104f4565b5f5f835f8151811061044b5761044a610af0565b5b602001015160f81c60f81b60f81c60ff166001901b91505f600190505b84518110156104ed5784818151811061048457610483610af0565b5b602001015160f81c60f81b60f81c60ff166001901b91508282116104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610bb3565b60405180910390fd5b8183179250806001019050610468565b5081925050505b919050565b5f8160ff166001901b8317905092915050565b5f5f82841614905092915050565b5f818317905092915050565b5f61010083839050111561053c575f90506105ea565b5f838390500361054f57600190506105ea565b5f83835f81811061056357610562610af0565b5b9050013560f81c60f81b90505f600190505b848490508110156105e3578160f81c60ff1685858381811061059a57610599610af0565b5b9050013560f81c60f81b60f81c60ff16116105b9575f925050506105ea565b8484828181106105cc576105cb610af0565b5b9050013560f81c60f81b9150806001019050610575565b5060019150505b92915050565b5f5f5f90505b5f8311156106225760018361060b9190610bfe565b83169250808061061a90610c31565b9150506105f6565b80915050919050565b5f8282841614905092915050565b60605f5f610646846105f0565b61ffff1667ffffffffffffffff81111561066357610662610c5a565b5b6040519080825280601f01601f1916602001820160405280156106955781602001600182028036833780820191505090505b5090505f5f90505f5f90505b8251821080156106b2575061010081105b1561072457806001901b93505f84871614610713578060f81b8383815181106106de576106dd610af0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053508160010191505b8061071d90610c87565b90506106a1565b50819350505050919050565b5f81198316905092915050565b5f5f82149050919050565b5f5ffd5b5f5ffd5b5f819050919050565b61076281610750565b811461076c575f5ffd5b50565b5f8135905061077d81610759565b92915050565b5f60ff82169050919050565b61079881610783565b81146107a2575f5ffd5b50565b5f813590506107b38161078f565b92915050565b5f5f604083850312156107cf576107ce610748565b5b5f6107dc8582860161076f565b92505060206107ed858286016107a5565b9150509250929050565b5f8115159050919050565b61080b816107f7565b82525050565b5f6020820190506108245f830184610802565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261084b5761084a61082a565b5b8235905067ffffffffffffffff8111156108685761086761082e565b5b60208301915083600182028301111561088457610883610832565b5b9250929050565b5f5f602083850312156108a1576108a0610748565b5b5f83013567ffffffffffffffff8111156108be576108bd61074c565b5b6108ca85828601610836565b92509250509250929050565b6108df81610750565b82525050565b5f6020820190506108f85f8301846108d6565b92915050565b5f5f6040838503121561091457610913610748565b5b5f6109218582860161076f565b92505060206109328582860161076f565b9150509250929050565b5f6020828403121561095157610950610748565b5b5f61095e8482850161076f565b91505092915050565b5f61ffff82169050919050565b61097d81610967565b82525050565b5f6020820190506109965f830184610974565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6109de8261099c565b6109e881856109a6565b93506109f88185602086016109b6565b610a01816109c4565b840191505092915050565b5f6020820190508181035f830152610a2481846109d4565b905092915050565b5f82825260208201905092915050565b7f4269746d61705574696c732e6f72646572656442797465734172726179546f425f8201527f69746d61703a206f7264657265644279746573417272617920697320746f6f2060208201527f6c6f6e6700000000000000000000000000000000000000000000000000000000604082015250565b5f610abc604483610a2c565b9150610ac782610a3c565b606082019050919050565b5f6020820190508181035f830152610ae981610ab0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4269746d61705574696c732e6f72646572656442797465734172726179546f425f8201527f69746d61703a206f72646572656442797465734172726179206973206e6f742060208201527f6f72646572656400000000000000000000000000000000000000000000000000604082015250565b5f610b9d604783610a2c565b9150610ba882610b1d565b606082019050919050565b5f6020820190508181035f830152610bca81610b91565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610c0882610750565b9150610c1383610750565b9250828203905081811115610c2b57610c2a610bd1565b5b92915050565b5f610c3b82610967565b915061ffff8203610c4f57610c4e610bd1565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f610c9182610750565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cc357610cc2610bd1565b5b60018201905091905056fea26469706673582212207804803f5a972b94d3f2c648d97965b6abe4414b18424605c13027a795adb0c564736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\r\x04\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xA7W_5`\xE0\x1C\x80cls\xBD\x87\x11a\0oW\x80cls\xBD\x87\x14a\x01\x9BW\x80cv7\x0F\x1F\x14a\x01\xCBW\x80c\xA8\xE3\xEA\xBB\x14a\x01\xFBW\x80c\xDDTq\x85\x14a\x02+W\x80c\xF4\xF3\xBD\xC1\x14a\x02[W\x80c\xF9\x0C\xFE\xEF\x14a\x02\x8BWa\0\xA7V[\x80c\x1F\xF4\xAD\xBA\x14a\0\xABW\x80c \xE8\x84\x03\x14a\0\xDBW\x80cN\xE2\x90\x90\x14a\x01\x0BW\x80cb\xE2\xEF3\x14a\x01;W\x80cf\t\x8DO\x14a\x01kW[__\xFD[a\0\xC5`\x04\x806\x03\x81\x01\x90a\0\xC0\x91\x90a\x07\xB9V[a\x02\xBBV[`@Qa\0\xD2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\0\xF5`\x04\x806\x03\x81\x01\x90a\0\xF0\x91\x90a\x08\x8BV[a\x02\xCEV[`@Qa\x01\x02\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01%`\x04\x806\x03\x81\x01\x90a\x01 \x91\x90a\x07\xB9V[a\x03#V[`@Qa\x012\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01U`\x04\x806\x03\x81\x01\x90a\x01P\x91\x90a\x08\xFEV[a\x036V[`@Qa\x01b\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x01\x85`\x04\x806\x03\x81\x01\x90a\x01\x80\x91\x90a\x08\xFEV[a\x03IV[`@Qa\x01\x92\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01\xB5`\x04\x806\x03\x81\x01\x90a\x01\xB0\x91\x90a\x08\x8BV[a\x03\\V[`@Qa\x01\xC2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x01\xE5`\x04\x806\x03\x81\x01\x90a\x01\xE0\x91\x90a\t<V[a\x03oV[`@Qa\x01\xF2\x91\x90a\t\x83V[`@Q\x80\x91\x03\x90\xF3[a\x02\x15`\x04\x806\x03\x81\x01\x90a\x02\x10\x91\x90a\x08\xFEV[a\x03\x80V[`@Qa\x02\"\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x02E`\x04\x806\x03\x81\x01\x90a\x02@\x91\x90a\t<V[a\x03\x93V[`@Qa\x02R\x91\x90a\n\x0CV[`@Q\x80\x91\x03\x90\xF3[a\x02u`\x04\x806\x03\x81\x01\x90a\x02p\x91\x90a\x08\xFEV[a\x03\xA5V[`@Qa\x02\x82\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x02\xA5`\x04\x806\x03\x81\x01\x90a\x02\xA0\x91\x90a\t<V[a\x03\xB8V[`@Qa\x02\xB2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[_a\x02\xC6\x83\x83a\x03\xC9V[\x90P\x92\x91PPV[_a\x03\x1B\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPPa\x03\xDFV[\x90P\x92\x91PPV[_a\x03.\x83\x83a\x04\xF9V[\x90P\x92\x91PPV[_a\x03A\x83\x83a\x05\x0CV[\x90P\x92\x91PPV[_a\x03T\x83\x83a\x05\x1AV[\x90P\x92\x91PPV[_a\x03g\x83\x83a\x05&V[\x90P\x92\x91PPV[_a\x03y\x82a\x05\xF0V[\x90P\x91\x90PV[_a\x03\x8B\x83\x83a\x06+V[\x90P\x92\x91PPV[``a\x03\x9E\x82a\x069V[\x90P\x91\x90PV[_a\x03\xB0\x83\x83a\x070V[\x90P\x92\x91PPV[_a\x03\xC2\x82a\x07=V[\x90P\x91\x90PV[_`\x01\x82`\xFF\x16\x84\x90\x1C\x16`\x01\x14\x90P\x92\x91PPV[_a\x01\0\x82Q\x11\x15a\x04&W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\x1D\x90a\n\xD2V[`@Q\x80\x91\x03\x90\xFD[_\x82Q\x03a\x046W_\x90Pa\x04\xF4V[__\x83_\x81Q\x81\x10a\x04KWa\x04Ja\n\xF0V[[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16`\x01\x90\x1B\x91P_`\x01\x90P[\x84Q\x81\x10\x15a\x04\xEDW\x84\x81\x81Q\x81\x10a\x04\x84Wa\x04\x83a\n\xF0V[[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16`\x01\x90\x1B\x91P\x82\x82\x11a\x04\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xD4\x90a\x0B\xB3V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x17\x92P\x80`\x01\x01\x90Pa\x04hV[P\x81\x92PPP[\x91\x90PV[_\x81`\xFF\x16`\x01\x90\x1B\x83\x17\x90P\x92\x91PPV[__\x82\x84\x16\x14\x90P\x92\x91PPV[_\x81\x83\x17\x90P\x92\x91PPV[_a\x01\0\x83\x83\x90P\x11\x15a\x05<W_\x90Pa\x05\xEAV[_\x83\x83\x90P\x03a\x05OW`\x01\x90Pa\x05\xEAV[_\x83\x83_\x81\x81\x10a\x05cWa\x05ba\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_`\x01\x90P[\x84\x84\x90P\x81\x10\x15a\x05\xE3W\x81`\xF8\x1C`\xFF\x16\x85\x85\x83\x81\x81\x10a\x05\x9AWa\x05\x99a\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16\x11a\x05\xB9W_\x92PPPa\x05\xEAV[\x84\x84\x82\x81\x81\x10a\x05\xCCWa\x05\xCBa\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B\x91P\x80`\x01\x01\x90Pa\x05uV[P`\x01\x91PP[\x92\x91PPV[___\x90P[_\x83\x11\x15a\x06\"W`\x01\x83a\x06\x0B\x91\x90a\x0B\xFEV[\x83\x16\x92P\x80\x80a\x06\x1A\x90a\x0C1V[\x91PPa\x05\xF6V[\x80\x91PP\x91\x90PV[_\x82\x82\x84\x16\x14\x90P\x92\x91PPV[``__a\x06F\x84a\x05\xF0V[a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06cWa\x06ba\x0CZV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x06\x95W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P__\x90P__\x90P[\x82Q\x82\x10\x80\x15a\x06\xB2WPa\x01\0\x81\x10[\x15a\x07$W\x80`\x01\x90\x1B\x93P_\x84\x87\x16\x14a\x07\x13W\x80`\xF8\x1B\x83\x83\x81Q\x81\x10a\x06\xDEWa\x06\xDDa\n\xF0V[[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x81`\x01\x01\x91P[\x80a\x07\x1D\x90a\x0C\x87V[\x90Pa\x06\xA1V[P\x81\x93PPPP\x91\x90PV[_\x81\x19\x83\x16\x90P\x92\x91PPV[__\x82\x14\x90P\x91\x90PV[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\x07b\x81a\x07PV[\x81\x14a\x07lW__\xFD[PV[_\x815\x90Pa\x07}\x81a\x07YV[\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x07\x98\x81a\x07\x83V[\x81\x14a\x07\xA2W__\xFD[PV[_\x815\x90Pa\x07\xB3\x81a\x07\x8FV[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x07\xCFWa\x07\xCEa\x07HV[[_a\x07\xDC\x85\x82\x86\x01a\x07oV[\x92PP` a\x07\xED\x85\x82\x86\x01a\x07\xA5V[\x91PP\x92P\x92\x90PV[_\x81\x15\x15\x90P\x91\x90PV[a\x08\x0B\x81a\x07\xF7V[\x82RPPV[_` \x82\x01\x90Pa\x08$_\x83\x01\x84a\x08\x02V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x08KWa\x08Ja\x08*V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08hWa\x08ga\x08.V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x08\x84Wa\x08\x83a\x082V[[\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a\x08\xA1Wa\x08\xA0a\x07HV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xBEWa\x08\xBDa\x07LV[[a\x08\xCA\x85\x82\x86\x01a\x086V[\x92P\x92PP\x92P\x92\x90PV[a\x08\xDF\x81a\x07PV[\x82RPPV[_` \x82\x01\x90Pa\x08\xF8_\x83\x01\x84a\x08\xD6V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\t\x14Wa\t\x13a\x07HV[[_a\t!\x85\x82\x86\x01a\x07oV[\x92PP` a\t2\x85\x82\x86\x01a\x07oV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\tQWa\tPa\x07HV[[_a\t^\x84\x82\x85\x01a\x07oV[\x91PP\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\t}\x81a\tgV[\x82RPPV[_` \x82\x01\x90Pa\t\x96_\x83\x01\x84a\ttV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\t\xDE\x82a\t\x9CV[a\t\xE8\x81\x85a\t\xA6V[\x93Pa\t\xF8\x81\x85` \x86\x01a\t\xB6V[a\n\x01\x81a\t\xC4V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n$\x81\x84a\t\xD4V[\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FBitmapUtils.orderedBytesArrayToB_\x82\x01R\x7Fitmap: orderedBytesArray is too ` \x82\x01R\x7Flong\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\n\xBC`D\x83a\n,V[\x91Pa\n\xC7\x82a\n<V[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\xE9\x81a\n\xB0V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FBitmapUtils.orderedBytesArrayToB_\x82\x01R\x7Fitmap: orderedBytesArray is not ` \x82\x01R\x7Fordered\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\x0B\x9D`G\x83a\n,V[\x91Pa\x0B\xA8\x82a\x0B\x1DV[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\xCA\x81a\x0B\x91V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x0C\x08\x82a\x07PV[\x91Pa\x0C\x13\x83a\x07PV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0C+Wa\x0C*a\x0B\xD1V[[\x92\x91PPV[_a\x0C;\x82a\tgV[\x91Pa\xFF\xFF\x82\x03a\x0COWa\x0CNa\x0B\xD1V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_a\x0C\x91\x82a\x07PV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0C\xC3Wa\x0C\xC2a\x0B\xD1V[[`\x01\x82\x01\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 x\x04\x80?Z\x97+\x94\xD3\xF2\xC6H\xD9ye\xB6\xAB\xE4AK\x18BF\x05\xC10'\xA7\x95\xAD\xB0\xC5dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b50600436106100a7575f3560e01c80636c73bd871161006f5780636c73bd871461019b57806376370f1f146101cb578063a8e3eabb146101fb578063dd5471851461022b578063f4f3bdc11461025b578063f90cfeef1461028b576100a7565b80631ff4adba146100ab57806320e88403146100db5780634ee290901461010b57806362e2ef331461013b57806366098d4f1461016b575b5f5ffd5b6100c560048036038101906100c091906107b9565b6102bb565b6040516100d29190610811565b60405180910390f35b6100f560048036038101906100f0919061088b565b6102ce565b60405161010291906108e5565b60405180910390f35b610125600480360381019061012091906107b9565b610323565b60405161013291906108e5565b60405180910390f35b610155600480360381019061015091906108fe565b610336565b6040516101629190610811565b60405180910390f35b610185600480360381019061018091906108fe565b610349565b60405161019291906108e5565b60405180910390f35b6101b560048036038101906101b0919061088b565b61035c565b6040516101c29190610811565b60405180910390f35b6101e560048036038101906101e0919061093c565b61036f565b6040516101f29190610983565b60405180910390f35b610215600480360381019061021091906108fe565b610380565b6040516102229190610811565b60405180910390f35b6102456004803603810190610240919061093c565b610393565b6040516102529190610a0c565b60405180910390f35b610275600480360381019061027091906108fe565b6103a5565b60405161028291906108e5565b60405180910390f35b6102a560048036038101906102a0919061093c565b6103b8565b6040516102b29190610811565b60405180910390f35b5f6102c683836103c9565b905092915050565b5f61031b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506103df565b905092915050565b5f61032e83836104f9565b905092915050565b5f610341838361050c565b905092915050565b5f610354838361051a565b905092915050565b5f6103678383610526565b905092915050565b5f610379826105f0565b9050919050565b5f61038b838361062b565b905092915050565b606061039e82610639565b9050919050565b5f6103b08383610730565b905092915050565b5f6103c28261073d565b9050919050565b5f60018260ff1684901c16600114905092915050565b5f61010082511115610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610ad2565b60405180910390fd5b5f825103610436575f90506104f4565b5f5f835f8151811061044b5761044a610af0565b5b602001015160f81c60f81b60f81c60ff166001901b91505f600190505b84518110156104ed5784818151811061048457610483610af0565b5b602001015160f81c60f81b60f81c60ff166001901b91508282116104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610bb3565b60405180910390fd5b8183179250806001019050610468565b5081925050505b919050565b5f8160ff166001901b8317905092915050565b5f5f82841614905092915050565b5f818317905092915050565b5f61010083839050111561053c575f90506105ea565b5f838390500361054f57600190506105ea565b5f83835f81811061056357610562610af0565b5b9050013560f81c60f81b90505f600190505b848490508110156105e3578160f81c60ff1685858381811061059a57610599610af0565b5b9050013560f81c60f81b60f81c60ff16116105b9575f925050506105ea565b8484828181106105cc576105cb610af0565b5b9050013560f81c60f81b9150806001019050610575565b5060019150505b92915050565b5f5f5f90505b5f8311156106225760018361060b9190610bfe565b83169250808061061a90610c31565b9150506105f6565b80915050919050565b5f8282841614905092915050565b60605f5f610646846105f0565b61ffff1667ffffffffffffffff81111561066357610662610c5a565b5b6040519080825280601f01601f1916602001820160405280156106955781602001600182028036833780820191505090505b5090505f5f90505f5f90505b8251821080156106b2575061010081105b1561072457806001901b93505f84871614610713578060f81b8383815181106106de576106dd610af0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053508160010191505b8061071d90610c87565b90506106a1565b50819350505050919050565b5f81198316905092915050565b5f5f82149050919050565b5f5ffd5b5f5ffd5b5f819050919050565b61076281610750565b811461076c575f5ffd5b50565b5f8135905061077d81610759565b92915050565b5f60ff82169050919050565b61079881610783565b81146107a2575f5ffd5b50565b5f813590506107b38161078f565b92915050565b5f5f604083850312156107cf576107ce610748565b5b5f6107dc8582860161076f565b92505060206107ed858286016107a5565b9150509250929050565b5f8115159050919050565b61080b816107f7565b82525050565b5f6020820190506108245f830184610802565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261084b5761084a61082a565b5b8235905067ffffffffffffffff8111156108685761086761082e565b5b60208301915083600182028301111561088457610883610832565b5b9250929050565b5f5f602083850312156108a1576108a0610748565b5b5f83013567ffffffffffffffff8111156108be576108bd61074c565b5b6108ca85828601610836565b92509250509250929050565b6108df81610750565b82525050565b5f6020820190506108f85f8301846108d6565b92915050565b5f5f6040838503121561091457610913610748565b5b5f6109218582860161076f565b92505060206109328582860161076f565b9150509250929050565b5f6020828403121561095157610950610748565b5b5f61095e8482850161076f565b91505092915050565b5f61ffff82169050919050565b61097d81610967565b82525050565b5f6020820190506109965f830184610974565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6109de8261099c565b6109e881856109a6565b93506109f88185602086016109b6565b610a01816109c4565b840191505092915050565b5f6020820190508181035f830152610a2481846109d4565b905092915050565b5f82825260208201905092915050565b7f4269746d61705574696c732e6f72646572656442797465734172726179546f425f8201527f69746d61703a206f7264657265644279746573417272617920697320746f6f2060208201527f6c6f6e6700000000000000000000000000000000000000000000000000000000604082015250565b5f610abc604483610a2c565b9150610ac782610a3c565b606082019050919050565b5f6020820190508181035f830152610ae981610ab0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4269746d61705574696c732e6f72646572656442797465734172726179546f425f8201527f69746d61703a206f72646572656442797465734172726179206973206e6f742060208201527f6f72646572656400000000000000000000000000000000000000000000000000604082015250565b5f610b9d604783610a2c565b9150610ba882610b1d565b606082019050919050565b5f6020820190508181035f830152610bca81610b91565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610c0882610750565b9150610c1383610750565b9250828203905081811115610c2b57610c2a610bd1565b5b92915050565b5f610c3b82610967565b915061ffff8203610c4f57610c4e610bd1565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f610c9182610750565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cc357610cc2610bd1565b5b60018201905091905056fea26469706673582212207804803f5a972b94d3f2c648d97965b6abe4414b18424605c13027a795adb0c564736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xA7W_5`\xE0\x1C\x80cls\xBD\x87\x11a\0oW\x80cls\xBD\x87\x14a\x01\x9BW\x80cv7\x0F\x1F\x14a\x01\xCBW\x80c\xA8\xE3\xEA\xBB\x14a\x01\xFBW\x80c\xDDTq\x85\x14a\x02+W\x80c\xF4\xF3\xBD\xC1\x14a\x02[W\x80c\xF9\x0C\xFE\xEF\x14a\x02\x8BWa\0\xA7V[\x80c\x1F\xF4\xAD\xBA\x14a\0\xABW\x80c \xE8\x84\x03\x14a\0\xDBW\x80cN\xE2\x90\x90\x14a\x01\x0BW\x80cb\xE2\xEF3\x14a\x01;W\x80cf\t\x8DO\x14a\x01kW[__\xFD[a\0\xC5`\x04\x806\x03\x81\x01\x90a\0\xC0\x91\x90a\x07\xB9V[a\x02\xBBV[`@Qa\0\xD2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\0\xF5`\x04\x806\x03\x81\x01\x90a\0\xF0\x91\x90a\x08\x8BV[a\x02\xCEV[`@Qa\x01\x02\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01%`\x04\x806\x03\x81\x01\x90a\x01 \x91\x90a\x07\xB9V[a\x03#V[`@Qa\x012\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01U`\x04\x806\x03\x81\x01\x90a\x01P\x91\x90a\x08\xFEV[a\x036V[`@Qa\x01b\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x01\x85`\x04\x806\x03\x81\x01\x90a\x01\x80\x91\x90a\x08\xFEV[a\x03IV[`@Qa\x01\x92\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x01\xB5`\x04\x806\x03\x81\x01\x90a\x01\xB0\x91\x90a\x08\x8BV[a\x03\\V[`@Qa\x01\xC2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x01\xE5`\x04\x806\x03\x81\x01\x90a\x01\xE0\x91\x90a\t<V[a\x03oV[`@Qa\x01\xF2\x91\x90a\t\x83V[`@Q\x80\x91\x03\x90\xF3[a\x02\x15`\x04\x806\x03\x81\x01\x90a\x02\x10\x91\x90a\x08\xFEV[a\x03\x80V[`@Qa\x02\"\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[a\x02E`\x04\x806\x03\x81\x01\x90a\x02@\x91\x90a\t<V[a\x03\x93V[`@Qa\x02R\x91\x90a\n\x0CV[`@Q\x80\x91\x03\x90\xF3[a\x02u`\x04\x806\x03\x81\x01\x90a\x02p\x91\x90a\x08\xFEV[a\x03\xA5V[`@Qa\x02\x82\x91\x90a\x08\xE5V[`@Q\x80\x91\x03\x90\xF3[a\x02\xA5`\x04\x806\x03\x81\x01\x90a\x02\xA0\x91\x90a\t<V[a\x03\xB8V[`@Qa\x02\xB2\x91\x90a\x08\x11V[`@Q\x80\x91\x03\x90\xF3[_a\x02\xC6\x83\x83a\x03\xC9V[\x90P\x92\x91PPV[_a\x03\x1B\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPPa\x03\xDFV[\x90P\x92\x91PPV[_a\x03.\x83\x83a\x04\xF9V[\x90P\x92\x91PPV[_a\x03A\x83\x83a\x05\x0CV[\x90P\x92\x91PPV[_a\x03T\x83\x83a\x05\x1AV[\x90P\x92\x91PPV[_a\x03g\x83\x83a\x05&V[\x90P\x92\x91PPV[_a\x03y\x82a\x05\xF0V[\x90P\x91\x90PV[_a\x03\x8B\x83\x83a\x06+V[\x90P\x92\x91PPV[``a\x03\x9E\x82a\x069V[\x90P\x91\x90PV[_a\x03\xB0\x83\x83a\x070V[\x90P\x92\x91PPV[_a\x03\xC2\x82a\x07=V[\x90P\x91\x90PV[_`\x01\x82`\xFF\x16\x84\x90\x1C\x16`\x01\x14\x90P\x92\x91PPV[_a\x01\0\x82Q\x11\x15a\x04&W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\x1D\x90a\n\xD2V[`@Q\x80\x91\x03\x90\xFD[_\x82Q\x03a\x046W_\x90Pa\x04\xF4V[__\x83_\x81Q\x81\x10a\x04KWa\x04Ja\n\xF0V[[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16`\x01\x90\x1B\x91P_`\x01\x90P[\x84Q\x81\x10\x15a\x04\xEDW\x84\x81\x81Q\x81\x10a\x04\x84Wa\x04\x83a\n\xF0V[[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16`\x01\x90\x1B\x91P\x82\x82\x11a\x04\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xD4\x90a\x0B\xB3V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x17\x92P\x80`\x01\x01\x90Pa\x04hV[P\x81\x92PPP[\x91\x90PV[_\x81`\xFF\x16`\x01\x90\x1B\x83\x17\x90P\x92\x91PPV[__\x82\x84\x16\x14\x90P\x92\x91PPV[_\x81\x83\x17\x90P\x92\x91PPV[_a\x01\0\x83\x83\x90P\x11\x15a\x05<W_\x90Pa\x05\xEAV[_\x83\x83\x90P\x03a\x05OW`\x01\x90Pa\x05\xEAV[_\x83\x83_\x81\x81\x10a\x05cWa\x05ba\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_`\x01\x90P[\x84\x84\x90P\x81\x10\x15a\x05\xE3W\x81`\xF8\x1C`\xFF\x16\x85\x85\x83\x81\x81\x10a\x05\x9AWa\x05\x99a\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B`\xF8\x1C`\xFF\x16\x11a\x05\xB9W_\x92PPPa\x05\xEAV[\x84\x84\x82\x81\x81\x10a\x05\xCCWa\x05\xCBa\n\xF0V[[\x90P\x015`\xF8\x1C`\xF8\x1B\x91P\x80`\x01\x01\x90Pa\x05uV[P`\x01\x91PP[\x92\x91PPV[___\x90P[_\x83\x11\x15a\x06\"W`\x01\x83a\x06\x0B\x91\x90a\x0B\xFEV[\x83\x16\x92P\x80\x80a\x06\x1A\x90a\x0C1V[\x91PPa\x05\xF6V[\x80\x91PP\x91\x90PV[_\x82\x82\x84\x16\x14\x90P\x92\x91PPV[``__a\x06F\x84a\x05\xF0V[a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06cWa\x06ba\x0CZV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x06\x95W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P__\x90P__\x90P[\x82Q\x82\x10\x80\x15a\x06\xB2WPa\x01\0\x81\x10[\x15a\x07$W\x80`\x01\x90\x1B\x93P_\x84\x87\x16\x14a\x07\x13W\x80`\xF8\x1B\x83\x83\x81Q\x81\x10a\x06\xDEWa\x06\xDDa\n\xF0V[[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x81`\x01\x01\x91P[\x80a\x07\x1D\x90a\x0C\x87V[\x90Pa\x06\xA1V[P\x81\x93PPPP\x91\x90PV[_\x81\x19\x83\x16\x90P\x92\x91PPV[__\x82\x14\x90P\x91\x90PV[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\x07b\x81a\x07PV[\x81\x14a\x07lW__\xFD[PV[_\x815\x90Pa\x07}\x81a\x07YV[\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x07\x98\x81a\x07\x83V[\x81\x14a\x07\xA2W__\xFD[PV[_\x815\x90Pa\x07\xB3\x81a\x07\x8FV[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x07\xCFWa\x07\xCEa\x07HV[[_a\x07\xDC\x85\x82\x86\x01a\x07oV[\x92PP` a\x07\xED\x85\x82\x86\x01a\x07\xA5V[\x91PP\x92P\x92\x90PV[_\x81\x15\x15\x90P\x91\x90PV[a\x08\x0B\x81a\x07\xF7V[\x82RPPV[_` \x82\x01\x90Pa\x08$_\x83\x01\x84a\x08\x02V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x08KWa\x08Ja\x08*V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08hWa\x08ga\x08.V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x08\x84Wa\x08\x83a\x082V[[\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a\x08\xA1Wa\x08\xA0a\x07HV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xBEWa\x08\xBDa\x07LV[[a\x08\xCA\x85\x82\x86\x01a\x086V[\x92P\x92PP\x92P\x92\x90PV[a\x08\xDF\x81a\x07PV[\x82RPPV[_` \x82\x01\x90Pa\x08\xF8_\x83\x01\x84a\x08\xD6V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\t\x14Wa\t\x13a\x07HV[[_a\t!\x85\x82\x86\x01a\x07oV[\x92PP` a\t2\x85\x82\x86\x01a\x07oV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\tQWa\tPa\x07HV[[_a\t^\x84\x82\x85\x01a\x07oV[\x91PP\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\t}\x81a\tgV[\x82RPPV[_` \x82\x01\x90Pa\t\x96_\x83\x01\x84a\ttV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\t\xDE\x82a\t\x9CV[a\t\xE8\x81\x85a\t\xA6V[\x93Pa\t\xF8\x81\x85` \x86\x01a\t\xB6V[a\n\x01\x81a\t\xC4V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n$\x81\x84a\t\xD4V[\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FBitmapUtils.orderedBytesArrayToB_\x82\x01R\x7Fitmap: orderedBytesArray is too ` \x82\x01R\x7Flong\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\n\xBC`D\x83a\n,V[\x91Pa\n\xC7\x82a\n<V[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\xE9\x81a\n\xB0V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FBitmapUtils.orderedBytesArrayToB_\x82\x01R\x7Fitmap: orderedBytesArray is not ` \x82\x01R\x7Fordered\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01RPV[_a\x0B\x9D`G\x83a\n,V[\x91Pa\x0B\xA8\x82a\x0B\x1DV[``\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\xCA\x81a\x0B\x91V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x0C\x08\x82a\x07PV[\x91Pa\x0C\x13\x83a\x07PV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0C+Wa\x0C*a\x0B\xD1V[[\x92\x91PPV[_a\x0C;\x82a\tgV[\x91Pa\xFF\xFF\x82\x03a\x0COWa\x0CNa\x0B\xD1V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_a\x0C\x91\x82a\x07PV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0C\xC3Wa\x0C\xC2a\x0B\xD1V[[`\x01\x82\x01\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 x\x04\x80?Z\x97+\x94\xD3\xF2\xC6H\xD9ye\xB6\xAB\xE4AK\x18BF\x05\xC10'\xA7\x95\xAD\xB0\xC5dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `bitmapToBytesArray(uint256)` and selector `0xdd547185`.
```solidity
function bitmapToBytesArray(uint256 bitmap) external pure returns (bytes memory bytesArray);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bitmapToBytesArrayCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`bitmapToBytesArray(uint256)`](bitmapToBytesArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bitmapToBytesArrayReturn {
        pub bytesArray: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bitmapToBytesArrayCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: bitmapToBytesArrayCall) -> Self {
                    (value.bitmap,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for bitmapToBytesArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bitmap: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bitmapToBytesArrayReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: bitmapToBytesArrayReturn) -> Self {
                    (value.bytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for bitmapToBytesArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bytesArray: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bitmapToBytesArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bitmapToBytesArrayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bitmapToBytesArray(uint256)";
            const SELECTOR: [u8; 4] = [221u8, 84u8, 113u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bitmap),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `countNumOnes(uint256)` and selector `0x76370f1f`.
```solidity
function countNumOnes(uint256 n) external pure returns (uint16);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct countNumOnesCall {
        pub n: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`countNumOnes(uint256)`](countNumOnesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct countNumOnesReturn {
        pub _0: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<countNumOnesCall> for UnderlyingRustTuple<'_> {
                fn from(value: countNumOnesCall) -> Self {
                    (value.n,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for countNumOnesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { n: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<countNumOnesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: countNumOnesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for countNumOnesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for countNumOnesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = countNumOnesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "countNumOnes(uint256)";
            const SELECTOR: [u8; 4] = [118u8, 55u8, 15u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.n),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isArrayStrictlyAscendingOrdered(bytes)` and selector `0x6c73bd87`.
```solidity
function isArrayStrictlyAscendingOrdered(bytes memory bytesArray) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArrayStrictlyAscendingOrderedCall {
        pub bytesArray: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isArrayStrictlyAscendingOrdered(bytes)`](isArrayStrictlyAscendingOrderedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArrayStrictlyAscendingOrderedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArrayStrictlyAscendingOrderedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isArrayStrictlyAscendingOrderedCall) -> Self {
                    (value.bytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isArrayStrictlyAscendingOrderedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bytesArray: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArrayStrictlyAscendingOrderedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isArrayStrictlyAscendingOrderedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isArrayStrictlyAscendingOrderedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isArrayStrictlyAscendingOrderedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isArrayStrictlyAscendingOrderedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isArrayStrictlyAscendingOrdered(bytes)";
            const SELECTOR: [u8; 4] = [108u8, 115u8, 189u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.bytesArray,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isEmpty(uint256)` and selector `0xf90cfeef`.
```solidity
function isEmpty(uint256 bitmap) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isEmptyCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isEmpty(uint256)`](isEmptyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isEmptyReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isEmptyCall> for UnderlyingRustTuple<'_> {
                fn from(value: isEmptyCall) -> Self {
                    (value.bitmap,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isEmptyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bitmap: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isEmptyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isEmptyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isEmptyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isEmptyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isEmptyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isEmpty(uint256)";
            const SELECTOR: [u8; 4] = [249u8, 12u8, 254u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bitmap),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isSet(uint256,uint8)` and selector `0x1ff4adba`.
```solidity
function isSet(uint256 bitmap, uint8 numberToCheckForInclusion) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSetCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
        pub numberToCheckForInclusion: u8,
    }
    ///Container type for the return parameters of the [`isSet(uint256,uint8)`](isSetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSetReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSetCall> for UnderlyingRustTuple<'_> {
                fn from(value: isSetCall) -> Self {
                    (value.bitmap, value.numberToCheckForInclusion)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bitmap: tuple.0,
                        numberToCheckForInclusion: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isSetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isSetCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isSetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isSet(uint256,uint8)";
            const SELECTOR: [u8; 4] = [31u8, 244u8, 173u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bitmap),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.numberToCheckForInclusion,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isSubsetOf(uint256,uint256)` and selector `0xa8e3eabb`.
```solidity
function isSubsetOf(uint256 a, uint256 b) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSubsetOfCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isSubsetOf(uint256,uint256)`](isSubsetOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSubsetOfReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSubsetOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: isSubsetOfCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSubsetOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { a: tuple.0, b: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSubsetOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isSubsetOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSubsetOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isSubsetOfCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isSubsetOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isSubsetOf(uint256,uint256)";
            const SELECTOR: [u8; 4] = [168u8, 227u8, 234u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.a),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.b),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `minus(uint256,uint256)` and selector `0xf4f3bdc1`.
```solidity
function minus(uint256 a, uint256 b) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minusCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`minus(uint256,uint256)`](minusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minusReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minusCall> for UnderlyingRustTuple<'_> {
                fn from(value: minusCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { a: tuple.0, b: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minusReturn> for UnderlyingRustTuple<'_> {
                fn from(value: minusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minusCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = minusReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minus(uint256,uint256)";
            const SELECTOR: [u8; 4] = [244u8, 243u8, 189u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.a),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.b),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `noBitsInCommon(uint256,uint256)` and selector `0x62e2ef33`.
```solidity
function noBitsInCommon(uint256 a, uint256 b) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noBitsInCommonCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`noBitsInCommon(uint256,uint256)`](noBitsInCommonCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noBitsInCommonReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noBitsInCommonCall> for UnderlyingRustTuple<'_> {
                fn from(value: noBitsInCommonCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noBitsInCommonCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { a: tuple.0, b: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noBitsInCommonReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: noBitsInCommonReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for noBitsInCommonReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noBitsInCommonCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = noBitsInCommonReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "noBitsInCommon(uint256,uint256)";
            const SELECTOR: [u8; 4] = [98u8, 226u8, 239u8, 51u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.a),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.b),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `orderedBytesArrayToBitmap(bytes)` and selector `0x20e88403`.
```solidity
function orderedBytesArrayToBitmap(bytes memory orderedBytesArray) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct orderedBytesArrayToBitmapCall {
        pub orderedBytesArray: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`orderedBytesArrayToBitmap(bytes)`](orderedBytesArrayToBitmapCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct orderedBytesArrayToBitmapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<orderedBytesArrayToBitmapCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: orderedBytesArrayToBitmapCall) -> Self {
                    (value.orderedBytesArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for orderedBytesArrayToBitmapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { orderedBytesArray: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<orderedBytesArrayToBitmapReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: orderedBytesArrayToBitmapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for orderedBytesArrayToBitmapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for orderedBytesArrayToBitmapCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = orderedBytesArrayToBitmapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "orderedBytesArrayToBitmap(bytes)";
            const SELECTOR: [u8; 4] = [32u8, 232u8, 132u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.orderedBytesArray,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `plus(uint256,uint256)` and selector `0x66098d4f`.
```solidity
function plus(uint256 a, uint256 b) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct plusCall {
        pub a: alloy::sol_types::private::primitives::aliases::U256,
        pub b: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`plus(uint256,uint256)`](plusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct plusReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<plusCall> for UnderlyingRustTuple<'_> {
                fn from(value: plusCall) -> Self {
                    (value.a, value.b)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for plusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { a: tuple.0, b: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<plusReturn> for UnderlyingRustTuple<'_> {
                fn from(value: plusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for plusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for plusCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = plusReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "plus(uint256,uint256)";
            const SELECTOR: [u8; 4] = [102u8, 9u8, 141u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.a),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.b),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBit(uint256,uint8)` and selector `0x4ee29090`.
```solidity
function setBit(uint256 bitmap, uint8 bit) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBitCall {
        pub bitmap: alloy::sol_types::private::primitives::aliases::U256,
        pub bit: u8,
    }
    ///Container type for the return parameters of the [`setBit(uint256,uint8)`](setBitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBitReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBitCall) -> Self {
                    (value.bitmap, value.bit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bitmap: tuple.0,
                        bit: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setBitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBit(uint256,uint8)";
            const SELECTOR: [u8; 4] = [78u8, 226u8, 144u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bitmap),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.bit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`BitmapUtilsWrapper`](self) function calls.
    pub enum BitmapUtilsWrapperCalls {
        bitmapToBytesArray(bitmapToBytesArrayCall),
        countNumOnes(countNumOnesCall),
        isArrayStrictlyAscendingOrdered(isArrayStrictlyAscendingOrderedCall),
        isEmpty(isEmptyCall),
        isSet(isSetCall),
        isSubsetOf(isSubsetOfCall),
        minus(minusCall),
        noBitsInCommon(noBitsInCommonCall),
        orderedBytesArrayToBitmap(orderedBytesArrayToBitmapCall),
        plus(plusCall),
        setBit(setBitCall),
    }
    #[automatically_derived]
    impl BitmapUtilsWrapperCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 244u8, 173u8, 186u8],
            [32u8, 232u8, 132u8, 3u8],
            [78u8, 226u8, 144u8, 144u8],
            [98u8, 226u8, 239u8, 51u8],
            [102u8, 9u8, 141u8, 79u8],
            [108u8, 115u8, 189u8, 135u8],
            [118u8, 55u8, 15u8, 31u8],
            [168u8, 227u8, 234u8, 187u8],
            [221u8, 84u8, 113u8, 133u8],
            [244u8, 243u8, 189u8, 193u8],
            [249u8, 12u8, 254u8, 239u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BitmapUtilsWrapperCalls {
        const NAME: &'static str = "BitmapUtilsWrapperCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::bitmapToBytesArray(_) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::countNumOnes(_) => {
                    <countNumOnesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isArrayStrictlyAscendingOrdered(_) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isEmpty(_) => <isEmptyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isSet(_) => <isSetCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isSubsetOf(_) => {
                    <isSubsetOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minus(_) => <minusCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::noBitsInCommon(_) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::orderedBytesArrayToBitmap(_) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::plus(_) => <plusCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setBit(_) => <setBitCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls>] = &[
                {
                    fn isSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isSetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::isSet)
                    }
                    isSet
                },
                {
                    fn orderedBytesArrayToBitmap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::orderedBytesArrayToBitmap)
                    }
                    orderedBytesArrayToBitmap
                },
                {
                    fn setBit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <setBitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::setBit)
                    }
                    setBit
                },
                {
                    fn noBitsInCommon(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::noBitsInCommon)
                    }
                    noBitsInCommon
                },
                {
                    fn plus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <plusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::plus)
                    }
                    plus
                },
                {
                    fn isArrayStrictlyAscendingOrdered(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                BitmapUtilsWrapperCalls::isArrayStrictlyAscendingOrdered,
                            )
                    }
                    isArrayStrictlyAscendingOrdered
                },
                {
                    fn countNumOnes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <countNumOnesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::countNumOnes)
                    }
                    countNumOnes
                },
                {
                    fn isSubsetOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isSubsetOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::isSubsetOf)
                    }
                    isSubsetOf
                },
                {
                    fn bitmapToBytesArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::bitmapToBytesArray)
                    }
                    bitmapToBytesArray
                },
                {
                    fn minus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <minusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::minus)
                    }
                    minus
                },
                {
                    fn isEmpty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BitmapUtilsWrapperCalls> {
                        <isEmptyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BitmapUtilsWrapperCalls::isEmpty)
                    }
                    isEmpty
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::bitmapToBytesArray(inner) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::countNumOnes(inner) => {
                    <countNumOnesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isArrayStrictlyAscendingOrdered(inner) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isEmpty(inner) => {
                    <isEmptyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isSet(inner) => {
                    <isSetCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isSubsetOf(inner) => {
                    <isSubsetOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::minus(inner) => {
                    <minusCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::noBitsInCommon(inner) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::orderedBytesArrayToBitmap(inner) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::plus(inner) => {
                    <plusCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setBit(inner) => {
                    <setBitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::bitmapToBytesArray(inner) => {
                    <bitmapToBytesArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::countNumOnes(inner) => {
                    <countNumOnesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isArrayStrictlyAscendingOrdered(inner) => {
                    <isArrayStrictlyAscendingOrderedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isEmpty(inner) => {
                    <isEmptyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isSet(inner) => {
                    <isSetCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isSubsetOf(inner) => {
                    <isSubsetOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minus(inner) => {
                    <minusCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::noBitsInCommon(inner) => {
                    <noBitsInCommonCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::orderedBytesArrayToBitmap(inner) => {
                    <orderedBytesArrayToBitmapCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::plus(inner) => {
                    <plusCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setBit(inner) => {
                    <setBitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BitmapUtilsWrapper`](self) contract instance.

See the [wrapper's documentation](`BitmapUtilsWrapperInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BitmapUtilsWrapperInstance<T, P, N> {
        BitmapUtilsWrapperInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BitmapUtilsWrapperInstance<T, P, N>>,
    > {
        BitmapUtilsWrapperInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        BitmapUtilsWrapperInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`BitmapUtilsWrapper`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BitmapUtilsWrapper`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BitmapUtilsWrapperInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BitmapUtilsWrapperInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BitmapUtilsWrapperInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BitmapUtilsWrapperInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BitmapUtilsWrapper`](self) contract instance.

See the [wrapper's documentation](`BitmapUtilsWrapperInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<BitmapUtilsWrapperInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BitmapUtilsWrapperInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BitmapUtilsWrapperInstance<T, P, N> {
            BitmapUtilsWrapperInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BitmapUtilsWrapperInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`bitmapToBytesArray`] function.
        pub fn bitmapToBytesArray(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, bitmapToBytesArrayCall, N> {
            self.call_builder(&bitmapToBytesArrayCall { bitmap })
        }
        ///Creates a new call builder for the [`countNumOnes`] function.
        pub fn countNumOnes(
            &self,
            n: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, countNumOnesCall, N> {
            self.call_builder(&countNumOnesCall { n })
        }
        ///Creates a new call builder for the [`isArrayStrictlyAscendingOrdered`] function.
        pub fn isArrayStrictlyAscendingOrdered(
            &self,
            bytesArray: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            isArrayStrictlyAscendingOrderedCall,
            N,
        > {
            self.call_builder(
                &isArrayStrictlyAscendingOrderedCall {
                    bytesArray,
                },
            )
        }
        ///Creates a new call builder for the [`isEmpty`] function.
        pub fn isEmpty(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isEmptyCall, N> {
            self.call_builder(&isEmptyCall { bitmap })
        }
        ///Creates a new call builder for the [`isSet`] function.
        pub fn isSet(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
            numberToCheckForInclusion: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, isSetCall, N> {
            self.call_builder(
                &isSetCall {
                    bitmap,
                    numberToCheckForInclusion,
                },
            )
        }
        ///Creates a new call builder for the [`isSubsetOf`] function.
        pub fn isSubsetOf(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isSubsetOfCall, N> {
            self.call_builder(&isSubsetOfCall { a, b })
        }
        ///Creates a new call builder for the [`minus`] function.
        pub fn minus(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, minusCall, N> {
            self.call_builder(&minusCall { a, b })
        }
        ///Creates a new call builder for the [`noBitsInCommon`] function.
        pub fn noBitsInCommon(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, noBitsInCommonCall, N> {
            self.call_builder(&noBitsInCommonCall { a, b })
        }
        ///Creates a new call builder for the [`orderedBytesArrayToBitmap`] function.
        pub fn orderedBytesArrayToBitmap(
            &self,
            orderedBytesArray: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, orderedBytesArrayToBitmapCall, N> {
            self.call_builder(
                &orderedBytesArrayToBitmapCall {
                    orderedBytesArray,
                },
            )
        }
        ///Creates a new call builder for the [`plus`] function.
        pub fn plus(
            &self,
            a: alloy::sol_types::private::primitives::aliases::U256,
            b: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, plusCall, N> {
            self.call_builder(&plusCall { a, b })
        }
        ///Creates a new call builder for the [`setBit`] function.
        pub fn setBit(
            &self,
            bitmap: alloy::sol_types::private::primitives::aliases::U256,
            bit: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBitCall, N> {
            self.call_builder(&setBitCall { bitmap, bit })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BitmapUtilsWrapperInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
