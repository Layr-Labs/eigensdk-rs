/**

Generated by the following Solidity interface...
```solidity
interface ContractsRegistry {
    function CONTRACT_REGISTRY() external view returns (address);
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "CONTRACT_REGISTRY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ContractsRegistry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55611593908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630a9254e4146107565750806325f9bfef1461072d578063c0406226146100725763f8ccbf471461004a575f80fd5b3461006f578060031936011261006f57602060ff600c5460101c166040519015158152f35b80fd5b503461006f578060031936011261006f57600c54819060181c6001600160a01b03165f51602061153e5f395f51905f523b1561072a5760405190637fec2a8d60e01b825260048201528181602481835f51602061153e5f395f51905f525af1801561014657610715575b5050617a694614801561070a575b610151575b5f51602061153e5f395f51905f523b1561006f57604051633b756e9b60e11b815281908181600481835f51602061153e5f395f51905f525af18015610146576101355750f35b8161013f916112f0565b61006f5780f35b6040513d84823e3d90fd5b600d5460405182916001600160a01b03169061016c816112a2565b600e546001600160a01b03908116808352600f5482166020840190815260105483166040850190815260115484166060860152601254841660808601908152601354851660a08701908152601454861660c0880152601554861660e088015260165486166101008801526017548616610120880152601854909516610140909601959095529293929091853b156107065760405190630fe7858560e31b82526040600483015260116044830152703232b632b3b0ba34b7b726b0b730b3b2b960791b606483015260248201528681608481838a5af19081156106fb5787916106e6575b5050516001600160a01b0316843b1561068e5760405190630fe7858560e31b825260406004830152600f60448301526e39ba3930ba32b3bca6b0b730b3b2b960891b60648301526024820152858160848183895af19081156106835786916106d1575b5050516001600160a01b0316833b1561066a5760405190630fe7858560e31b825260406004830152600c60448301526b6176734469726563746f727960a01b60648301526024820152848160848183885af190811561065f5785916106bc575b5050516001600160a01b0316823b156106455760405190630fe7858560e31b825260406004830152601160448301527030b63637b1b0ba34b7b726b0b730b3b2b960791b60648301526024820152838160848183875af190811561063a5784916106a7575b5050516001600160a01b0316813b15610621578291608483926040519485938492630fe7858560e31b84526040600485015260126044850152713932bbb0b93239a1b7b7b93234b730ba37b960711b606485015260248401525af1801561014657610692575b5060018060a01b03600d54166040516103f5816112d3565b6019546001600160a01b039081168252601a5481166020808401918252601b54831660408501908152601c5484166060860152601d5484166080860152601e54841660a0860152601f54841660c086018190529154841660e086015260215490931661010085015291929091843b1561068e5760405190630fe7858560e31b825260406004830152601160448301527065726332304d6f636b537472617465677960781b60648301526024820152858160848183895af190811561068357869161066e575b5050516001600160a01b0316833b1561066a5760405190630fe7858560e31b825260406004830152601560448301527436b7b1b5a0bb39a9b2b93b34b1b2a6b0b730b3b2b960591b60648301526024820152848160848183885af190811561065f57859161064a575b5050516001600160a01b0316823b156106455760405190630fe7858560e31b825260406004830152601a60448301527f6d6f636b4176735265676973747279436f6f7264696e61746f7200000000000060648301526024820152838160848183875af190811561063a578491610625575b5050516001600160a01b0316813b15610621578291608483926040519485938492630fe7858560e31b845260406004850152601d60448501527f6d6f636b4176734f70657261746f725374617465526574726965766572000000606485015260248401525af180156101465761060c575b50506100ef565b81610616916112f0565b61006f57805f610605565b5050fd5b8161062f916112f0565b61062157825f610594565b6040513d86823e3d90fd5b505050fd5b81610654916112f0565b61064557835f610523565b6040513d87823e3d90fd5b8480fd5b81610678916112f0565b61066a57845f6104ba565b6040513d88823e3d90fd5b8580fd5b8161069c916112f0565b61006f57805f6103dd565b816106b1916112f0565b61062157825f610377565b816106c6916112f0565b61064557835f610312565b816106db916112f0565b61066a57845f6102b2565b816106f0916112f0565b61068e57855f61024f565b6040513d89823e3d90fd5b8680fd5b5061053946146100ea565b8161071f916112f0565b61006f57805f6100dc565b50fd5b503461006f578060031936011261006f57600d546040516001600160a01b039091168152602090f35b90503461124d575f36600319011261124d5763c1978d1f60e01b8152602060048201819052600b60248301526a505249564154455f4b455960a81b6044830152816064815f51602061153e5f395f51905f525afa908115611242575f91611270575b5060405190630884001960e21b825260048201526020816024815f5f51602061153e5f395f51905f525af1908115611242575f91611251575b50600c80546301000000600160b81b03191660189290921b6301000000600160b81b031691909117908190555f51602061153e5f395f51905f523b1561124d57604080516318caf8e360e31b815260189290921c6001600160a01b03166004830152602482015260086044820152672232b83637bcb2b960c11b60648201525f81608481835f51602061153e5f395f51905f525af180156112425761122f575b5060405163350d56bf60e01b8152602060048201819052601760248301527f434f4e5452414354535f52454749535452595f414444520000000000000000006044830152816064815f51602061153e5f395f51905f525afa908115610146578291611200575b5060018060a01b03166bffffffffffffffffffffffff60a01b600d541617600d556040805161092682826112f0565b601881526109b260208201917f7363726970742f6465706c6f796d656e74732f636f72652f000000000000000083526020845161096386826112f0565b600a81528181019069199899999b973539b7b760b11b8252610983611331565b5086519586945180918587015e84019083820190898252519283915e010185815203601f1981018352826112f0565b8282519163130d191f60e11b835260206004840152602083806109d8602482018561139a565b0381855f51602061153e5f395f51905f525af19283156111b857610a2893610a07918491611189575b506113be565b8351809381926360f9bb1160e01b835260206004840152602483019061139a565b03815f51602061153e5f395f51905f525afa90811561117d5783916111e6575b50610a51611331565b90610a918351610a6185826112f0565b601a81527f2e6164647265737365732e7374726174656779466163746f72790000000000006020820152826114c0565b6001600160a01b031661010083019081528351909190610ae590610ab586826112f0565b601a81527f2e6164647265737365732e73747261746567794d616e616765720000000000006020820152826114c0565b6001600160a01b03168385019081528451610b3490610b0487826112f0565b601a81527f2e6164647265737365732e656967656e506f644d616e616765720000000000006020820152836114c0565b6001600160a01b0316606085019081528551909290610b5387826112f0565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b0390610b8890836114c0565b168552610bca8651610b9a88826112f0565b601781527f2e6164647265737365732e6176734469726563746f72790000000000000000006020820152826114c0565b6001600160a01b0316602086019081528651909390610c1d90610bed89826112f0565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f720000006020820152836114c0565b6001600160a01b031660a087019081528751909390610c7090610c408a826112f0565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e61676572000000006020820152846114c0565b6001600160a01b0316608088019081528851909390610ccb90610c938b826112f0565b601981527f2e6164647265737365732e70617573657252656769737472790000000000000060208201526001600160a01b03926114c0565b1660e088018190528751600e80546001600160a01b03199081166001600160a01b03938416179091559651600f80548916918316919091179055915160108054881691841691909117905591516011805487169183169190911790559151601280548616918416919091179055915160138054851691831691909117905560c08501516014805485169183169190911790556015805484169092179091559151601680548316918416919091179055610120830151601780548316918416919091179055610140909201516018805490931691161790558051610dae82826112f0565b601c815260208101907f7363726970742f6465706c6f796d656e74732f6d6f636b2d6176732f000000008252610de261147d565b50825163348051d760e11b815246600482015284816024815f51602061153e5f395f51905f525afa9182156111dc57602080610e5c9460059489916111c2575b5087519687945180918487015e8401908282018a8152815193849201905e010164173539b7b760d91b815203601a198101845201826112f0565b8282519163130d191f60e11b83526020600484015260208380610e82602482018561139a565b0381855f51602061153e5f395f51905f525af19283156111b857610eb093610a0791849161118957506113be565b03815f51602061153e5f395f51905f525afa90811561117d57839161115b575b50610ed961147d565b918051610ee682826112f0565b60208082527f2e6164647265737365732e4d6f636b417673536572766963654d616e61676572908201526001600160a01b0390610f2390846114c0565b168352610f658151610f3583826112f0565b601e81527f2e6164647265737365732e7265676973747279436f6f7264696e61746f7200006020820152836114c0565b6001600160a01b0316602084019081528151909290610fc290610f896060826112f0565b602181527f2e6164647265737365732e6f70657261746f72537461746552657472696576656020820152603960f91b84820152826114c0565b6001600160a01b0316848301908152825161101190610fe185826112f0565b601881527f2e6164647265737365732e7374616b65526567697374727900000000000000006020820152836114c0565b9160a086019260018060a01b031683526110a2611059855161103387826112f0565b60138152722e6164647265737365732e737472617465677960681b6020820152836114c0565b6001600160a01b031660c088019081528551909561107790826112f0565b601081526f1730b2323932b9b9b2b9973a37b5b2b760811b60208201526001600160a01b03926114c0565b1660e086018190528551601980546001600160a01b03199081166001600160a01b03938416179091559551601a805488169183169190911790559151601b805487169184169190911790556060860151601c805487169184169190911790556080860151601d805487169184169190911790559151601e805486169183169190911790559151601f8054851691841691909117905560208054841690911790556101009092015160218054909216921691909117905580f35b61117791503d8085833e61116f81836112f0565b81019061140a565b5f610ed0565b505051903d90823e3d90fd5b6111ab915060203d6020116111b1575b6111a381836112f0565b810190611382565b5f610a01565b503d611199565b84513d84823e3d90fd5b6111d691503d808b833e61116f81836112f0565b5f610e22565b84513d87823e3d90fd5b6111fa91503d8085833e61116f81836112f0565b5f610a48565b611222915060203d602011611228575b61121a81836112f0565b810190611312565b5f6108f7565b503d611210565b61123b91505f906112f0565b5f5f610891565b6040513d5f823e3d90fd5b5f80fd5b61126a915060203d6020116112285761121a81836112f0565b5f6107f1565b90506020813d60201161129a575b8161128b602093836112f0565b8101031261124d57515f6107b8565b3d915061127e565b610160810190811067ffffffffffffffff8211176112bf57604052565b634e487b7160e01b5f52604160045260245ffd5b610120810190811067ffffffffffffffff8211176112bf57604052565b90601f8019910116810190811067ffffffffffffffff8211176112bf57604052565b9081602091031261124d57516001600160a01b038116810361124d5790565b6040519061133e826112a2565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b9081602091031261124d5751801515810361124d5790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b156113c557565b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b60208183031261124d5780519067ffffffffffffffff821161124d570181601f8201121561124d5780519067ffffffffffffffff82116112bf576040519261145c601f8401601f1916602001856112f0565b8284526020838301011161124d57815f9260208093018386015e8301015290565b6040519061148a826112d3565b5f610100838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b6114ec6020916114fe6040519485938493631e19e65760e01b855260406004860152604485019061139a565b8381036003190160248501529061139a565b03815f51602061153e5f395f51905f525afa908115611242575f91611521575090565b61153a915060203d6020116112285761121a81836112f0565b9056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220f09e189e682cd81f3d65bac404fdc21c004a814c93cbf9ea6404a96ab5cce5fe64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x15\x93\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\n\x92T\xE4\x14a\x07VWP\x80c%\xF9\xBF\xEF\x14a\x07-W\x80c\xC0@b&\x14a\0rWc\xF8\xCC\xBFG\x14a\0JW_\x80\xFD[4a\0oW\x80`\x03\x196\x01\x12a\0oW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\0oW\x80`\x03\x196\x01\x12a\0oW`\x0CT\x81\x90`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16_Q` a\x15>_9_Q\x90_R;\x15a\x07*W`@Q\x90c\x7F\xEC*\x8D`\xE0\x1B\x82R`\x04\x82\x01R\x81\x81`$\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x01FWa\x07\x15W[PPaziF\x14\x80\x15a\x07\nW[a\x01QW[_Q` a\x15>_9_Q\x90_R;\x15a\0oW`@Qc;un\x9B`\xE1\x1B\x81R\x81\x90\x81\x81`\x04\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x01FWa\x015WP\xF3[\x81a\x01?\x91a\x12\xF0V[a\0oW\x80\xF3[`@Q=\x84\x82>=\x90\xFD[`\rT`@Q\x82\x91`\x01`\x01`\xA0\x1B\x03\x16\x90a\x01l\x81a\x12\xA2V[`\x0ET`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x80\x83R`\x0FT\x82\x16` \x84\x01\x90\x81R`\x10T\x83\x16`@\x85\x01\x90\x81R`\x11T\x84\x16``\x86\x01R`\x12T\x84\x16`\x80\x86\x01\x90\x81R`\x13T\x85\x16`\xA0\x87\x01\x90\x81R`\x14T\x86\x16`\xC0\x88\x01R`\x15T\x86\x16`\xE0\x88\x01R`\x16T\x86\x16a\x01\0\x88\x01R`\x17T\x86\x16a\x01 \x88\x01R`\x18T\x90\x95\x16a\x01@\x90\x96\x01\x95\x90\x95R\x92\x93\x92\x90\x91\x85;\x15a\x07\x06W`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rp22\xB62\xB3\xB0\xBA4\xB7\xB7&\xB0\xB70\xB3\xB2\xB9`y\x1B`d\x83\x01R`$\x82\x01R\x86\x81`\x84\x81\x83\x8AZ\xF1\x90\x81\x15a\x06\xFBW\x87\x91a\x06\xE6W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x84;\x15a\x06\x8EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x0F`D\x83\x01Rn9\xBA90\xBA2\xB3\xBC\xA6\xB0\xB70\xB3\xB2\xB9`\x89\x1B`d\x83\x01R`$\x82\x01R\x85\x81`\x84\x81\x83\x89Z\xF1\x90\x81\x15a\x06\x83W\x86\x91a\x06\xD1W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x83;\x15a\x06jW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x0C`D\x83\x01RkavsDirectory`\xA0\x1B`d\x83\x01R`$\x82\x01R\x84\x81`\x84\x81\x83\x88Z\xF1\x90\x81\x15a\x06_W\x85\x91a\x06\xBCW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x82;\x15a\x06EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rp0\xB667\xB1\xB0\xBA4\xB7\xB7&\xB0\xB70\xB3\xB2\xB9`y\x1B`d\x83\x01R`$\x82\x01R\x83\x81`\x84\x81\x83\x87Z\xF1\x90\x81\x15a\x06:W\x84\x91a\x06\xA7W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x81;\x15a\x06!W\x82\x91`\x84\x83\x92`@Q\x94\x85\x93\x84\x92c\x0F\xE7\x85\x85`\xE3\x1B\x84R`@`\x04\x85\x01R`\x12`D\x85\x01Rq92\xBB\xB0\xB929\xA1\xB7\xB7\xB924\xB70\xBA7\xB9`q\x1B`d\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x01FWa\x06\x92W[P`\x01\x80`\xA0\x1B\x03`\rT\x16`@Qa\x03\xF5\x81a\x12\xD3V[`\x19T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R`\x1AT\x81\x16` \x80\x84\x01\x91\x82R`\x1BT\x83\x16`@\x85\x01\x90\x81R`\x1CT\x84\x16``\x86\x01R`\x1DT\x84\x16`\x80\x86\x01R`\x1ET\x84\x16`\xA0\x86\x01R`\x1FT\x84\x16`\xC0\x86\x01\x81\x90R\x91T\x84\x16`\xE0\x86\x01R`!T\x90\x93\x16a\x01\0\x85\x01R\x91\x92\x90\x91\x84;\x15a\x06\x8EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rperc20MockStrategy`x\x1B`d\x83\x01R`$\x82\x01R\x85\x81`\x84\x81\x83\x89Z\xF1\x90\x81\x15a\x06\x83W\x86\x91a\x06nW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x83;\x15a\x06jW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x15`D\x83\x01Rt6\xB7\xB1\xB5\xA0\xBB9\xA9\xB2\xB9;4\xB1\xB2\xA6\xB0\xB70\xB3\xB2\xB9`Y\x1B`d\x83\x01R`$\x82\x01R\x84\x81`\x84\x81\x83\x88Z\xF1\x90\x81\x15a\x06_W\x85\x91a\x06JW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x82;\x15a\x06EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x1A`D\x83\x01R\x7FmockAvsRegistryCoordinator\0\0\0\0\0\0`d\x83\x01R`$\x82\x01R\x83\x81`\x84\x81\x83\x87Z\xF1\x90\x81\x15a\x06:W\x84\x91a\x06%W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x81;\x15a\x06!W\x82\x91`\x84\x83\x92`@Q\x94\x85\x93\x84\x92c\x0F\xE7\x85\x85`\xE3\x1B\x84R`@`\x04\x85\x01R`\x1D`D\x85\x01R\x7FmockAvsOperatorStateRetriever\0\0\0`d\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x01FWa\x06\x0CW[PPa\0\xEFV[\x81a\x06\x16\x91a\x12\xF0V[a\0oW\x80_a\x06\x05V[PP\xFD[\x81a\x06/\x91a\x12\xF0V[a\x06!W\x82_a\x05\x94V[`@Q=\x86\x82>=\x90\xFD[PPP\xFD[\x81a\x06T\x91a\x12\xF0V[a\x06EW\x83_a\x05#V[`@Q=\x87\x82>=\x90\xFD[\x84\x80\xFD[\x81a\x06x\x91a\x12\xF0V[a\x06jW\x84_a\x04\xBAV[`@Q=\x88\x82>=\x90\xFD[\x85\x80\xFD[\x81a\x06\x9C\x91a\x12\xF0V[a\0oW\x80_a\x03\xDDV[\x81a\x06\xB1\x91a\x12\xF0V[a\x06!W\x82_a\x03wV[\x81a\x06\xC6\x91a\x12\xF0V[a\x06EW\x83_a\x03\x12V[\x81a\x06\xDB\x91a\x12\xF0V[a\x06jW\x84_a\x02\xB2V[\x81a\x06\xF0\x91a\x12\xF0V[a\x06\x8EW\x85_a\x02OV[`@Q=\x89\x82>=\x90\xFD[\x86\x80\xFD[Pa\x059F\x14a\0\xEAV[\x81a\x07\x1F\x91a\x12\xF0V[a\0oW\x80_a\0\xDCV[P\xFD[P4a\0oW\x80`\x03\x196\x01\x12a\0oW`\rT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[\x90P4a\x12MW_6`\x03\x19\x01\x12a\x12MWc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x0B`$\x83\x01RjPRIVATE_KEY`\xA8\x1B`D\x83\x01R\x81`d\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x12BW_\x91a\x12pW[P`@Q\x90c\x08\x84\0\x19`\xE2\x1B\x82R`\x04\x82\x01R` \x81`$\x81__Q` a\x15>_9_Q\x90_RZ\xF1\x90\x81\x15a\x12BW_\x91a\x12QW[P`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16`\x18\x92\x90\x92\x1Bc\x01\0\0\0`\x01`\xB8\x1B\x03\x16\x91\x90\x91\x17\x90\x81\x90U_Q` a\x15>_9_Q\x90_R;\x15a\x12MW`@\x80Qc\x18\xCA\xF8\xE3`\xE3\x1B\x81R`\x18\x92\x90\x92\x1C`\x01`\x01`\xA0\x1B\x03\x16`\x04\x83\x01R`$\x82\x01R`\x08`D\x82\x01Rg\"2\xB867\xBC\xB2\xB9`\xC1\x1B`d\x82\x01R_\x81`\x84\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x12BWa\x12/W[P`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x17`$\x83\x01R\x7FCONTRACTS_REGISTRY_ADDR\0\0\0\0\0\0\0\0\0`D\x83\x01R\x81`d\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x01FW\x82\x91a\x12\0W[P`\x01\x80`\xA0\x1B\x03\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`\rT\x16\x17`\rU`@\x80Qa\t&\x82\x82a\x12\xF0V[`\x18\x81Ra\t\xB2` \x82\x01\x91\x7Fscript/deployments/core/\0\0\0\0\0\0\0\0\x83R` \x84Qa\tc\x86\x82a\x12\xF0V[`\n\x81R\x81\x81\x01\x90i\x19\x98\x99\x99\x9B\x9759\xB7\xB7`\xB1\x1B\x82Ra\t\x83a\x131V[P\x86Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90\x89\x82RQ\x92\x83\x91^\x01\x01\x85\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x12\xF0V[\x82\x82Q\x91c\x13\r\x19\x1F`\xE1\x1B\x83R` `\x04\x84\x01R` \x83\x80a\t\xD8`$\x82\x01\x85a\x13\x9AV[\x03\x81\x85_Q` a\x15>_9_Q\x90_RZ\xF1\x92\x83\x15a\x11\xB8Wa\n(\x93a\n\x07\x91\x84\x91a\x11\x89W[Pa\x13\xBEV[\x83Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x13\x9AV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x11}W\x83\x91a\x11\xE6W[Pa\nQa\x131V[\x90a\n\x91\x83Qa\na\x85\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x83\x01\x90\x81R\x83Q\x90\x91\x90a\n\xE5\x90a\n\xB5\x86\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16\x83\x85\x01\x90\x81R\x84Qa\x0B4\x90a\x0B\x04\x87\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16``\x85\x01\x90\x81R\x85Q\x90\x92\x90a\x0BS\x87\x82a\x12\xF0V[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x0B\x88\x90\x83a\x14\xC0V[\x16\x85Ra\x0B\xCA\x86Qa\x0B\x9A\x88\x82a\x12\xF0V[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16` \x86\x01\x90\x81R\x86Q\x90\x93\x90a\x0C\x1D\x90a\x0B\xED\x89\x82a\x12\xF0V[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x87\x01\x90\x81R\x87Q\x90\x93\x90a\x0Cp\x90a\x0C@\x8A\x82a\x12\xF0V[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x84a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\x80\x88\x01\x90\x81R\x88Q\x90\x93\x90a\x0C\xCB\x90a\x0C\x93\x8B\x82a\x12\xF0V[`\x19\x81R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x92a\x14\xC0V[\x16`\xE0\x88\x01\x81\x90R\x87Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U\x96Q`\x0F\x80T\x89\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x10\x80T\x88\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x11\x80T\x87\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x12\x80T\x86\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x13\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\xC0\x85\x01Q`\x14\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\x15\x80T\x84\x16\x90\x92\x17\x90\x91U\x91Q`\x16\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90Ua\x01 \x83\x01Q`\x17\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90Ua\x01@\x90\x92\x01Q`\x18\x80T\x90\x93\x16\x91\x16\x17\x90U\x80Qa\r\xAE\x82\x82a\x12\xF0V[`\x1C\x81R` \x81\x01\x90\x7Fscript/deployments/mock-avs/\0\0\0\0\x82Ra\r\xE2a\x14}V[P\x82Qc4\x80Q\xD7`\xE1\x1B\x81RF`\x04\x82\x01R\x84\x81`$\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x91\x82\x15a\x11\xDCW` \x80a\x0E\\\x94`\x05\x94\x89\x91a\x11\xC2W[P\x87Q\x96\x87\x94Q\x80\x91\x84\x87\x01^\x84\x01\x90\x82\x82\x01\x8A\x81R\x81Q\x93\x84\x92\x01\x90^\x01\x01d\x1759\xB7\xB7`\xD9\x1B\x81R\x03`\x1A\x19\x81\x01\x84R\x01\x82a\x12\xF0V[\x82\x82Q\x91c\x13\r\x19\x1F`\xE1\x1B\x83R` `\x04\x84\x01R` \x83\x80a\x0E\x82`$\x82\x01\x85a\x13\x9AV[\x03\x81\x85_Q` a\x15>_9_Q\x90_RZ\xF1\x92\x83\x15a\x11\xB8Wa\x0E\xB0\x93a\n\x07\x91\x84\x91a\x11\x89WPa\x13\xBEV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x11}W\x83\x91a\x11[W[Pa\x0E\xD9a\x14}V[\x91\x80Qa\x0E\xE6\x82\x82a\x12\xF0V[` \x80\x82R\x7F.addresses.MockAvsServiceManager\x90\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x0F#\x90\x84a\x14\xC0V[\x16\x83Ra\x0Fe\x81Qa\x0F5\x83\x82a\x12\xF0V[`\x1E\x81R\x7F.addresses.registryCoordinator\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16` \x84\x01\x90\x81R\x81Q\x90\x92\x90a\x0F\xC2\x90a\x0F\x89``\x82a\x12\xF0V[`!\x81R\x7F.addresses.operatorStateRetrieve` \x82\x01R`9`\xF9\x1B\x84\x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16\x84\x83\x01\x90\x81R\x82Qa\x10\x11\x90a\x0F\xE1\x85\x82a\x12\xF0V[`\x18\x81R\x7F.addresses.stakeRegistry\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x14\xC0V[\x91`\xA0\x86\x01\x92`\x01\x80`\xA0\x1B\x03\x16\x83Ra\x10\xA2a\x10Y\x85Qa\x103\x87\x82a\x12\xF0V[`\x13\x81Rr.addresses.strategy`h\x1B` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\xC0\x88\x01\x90\x81R\x85Q\x90\x95a\x10w\x90\x82a\x12\xF0V[`\x10\x81Ro\x170\xB2292\xB9\xB9\xB2\xB9\x97:7\xB5\xB2\xB7`\x81\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x92a\x14\xC0V[\x16`\xE0\x86\x01\x81\x90R\x85Q`\x19\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U\x95Q`\x1A\x80T\x88\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x1B\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U``\x86\x01Q`\x1C\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U`\x80\x86\x01Q`\x1D\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x1E\x80T\x86\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x1F\x80T\x85\x16\x91\x84\x16\x91\x90\x91\x17\x90U` \x80T\x84\x16\x90\x91\x17\x90Ua\x01\0\x90\x92\x01Q`!\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U\x80\xF3[a\x11w\x91P=\x80\x85\x83>a\x11o\x81\x83a\x12\xF0V[\x81\x01\x90a\x14\nV[_a\x0E\xD0V[PPQ\x90=\x90\x82>=\x90\xFD[a\x11\xAB\x91P` =` \x11a\x11\xB1W[a\x11\xA3\x81\x83a\x12\xF0V[\x81\x01\x90a\x13\x82V[_a\n\x01V[P=a\x11\x99V[\x84Q=\x84\x82>=\x90\xFD[a\x11\xD6\x91P=\x80\x8B\x83>a\x11o\x81\x83a\x12\xF0V[_a\x0E\"V[\x84Q=\x87\x82>=\x90\xFD[a\x11\xFA\x91P=\x80\x85\x83>a\x11o\x81\x83a\x12\xF0V[_a\nHV[a\x12\"\x91P` =` \x11a\x12(W[a\x12\x1A\x81\x83a\x12\xF0V[\x81\x01\x90a\x13\x12V[_a\x08\xF7V[P=a\x12\x10V[a\x12;\x91P_\x90a\x12\xF0V[__a\x08\x91V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[a\x12j\x91P` =` \x11a\x12(Wa\x12\x1A\x81\x83a\x12\xF0V[_a\x07\xF1V[\x90P` \x81=` \x11a\x12\x9AW[\x81a\x12\x8B` \x93\x83a\x12\xF0V[\x81\x01\x03\x12a\x12MWQ_a\x07\xB8V[=\x91Pa\x12~V[a\x01`\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\x01 \x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[\x90\x81` \x91\x03\x12a\x12MWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x12MW\x90V[`@Q\x90a\x13>\x82a\x12\xA2V[_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[\x90\x81` \x91\x03\x12a\x12MWQ\x80\x15\x15\x81\x03a\x12MW\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x15a\x13\xC5WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[` \x81\x83\x03\x12a\x12MW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12MW\x01\x81`\x1F\x82\x01\x12\x15a\x12MW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\xBFW`@Q\x92a\x14\\`\x1F\x84\x01`\x1F\x19\x16` \x01\x85a\x12\xF0V[\x82\x84R` \x83\x83\x01\x01\x11a\x12MW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[`@Q\x90a\x14\x8A\x82a\x12\xD3V[_a\x01\0\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x01RV[a\x14\xEC` \x91a\x14\xFE`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x13\x9AV[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x13\x9AV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x12BW_\x91a\x15!WP\x90V[a\x15:\x91P` =` \x11a\x12(Wa\x12\x1A\x81\x83a\x12\xF0V[\x90V\xFE\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\xA2dipfsX\"\x12 \xF0\x9E\x18\x9Eh,\xD8\x1F=e\xBA\xC4\x04\xFD\xC2\x1C\0J\x81L\x93\xCB\xF9\xEAd\x04\xA9j\xB5\xCC\xE5\xFEdsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081630a9254e4146107565750806325f9bfef1461072d578063c0406226146100725763f8ccbf471461004a575f80fd5b3461006f578060031936011261006f57602060ff600c5460101c166040519015158152f35b80fd5b503461006f578060031936011261006f57600c54819060181c6001600160a01b03165f51602061153e5f395f51905f523b1561072a5760405190637fec2a8d60e01b825260048201528181602481835f51602061153e5f395f51905f525af1801561014657610715575b5050617a694614801561070a575b610151575b5f51602061153e5f395f51905f523b1561006f57604051633b756e9b60e11b815281908181600481835f51602061153e5f395f51905f525af18015610146576101355750f35b8161013f916112f0565b61006f5780f35b6040513d84823e3d90fd5b600d5460405182916001600160a01b03169061016c816112a2565b600e546001600160a01b03908116808352600f5482166020840190815260105483166040850190815260115484166060860152601254841660808601908152601354851660a08701908152601454861660c0880152601554861660e088015260165486166101008801526017548616610120880152601854909516610140909601959095529293929091853b156107065760405190630fe7858560e31b82526040600483015260116044830152703232b632b3b0ba34b7b726b0b730b3b2b960791b606483015260248201528681608481838a5af19081156106fb5787916106e6575b5050516001600160a01b0316843b1561068e5760405190630fe7858560e31b825260406004830152600f60448301526e39ba3930ba32b3bca6b0b730b3b2b960891b60648301526024820152858160848183895af19081156106835786916106d1575b5050516001600160a01b0316833b1561066a5760405190630fe7858560e31b825260406004830152600c60448301526b6176734469726563746f727960a01b60648301526024820152848160848183885af190811561065f5785916106bc575b5050516001600160a01b0316823b156106455760405190630fe7858560e31b825260406004830152601160448301527030b63637b1b0ba34b7b726b0b730b3b2b960791b60648301526024820152838160848183875af190811561063a5784916106a7575b5050516001600160a01b0316813b15610621578291608483926040519485938492630fe7858560e31b84526040600485015260126044850152713932bbb0b93239a1b7b7b93234b730ba37b960711b606485015260248401525af1801561014657610692575b5060018060a01b03600d54166040516103f5816112d3565b6019546001600160a01b039081168252601a5481166020808401918252601b54831660408501908152601c5484166060860152601d5484166080860152601e54841660a0860152601f54841660c086018190529154841660e086015260215490931661010085015291929091843b1561068e5760405190630fe7858560e31b825260406004830152601160448301527065726332304d6f636b537472617465677960781b60648301526024820152858160848183895af190811561068357869161066e575b5050516001600160a01b0316833b1561066a5760405190630fe7858560e31b825260406004830152601560448301527436b7b1b5a0bb39a9b2b93b34b1b2a6b0b730b3b2b960591b60648301526024820152848160848183885af190811561065f57859161064a575b5050516001600160a01b0316823b156106455760405190630fe7858560e31b825260406004830152601a60448301527f6d6f636b4176735265676973747279436f6f7264696e61746f7200000000000060648301526024820152838160848183875af190811561063a578491610625575b5050516001600160a01b0316813b15610621578291608483926040519485938492630fe7858560e31b845260406004850152601d60448501527f6d6f636b4176734f70657261746f725374617465526574726965766572000000606485015260248401525af180156101465761060c575b50506100ef565b81610616916112f0565b61006f57805f610605565b5050fd5b8161062f916112f0565b61062157825f610594565b6040513d86823e3d90fd5b505050fd5b81610654916112f0565b61064557835f610523565b6040513d87823e3d90fd5b8480fd5b81610678916112f0565b61066a57845f6104ba565b6040513d88823e3d90fd5b8580fd5b8161069c916112f0565b61006f57805f6103dd565b816106b1916112f0565b61062157825f610377565b816106c6916112f0565b61064557835f610312565b816106db916112f0565b61066a57845f6102b2565b816106f0916112f0565b61068e57855f61024f565b6040513d89823e3d90fd5b8680fd5b5061053946146100ea565b8161071f916112f0565b61006f57805f6100dc565b50fd5b503461006f578060031936011261006f57600d546040516001600160a01b039091168152602090f35b90503461124d575f36600319011261124d5763c1978d1f60e01b8152602060048201819052600b60248301526a505249564154455f4b455960a81b6044830152816064815f51602061153e5f395f51905f525afa908115611242575f91611270575b5060405190630884001960e21b825260048201526020816024815f5f51602061153e5f395f51905f525af1908115611242575f91611251575b50600c80546301000000600160b81b03191660189290921b6301000000600160b81b031691909117908190555f51602061153e5f395f51905f523b1561124d57604080516318caf8e360e31b815260189290921c6001600160a01b03166004830152602482015260086044820152672232b83637bcb2b960c11b60648201525f81608481835f51602061153e5f395f51905f525af180156112425761122f575b5060405163350d56bf60e01b8152602060048201819052601760248301527f434f4e5452414354535f52454749535452595f414444520000000000000000006044830152816064815f51602061153e5f395f51905f525afa908115610146578291611200575b5060018060a01b03166bffffffffffffffffffffffff60a01b600d541617600d556040805161092682826112f0565b601881526109b260208201917f7363726970742f6465706c6f796d656e74732f636f72652f000000000000000083526020845161096386826112f0565b600a81528181019069199899999b973539b7b760b11b8252610983611331565b5086519586945180918587015e84019083820190898252519283915e010185815203601f1981018352826112f0565b8282519163130d191f60e11b835260206004840152602083806109d8602482018561139a565b0381855f51602061153e5f395f51905f525af19283156111b857610a2893610a07918491611189575b506113be565b8351809381926360f9bb1160e01b835260206004840152602483019061139a565b03815f51602061153e5f395f51905f525afa90811561117d5783916111e6575b50610a51611331565b90610a918351610a6185826112f0565b601a81527f2e6164647265737365732e7374726174656779466163746f72790000000000006020820152826114c0565b6001600160a01b031661010083019081528351909190610ae590610ab586826112f0565b601a81527f2e6164647265737365732e73747261746567794d616e616765720000000000006020820152826114c0565b6001600160a01b03168385019081528451610b3490610b0487826112f0565b601a81527f2e6164647265737365732e656967656e506f644d616e616765720000000000006020820152836114c0565b6001600160a01b0316606085019081528551909290610b5387826112f0565b60158152741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b60208201526001600160a01b0390610b8890836114c0565b168552610bca8651610b9a88826112f0565b601781527f2e6164647265737365732e6176734469726563746f72790000000000000000006020820152826114c0565b6001600160a01b0316602086019081528651909390610c1d90610bed89826112f0565b601d81527f2e6164647265737365732e72657761726473436f6f7264696e61746f720000006020820152836114c0565b6001600160a01b031660a087019081528751909390610c7090610c408a826112f0565b601c81527f2e6164647265737365732e616c6c6f636174696f6e4d616e61676572000000006020820152846114c0565b6001600160a01b0316608088019081528851909390610ccb90610c938b826112f0565b601981527f2e6164647265737365732e70617573657252656769737472790000000000000060208201526001600160a01b03926114c0565b1660e088018190528751600e80546001600160a01b03199081166001600160a01b03938416179091559651600f80548916918316919091179055915160108054881691841691909117905591516011805487169183169190911790559151601280548616918416919091179055915160138054851691831691909117905560c08501516014805485169183169190911790556015805484169092179091559151601680548316918416919091179055610120830151601780548316918416919091179055610140909201516018805490931691161790558051610dae82826112f0565b601c815260208101907f7363726970742f6465706c6f796d656e74732f6d6f636b2d6176732f000000008252610de261147d565b50825163348051d760e11b815246600482015284816024815f51602061153e5f395f51905f525afa9182156111dc57602080610e5c9460059489916111c2575b5087519687945180918487015e8401908282018a8152815193849201905e010164173539b7b760d91b815203601a198101845201826112f0565b8282519163130d191f60e11b83526020600484015260208380610e82602482018561139a565b0381855f51602061153e5f395f51905f525af19283156111b857610eb093610a0791849161118957506113be565b03815f51602061153e5f395f51905f525afa90811561117d57839161115b575b50610ed961147d565b918051610ee682826112f0565b60208082527f2e6164647265737365732e4d6f636b417673536572766963654d616e61676572908201526001600160a01b0390610f2390846114c0565b168352610f658151610f3583826112f0565b601e81527f2e6164647265737365732e7265676973747279436f6f7264696e61746f7200006020820152836114c0565b6001600160a01b0316602084019081528151909290610fc290610f896060826112f0565b602181527f2e6164647265737365732e6f70657261746f72537461746552657472696576656020820152603960f91b84820152826114c0565b6001600160a01b0316848301908152825161101190610fe185826112f0565b601881527f2e6164647265737365732e7374616b65526567697374727900000000000000006020820152836114c0565b9160a086019260018060a01b031683526110a2611059855161103387826112f0565b60138152722e6164647265737365732e737472617465677960681b6020820152836114c0565b6001600160a01b031660c088019081528551909561107790826112f0565b601081526f1730b2323932b9b9b2b9973a37b5b2b760811b60208201526001600160a01b03926114c0565b1660e086018190528551601980546001600160a01b03199081166001600160a01b03938416179091559551601a805488169183169190911790559151601b805487169184169190911790556060860151601c805487169184169190911790556080860151601d805487169184169190911790559151601e805486169183169190911790559151601f8054851691841691909117905560208054841690911790556101009092015160218054909216921691909117905580f35b61117791503d8085833e61116f81836112f0565b81019061140a565b5f610ed0565b505051903d90823e3d90fd5b6111ab915060203d6020116111b1575b6111a381836112f0565b810190611382565b5f610a01565b503d611199565b84513d84823e3d90fd5b6111d691503d808b833e61116f81836112f0565b5f610e22565b84513d87823e3d90fd5b6111fa91503d8085833e61116f81836112f0565b5f610a48565b611222915060203d602011611228575b61121a81836112f0565b810190611312565b5f6108f7565b503d611210565b61123b91505f906112f0565b5f5f610891565b6040513d5f823e3d90fd5b5f80fd5b61126a915060203d6020116112285761121a81836112f0565b5f6107f1565b90506020813d60201161129a575b8161128b602093836112f0565b8101031261124d57515f6107b8565b3d915061127e565b610160810190811067ffffffffffffffff8211176112bf57604052565b634e487b7160e01b5f52604160045260245ffd5b610120810190811067ffffffffffffffff8211176112bf57604052565b90601f8019910116810190811067ffffffffffffffff8211176112bf57604052565b9081602091031261124d57516001600160a01b038116810361124d5790565b6040519061133e826112a2565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b9081602091031261124d5751801515810361124d5790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b156113c557565b60405162461bcd60e51b815260206004820152601e60248201527f4465706c6f796d656e742066696c6520646f6573206e6f7420657869737400006044820152606490fd5b60208183031261124d5780519067ffffffffffffffff821161124d570181601f8201121561124d5780519067ffffffffffffffff82116112bf576040519261145c601f8401601f1916602001856112f0565b8284526020838301011161124d57815f9260208093018386015e8301015290565b6040519061148a826112d3565b5f610100838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b6114ec6020916114fe6040519485938493631e19e65760e01b855260406004860152604485019061139a565b8381036003190160248501529061139a565b03815f51602061153e5f395f51905f525afa908115611242575f91611521575090565b61153a915060203d6020116112285761121a81836112f0565b9056fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220f09e189e682cd81f3d65bac404fdc21c004a814c93cbf9ea6404a96ab5cce5fe64736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\n\x92T\xE4\x14a\x07VWP\x80c%\xF9\xBF\xEF\x14a\x07-W\x80c\xC0@b&\x14a\0rWc\xF8\xCC\xBFG\x14a\0JW_\x80\xFD[4a\0oW\x80`\x03\x196\x01\x12a\0oW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\0oW\x80`\x03\x196\x01\x12a\0oW`\x0CT\x81\x90`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16_Q` a\x15>_9_Q\x90_R;\x15a\x07*W`@Q\x90c\x7F\xEC*\x8D`\xE0\x1B\x82R`\x04\x82\x01R\x81\x81`$\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x01FWa\x07\x15W[PPaziF\x14\x80\x15a\x07\nW[a\x01QW[_Q` a\x15>_9_Q\x90_R;\x15a\0oW`@Qc;un\x9B`\xE1\x1B\x81R\x81\x90\x81\x81`\x04\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x01FWa\x015WP\xF3[\x81a\x01?\x91a\x12\xF0V[a\0oW\x80\xF3[`@Q=\x84\x82>=\x90\xFD[`\rT`@Q\x82\x91`\x01`\x01`\xA0\x1B\x03\x16\x90a\x01l\x81a\x12\xA2V[`\x0ET`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x80\x83R`\x0FT\x82\x16` \x84\x01\x90\x81R`\x10T\x83\x16`@\x85\x01\x90\x81R`\x11T\x84\x16``\x86\x01R`\x12T\x84\x16`\x80\x86\x01\x90\x81R`\x13T\x85\x16`\xA0\x87\x01\x90\x81R`\x14T\x86\x16`\xC0\x88\x01R`\x15T\x86\x16`\xE0\x88\x01R`\x16T\x86\x16a\x01\0\x88\x01R`\x17T\x86\x16a\x01 \x88\x01R`\x18T\x90\x95\x16a\x01@\x90\x96\x01\x95\x90\x95R\x92\x93\x92\x90\x91\x85;\x15a\x07\x06W`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rp22\xB62\xB3\xB0\xBA4\xB7\xB7&\xB0\xB70\xB3\xB2\xB9`y\x1B`d\x83\x01R`$\x82\x01R\x86\x81`\x84\x81\x83\x8AZ\xF1\x90\x81\x15a\x06\xFBW\x87\x91a\x06\xE6W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x84;\x15a\x06\x8EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x0F`D\x83\x01Rn9\xBA90\xBA2\xB3\xBC\xA6\xB0\xB70\xB3\xB2\xB9`\x89\x1B`d\x83\x01R`$\x82\x01R\x85\x81`\x84\x81\x83\x89Z\xF1\x90\x81\x15a\x06\x83W\x86\x91a\x06\xD1W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x83;\x15a\x06jW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x0C`D\x83\x01RkavsDirectory`\xA0\x1B`d\x83\x01R`$\x82\x01R\x84\x81`\x84\x81\x83\x88Z\xF1\x90\x81\x15a\x06_W\x85\x91a\x06\xBCW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x82;\x15a\x06EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rp0\xB667\xB1\xB0\xBA4\xB7\xB7&\xB0\xB70\xB3\xB2\xB9`y\x1B`d\x83\x01R`$\x82\x01R\x83\x81`\x84\x81\x83\x87Z\xF1\x90\x81\x15a\x06:W\x84\x91a\x06\xA7W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x81;\x15a\x06!W\x82\x91`\x84\x83\x92`@Q\x94\x85\x93\x84\x92c\x0F\xE7\x85\x85`\xE3\x1B\x84R`@`\x04\x85\x01R`\x12`D\x85\x01Rq92\xBB\xB0\xB929\xA1\xB7\xB7\xB924\xB70\xBA7\xB9`q\x1B`d\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x01FWa\x06\x92W[P`\x01\x80`\xA0\x1B\x03`\rT\x16`@Qa\x03\xF5\x81a\x12\xD3V[`\x19T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R`\x1AT\x81\x16` \x80\x84\x01\x91\x82R`\x1BT\x83\x16`@\x85\x01\x90\x81R`\x1CT\x84\x16``\x86\x01R`\x1DT\x84\x16`\x80\x86\x01R`\x1ET\x84\x16`\xA0\x86\x01R`\x1FT\x84\x16`\xC0\x86\x01\x81\x90R\x91T\x84\x16`\xE0\x86\x01R`!T\x90\x93\x16a\x01\0\x85\x01R\x91\x92\x90\x91\x84;\x15a\x06\x8EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x11`D\x83\x01Rperc20MockStrategy`x\x1B`d\x83\x01R`$\x82\x01R\x85\x81`\x84\x81\x83\x89Z\xF1\x90\x81\x15a\x06\x83W\x86\x91a\x06nW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x83;\x15a\x06jW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x15`D\x83\x01Rt6\xB7\xB1\xB5\xA0\xBB9\xA9\xB2\xB9;4\xB1\xB2\xA6\xB0\xB70\xB3\xB2\xB9`Y\x1B`d\x83\x01R`$\x82\x01R\x84\x81`\x84\x81\x83\x88Z\xF1\x90\x81\x15a\x06_W\x85\x91a\x06JW[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x82;\x15a\x06EW`@Q\x90c\x0F\xE7\x85\x85`\xE3\x1B\x82R`@`\x04\x83\x01R`\x1A`D\x83\x01R\x7FmockAvsRegistryCoordinator\0\0\0\0\0\0`d\x83\x01R`$\x82\x01R\x83\x81`\x84\x81\x83\x87Z\xF1\x90\x81\x15a\x06:W\x84\x91a\x06%W[PPQ`\x01`\x01`\xA0\x1B\x03\x16\x81;\x15a\x06!W\x82\x91`\x84\x83\x92`@Q\x94\x85\x93\x84\x92c\x0F\xE7\x85\x85`\xE3\x1B\x84R`@`\x04\x85\x01R`\x1D`D\x85\x01R\x7FmockAvsOperatorStateRetriever\0\0\0`d\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x01FWa\x06\x0CW[PPa\0\xEFV[\x81a\x06\x16\x91a\x12\xF0V[a\0oW\x80_a\x06\x05V[PP\xFD[\x81a\x06/\x91a\x12\xF0V[a\x06!W\x82_a\x05\x94V[`@Q=\x86\x82>=\x90\xFD[PPP\xFD[\x81a\x06T\x91a\x12\xF0V[a\x06EW\x83_a\x05#V[`@Q=\x87\x82>=\x90\xFD[\x84\x80\xFD[\x81a\x06x\x91a\x12\xF0V[a\x06jW\x84_a\x04\xBAV[`@Q=\x88\x82>=\x90\xFD[\x85\x80\xFD[\x81a\x06\x9C\x91a\x12\xF0V[a\0oW\x80_a\x03\xDDV[\x81a\x06\xB1\x91a\x12\xF0V[a\x06!W\x82_a\x03wV[\x81a\x06\xC6\x91a\x12\xF0V[a\x06EW\x83_a\x03\x12V[\x81a\x06\xDB\x91a\x12\xF0V[a\x06jW\x84_a\x02\xB2V[\x81a\x06\xF0\x91a\x12\xF0V[a\x06\x8EW\x85_a\x02OV[`@Q=\x89\x82>=\x90\xFD[\x86\x80\xFD[Pa\x059F\x14a\0\xEAV[\x81a\x07\x1F\x91a\x12\xF0V[a\0oW\x80_a\0\xDCV[P\xFD[P4a\0oW\x80`\x03\x196\x01\x12a\0oW`\rT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[\x90P4a\x12MW_6`\x03\x19\x01\x12a\x12MWc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x0B`$\x83\x01RjPRIVATE_KEY`\xA8\x1B`D\x83\x01R\x81`d\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x12BW_\x91a\x12pW[P`@Q\x90c\x08\x84\0\x19`\xE2\x1B\x82R`\x04\x82\x01R` \x81`$\x81__Q` a\x15>_9_Q\x90_RZ\xF1\x90\x81\x15a\x12BW_\x91a\x12QW[P`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16`\x18\x92\x90\x92\x1Bc\x01\0\0\0`\x01`\xB8\x1B\x03\x16\x91\x90\x91\x17\x90\x81\x90U_Q` a\x15>_9_Q\x90_R;\x15a\x12MW`@\x80Qc\x18\xCA\xF8\xE3`\xE3\x1B\x81R`\x18\x92\x90\x92\x1C`\x01`\x01`\xA0\x1B\x03\x16`\x04\x83\x01R`$\x82\x01R`\x08`D\x82\x01Rg\"2\xB867\xBC\xB2\xB9`\xC1\x1B`d\x82\x01R_\x81`\x84\x81\x83_Q` a\x15>_9_Q\x90_RZ\xF1\x80\x15a\x12BWa\x12/W[P`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x17`$\x83\x01R\x7FCONTRACTS_REGISTRY_ADDR\0\0\0\0\0\0\0\0\0`D\x83\x01R\x81`d\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x01FW\x82\x91a\x12\0W[P`\x01\x80`\xA0\x1B\x03\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B`\rT\x16\x17`\rU`@\x80Qa\t&\x82\x82a\x12\xF0V[`\x18\x81Ra\t\xB2` \x82\x01\x91\x7Fscript/deployments/core/\0\0\0\0\0\0\0\0\x83R` \x84Qa\tc\x86\x82a\x12\xF0V[`\n\x81R\x81\x81\x01\x90i\x19\x98\x99\x99\x9B\x9759\xB7\xB7`\xB1\x1B\x82Ra\t\x83a\x131V[P\x86Q\x95\x86\x94Q\x80\x91\x85\x87\x01^\x84\x01\x90\x83\x82\x01\x90\x89\x82RQ\x92\x83\x91^\x01\x01\x85\x81R\x03`\x1F\x19\x81\x01\x83R\x82a\x12\xF0V[\x82\x82Q\x91c\x13\r\x19\x1F`\xE1\x1B\x83R` `\x04\x84\x01R` \x83\x80a\t\xD8`$\x82\x01\x85a\x13\x9AV[\x03\x81\x85_Q` a\x15>_9_Q\x90_RZ\xF1\x92\x83\x15a\x11\xB8Wa\n(\x93a\n\x07\x91\x84\x91a\x11\x89W[Pa\x13\xBEV[\x83Q\x80\x93\x81\x92c`\xF9\xBB\x11`\xE0\x1B\x83R` `\x04\x84\x01R`$\x83\x01\x90a\x13\x9AV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x11}W\x83\x91a\x11\xE6W[Pa\nQa\x131V[\x90a\n\x91\x83Qa\na\x85\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.strategyFactory\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x83\x01\x90\x81R\x83Q\x90\x91\x90a\n\xE5\x90a\n\xB5\x86\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.strategyManager\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16\x83\x85\x01\x90\x81R\x84Qa\x0B4\x90a\x0B\x04\x87\x82a\x12\xF0V[`\x1A\x81R\x7F.addresses.eigenPodManager\0\0\0\0\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16``\x85\x01\x90\x81R\x85Q\x90\x92\x90a\x0BS\x87\x82a\x12\xF0V[`\x15\x81Rt\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x0B\x88\x90\x83a\x14\xC0V[\x16\x85Ra\x0B\xCA\x86Qa\x0B\x9A\x88\x82a\x12\xF0V[`\x17\x81R\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0` \x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16` \x86\x01\x90\x81R\x86Q\x90\x93\x90a\x0C\x1D\x90a\x0B\xED\x89\x82a\x12\xF0V[`\x1D\x81R\x7F.addresses.rewardsCoordinator\0\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x87\x01\x90\x81R\x87Q\x90\x93\x90a\x0Cp\x90a\x0C@\x8A\x82a\x12\xF0V[`\x1C\x81R\x7F.addresses.allocationManager\0\0\0\0` \x82\x01R\x84a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\x80\x88\x01\x90\x81R\x88Q\x90\x93\x90a\x0C\xCB\x90a\x0C\x93\x8B\x82a\x12\xF0V[`\x19\x81R\x7F.addresses.pauserRegistry\0\0\0\0\0\0\0` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x92a\x14\xC0V[\x16`\xE0\x88\x01\x81\x90R\x87Q`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U\x96Q`\x0F\x80T\x89\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x10\x80T\x88\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x11\x80T\x87\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x12\x80T\x86\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x13\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\xC0\x85\x01Q`\x14\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\x15\x80T\x84\x16\x90\x92\x17\x90\x91U\x91Q`\x16\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90Ua\x01 \x83\x01Q`\x17\x80T\x83\x16\x91\x84\x16\x91\x90\x91\x17\x90Ua\x01@\x90\x92\x01Q`\x18\x80T\x90\x93\x16\x91\x16\x17\x90U\x80Qa\r\xAE\x82\x82a\x12\xF0V[`\x1C\x81R` \x81\x01\x90\x7Fscript/deployments/mock-avs/\0\0\0\0\x82Ra\r\xE2a\x14}V[P\x82Qc4\x80Q\xD7`\xE1\x1B\x81RF`\x04\x82\x01R\x84\x81`$\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x91\x82\x15a\x11\xDCW` \x80a\x0E\\\x94`\x05\x94\x89\x91a\x11\xC2W[P\x87Q\x96\x87\x94Q\x80\x91\x84\x87\x01^\x84\x01\x90\x82\x82\x01\x8A\x81R\x81Q\x93\x84\x92\x01\x90^\x01\x01d\x1759\xB7\xB7`\xD9\x1B\x81R\x03`\x1A\x19\x81\x01\x84R\x01\x82a\x12\xF0V[\x82\x82Q\x91c\x13\r\x19\x1F`\xE1\x1B\x83R` `\x04\x84\x01R` \x83\x80a\x0E\x82`$\x82\x01\x85a\x13\x9AV[\x03\x81\x85_Q` a\x15>_9_Q\x90_RZ\xF1\x92\x83\x15a\x11\xB8Wa\x0E\xB0\x93a\n\x07\x91\x84\x91a\x11\x89WPa\x13\xBEV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x11}W\x83\x91a\x11[W[Pa\x0E\xD9a\x14}V[\x91\x80Qa\x0E\xE6\x82\x82a\x12\xF0V[` \x80\x82R\x7F.addresses.MockAvsServiceManager\x90\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90a\x0F#\x90\x84a\x14\xC0V[\x16\x83Ra\x0Fe\x81Qa\x0F5\x83\x82a\x12\xF0V[`\x1E\x81R\x7F.addresses.registryCoordinator\0\0` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16` \x84\x01\x90\x81R\x81Q\x90\x92\x90a\x0F\xC2\x90a\x0F\x89``\x82a\x12\xF0V[`!\x81R\x7F.addresses.operatorStateRetrieve` \x82\x01R`9`\xF9\x1B\x84\x82\x01R\x82a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16\x84\x83\x01\x90\x81R\x82Qa\x10\x11\x90a\x0F\xE1\x85\x82a\x12\xF0V[`\x18\x81R\x7F.addresses.stakeRegistry\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x14\xC0V[\x91`\xA0\x86\x01\x92`\x01\x80`\xA0\x1B\x03\x16\x83Ra\x10\xA2a\x10Y\x85Qa\x103\x87\x82a\x12\xF0V[`\x13\x81Rr.addresses.strategy`h\x1B` \x82\x01R\x83a\x14\xC0V[`\x01`\x01`\xA0\x1B\x03\x16`\xC0\x88\x01\x90\x81R\x85Q\x90\x95a\x10w\x90\x82a\x12\xF0V[`\x10\x81Ro\x170\xB2292\xB9\xB9\xB2\xB9\x97:7\xB5\xB2\xB7`\x81\x1B` \x82\x01R`\x01`\x01`\xA0\x1B\x03\x92a\x14\xC0V[\x16`\xE0\x86\x01\x81\x90R\x85Q`\x19\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U\x95Q`\x1A\x80T\x88\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x1B\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U``\x86\x01Q`\x1C\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U`\x80\x86\x01Q`\x1D\x80T\x87\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x91Q`\x1E\x80T\x86\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x91Q`\x1F\x80T\x85\x16\x91\x84\x16\x91\x90\x91\x17\x90U` \x80T\x84\x16\x90\x91\x17\x90Ua\x01\0\x90\x92\x01Q`!\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U\x80\xF3[a\x11w\x91P=\x80\x85\x83>a\x11o\x81\x83a\x12\xF0V[\x81\x01\x90a\x14\nV[_a\x0E\xD0V[PPQ\x90=\x90\x82>=\x90\xFD[a\x11\xAB\x91P` =` \x11a\x11\xB1W[a\x11\xA3\x81\x83a\x12\xF0V[\x81\x01\x90a\x13\x82V[_a\n\x01V[P=a\x11\x99V[\x84Q=\x84\x82>=\x90\xFD[a\x11\xD6\x91P=\x80\x8B\x83>a\x11o\x81\x83a\x12\xF0V[_a\x0E\"V[\x84Q=\x87\x82>=\x90\xFD[a\x11\xFA\x91P=\x80\x85\x83>a\x11o\x81\x83a\x12\xF0V[_a\nHV[a\x12\"\x91P` =` \x11a\x12(W[a\x12\x1A\x81\x83a\x12\xF0V[\x81\x01\x90a\x13\x12V[_a\x08\xF7V[P=a\x12\x10V[a\x12;\x91P_\x90a\x12\xF0V[__a\x08\x91V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[a\x12j\x91P` =` \x11a\x12(Wa\x12\x1A\x81\x83a\x12\xF0V[_a\x07\xF1V[\x90P` \x81=` \x11a\x12\x9AW[\x81a\x12\x8B` \x93\x83a\x12\xF0V[\x81\x01\x03\x12a\x12MWQ_a\x07\xB8V[=\x91Pa\x12~V[a\x01`\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\x01 \x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\xBFW`@RV[\x90\x81` \x91\x03\x12a\x12MWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x12MW\x90V[`@Q\x90a\x13>\x82a\x12\xA2V[_a\x01@\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x82a\x01 \x82\x01R\x01RV[\x90\x81` \x91\x03\x12a\x12MWQ\x80\x15\x15\x81\x03a\x12MW\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x15a\x13\xC5WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FDeployment file does not exist\0\0`D\x82\x01R`d\x90\xFD[` \x81\x83\x03\x12a\x12MW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12MW\x01\x81`\x1F\x82\x01\x12\x15a\x12MW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\xBFW`@Q\x92a\x14\\`\x1F\x84\x01`\x1F\x19\x16` \x01\x85a\x12\xF0V[\x82\x84R` \x83\x83\x01\x01\x11a\x12MW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[`@Q\x90a\x14\x8A\x82a\x12\xD3V[_a\x01\0\x83\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x01RV[a\x14\xEC` \x91a\x14\xFE`@Q\x94\x85\x93\x84\x93c\x1E\x19\xE6W`\xE0\x1B\x85R`@`\x04\x86\x01R`D\x85\x01\x90a\x13\x9AV[\x83\x81\x03`\x03\x19\x01`$\x85\x01R\x90a\x13\x9AV[\x03\x81_Q` a\x15>_9_Q\x90_RZ\xFA\x90\x81\x15a\x12BW_\x91a\x15!WP\x90V[a\x15:\x91P` =` \x11a\x12(Wa\x12\x1A\x81\x83a\x12\xF0V[\x90V\xFE\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\xA2dipfsX\"\x12 \xF0\x9E\x18\x9Eh,\xD8\x1F=e\xBA\xC4\x04\xFD\xC2\x1C\0J\x81L\x93\xCB\xF9\xEAd\x04\xA9j\xB5\xCC\xE5\xFEdsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `CONTRACT_REGISTRY()` and selector `0x25f9bfef`.
    ```solidity
    function CONTRACT_REGISTRY() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONTRACT_REGISTRYCall {}
    ///Container type for the return parameters of the [`CONTRACT_REGISTRY()`](CONTRACT_REGISTRYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONTRACT_REGISTRYReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONTRACT_REGISTRYCall> for UnderlyingRustTuple<'_> {
                fn from(value: CONTRACT_REGISTRYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONTRACT_REGISTRYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONTRACT_REGISTRYReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CONTRACT_REGISTRYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONTRACT_REGISTRYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CONTRACT_REGISTRYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = CONTRACT_REGISTRYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CONTRACT_REGISTRY()";
            const SELECTOR: [u8; 4] = [37u8, 249u8, 191u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
    ```solidity
    function setUp() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`ContractsRegistry`](self) function calls.
    pub enum ContractsRegistryCalls {
        CONTRACT_REGISTRY(CONTRACT_REGISTRYCall),
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl ContractsRegistryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [37u8, 249u8, 191u8, 239u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ContractsRegistryCalls {
        const NAME: &'static str = "ContractsRegistryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::CONTRACT_REGISTRY(_) => {
                    <CONTRACT_REGISTRYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<ContractsRegistryCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::setUp)
                    }
                    setUp
                },
                {
                    fn CONTRACT_REGISTRY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <CONTRACT_REGISTRYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ContractsRegistryCalls::CONTRACT_REGISTRY)
                    }
                    CONTRACT_REGISTRY
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ContractsRegistryCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ContractsRegistryCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::CONTRACT_REGISTRY(inner) => {
                    <CONTRACT_REGISTRYCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::CONTRACT_REGISTRY(inner) => {
                    <CONTRACT_REGISTRYCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

    See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ContractsRegistryInstance<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<ContractsRegistryInstance<T, P, N>>>
    {
        ContractsRegistryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ContractsRegistryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ContractsRegistry`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`ContractsRegistry`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ContractsRegistryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ContractsRegistryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ContractsRegistryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`ContractsRegistry`](self) contract instance.

        See the [wrapper's documentation](`ContractsRegistryInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ContractsRegistryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ContractsRegistryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ContractsRegistryInstance<T, P, N> {
            ContractsRegistryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`CONTRACT_REGISTRY`] function.
        pub fn CONTRACT_REGISTRY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CONTRACT_REGISTRYCall, N> {
            self.call_builder(&CONTRACT_REGISTRYCall {})
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ContractsRegistryInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
