/**

Generated by the following Solidity interface...
```solidity
interface RegisterOperators {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RegisterOperators {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b5061192f8061002d5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c04062261461004d578063f8ccbf4714610055575b5f5ffd5b61004b61007c565b005b61004b610159565b600c546100689062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610092575046610539145b156100c0576040518060600160405280603b815260200161189b603b9139600d906100bd90826113f3565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610125573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261014c9190810190611525565b600d906100bd90826113f3565b600f80546001600160a01b031916735fbdb2315678afecb367f032d93f642f64180aa31790555f6101886108c0565b90505f610193610b33565b90505f600e5467ffffffffffffffff8111156101b1576101b161135b565b6040519080825280602002602001820160405280156101da578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156101f9576101f961135b565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156102415761024161135b565b60405190808252806020026020018201604052801561026a578160200160208202803683370190505b5090505f5b600e548110156103d6575f61030c600d805461028a9061136f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b69061136f565b80156103015780601f106102d857610100808354040283529160200191610301565b820191905f5260205f20905b8154815290600101906020018083116102e457829003601f168201915b505050505083610bb6565b509050808583815181106103225761032261156a565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f4000084838151811061035d5761035d61156a565b6020026020010181815250506103b0825f1b60405160200161038191815260200190565b604051602081830303815290604052805190602001205f1c670de0b6b3a7640000678ac7230489e80000610cb1565b8383815181106103c2576103c261156a565b60209081029190910101525060010161026f565b505f51602061187b5f395f51905f525f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561041e575f5ffd5b505af1158015610430573d5f5f3e3d5ffd5b5050505061043f5f8484610cf4565b835161044c908483610cf4565b5f51602061187b5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610493575f5ffd5b505af11580156104a5573d5f5f3e3d5ffd5b505f925050505b600e548110156108b85760405163348051d760e11b8152600481018290525f906064908290737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa15801561050a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105319190810190611525565b6040516020016105419190611595565b60405160208183030381529060405290505f6105e5600d80546105639061136f565b80601f016020809104026020016040519081016040528092919081815260200182805461058f9061136f565b80156105da5780601f106105b1576101008083540402835291602001916105da565b820191905f5260205f20905b8154815290600101906020018083116105bd57829003601f168201915b505050505086610bb6565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d47906024015f604051808303815f87803b158015610633575f5ffd5b505af1158015610645573d5f5f3e3d5ffd5b5050505046617a69148061065a575046610539145b156106f257600f5460405163566add5160e11b81526080600482015260166084820152753a32b9ba2fb932b3b4b9ba32b92fb7b832b930ba37b960511b60a4820152602481018790524360448201524260648201526001600160a01b039091169063acd5baa29060c4015f604051808303815f87803b1580156106db575f5ffd5b505af11580156106ed573d5f5f3e3d5ffd5b505050505b89606001516001600160a01b0316630f589e5960405180606001604052808b89815181106107225761072261156a565b60200260200101516001600160a01b03168152602001876001600160a01b031681526020018663ffffffff16815250846040518363ffffffff1660e01b815260040161076f9291906115f4565b5f604051808303815f87803b158015610786575f5ffd5b505af1158015610798573d5f5f3e3d5ffd5b5050505089604001516001600160a01b031663e7a050aa8a602001518b5f01518989815181106107ca576107ca61156a565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610826573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084a9190611637565b505f51602061187b5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610892575f5ffd5b505af11580156108a4573d5f5f3e3d5ffd5b5050600190960195506104ac945050505050565b505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f61093f6040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610e3f565b90505f610981826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250611031565b90505f6109c3836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250611031565b90505f610a05846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250611031565b90505f610a3f85604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250611031565b90505f610a81866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250611031565b90505f610ab887604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250611031565b90505f610add8860405180606001604052806025815260200161185660259139611031565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a08301525f60c083015290911660e082015292915050565b604080518082019091525f80825260208201525f610b686040518060600160405280602481526020016118d660249139610e3f565b90505f610b97826040518060400160405280600a8152602001692e61646472657373657360b01b8152506110b4565b90505f81806020019051810190610bae9190611662565b949350505050565b604051636229498b60e01b81525f908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610bf390879087906004016116c1565b602060405180830381865afa158015610c0e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c329190611637565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303815f875af1158015610c84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca891906116e8565b91509250929050565b5f610cbd848484611131565b9050610ced6040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b815250826112ee565b9392505050565b5f5b8251811015610e39576001600160a01b038416610d7b57828181518110610d1f57610d1f61156a565b60200260200101516001600160a01b03166108fc838381518110610d4557610d4561156a565b602002602001015190811502906040515f60405180830381858888f19350505050158015610d75573d5f5f3e3d5ffd5b50610e31565b836001600160a01b031663a9059cbb848381518110610d9c57610d9c61156a565b6020026020010151848481518110610db657610db661156a565b60200260200101516040518363ffffffff1660e01b8152600401610def9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610e0b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e2f9190611703565b505b600101610cf6565b50505050565b60605f5f51602061187b5f395f51905f525f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e8c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610eb39190810190611525565b604051602001610ec39190611722565b60408051808303601f190181529082905263348051d760e11b825246600483015291505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa158015610f21573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f489190810190611525565b604051602001610f58919061174c565b60405160208183030381529060405290505f84604051602001610f7b9190611768565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610fbc90869086908690602001611788565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610fe791906117a5565b5f60405180830381865afa158015611001573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110289190810190611525565b95945050505050565b604051631e19e65760e01b81525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e6579061106c90869086906004016117b7565b602060405180830381865afa158015611087573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110ab91906116e8565b90505b92915050565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef1906110f090869086906004016117b7565b5f60405180830381865afa15801561110a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110ab9190810190611525565b5f818311156111ac5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156111bc5750818411155b156111c8575082610ced565b5f6111d384846117ef565b6111de906001611802565b9050600385111580156111f057508481115b15611207576111ff8585611802565b915050610ced565b61121360035f196117ef565b851015801561122b5750611228855f196117ef565b81115b156112455761123b855f196117ef565b6111ff90846117ef565b82851115611298575f61125884876117ef565b90505f6112658383611815565b9050805f0361127957849350505050610ced565b60016112858288611802565b61128f91906117ef565b935050506112e6565b838510156112e6575f6112ab86866117ef565b90505f6112b88383611815565b9050805f036112cc57859350505050610ced565b6112d681866117ef565b6112e1906001611802565b935050505b509392505050565b6113338282604051602401611304929190611834565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611337565b5050565b6100bd8180516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061138357607f821691505b6020821081036113a157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156113ee57805f5260205f20601f840160051c810160208510156113cc5750805b601f840160051c820191505b818110156113eb575f81556001016113d8565b50505b505050565b815167ffffffffffffffff81111561140d5761140d61135b565b6114218161141b845461136f565b846113a7565b6020601f821160018114611453575f831561143c5750848201515b5f19600385901b1c1916600184901b1784556113eb565b5f84815260208120601f198516915b828110156114825787850151825560209485019460019092019101611462565b508482101561149f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f5f67ffffffffffffffff8411156114c8576114c861135b565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff821117156114f7576114f761135b565b60405283815290508082840185101561150e575f5ffd5b8383602083015e5f60208583010152509392505050565b5f60208284031215611535575f5ffd5b815167ffffffffffffffff81111561154b575f5ffd5b8201601f8101841361155b575f5ffd5b610bae848251602084016114ae565b634e487b7160e01b5f52603260045260245ffd5b5f81518060208401855e5f93019283525090919050565b7f68747470733a2f2f636f6f6c73747566662e636f6d2f6f70657261746f722f0081525f6110ab601f83018461157e565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60018060a01b03835116815260018060a01b03602084015116602082015263ffffffff6040840151166040820152608060608201525f610bae60808301846115c6565b5f60208284031215611647575f5ffd5b5051919050565b6001600160a01b03811681146100bd575f5ffd5b5f6040828403128015611673575f5ffd5b506040805190810167ffffffffffffffff811182821017156116975761169761135b565b60405282516116a58161164e565b815260208301516116b58161164e565b60208201529392505050565b604081525f6116d360408301856115c6565b905063ffffffff831660208301529392505050565b5f602082840312156116f8575f5ffd5b8151610ced8161164e565b5f60208284031215611713575f5ffd5b81518015158114610ced575f5ffd5b5f61172d828461157e565b6e2f7363726970742f6f75747075742f60881b8152600f019392505050565b5f611757828461157e565b602f60f81b81526001019392505050565b5f611773828461157e565b64173539b7b760d91b81526005019392505050565b5f61102861179f611799848861157e565b8661157e565b8461157e565b602081525f6110ab60208301846115c6565b604081525f6117c960408301856115c6565b828103602084015261102881856115c6565b634e487b7160e01b5f52601160045260245ffd5b818103818111156110ae576110ae6117db565b808201808211156110ae576110ae6117db565b5f8261182f57634e487b7160e01b5f52601260045260245ffd5b500690565b604081525f61184660408301856115c6565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220447b530d8520e40581378dc459e2c9cebcf45d7aada1002203fd31335332693664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x19/\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0MW\x80c\xF8\xCC\xBFG\x14a\0UW[__\xFD[a\0Ka\0|V[\0[a\0Ka\x01YV[`\x0CTa\0h\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x92WPFa\x059\x14[\x15a\0\xC0W`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x18\x9B`;\x919`\r\x90a\0\xBD\x90\x82a\x13\xF3V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01%W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01L\x91\x90\x81\x01\x90a\x15%V[`\r\x90a\0\xBD\x90\x82a\x13\xF3V[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16s_\xBD\xB21Vx\xAF\xEC\xB3g\xF02\xD9?d/d\x18\n\xA3\x17\x90U_a\x01\x88a\x08\xC0V[\x90P_a\x01\x93a\x0B3V[\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xB1Wa\x01\xB1a\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xDAW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xF9Wa\x01\xF9a\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\"W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02AWa\x02Aa\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02jW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[`\x0ET\x81\x10\x15a\x03\xD6W_a\x03\x0C`\r\x80Ta\x02\x8A\x90a\x13oV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xB6\x90a\x13oV[\x80\x15a\x03\x01W\x80`\x1F\x10a\x02\xD8Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x03\x01V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xE4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\x0B\xB6V[P\x90P\x80\x85\x83\x81Q\x81\x10a\x03\"Wa\x03\"a\x15jV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x03]Wa\x03]a\x15jV[` \x02` \x01\x01\x81\x81RPPa\x03\xB0\x82_\x1B`@Q` \x01a\x03\x81\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0C\xB1V[\x83\x83\x81Q\x81\x10a\x03\xC2Wa\x03\xC2a\x15jV[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x02oV[P_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\x1EW__\xFD[PZ\xF1\x15\x80\x15a\x040W=__>=_\xFD[PPPPa\x04?_\x84\x84a\x0C\xF4V[\x83Qa\x04L\x90\x84\x83a\x0C\xF4V[_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\x93W__\xFD[PZ\xF1\x15\x80\x15a\x04\xA5W=__>=_\xFD[P_\x92PPP[`\x0ET\x81\x10\x15a\x08\xB8W`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R_\x90`d\x90\x82\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\nW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x051\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x05A\x91\x90a\x15\x95V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_a\x05\xE5`\r\x80Ta\x05c\x90a\x13oV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\x8F\x90a\x13oV[\x80\x15a\x05\xDAW\x80`\x1F\x10a\x05\xB1Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\xDAV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xBDW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x86a\x0B\xB6V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x063W__\xFD[PZ\xF1\x15\x80\x15a\x06EW=__>=_\xFD[PPPPFazi\x14\x80a\x06ZWPFa\x059\x14[\x15a\x06\xF2W`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x16`\x84\x82\x01Ru:2\xB9\xBA/\xB92\xB3\xB4\xB9\xBA2\xB9/\xB7\xB82\xB90\xBA7\xB9`Q\x1B`\xA4\x82\x01R`$\x81\x01\x87\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xAC\xD5\xBA\xA2\x90`\xC4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xDBW__\xFD[PZ\xF1\x15\x80\x15a\x06\xEDW=__>=_\xFD[PPPP[\x89``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\x0FX\x9EY`@Q\x80``\x01`@R\x80\x8B\x89\x81Q\x81\x10a\x07\"Wa\x07\"a\x15jV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86c\xFF\xFF\xFF\xFF\x16\x81RP\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07o\x92\x91\x90a\x15\xF4V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07\x86W__\xFD[PZ\xF1\x15\x80\x15a\x07\x98W=__>=_\xFD[PPPP\x89`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xE7\xA0P\xAA\x8A` \x01Q\x8B_\x01Q\x89\x89\x81Q\x81\x10a\x07\xCAWa\x07\xCAa\x15jV[` \x90\x81\x02\x91\x90\x91\x01\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x86\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x04\x82\x01R\x92\x90\x91\x16`$\x83\x01R`D\x82\x01R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x08&W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08J\x91\x90a\x167V[P_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x08\x92W__\xFD[PZ\xF1\x15\x80\x15a\x08\xA4W=__>=_\xFD[PP`\x01\x90\x96\x01\x95Pa\x04\xAC\x94PPPPPV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\t?`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\x0E?V[\x90P_a\t\x81\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x101V[\x90P_a\t\xC3\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x101V[\x90P_a\n\x05\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x101V[\x90P_a\n?\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x101V[\x90P_a\n\x81\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x101V[\x90P_a\n\xB8\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x101V[\x90P_a\n\xDD\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x18V`%\x919a\x101V[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R_`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x0Bh`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x18\xD6`$\x919a\x0E?V[\x90P_a\x0B\x97\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x10\xB4V[\x90P_\x81\x80` \x01\x90Q\x81\x01\x90a\x0B\xAE\x91\x90a\x16bV[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R_\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x0B\xF3\x90\x87\x90\x87\x90`\x04\x01a\x16\xC1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x0EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C2\x91\x90a\x167V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x84W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xA8\x91\x90a\x16\xE8V[\x91P\x92P\x92\x90PV[_a\x0C\xBD\x84\x84\x84a\x111V[\x90Pa\x0C\xED`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x12\xEEV[\x93\x92PPPV[_[\x82Q\x81\x10\x15a\x0E9W`\x01`\x01`\xA0\x1B\x03\x84\x16a\r{W\x82\x81\x81Q\x81\x10a\r\x1FWa\r\x1Fa\x15jV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\rEWa\rEa\x15jV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\ruW=__>=_\xFD[Pa\x0E1V[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\r\x9CWa\r\x9Ca\x15jV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\r\xB6Wa\r\xB6a\x15jV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\xEF\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0E\x0BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E/\x91\x90a\x17\x03V[P[`\x01\x01a\x0C\xF6V[PPPPV[``__Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\x8CW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\xB3\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x0E\xC3\x91\x90a\x17\"V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F!W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0FH\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x0FX\x91\x90a\x17LV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x84`@Q` \x01a\x0F{\x91\x90a\x17hV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0F\xBC\x90\x86\x90\x86\x90\x86\x90` \x01a\x17\x88V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\xE7\x91\x90a\x17\xA5V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\x01W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10(\x91\x90\x81\x01\x90a\x15%V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x10l\x90\x86\x90\x86\x90`\x04\x01a\x17\xB7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\x87W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xAB\x91\x90a\x16\xE8V[\x90P[\x92\x91PPV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x10\xF0\x90\x86\x90\x86\x90`\x04\x01a\x17\xB7V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\nW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10\xAB\x91\x90\x81\x01\x90a\x15%V[_\x81\x83\x11\x15a\x11\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x11\xBCWP\x81\x84\x11\x15[\x15a\x11\xC8WP\x82a\x0C\xEDV[_a\x11\xD3\x84\x84a\x17\xEFV[a\x11\xDE\x90`\x01a\x18\x02V[\x90P`\x03\x85\x11\x15\x80\x15a\x11\xF0WP\x84\x81\x11[\x15a\x12\x07Wa\x11\xFF\x85\x85a\x18\x02V[\x91PPa\x0C\xEDV[a\x12\x13`\x03_\x19a\x17\xEFV[\x85\x10\x15\x80\x15a\x12+WPa\x12(\x85_\x19a\x17\xEFV[\x81\x11[\x15a\x12EWa\x12;\x85_\x19a\x17\xEFV[a\x11\xFF\x90\x84a\x17\xEFV[\x82\x85\x11\x15a\x12\x98W_a\x12X\x84\x87a\x17\xEFV[\x90P_a\x12e\x83\x83a\x18\x15V[\x90P\x80_\x03a\x12yW\x84\x93PPPPa\x0C\xEDV[`\x01a\x12\x85\x82\x88a\x18\x02V[a\x12\x8F\x91\x90a\x17\xEFV[\x93PPPa\x12\xE6V[\x83\x85\x10\x15a\x12\xE6W_a\x12\xAB\x86\x86a\x17\xEFV[\x90P_a\x12\xB8\x83\x83a\x18\x15V[\x90P\x80_\x03a\x12\xCCW\x85\x93PPPPa\x0C\xEDV[a\x12\xD6\x81\x86a\x17\xEFV[a\x12\xE1\x90`\x01a\x18\x02V[\x93PPP[P\x93\x92PPPV[a\x133\x82\x82`@Q`$\x01a\x13\x04\x92\x91\x90a\x184V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x137V[PPV[a\0\xBD\x81\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x13\x83W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x13\xA1WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x13\xEEW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x13\xCCWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x13\xEBW_\x81U`\x01\x01a\x13\xD8V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\rWa\x14\ra\x13[V[a\x14!\x81a\x14\x1B\x84Ta\x13oV[\x84a\x13\xA7V[` `\x1F\x82\x11`\x01\x81\x14a\x14SW_\x83\x15a\x14<WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x13\xEBV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x14\x82W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x14bV[P\x84\x82\x10\x15a\x14\x9FW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x14\xC8Wa\x14\xC8a\x13[V[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x14\xF7Wa\x14\xF7a\x13[V[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x15\x0EW__\xFD[\x83\x83` \x83\x01^_` \x85\x83\x01\x01RP\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x155W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15KW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x15[W__\xFD[a\x0B\xAE\x84\x82Q` \x84\x01a\x14\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7Fhttps://coolstuff.com/operator/\0\x81R_a\x10\xAB`\x1F\x83\x01\x84a\x15~V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01\x80`\xA0\x1B\x03\x83Q\x16\x81R`\x01\x80`\xA0\x1B\x03` \x84\x01Q\x16` \x82\x01Rc\xFF\xFF\xFF\xFF`@\x84\x01Q\x16`@\x82\x01R`\x80``\x82\x01R_a\x0B\xAE`\x80\x83\x01\x84a\x15\xC6V[_` \x82\x84\x03\x12\x15a\x16GW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBDW__\xFD[_`@\x82\x84\x03\x12\x80\x15a\x16sW__\xFD[P`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x16\x97Wa\x16\x97a\x13[V[`@R\x82Qa\x16\xA5\x81a\x16NV[\x81R` \x83\x01Qa\x16\xB5\x81a\x16NV[` \x82\x01R\x93\x92PPPV[`@\x81R_a\x16\xD3`@\x83\x01\x85a\x15\xC6V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x16\xF8W__\xFD[\x81Qa\x0C\xED\x81a\x16NV[_` \x82\x84\x03\x12\x15a\x17\x13W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\xEDW__\xFD[_a\x17-\x82\x84a\x15~V[n/script/output/`\x88\x1B\x81R`\x0F\x01\x93\x92PPPV[_a\x17W\x82\x84a\x15~V[`/`\xF8\x1B\x81R`\x01\x01\x93\x92PPPV[_a\x17s\x82\x84a\x15~V[d\x1759\xB7\xB7`\xD9\x1B\x81R`\x05\x01\x93\x92PPPV[_a\x10(a\x17\x9Fa\x17\x99\x84\x88a\x15~V[\x86a\x15~V[\x84a\x15~V[` \x81R_a\x10\xAB` \x83\x01\x84a\x15\xC6V[`@\x81R_a\x17\xC9`@\x83\x01\x85a\x15\xC6V[\x82\x81\x03` \x84\x01Ra\x10(\x81\x85a\x15\xC6V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x10\xAEWa\x10\xAEa\x17\xDBV[\x80\x82\x01\x80\x82\x11\x15a\x10\xAEWa\x10\xAEa\x17\xDBV[_\x82a\x18/WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x06\x90V[`@\x81R_a\x18F`@\x83\x01\x85a\x15\xC6V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 D{S\r\x85 \xE4\x05\x817\x8D\xC4Y\xE2\xC9\xCE\xBC\xF4]z\xAD\xA1\0\"\x03\xFD13S2i6dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c04062261461004d578063f8ccbf4714610055575b5f5ffd5b61004b61007c565b005b61004b610159565b600c546100689062010000900460ff1681565b604051901515815260200160405180910390f35b600a600e55617a69461480610092575046610539145b156100c0576040518060600160405280603b815260200161189b603b9139600d906100bd90826113f3565b50565b60405163f877cb1960e01b81526020600482015260086024820152674d4e454d4f4e494360c01b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610125573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261014c9190810190611525565b600d906100bd90826113f3565b600f80546001600160a01b031916735fbdb2315678afecb367f032d93f642f64180aa31790555f6101886108c0565b90505f610193610b33565b90505f600e5467ffffffffffffffff8111156101b1576101b161135b565b6040519080825280602002602001820160405280156101da578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156101f9576101f961135b565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b5090505f600e5467ffffffffffffffff8111156102415761024161135b565b60405190808252806020026020018201604052801561026a578160200160208202803683370190505b5090505f5b600e548110156103d6575f61030c600d805461028a9061136f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b69061136f565b80156103015780601f106102d857610100808354040283529160200191610301565b820191905f5260205f20905b8154815290600101906020018083116102e457829003601f168201915b505050505083610bb6565b509050808583815181106103225761032261156a565b60200260200101906001600160a01b031690816001600160a01b031681525050674563918244f4000084838151811061035d5761035d61156a565b6020026020010181815250506103b0825f1b60405160200161038191815260200190565b604051602081830303815290604052805190602001205f1c670de0b6b3a7640000678ac7230489e80000610cb1565b8383815181106103c2576103c261156a565b60209081029190910101525060010161026f565b505f51602061187b5f395f51905f525f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561041e575f5ffd5b505af1158015610430573d5f5f3e3d5ffd5b5050505061043f5f8484610cf4565b835161044c908483610cf4565b5f51602061187b5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610493575f5ffd5b505af11580156104a5573d5f5f3e3d5ffd5b505f925050505b600e548110156108b85760405163348051d760e11b8152600481018290525f906064908290737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa15801561050a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105319190810190611525565b6040516020016105419190611595565b60405160208183030381529060405290505f6105e5600d80546105639061136f565b80601f016020809104026020016040519081016040528092919081815260200182805461058f9061136f565b80156105da5780601f106105b1576101008083540402835291602001916105da565b820191905f5260205f20905b8154815290600101906020018083116105bd57829003601f168201915b505050505086610bb6565b60405163ce817d4760e01b815260048101829052909250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ce817d47906024015f604051808303815f87803b158015610633575f5ffd5b505af1158015610645573d5f5f3e3d5ffd5b5050505046617a69148061065a575046610539145b156106f257600f5460405163566add5160e11b81526080600482015260166084820152753a32b9ba2fb932b3b4b9ba32b92fb7b832b930ba37b960511b60a4820152602481018790524360448201524260648201526001600160a01b039091169063acd5baa29060c4015f604051808303815f87803b1580156106db575f5ffd5b505af11580156106ed573d5f5f3e3d5ffd5b505050505b89606001516001600160a01b0316630f589e5960405180606001604052808b89815181106107225761072261156a565b60200260200101516001600160a01b03168152602001876001600160a01b031681526020018663ffffffff16815250846040518363ffffffff1660e01b815260040161076f9291906115f4565b5f604051808303815f87803b158015610786575f5ffd5b505af1158015610798573d5f5f3e3d5ffd5b5050505089604001516001600160a01b031663e7a050aa8a602001518b5f01518989815181106107ca576107ca61156a565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610826573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084a9190611637565b505f51602061187b5f395f51905f525f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610892575f5ffd5b505af11580156108a4573d5f5f3e3d5ffd5b5050600190960195506104ac945050505050565b505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f61093f6040518060400160405280601c81526020017f656967656e6c617965725f6465706c6f796d656e745f6f757470757400000000815250610e3f565b90505f610981826040518060400160405280601f81526020017f2e6164647265737365732e656967656e4c6179657250726f787941646d696e00815250611031565b90505f6109c3836040518060400160405280601e81526020017f2e6164647265737365732e656967656e4c617965725061757365725265670000815250611031565b90505f610a05846040518060400160405280601a81526020017f2e6164647265737365732e73747261746567794d616e61676572000000000000815250611031565b90505f610a3f85604051806040016040528060158152602001741730b2323932b9b9b2b9973232b632b3b0ba34b7b760591b815250611031565b90505f610a81866040518060400160405280601781526020017f2e6164647265737365732e6176734469726563746f7279000000000000000000815250611031565b90505f610ab887604051806040016040528060128152602001711730b2323932b9b9b2b99739b630b9b432b960711b815250611031565b90505f610add8860405180606001604052806025815260200161185660259139611031565b60408051610100810182526001600160a01b03998a1681529789166020890152958816958701959095525091851660608501529084166080840152831660a08301525f60c083015290911660e082015292915050565b604080518082019091525f80825260208201525f610b686040518060600160405280602481526020016118d660249139610e3f565b90505f610b97826040518060400160405280600a8152602001692e61646472657373657360b01b8152506110b4565b90505f81806020019051810190610bae9190611662565b949350505050565b604051636229498b60e01b81525f908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90636229498b90610bf390879087906004016116c1565b602060405180830381865afa158015610c0e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c329190611637565b604051630884001960e21b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906322100064906024016020604051808303815f875af1158015610c84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca891906116e8565b91509250929050565b5f610cbd848484611131565b9050610ced6040518060400160405280600c81526020016b109bdd5b99081c995cdd5b1d60a21b815250826112ee565b9392505050565b5f5b8251811015610e39576001600160a01b038416610d7b57828181518110610d1f57610d1f61156a565b60200260200101516001600160a01b03166108fc838381518110610d4557610d4561156a565b602002602001015190811502906040515f60405180830381858888f19350505050158015610d75573d5f5f3e3d5ffd5b50610e31565b836001600160a01b031663a9059cbb848381518110610d9c57610d9c61156a565b6020026020010151848481518110610db657610db661156a565b60200260200101516040518363ffffffff1660e01b8152600401610def9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610e0b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e2f9190611703565b505b600101610cf6565b50505050565b60605f5f51602061187b5f395f51905f525f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e8c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610eb39190810190611525565b604051602001610ec39190611722565b60408051808303601f190181529082905263348051d760e11b825246600483015291505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa158015610f21573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f489190810190611525565b604051602001610f58919061174c565b60405160208183030381529060405290505f84604051602001610f7b9190611768565b60408051601f19818403018152908290529150737109709ecfa91a80626ff3989d68f67f5b1dd12d906360f9bb1190610fbc90869086908690602001611788565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610fe791906117a5565b5f60405180830381865afa158015611001573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110289190810190611525565b95945050505050565b604051631e19e65760e01b81525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90631e19e6579061106c90869086906004016117b7565b602060405180830381865afa158015611087573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110ab91906116e8565b90505b92915050565b6040516385940ef160e01b8152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d906385940ef1906110f090869086906004016117b7565b5f60405180830381865afa15801561110a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110ab9190810190611525565b5f818311156111ac5760405162461bcd60e51b815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156111bc5750818411155b156111c8575082610ced565b5f6111d384846117ef565b6111de906001611802565b9050600385111580156111f057508481115b15611207576111ff8585611802565b915050610ced565b61121360035f196117ef565b851015801561122b5750611228855f196117ef565b81115b156112455761123b855f196117ef565b6111ff90846117ef565b82851115611298575f61125884876117ef565b90505f6112658383611815565b9050805f0361127957849350505050610ced565b60016112858288611802565b61128f91906117ef565b935050506112e6565b838510156112e6575f6112ab86866117ef565b90505f6112b88383611815565b9050805f036112cc57859350505050610ced565b6112d681866117ef565b6112e1906001611802565b935050505b509392505050565b6113338282604051602401611304929190611834565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611337565b5050565b6100bd8180516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061138357607f821691505b6020821081036113a157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156113ee57805f5260205f20601f840160051c810160208510156113cc5750805b601f840160051c820191505b818110156113eb575f81556001016113d8565b50505b505050565b815167ffffffffffffffff81111561140d5761140d61135b565b6114218161141b845461136f565b846113a7565b6020601f821160018114611453575f831561143c5750848201515b5f19600385901b1c1916600184901b1784556113eb565b5f84815260208120601f198516915b828110156114825787850151825560209485019460019092019101611462565b508482101561149f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f5f67ffffffffffffffff8411156114c8576114c861135b565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff821117156114f7576114f761135b565b60405283815290508082840185101561150e575f5ffd5b8383602083015e5f60208583010152509392505050565b5f60208284031215611535575f5ffd5b815167ffffffffffffffff81111561154b575f5ffd5b8201601f8101841361155b575f5ffd5b610bae848251602084016114ae565b634e487b7160e01b5f52603260045260245ffd5b5f81518060208401855e5f93019283525090919050565b7f68747470733a2f2f636f6f6c73747566662e636f6d2f6f70657261746f722f0081525f6110ab601f83018461157e565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60018060a01b03835116815260018060a01b03602084015116602082015263ffffffff6040840151166040820152608060608201525f610bae60808301846115c6565b5f60208284031215611647575f5ffd5b5051919050565b6001600160a01b03811681146100bd575f5ffd5b5f6040828403128015611673575f5ffd5b506040805190810167ffffffffffffffff811182821017156116975761169761135b565b60405282516116a58161164e565b815260208301516116b58161164e565b60208201529392505050565b604081525f6116d360408301856115c6565b905063ffffffff831660208301529392505050565b5f602082840312156116f8575f5ffd5b8151610ced8161164e565b5f60208284031215611713575f5ffd5b81518015158114610ced575f5ffd5b5f61172d828461157e565b6e2f7363726970742f6f75747075742f60881b8152600f019392505050565b5f611757828461157e565b602f60f81b81526001019392505050565b5f611773828461157e565b64173539b7b760d91b81526005019392505050565b5f61102861179f611799848861157e565b8661157e565b8461157e565b602081525f6110ab60208301846115c6565b604081525f6117c960408301856115c6565b828103602084015261102881856115c6565b634e487b7160e01b5f52601160045260245ffd5b818103818111156110ae576110ae6117db565b808201808211156110ae576110ae6117db565b5f8261182f57634e487b7160e01b5f52601260045260245ffd5b500690565b604081525f61184660408301856115c6565b9050826020830152939250505056fe2e6164647265737365732e626173655374726174656779496d706c656d656e746174696f6e885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d746573742074657374207465737420746573742074657374207465737420746573742074657374207465737420746573742074657374206a756e6b746f6b656e5f616e645f73747261746567795f6465706c6f796d656e745f6f7574707574a2646970667358221220447b530d8520e40581378dc459e2c9cebcf45d7aada1002203fd31335332693664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0MW\x80c\xF8\xCC\xBFG\x14a\0UW[__\xFD[a\0Ka\0|V[\0[a\0Ka\x01YV[`\x0CTa\0h\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\n`\x0EUaziF\x14\x80a\0\x92WPFa\x059\x14[\x15a\0\xC0W`@Q\x80``\x01`@R\x80`;\x81R` \x01a\x18\x9B`;\x919`\r\x90a\0\xBD\x90\x82a\x13\xF3V[PV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01%W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01L\x91\x90\x81\x01\x90a\x15%V[`\r\x90a\0\xBD\x90\x82a\x13\xF3V[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16s_\xBD\xB21Vx\xAF\xEC\xB3g\xF02\xD9?d/d\x18\n\xA3\x17\x90U_a\x01\x88a\x08\xC0V[\x90P_a\x01\x93a\x0B3V[\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xB1Wa\x01\xB1a\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xDAW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xF9Wa\x01\xF9a\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\"W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02AWa\x02Aa\x13[V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02jW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[`\x0ET\x81\x10\x15a\x03\xD6W_a\x03\x0C`\r\x80Ta\x02\x8A\x90a\x13oV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xB6\x90a\x13oV[\x80\x15a\x03\x01W\x80`\x1F\x10a\x02\xD8Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x03\x01V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xE4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x83a\x0B\xB6V[P\x90P\x80\x85\x83\x81Q\x81\x10a\x03\"Wa\x03\"a\x15jV[` \x02` \x01\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPPgEc\x91\x82D\xF4\0\0\x84\x83\x81Q\x81\x10a\x03]Wa\x03]a\x15jV[` \x02` \x01\x01\x81\x81RPPa\x03\xB0\x82_\x1B`@Q` \x01a\x03\x81\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1Cg\r\xE0\xB6\xB3\xA7d\0\0g\x8A\xC7#\x04\x89\xE8\0\0a\x0C\xB1V[\x83\x83\x81Q\x81\x10a\x03\xC2Wa\x03\xC2a\x15jV[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x02oV[P_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\x1EW__\xFD[PZ\xF1\x15\x80\x15a\x040W=__>=_\xFD[PPPPa\x04?_\x84\x84a\x0C\xF4V[\x83Qa\x04L\x90\x84\x83a\x0C\xF4V[_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\x93W__\xFD[PZ\xF1\x15\x80\x15a\x04\xA5W=__>=_\xFD[P_\x92PPP[`\x0ET\x81\x10\x15a\x08\xB8W`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R_\x90`d\x90\x82\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\nW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x051\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x05A\x91\x90a\x15\x95V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_a\x05\xE5`\r\x80Ta\x05c\x90a\x13oV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\x8F\x90a\x13oV[\x80\x15a\x05\xDAW\x80`\x1F\x10a\x05\xB1Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\xDAV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xBDW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x86a\x0B\xB6V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x063W__\xFD[PZ\xF1\x15\x80\x15a\x06EW=__>=_\xFD[PPPPFazi\x14\x80a\x06ZWPFa\x059\x14[\x15a\x06\xF2W`\x0FT`@QcVj\xDDQ`\xE1\x1B\x81R`\x80`\x04\x82\x01R`\x16`\x84\x82\x01Ru:2\xB9\xBA/\xB92\xB3\xB4\xB9\xBA2\xB9/\xB7\xB82\xB90\xBA7\xB9`Q\x1B`\xA4\x82\x01R`$\x81\x01\x87\x90RC`D\x82\x01RB`d\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xAC\xD5\xBA\xA2\x90`\xC4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xDBW__\xFD[PZ\xF1\x15\x80\x15a\x06\xEDW=__>=_\xFD[PPPP[\x89``\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\x0FX\x9EY`@Q\x80``\x01`@R\x80\x8B\x89\x81Q\x81\x10a\x07\"Wa\x07\"a\x15jV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86c\xFF\xFF\xFF\xFF\x16\x81RP\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07o\x92\x91\x90a\x15\xF4V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07\x86W__\xFD[PZ\xF1\x15\x80\x15a\x07\x98W=__>=_\xFD[PPPP\x89`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xE7\xA0P\xAA\x8A` \x01Q\x8B_\x01Q\x89\x89\x81Q\x81\x10a\x07\xCAWa\x07\xCAa\x15jV[` \x90\x81\x02\x91\x90\x91\x01\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x86\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x04\x82\x01R\x92\x90\x91\x16`$\x83\x01R`D\x82\x01R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x08&W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08J\x91\x90a\x167V[P_Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x08\x92W__\xFD[PZ\xF1\x15\x80\x15a\x08\xA4W=__>=_\xFD[PP`\x01\x90\x96\x01\x95Pa\x04\xAC\x94PPPPPV[PPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\t?`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7Feigenlayer_deployment_output\0\0\0\0\x81RPa\x0E?V[\x90P_a\t\x81\x82`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7F.addresses.eigenLayerProxyAdmin\0\x81RPa\x101V[\x90P_a\t\xC3\x83`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F.addresses.eigenLayerPauserReg\0\0\x81RPa\x101V[\x90P_a\n\x05\x84`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F.addresses.strategyManager\0\0\0\0\0\0\x81RPa\x101V[\x90P_a\n?\x85`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\x170\xB2292\xB9\xB9\xB2\xB9\x9722\xB62\xB3\xB0\xBA4\xB7\xB7`Y\x1B\x81RPa\x101V[\x90P_a\n\x81\x86`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F.addresses.avsDirectory\0\0\0\0\0\0\0\0\0\x81RPa\x101V[\x90P_a\n\xB8\x87`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01q\x170\xB2292\xB9\xB9\xB2\xB9\x979\xB60\xB9\xB42\xB9`q\x1B\x81RPa\x101V[\x90P_a\n\xDD\x88`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x18V`%\x919a\x101V[`@\x80Qa\x01\0\x81\x01\x82R`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16\x95\x87\x01\x95\x90\x95RP\x91\x85\x16``\x85\x01R\x90\x84\x16`\x80\x84\x01R\x83\x16`\xA0\x83\x01R_`\xC0\x83\x01R\x90\x91\x16`\xE0\x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x0Bh`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x18\xD6`$\x919a\x0E?V[\x90P_a\x0B\x97\x82`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i.addresses`\xB0\x1B\x81RPa\x10\xB4V[\x90P_\x81\x80` \x01\x90Q\x81\x01\x90a\x0B\xAE\x91\x90a\x16bV[\x94\x93PPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R_\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x0B\xF3\x90\x87\x90\x87\x90`\x04\x01a\x16\xC1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x0EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C2\x91\x90a\x167V[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x84W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xA8\x91\x90a\x16\xE8V[\x91P\x92P\x92\x90PV[_a\x0C\xBD\x84\x84\x84a\x111V[\x90Pa\x0C\xED`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x1C\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x12\xEEV[\x93\x92PPPV[_[\x82Q\x81\x10\x15a\x0E9W`\x01`\x01`\xA0\x1B\x03\x84\x16a\r{W\x82\x81\x81Q\x81\x10a\r\x1FWa\r\x1Fa\x15jV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x08\xFC\x83\x83\x81Q\x81\x10a\rEWa\rEa\x15jV[` \x02` \x01\x01Q\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\ruW=__>=_\xFD[Pa\x0E1V[\x83`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBB\x84\x83\x81Q\x81\x10a\r\x9CWa\r\x9Ca\x15jV[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\r\xB6Wa\r\xB6a\x15jV[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\xEF\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0E\x0BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E/\x91\x90a\x17\x03V[P[`\x01\x01a\x0C\xF6V[PPPPV[``__Q` a\x18{_9_Q\x90_R_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\x8CW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\xB3\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x0E\xC3\x91\x90a\x17\"V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc4\x80Q\xD7`\xE1\x1B\x82RF`\x04\x83\x01R\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F!W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0FH\x91\x90\x81\x01\x90a\x15%V[`@Q` \x01a\x0FX\x91\x90a\x17LV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x84`@Q` \x01a\x0F{\x91\x90a\x17hV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c`\xF9\xBB\x11\x90a\x0F\xBC\x90\x86\x90\x86\x90\x86\x90` \x01a\x17\x88V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\xE7\x91\x90a\x17\xA5V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\x01W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10(\x91\x90\x81\x01\x90a\x15%V[\x95\x94PPPPPV[`@Qc\x1E\x19\xE6W`\xE0\x1B\x81R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x1E\x19\xE6W\x90a\x10l\x90\x86\x90\x86\x90`\x04\x01a\x17\xB7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\x87W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xAB\x91\x90a\x16\xE8V[\x90P[\x92\x91PPV[`@Qc\x85\x94\x0E\xF1`\xE0\x1B\x81R``\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x85\x94\x0E\xF1\x90a\x10\xF0\x90\x86\x90\x86\x90`\x04\x01a\x17\xB7V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\nW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10\xAB\x91\x90\x81\x01\x90a\x15%V[_\x81\x83\x11\x15a\x11\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\x11\xBCWP\x81\x84\x11\x15[\x15a\x11\xC8WP\x82a\x0C\xEDV[_a\x11\xD3\x84\x84a\x17\xEFV[a\x11\xDE\x90`\x01a\x18\x02V[\x90P`\x03\x85\x11\x15\x80\x15a\x11\xF0WP\x84\x81\x11[\x15a\x12\x07Wa\x11\xFF\x85\x85a\x18\x02V[\x91PPa\x0C\xEDV[a\x12\x13`\x03_\x19a\x17\xEFV[\x85\x10\x15\x80\x15a\x12+WPa\x12(\x85_\x19a\x17\xEFV[\x81\x11[\x15a\x12EWa\x12;\x85_\x19a\x17\xEFV[a\x11\xFF\x90\x84a\x17\xEFV[\x82\x85\x11\x15a\x12\x98W_a\x12X\x84\x87a\x17\xEFV[\x90P_a\x12e\x83\x83a\x18\x15V[\x90P\x80_\x03a\x12yW\x84\x93PPPPa\x0C\xEDV[`\x01a\x12\x85\x82\x88a\x18\x02V[a\x12\x8F\x91\x90a\x17\xEFV[\x93PPPa\x12\xE6V[\x83\x85\x10\x15a\x12\xE6W_a\x12\xAB\x86\x86a\x17\xEFV[\x90P_a\x12\xB8\x83\x83a\x18\x15V[\x90P\x80_\x03a\x12\xCCW\x85\x93PPPPa\x0C\xEDV[a\x12\xD6\x81\x86a\x17\xEFV[a\x12\xE1\x90`\x01a\x18\x02V[\x93PPP[P\x93\x92PPPV[a\x133\x82\x82`@Q`$\x01a\x13\x04\x92\x91\x90a\x184V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x137V[PPV[a\0\xBD\x81\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x13\x83W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x13\xA1WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x13\xEEW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x13\xCCWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x13\xEBW_\x81U`\x01\x01a\x13\xD8V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\rWa\x14\ra\x13[V[a\x14!\x81a\x14\x1B\x84Ta\x13oV[\x84a\x13\xA7V[` `\x1F\x82\x11`\x01\x81\x14a\x14SW_\x83\x15a\x14<WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x13\xEBV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x14\x82W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x14bV[P\x84\x82\x10\x15a\x14\x9FW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x14\xC8Wa\x14\xC8a\x13[V[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x14\xF7Wa\x14\xF7a\x13[V[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x15\x0EW__\xFD[\x83\x83` \x83\x01^_` \x85\x83\x01\x01RP\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x155W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15KW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x15[W__\xFD[a\x0B\xAE\x84\x82Q` \x84\x01a\x14\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7Fhttps://coolstuff.com/operator/\0\x81R_a\x10\xAB`\x1F\x83\x01\x84a\x15~V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01\x80`\xA0\x1B\x03\x83Q\x16\x81R`\x01\x80`\xA0\x1B\x03` \x84\x01Q\x16` \x82\x01Rc\xFF\xFF\xFF\xFF`@\x84\x01Q\x16`@\x82\x01R`\x80``\x82\x01R_a\x0B\xAE`\x80\x83\x01\x84a\x15\xC6V[_` \x82\x84\x03\x12\x15a\x16GW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBDW__\xFD[_`@\x82\x84\x03\x12\x80\x15a\x16sW__\xFD[P`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x16\x97Wa\x16\x97a\x13[V[`@R\x82Qa\x16\xA5\x81a\x16NV[\x81R` \x83\x01Qa\x16\xB5\x81a\x16NV[` \x82\x01R\x93\x92PPPV[`@\x81R_a\x16\xD3`@\x83\x01\x85a\x15\xC6V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x16\xF8W__\xFD[\x81Qa\x0C\xED\x81a\x16NV[_` \x82\x84\x03\x12\x15a\x17\x13W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\xEDW__\xFD[_a\x17-\x82\x84a\x15~V[n/script/output/`\x88\x1B\x81R`\x0F\x01\x93\x92PPPV[_a\x17W\x82\x84a\x15~V[`/`\xF8\x1B\x81R`\x01\x01\x93\x92PPPV[_a\x17s\x82\x84a\x15~V[d\x1759\xB7\xB7`\xD9\x1B\x81R`\x05\x01\x93\x92PPPV[_a\x10(a\x17\x9Fa\x17\x99\x84\x88a\x15~V[\x86a\x15~V[\x84a\x15~V[` \x81R_a\x10\xAB` \x83\x01\x84a\x15\xC6V[`@\x81R_a\x17\xC9`@\x83\x01\x85a\x15\xC6V[\x82\x81\x03` \x84\x01Ra\x10(\x81\x85a\x15\xC6V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x10\xAEWa\x10\xAEa\x17\xDBV[\x80\x82\x01\x80\x82\x11\x15a\x10\xAEWa\x10\xAEa\x17\xDBV[_\x82a\x18/WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x06\x90V[`@\x81R_a\x18F`@\x83\x01\x85a\x15\xC6V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE.addresses.baseStrategyImplementation\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-test test test test test test test test test test test junktoken_and_strategy_deployment_output\xA2dipfsX\"\x12 D{S\r\x85 \xE4\x05\x817\x8D\xC4Y\xE2\xC9\xCE\xBC\xF4]z\xAD\xA1\0\"\x03\xFD13S2i6dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
```solidity
function setUp() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RegisterOperators`](self) function calls.
    pub enum RegisterOperatorsCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl RegisterOperatorsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RegisterOperatorsCalls {
        const NAME: &'static str = "RegisterOperatorsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RegisterOperatorsCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RegisterOperatorsCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RegisterOperatorsCalls::setUp)
                    }
                    setUp
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RegisterOperatorsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RegisterOperatorsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RegisterOperatorsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RegisterOperatorsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RegisterOperators`](self) contract instance.

See the [wrapper's documentation](`RegisterOperatorsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RegisterOperatorsInstance<T, P, N> {
        RegisterOperatorsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RegisterOperatorsInstance<T, P, N>>,
    > {
        RegisterOperatorsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        RegisterOperatorsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`RegisterOperators`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RegisterOperators`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RegisterOperatorsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RegisterOperatorsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RegisterOperatorsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RegisterOperatorsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RegisterOperators`](self) contract instance.

See the [wrapper's documentation](`RegisterOperatorsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<RegisterOperatorsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RegisterOperatorsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RegisterOperatorsInstance<T, P, N> {
            RegisterOperatorsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RegisterOperatorsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RegisterOperatorsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
